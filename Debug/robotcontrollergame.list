
robotcontrollergame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a23c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002814  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  0800cc10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  8 .bss          00004178  2000009c  2000009c  0002009c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004214  20004214  0002009c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002de77  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005870  00000000  00000000  0004df43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000020c0  00000000  00000000  000537b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e08  00000000  00000000  00055878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f1ab  00000000  00000000  00057680  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000960a  00000000  00000000  0006682b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006fe35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087e4  00000000  00000000  0006feb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a3d4 	.word	0x0800a3d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	0800a3d4 	.word	0x0800a3d4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a38:	f000 b97a 	b.w	8000d30 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	468c      	mov	ip, r1
 8000a5a:	460d      	mov	r5, r1
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	9e08      	ldr	r6, [sp, #32]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d151      	bne.n	8000b08 <__udivmoddi4+0xb4>
 8000a64:	428a      	cmp	r2, r1
 8000a66:	4617      	mov	r7, r2
 8000a68:	d96d      	bls.n	8000b46 <__udivmoddi4+0xf2>
 8000a6a:	fab2 fe82 	clz	lr, r2
 8000a6e:	f1be 0f00 	cmp.w	lr, #0
 8000a72:	d00b      	beq.n	8000a8c <__udivmoddi4+0x38>
 8000a74:	f1ce 0c20 	rsb	ip, lr, #32
 8000a78:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a7c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a80:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a84:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a88:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a8c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a90:	0c25      	lsrs	r5, r4, #16
 8000a92:	fbbc f8fa 	udiv	r8, ip, sl
 8000a96:	fa1f f987 	uxth.w	r9, r7
 8000a9a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a9e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000aa2:	fb08 f309 	mul.w	r3, r8, r9
 8000aa6:	42ab      	cmp	r3, r5
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x6c>
 8000aaa:	19ed      	adds	r5, r5, r7
 8000aac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000ab0:	f080 8123 	bcs.w	8000cfa <__udivmoddi4+0x2a6>
 8000ab4:	42ab      	cmp	r3, r5
 8000ab6:	f240 8120 	bls.w	8000cfa <__udivmoddi4+0x2a6>
 8000aba:	f1a8 0802 	sub.w	r8, r8, #2
 8000abe:	443d      	add	r5, r7
 8000ac0:	1aed      	subs	r5, r5, r3
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ac8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000acc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad0:	fb00 f909 	mul.w	r9, r0, r9
 8000ad4:	45a1      	cmp	r9, r4
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x98>
 8000ad8:	19e4      	adds	r4, r4, r7
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ade:	f080 810a 	bcs.w	8000cf6 <__udivmoddi4+0x2a2>
 8000ae2:	45a1      	cmp	r9, r4
 8000ae4:	f240 8107 	bls.w	8000cf6 <__udivmoddi4+0x2a2>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	443c      	add	r4, r7
 8000aec:	eba4 0409 	sub.w	r4, r4, r9
 8000af0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000af4:	2100      	movs	r1, #0
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d061      	beq.n	8000bbe <__udivmoddi4+0x16a>
 8000afa:	fa24 f40e 	lsr.w	r4, r4, lr
 8000afe:	2300      	movs	r3, #0
 8000b00:	6034      	str	r4, [r6, #0]
 8000b02:	6073      	str	r3, [r6, #4]
 8000b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d907      	bls.n	8000b1c <__udivmoddi4+0xc8>
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d054      	beq.n	8000bba <__udivmoddi4+0x166>
 8000b10:	2100      	movs	r1, #0
 8000b12:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b16:	4608      	mov	r0, r1
 8000b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1c:	fab3 f183 	clz	r1, r3
 8000b20:	2900      	cmp	r1, #0
 8000b22:	f040 808e 	bne.w	8000c42 <__udivmoddi4+0x1ee>
 8000b26:	42ab      	cmp	r3, r5
 8000b28:	d302      	bcc.n	8000b30 <__udivmoddi4+0xdc>
 8000b2a:	4282      	cmp	r2, r0
 8000b2c:	f200 80fa 	bhi.w	8000d24 <__udivmoddi4+0x2d0>
 8000b30:	1a84      	subs	r4, r0, r2
 8000b32:	eb65 0503 	sbc.w	r5, r5, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	46ac      	mov	ip, r5
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d03f      	beq.n	8000bbe <__udivmoddi4+0x16a>
 8000b3e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	b912      	cbnz	r2, 8000b4e <__udivmoddi4+0xfa>
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b4e:	fab7 fe87 	clz	lr, r7
 8000b52:	f1be 0f00 	cmp.w	lr, #0
 8000b56:	d134      	bne.n	8000bc2 <__udivmoddi4+0x16e>
 8000b58:	1beb      	subs	r3, r5, r7
 8000b5a:	0c3a      	lsrs	r2, r7, #16
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	2101      	movs	r1, #1
 8000b62:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b66:	0c25      	lsrs	r5, r4, #16
 8000b68:	fb02 3318 	mls	r3, r2, r8, r3
 8000b6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b70:	fb0c f308 	mul.w	r3, ip, r8
 8000b74:	42ab      	cmp	r3, r5
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x134>
 8000b78:	19ed      	adds	r5, r5, r7
 8000b7a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x132>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	f200 80d1 	bhi.w	8000d28 <__udivmoddi4+0x2d4>
 8000b86:	4680      	mov	r8, r0
 8000b88:	1aed      	subs	r5, r5, r3
 8000b8a:	b2a3      	uxth	r3, r4
 8000b8c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b90:	fb02 5510 	mls	r5, r2, r0, r5
 8000b94:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b98:	fb0c fc00 	mul.w	ip, ip, r0
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x15c>
 8000ba0:	19e4      	adds	r4, r4, r7
 8000ba2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x15a>
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	f200 80b8 	bhi.w	8000d1e <__udivmoddi4+0x2ca>
 8000bae:	4618      	mov	r0, r3
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb8:	e79d      	b.n	8000af6 <__udivmoddi4+0xa2>
 8000bba:	4631      	mov	r1, r6
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	f1ce 0420 	rsb	r4, lr, #32
 8000bc6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bca:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bce:	fa20 f804 	lsr.w	r8, r0, r4
 8000bd2:	0c3a      	lsrs	r2, r7, #16
 8000bd4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bd8:	ea48 0803 	orr.w	r8, r8, r3
 8000bdc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000be0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000be4:	fb02 4411 	mls	r4, r2, r1, r4
 8000be8:	fa1f fc87 	uxth.w	ip, r7
 8000bec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bf0:	fb01 f30c 	mul.w	r3, r1, ip
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x1bc>
 8000bfc:	19ed      	adds	r5, r5, r7
 8000bfe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000c02:	f080 808a 	bcs.w	8000d1a <__udivmoddi4+0x2c6>
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	f240 8087 	bls.w	8000d1a <__udivmoddi4+0x2c6>
 8000c0c:	3902      	subs	r1, #2
 8000c0e:	443d      	add	r5, r7
 8000c10:	1aeb      	subs	r3, r5, r3
 8000c12:	fa1f f588 	uxth.w	r5, r8
 8000c16:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c1a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c1e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c22:	fb00 f30c 	mul.w	r3, r0, ip
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x1e6>
 8000c2a:	19ed      	adds	r5, r5, r7
 8000c2c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c30:	d26f      	bcs.n	8000d12 <__udivmoddi4+0x2be>
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d96d      	bls.n	8000d12 <__udivmoddi4+0x2be>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443d      	add	r5, r7
 8000c3a:	1aeb      	subs	r3, r5, r3
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	e78f      	b.n	8000b62 <__udivmoddi4+0x10e>
 8000c42:	f1c1 0720 	rsb	r7, r1, #32
 8000c46:	fa22 f807 	lsr.w	r8, r2, r7
 8000c4a:	408b      	lsls	r3, r1
 8000c4c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c50:	ea48 0303 	orr.w	r3, r8, r3
 8000c54:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c58:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c62:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c66:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c6a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c6e:	fa1f f883 	uxth.w	r8, r3
 8000c72:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c76:	fb09 f408 	mul.w	r4, r9, r8
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c80:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x244>
 8000c86:	18ed      	adds	r5, r5, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	d243      	bcs.n	8000d16 <__udivmoddi4+0x2c2>
 8000c8e:	42ac      	cmp	r4, r5
 8000c90:	d941      	bls.n	8000d16 <__udivmoddi4+0x2c2>
 8000c92:	f1a9 0902 	sub.w	r9, r9, #2
 8000c96:	441d      	add	r5, r3
 8000c98:	1b2d      	subs	r5, r5, r4
 8000c9a:	fa1f fe8e 	uxth.w	lr, lr
 8000c9e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ca2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ca6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000caa:	fb00 f808 	mul.w	r8, r0, r8
 8000cae:	45a0      	cmp	r8, r4
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x26e>
 8000cb2:	18e4      	adds	r4, r4, r3
 8000cb4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000cb8:	d229      	bcs.n	8000d0e <__udivmoddi4+0x2ba>
 8000cba:	45a0      	cmp	r8, r4
 8000cbc:	d927      	bls.n	8000d0e <__udivmoddi4+0x2ba>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	441c      	add	r4, r3
 8000cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc6:	eba4 0408 	sub.w	r4, r4, r8
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	454c      	cmp	r4, r9
 8000cd0:	46c6      	mov	lr, r8
 8000cd2:	464d      	mov	r5, r9
 8000cd4:	d315      	bcc.n	8000d02 <__udivmoddi4+0x2ae>
 8000cd6:	d012      	beq.n	8000cfe <__udivmoddi4+0x2aa>
 8000cd8:	b156      	cbz	r6, 8000cf0 <__udivmoddi4+0x29c>
 8000cda:	ebba 030e 	subs.w	r3, sl, lr
 8000cde:	eb64 0405 	sbc.w	r4, r4, r5
 8000ce2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ce6:	40cb      	lsrs	r3, r1
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	40cc      	lsrs	r4, r1
 8000cec:	6037      	str	r7, [r6, #0]
 8000cee:	6074      	str	r4, [r6, #4]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e6f8      	b.n	8000aec <__udivmoddi4+0x98>
 8000cfa:	4690      	mov	r8, r2
 8000cfc:	e6e0      	b.n	8000ac0 <__udivmoddi4+0x6c>
 8000cfe:	45c2      	cmp	sl, r8
 8000d00:	d2ea      	bcs.n	8000cd8 <__udivmoddi4+0x284>
 8000d02:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d06:	eb69 0503 	sbc.w	r5, r9, r3
 8000d0a:	3801      	subs	r0, #1
 8000d0c:	e7e4      	b.n	8000cd8 <__udivmoddi4+0x284>
 8000d0e:	4628      	mov	r0, r5
 8000d10:	e7d7      	b.n	8000cc2 <__udivmoddi4+0x26e>
 8000d12:	4640      	mov	r0, r8
 8000d14:	e791      	b.n	8000c3a <__udivmoddi4+0x1e6>
 8000d16:	4681      	mov	r9, r0
 8000d18:	e7be      	b.n	8000c98 <__udivmoddi4+0x244>
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	e778      	b.n	8000c10 <__udivmoddi4+0x1bc>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	e745      	b.n	8000bb0 <__udivmoddi4+0x15c>
 8000d24:	4608      	mov	r0, r1
 8000d26:	e708      	b.n	8000b3a <__udivmoddi4+0xe6>
 8000d28:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2c:	443d      	add	r5, r7
 8000d2e:	e72b      	b.n	8000b88 <__udivmoddi4+0x134>

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f8f8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f008 fed0 	bl	8009b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f008 fea2 	bl	8009ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20003ef4 	.word	0x20003ef4

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20003ef4 	.word	0x20003ef4

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_Delay+0x40>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3f7      	bcc.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	095b      	lsrs	r3, r3, #5
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	f002 021f 	and.w	r2, r2, #31
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	4909      	ldr	r1, [pc, #36]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	2201      	movs	r2, #1
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f36:	2101      	movs	r1, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	1e59      	subs	r1, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4e 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff63 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb3 	bl	8000ef0 <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff82 	bl	8000e9c <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff56 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e03b      	b.n	8001046 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f005 fbb6 	bl	8006754 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6852      	ldr	r2, [r2, #4]
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001010:	f022 0107 	bic.w	r1, r2, #7
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6892      	ldr	r2, [r2, #8]
 8001018:	430a      	orrs	r2, r1
 800101a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800102a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	68c9      	ldr	r1, [r1, #12]
 8001032:	430b      	orrs	r3, r1
 8001034:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af02      	add	r7, sp, #8
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_DMA2D_Start+0x1c>
 8001066:	2302      	movs	r3, #2
 8001068:	e018      	b.n	800109c <HAL_DMA2D_Start+0x4e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2202      	movs	r2, #2
 8001076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f987 	bl	8001398 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d056      	beq.n	800116e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80010c0:	f7ff fe6e 	bl	8000da0 <HAL_GetTick>
 80010c4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80010c6:	e04b      	b.n	8001160 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d023      	beq.n	8001122 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e8:	f043 0202 	orr.w	r2, r3, #2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2221      	movs	r2, #33	; 0x21
 800110c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0a5      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001128:	d01a      	beq.n	8001160 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800112a:	f7ff fe39 	bl	8000da0 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	1ad2      	subs	r2, r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d802      	bhi.n	8001140 <HAL_DMA2D_PollForTransfer+0x9c>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10f      	bne.n	8001160 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	f043 0220 	orr.w	r2, r3, #32
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e086      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0ac      	beq.n	80010c8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d061      	beq.n	8001254 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001190:	f7ff fe06 	bl	8000da0 <HAL_GetTick>
 8001194:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001196:	e056      	b.n	8001246 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d02e      	beq.n	8001208 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	f043 0204 	orr.w	r2, r3, #4
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ce:	f043 0202 	orr.w	r2, r3, #2
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2229      	movs	r2, #41	; 0x29
 80011f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2204      	movs	r2, #4
 80011f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e032      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800120e:	d01a      	beq.n	8001246 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001210:	f7ff fdc6 	bl	8000da0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d802      	bhi.n	8001226 <HAL_DMA2D_PollForTransfer+0x182>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10f      	bne.n	8001246 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122a:	f043 0220 	orr.w	r2, r3, #32
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e013      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0a1      	beq.n	8001198 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2212      	movs	r2, #18
 800125a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_DMA2D_ConfigLayer+0x20>
 8001294:	2302      	movs	r3, #2
 8001296:	e077      	b.n	8001388 <HAL_DMA2D_ConfigLayer+0x110>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	3318      	adds	r3, #24
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_DMA2D_ConfigLayer+0x11c>)
 80012c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d003      	beq.n	80012d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d107      	bne.n	80012e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e005      	b.n	80012f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11f      	bne.n	8001338 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	43d2      	mvns	r2, r2
 8001306:	4011      	ands	r1, r2
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	430a      	orrs	r2, r1
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d003      	beq.n	8001328 <HAL_DMA2D_ConfigLayer+0xb0>
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d126      	bne.n	8001376 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68d2      	ldr	r2, [r2, #12]
 8001330:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
 8001336:	e01e      	b.n	8001376 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	69d1      	ldr	r1, [r2, #28]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	43d2      	mvns	r2, r2
 8001346:	4011      	ands	r1, r2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	430a      	orrs	r2, r1
 800134c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d003      	beq.n	8001368 <HAL_DMA2D_ConfigLayer+0xf0>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d106      	bne.n	8001376 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68d2      	ldr	r2, [r2, #12]
 8001370:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001374:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	ff03000f 	.word	0xff03000f

08001398 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013b0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	0410      	lsls	r0, r2, #16
 80013b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ba:	4302      	orrs	r2, r0
 80013bc:	430a      	orrs	r2, r1
 80013be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013d0:	d174      	bne.n	80014bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80013d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	e053      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	431a      	orrs	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4313      	orrs	r3, r2
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	e048      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d111      	bne.n	800144c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	0cdb      	lsrs	r3, r3, #19
 800142c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	0a9b      	lsrs	r3, r3, #10
 8001432:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	02db      	lsls	r3, r3, #11
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	e032      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d117      	bne.n	8001484 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	0fdb      	lsrs	r3, r3, #31
 8001458:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	0cdb      	lsrs	r3, r3, #19
 800145e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	0adb      	lsrs	r3, r3, #11
 8001464:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	029b      	lsls	r3, r3, #10
 8001474:	431a      	orrs	r2, r3
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	03db      	lsls	r3, r3, #15
 800147a:	431a      	orrs	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
 8001482:	e016      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	0f1b      	lsrs	r3, r3, #28
 8001488:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	0d1b      	lsrs	r3, r3, #20
 800148e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	0b1b      	lsrs	r3, r3, #12
 8001494:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	011a      	lsls	r2, r3, #4
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	431a      	orrs	r2, r3
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	031b      	lsls	r3, r3, #12
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80014ba:	e003      	b.n	80014c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	60da      	str	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	372c      	adds	r7, #44	; 0x2c
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e177      	b.n	80017dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8166 	bne.w	80017d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x4a>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b12      	cmp	r3, #18
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	69b9      	ldr	r1, [r7, #24]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d00b      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d007      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80c0 	beq.w	80017d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_GPIO_Init+0x320>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_GPIO_Init+0x324>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_GPIO_Init+0x328>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d037      	beq.n	800170e <HAL_GPIO_Init+0x23e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x32c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d031      	beq.n	800170a <HAL_GPIO_Init+0x23a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a55      	ldr	r2, [pc, #340]	; (8001800 <HAL_GPIO_Init+0x330>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x236>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a54      	ldr	r2, [pc, #336]	; (8001804 <HAL_GPIO_Init+0x334>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x232>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a53      	ldr	r2, [pc, #332]	; (8001808 <HAL_GPIO_Init+0x338>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x22e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_GPIO_Init+0x33c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x22a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <HAL_GPIO_Init+0x340>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a50      	ldr	r2, [pc, #320]	; (8001814 <HAL_GPIO_Init+0x344>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x222>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4f      	ldr	r2, [pc, #316]	; (8001818 <HAL_GPIO_Init+0x348>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x21e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4e      	ldr	r2, [pc, #312]	; (800181c <HAL_GPIO_Init+0x34c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x21a>
 80016e6:	2309      	movs	r3, #9
 80016e8:	e012      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016ea:	230a      	movs	r3, #10
 80016ec:	e010      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016ee:	2308      	movs	r3, #8
 80016f0:	e00e      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00c      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x240>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x240>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x240>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x240>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4934      	ldr	r1, [pc, #208]	; (80017f4 <HAL_GPIO_Init+0x324>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_GPIO_Init+0x350>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001752:	4a33      	ldr	r2, [pc, #204]	; (8001820 <HAL_GPIO_Init+0x350>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_GPIO_Init+0x350>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177c:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_GPIO_Init+0x350>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_GPIO_Init+0x350>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_GPIO_Init+0x350>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_GPIO_Init+0x350>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_GPIO_Init+0x350>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f ae84 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40021400 	.word	0x40021400
 8001810:	40021800 	.word	0x40021800
 8001814:	40021c00 	.word	0x40021c00
 8001818:	40022000 	.word	0x40022000
 800181c:	40022400 	.word	0x40022400
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e0da      	b.n	80019f6 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	429a      	cmp	r2, r3
 8001858:	f040 80ca 	bne.w	80019f0 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800185c:	4a6b      	ldr	r2, [pc, #428]	; (8001a0c <HAL_GPIO_DeInit+0x1e8>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4013      	ands	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <HAL_GPIO_DeInit+0x1ec>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d037      	beq.n	80018f6 <HAL_GPIO_DeInit+0xd2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a62      	ldr	r2, [pc, #392]	; (8001a14 <HAL_GPIO_DeInit+0x1f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d031      	beq.n	80018f2 <HAL_GPIO_DeInit+0xce>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a61      	ldr	r2, [pc, #388]	; (8001a18 <HAL_GPIO_DeInit+0x1f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d02b      	beq.n	80018ee <HAL_GPIO_DeInit+0xca>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_GPIO_DeInit+0x1f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d025      	beq.n	80018ea <HAL_GPIO_DeInit+0xc6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_GPIO_DeInit+0x1fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01f      	beq.n	80018e6 <HAL_GPIO_DeInit+0xc2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a5e      	ldr	r2, [pc, #376]	; (8001a24 <HAL_GPIO_DeInit+0x200>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_DeInit+0xbe>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <HAL_GPIO_DeInit+0x204>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_DeInit+0xba>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_GPIO_DeInit+0x208>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_DeInit+0xb6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_GPIO_DeInit+0x20c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_DeInit+0xb2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_GPIO_DeInit+0x210>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_DeInit+0xae>
 80018ce:	2309      	movs	r3, #9
 80018d0:	e012      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018d2:	230a      	movs	r3, #10
 80018d4:	e010      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018d6:	2308      	movs	r3, #8
 80018d8:	e00e      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00c      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018de:	2306      	movs	r3, #6
 80018e0:	e00a      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018f6:	2300      	movs	r3, #0
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	fa03 f202 	lsl.w	r2, r3, r2
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	429a      	cmp	r2, r3
 8001908:	d132      	bne.n	8001970 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800191a:	483c      	ldr	r0, [pc, #240]	; (8001a0c <HAL_GPIO_DeInit+0x1e8>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	493a      	ldr	r1, [pc, #232]	; (8001a0c <HAL_GPIO_DeInit+0x1e8>)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	0892      	lsrs	r2, r2, #2
 8001926:	3202      	adds	r2, #2
 8001928:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	43d2      	mvns	r2, r2
 8001930:	400a      	ands	r2, r1
 8001932:	3302      	adds	r3, #2
 8001934:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001938:	493f      	ldr	r1, [pc, #252]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	4013      	ands	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001946:	493c      	ldr	r1, [pc, #240]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	4013      	ands	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001954:	4938      	ldr	r1, [pc, #224]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	4013      	ands	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001962:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	4013      	ands	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2103      	movs	r1, #3
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08d9      	lsrs	r1, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3108      	adds	r1, #8
 8001992:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	200f      	movs	r0, #15
 80019a0:	fa00 f303 	lsl.w	r3, r0, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4019      	ands	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2103      	movs	r1, #3
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	2101      	movs	r1, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2103      	movs	r1, #3
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	f67f af21 	bls.w	8001840 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40022400 	.word	0x40022400
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e10f      	b.n	8001ca2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f005 fc38 	bl	800730c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab4:	f001 ff44 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a7b      	ldr	r2, [pc, #492]	; (8001cac <HAL_I2C_Init+0x23c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d807      	bhi.n	8001ad4 <HAL_I2C_Init+0x64>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_I2C_Init+0x240>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e006      	b.n	8001ae2 <HAL_I2C_Init+0x72>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_I2C_Init+0x244>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf94      	ite	ls
 8001adc:	2301      	movls	r3, #1
 8001ade:	2300      	movhi	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0db      	b.n	8001ca2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_I2C_Init+0x248>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	6852      	ldr	r2, [r2, #4]
 8001b00:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4863      	ldr	r0, [pc, #396]	; (8001cac <HAL_I2C_Init+0x23c>)
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	d802      	bhi.n	8001b28 <HAL_I2C_Init+0xb8>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3301      	adds	r3, #1
 8001b26:	e009      	b.n	8001b3c <HAL_I2C_Init+0xcc>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b2e:	fb00 f303 	mul.w	r3, r0, r3
 8001b32:	4862      	ldr	r0, [pc, #392]	; (8001cbc <HAL_I2C_Init+0x24c>)
 8001b34:	fba0 0303 	umull	r0, r3, r0, r3
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4955      	ldr	r1, [pc, #340]	; (8001cac <HAL_I2C_Init+0x23c>)
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	d80d      	bhi.n	8001b78 <HAL_I2C_Init+0x108>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	bf38      	it	cc
 8001b74:	2304      	movcc	r3, #4
 8001b76:	e04f      	b.n	8001c18 <HAL_I2C_Init+0x1a8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d111      	bne.n	8001ba4 <HAL_I2C_Init+0x134>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e5c      	subs	r4, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	440b      	add	r3, r1
 8001b8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e012      	b.n	8001bca <HAL_I2C_Init+0x15a>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1e5c      	subs	r4, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	0099      	lsls	r1, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x162>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e022      	b.n	8001c18 <HAL_I2C_Init+0x1a8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_I2C_Init+0x188>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1e5c      	subs	r4, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6859      	ldr	r1, [r3, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	440b      	add	r3, r1
 8001be8:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf6:	e00f      	b.n	8001c18 <HAL_I2C_Init+0x1a8>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1e5c      	subs	r4, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	0099      	lsls	r1, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	69d0      	ldr	r0, [r2, #28]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6a12      	ldr	r2, [r2, #32]
 8001c32:	4302      	orrs	r2, r0
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	6908      	ldr	r0, [r1, #16]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	68c9      	ldr	r1, [r1, #12]
 8001c52:	4301      	orrs	r1, r0
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	68d2      	ldr	r2, [r2, #12]
 8001c62:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6950      	ldr	r0, [r2, #20]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6992      	ldr	r2, [r2, #24]
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	000186a0 	.word	0x000186a0
 8001cb0:	001e847f 	.word	0x001e847f
 8001cb4:	003d08ff 	.word	0x003d08ff
 8001cb8:	431bde83 	.word	0x431bde83
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e021      	b.n	8001d16 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2224      	movs	r2, #36	; 0x24
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f005 fb78 	bl	80073e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	817b      	strh	r3, [r7, #10]
 8001d32:	460b      	mov	r3, r1
 8001d34:	813b      	strh	r3, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d3a:	f7ff f831 	bl	8000da0 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	f040 80d9 	bne.w	8001f00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2319      	movs	r3, #25
 8001d54:	2201      	movs	r2, #1
 8001d56:	496d      	ldr	r1, [pc, #436]	; (8001f0c <HAL_I2C_Mem_Write+0x1ec>)
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fc67 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
 8001d66:	e0cc      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Mem_Write+0x56>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0c5      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d007      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2221      	movs	r2, #33	; 0x21
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2240      	movs	r2, #64	; 0x40
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_I2C_Mem_Write+0x1f0>)
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dde:	88f8      	ldrh	r0, [r7, #6]
 8001de0:	893a      	ldrh	r2, [r7, #8]
 8001de2:	8979      	ldrh	r1, [r7, #10]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4603      	mov	r3, r0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fac4 	bl	800237c <I2C_RequestMemoryWrite>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d052      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e081      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fce8 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d107      	bne.n	8001e26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06b      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d017      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1aa      	bne.n	8001dfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fcd4 	bl	800285a <I2C_WaitOnBTFFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e016      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	00100002 	.word	0x00100002
 8001f10:	ffff0000 	.word	0xffff0000

08001f14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	460b      	mov	r3, r1
 8001f28:	813b      	strh	r3, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f2e:	f7fe ff37 	bl	8000da0 <HAL_GetTick>
 8001f32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	f040 8208 	bne.w	8002352 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2319      	movs	r3, #25
 8001f48:	2201      	movs	r2, #1
 8001f4a:	497b      	ldr	r1, [pc, #492]	; (8002138 <HAL_I2C_Mem_Read+0x224>)
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fb6d 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e1fb      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Mem_Read+0x56>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e1f4      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d007      	beq.n	8001f90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2222      	movs	r2, #34	; 0x22
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a5b      	ldr	r2, [pc, #364]	; (800213c <HAL_I2C_Mem_Read+0x228>)
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fd2:	88f8      	ldrh	r0, [r7, #6]
 8001fd4:	893a      	ldrh	r2, [r7, #8]
 8001fd6:	8979      	ldrh	r1, [r7, #10]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fa52 	bl	800248c <I2C_RequestMemoryRead>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1b0      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	623b      	str	r3, [r7, #32]
 800200e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e184      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b01      	cmp	r3, #1
 8002028:	d11b      	bne.n	8002062 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e164      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	2b02      	cmp	r3, #2
 8002068:	d11b      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	e144      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020b8:	e138      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	2b03      	cmp	r3, #3
 80020c0:	f200 80f1 	bhi.w	80022a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d123      	bne.n	8002114 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fc03 	bl	80028dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e139      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	6912      	ldr	r2, [r2, #16]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002112:	e10b      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b02      	cmp	r3, #2
 800211a:	d14e      	bne.n	80021ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	2200      	movs	r2, #0
 8002124:	4906      	ldr	r1, [pc, #24]	; (8002140 <HAL_I2C_Mem_Read+0x22c>)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fa80 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e10e      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
 8002136:	bf00      	nop
 8002138:	00100002 	.word	0x00100002
 800213c:	ffff0000 	.word	0xffff0000
 8002140:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	6912      	ldr	r2, [r2, #16]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	6912      	ldr	r2, [r2, #16]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021b8:	e0b8      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	2200      	movs	r2, #0
 80021c2:	4966      	ldr	r1, [pc, #408]	; (800235c <HAL_I2C_Mem_Read+0x448>)
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fa31 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0bf      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	6912      	ldr	r2, [r2, #16]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	2200      	movs	r2, #0
 800221e:	494f      	ldr	r1, [pc, #316]	; (800235c <HAL_I2C_Mem_Read+0x448>)
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa03 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e091      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	6912      	ldr	r2, [r2, #16]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	6912      	ldr	r2, [r2, #16]
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a4:	e042      	b.n	800232c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fb16 	bl	80028dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e04c      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	6912      	ldr	r2, [r2, #16]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d118      	bne.n	800232c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	6912      	ldr	r2, [r2, #16]
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f aec2 	bne.w	80020ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	00010004 	.word	0x00010004

08002360 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f93a 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e05e      	b.n	8002480 <I2C_RequestMemoryWrite+0x104>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	897a      	ldrh	r2, [r7, #10]
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	6a3a      	ldr	r2, [r7, #32]
 80023d4:	492c      	ldr	r1, [pc, #176]	; (8002488 <I2C_RequestMemoryWrite+0x10c>)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f97f 	bl	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_RequestMemoryWrite+0x6a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e04c      	b.n	8002480 <I2C_RequestMemoryWrite+0x104>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9e9 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <I2C_RequestMemoryWrite+0xac>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b04      	cmp	r3, #4
 8002412:	d107      	bne.n	8002424 <I2C_RequestMemoryWrite+0xa8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e02b      	b.n	8002480 <I2C_RequestMemoryWrite+0x104>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <I2C_RequestMemoryWrite+0xbe>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	893a      	ldrh	r2, [r7, #8]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	e021      	b.n	800247e <I2C_RequestMemoryWrite+0x102>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	893a      	ldrh	r2, [r7, #8]
 8002440:	0a12      	lsrs	r2, r2, #8
 8002442:	b292      	uxth	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	6a39      	ldr	r1, [r7, #32]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f9c3 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <I2C_RequestMemoryWrite+0xf8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <I2C_RequestMemoryWrite+0xf4>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e005      	b.n	8002480 <I2C_RequestMemoryWrite+0x104>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	893a      	ldrh	r2, [r7, #8]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	00010002 	.word	0x00010002

0800248c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	817b      	strh	r3, [r7, #10]
 800249e:	460b      	mov	r3, r1
 80024a0:	813b      	strh	r3, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f8aa 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e09d      	b.n	800261e <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	897a      	ldrh	r2, [r7, #10]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	494c      	ldr	r1, [pc, #304]	; (8002628 <I2C_RequestMemoryRead+0x19c>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8ef 	bl	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_RequestMemoryRead+0x7a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e08b      	b.n	800261e <I2C_RequestMemoryRead+0x192>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251e:	6a39      	ldr	r1, [r7, #32]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f959 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <I2C_RequestMemoryRead+0xbc>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <I2C_RequestMemoryRead+0xb8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002542:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e06a      	b.n	800261e <I2C_RequestMemoryRead+0x192>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <I2C_RequestMemoryRead+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	893a      	ldrh	r2, [r7, #8]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	611a      	str	r2, [r3, #16]
 8002558:	e021      	b.n	800259e <I2C_RequestMemoryRead+0x112>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	893a      	ldrh	r2, [r7, #8]
 8002560:	0a12      	lsrs	r2, r2, #8
 8002562:	b292      	uxth	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	6a39      	ldr	r1, [r7, #32]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f933 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <I2C_RequestMemoryRead+0x108>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <I2C_RequestMemoryRead+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e044      	b.n	800261e <I2C_RequestMemoryRead+0x192>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f918 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <I2C_RequestMemoryRead+0x13e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <I2C_RequestMemoryRead+0x13a>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e029      	b.n	800261e <I2C_RequestMemoryRead+0x192>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f820 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_RequestMemoryRead+0x16a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e013      	b.n	800261e <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	897a      	ldrh	r2, [r7, #10]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4907      	ldr	r1, [pc, #28]	; (8002628 <I2C_RequestMemoryRead+0x19c>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f864 	bl	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryRead+0x190>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <I2C_RequestMemoryRead+0x192>
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	00010002 	.word	0x00010002

0800262c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800263c:	e025      	b.n	800268a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002644:	d021      	beq.n	800268a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7fe fbab 	bl	8000da0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	1ad2      	subs	r2, r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d802      	bhi.n	800265c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d116      	bne.n	800268a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e023      	b.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10d      	bne.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	e00c      	b.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d0b6      	beq.n	800263e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026e8:	e051      	b.n	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d123      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002708:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002712:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e046      	b.n	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d021      	beq.n	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fb29 	bl	8000da0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d802      	bhi.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e020      	b.n	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d10c      	bne.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4013      	ands	r3, r2
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e00b      	b.n	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d18d      	bne.n	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e4:	e02d      	b.n	8002842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f8ce 	bl	8002988 <I2C_IsAcknowledgeFailed>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e02d      	b.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fc:	d021      	beq.n	8002842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe facf 	bl	8000da0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	d802      	bhi.n	8002814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d1ca      	bne.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002866:	e02d      	b.n	80028c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f88d 	bl	8002988 <I2C_IsAcknowledgeFailed>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e02d      	b.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287e:	d021      	beq.n	80028c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002880:	f7fe fa8e 	bl	8000da0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	d802      	bhi.n	8002896 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e007      	b.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d1ca      	bne.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e8:	e042      	b.n	8002970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d119      	bne.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0210 	mvn.w	r2, #16
 8002900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e029      	b.n	8002980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7fe fa38 	bl	8000da0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1ad2      	subs	r2, r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	429a      	cmp	r2, r3
 800293a:	d802      	bhi.n	8002942 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e007      	b.n	8002980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d1b5      	bne.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	d11b      	bne.n	80029d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0204 	orr.w	r2, r3, #4
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d129      	bne.n	8002a50 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1e:	f022 0210 	bic.w	r2, r2, #16
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d12a      	bne.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	f023 030f 	bic.w	r3, r3, #15
 8002a9e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	89fb      	ldrh	r3, [r7, #14]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	89fa      	ldrh	r2, [r7, #14]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0bf      	b.n	8002c6e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f005 faae 	bl	8008064 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	6992      	ldr	r2, [r2, #24]
 8002b1a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002b1e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	6991      	ldr	r1, [r2, #24]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6850      	ldr	r0, [r2, #4]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6892      	ldr	r2, [r2, #8]
 8002b32:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b38:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6912      	ldr	r2, [r2, #16]
 8002b3e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b40:	430a      	orrs	r2, r1
 8002b42:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_LTDC_Init+0x19c>)
 8002b50:	400b      	ands	r3, r1
 8002b52:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	6891      	ldr	r1, [r2, #8]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6990      	ldr	r0, [r2, #24]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4302      	orrs	r2, r0
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_LTDC_Init+0x19c>)
 8002b7e:	400b      	ands	r3, r1
 8002b80:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	68d1      	ldr	r1, [r2, #12]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6a10      	ldr	r0, [r2, #32]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4302      	orrs	r2, r0
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6919      	ldr	r1, [r3, #16]
 8002baa:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_LTDC_Init+0x19c>)
 8002bac:	400b      	ands	r3, r1
 8002bae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4302      	orrs	r2, r0
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6959      	ldr	r1, [r3, #20]
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_LTDC_Init+0x19c>)
 8002bda:	400b      	ands	r3, r1
 8002bdc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	6951      	ldr	r1, [r2, #20]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4302      	orrs	r2, r0
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c1a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c2a:	68b8      	ldr	r0, [r7, #8]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4302      	orrs	r2, r0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002c36:	4302      	orrs	r2, r0
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c46:	f042 0206 	orr.w	r2, r2, #6
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	6992      	ldr	r2, [r2, #24]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	f000f800 	.word	0xf000f800

08002c7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_LTDC_ConfigLayer+0x1a>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e02c      	b.n	8002cf0 <HAL_LTDC_ConfigLayer+0x74>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2134      	movs	r1, #52	; 0x34
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f83b 	bl	8002d4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdb0      	pop	{r4, r5, r7, pc}

08002cf8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_LTDC_EnableDither+0x16>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e016      	b.n	8002d3c <HAL_LTDC_EnableDither+0x44>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_LTDC_EnableDither+0x50>)
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_LTDC_EnableDither+0x50>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40016800 	.word	0x40016800

08002d4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	4413      	add	r3, r2
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	01db      	lsls	r3, r3, #7
 8002d78:	4413      	add	r3, r2
 8002d7a:	3384      	adds	r3, #132	; 0x84
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4619      	mov	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	01db      	lsls	r3, r3, #7
 8002d88:	440b      	add	r3, r1
 8002d8a:	3384      	adds	r3, #132	; 0x84
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d92:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	01db      	lsls	r3, r3, #7
 8002d9e:	4413      	add	r3, r2
 8002da0:	3384      	adds	r3, #132	; 0x84
 8002da2:	4619      	mov	r1, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	4413      	add	r3, r2
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dcc:	4413      	add	r3, r2
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	01db      	lsls	r3, r3, #7
 8002ddc:	4413      	add	r3, r2
 8002dde:	3384      	adds	r3, #132	; 0x84
 8002de0:	461a      	mov	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	01db      	lsls	r3, r3, #7
 8002dec:	440b      	add	r3, r1
 8002dee:	3384      	adds	r3, #132	; 0x84
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002df6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	01db      	lsls	r3, r3, #7
 8002e02:	4413      	add	r3, r2
 8002e04:	3384      	adds	r3, #132	; 0x84
 8002e06:	4619      	mov	r1, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e16:	4413      	add	r3, r2
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	01db      	lsls	r3, r3, #7
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3384      	adds	r3, #132	; 0x84
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	01db      	lsls	r3, r3, #7
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3384      	adds	r3, #132	; 0x84
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f023 0307 	bic.w	r3, r3, #7
 8002e44:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	01db      	lsls	r3, r3, #7
 8002e50:	4413      	add	r3, r2
 8002e52:	3384      	adds	r3, #132	; 0x84
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	01db      	lsls	r3, r3, #7
 8002e82:	4413      	add	r3, r2
 8002e84:	3384      	adds	r3, #132	; 0x84
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	01db      	lsls	r3, r3, #7
 8002e92:	4413      	add	r3, r2
 8002e94:	3384      	adds	r3, #132	; 0x84
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	01db      	lsls	r3, r3, #7
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3384      	adds	r3, #132	; 0x84
 8002eaa:	4619      	mov	r1, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	4413      	add	r3, r2
 8002ece:	3384      	adds	r3, #132	; 0x84
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	01db      	lsls	r3, r3, #7
 8002edc:	440b      	add	r3, r1
 8002ede:	3384      	adds	r3, #132	; 0x84
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ee6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	01db      	lsls	r3, r3, #7
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3384      	adds	r3, #132	; 0x84
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	4413      	add	r3, r2
 8002f0a:	3384      	adds	r3, #132	; 0x84
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	01db      	lsls	r3, r3, #7
 8002f18:	440b      	add	r3, r1
 8002f1a:	3384      	adds	r3, #132	; 0x84
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f22:	f023 0307 	bic.w	r3, r3, #7
 8002f26:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	01db      	lsls	r3, r3, #7
 8002f32:	4413      	add	r3, r2
 8002f34:	3384      	adds	r3, #132	; 0x84
 8002f36:	4619      	mov	r1, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	01db      	lsls	r3, r3, #7
 8002f4e:	4413      	add	r3, r2
 8002f50:	3384      	adds	r3, #132	; 0x84
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	01db      	lsls	r3, r3, #7
 8002f5e:	4413      	add	r3, r2
 8002f60:	3384      	adds	r3, #132	; 0x84
 8002f62:	461a      	mov	r2, r3
 8002f64:	2300      	movs	r3, #0
 8002f66:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	4413      	add	r3, r2
 8002f74:	3384      	adds	r3, #132	; 0x84
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8002f86:	2304      	movs	r3, #4
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e01b      	b.n	8002fc4 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8002f94:	2303      	movs	r3, #3
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	e014      	b.n	8002fc4 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d00b      	beq.n	8002fba <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d007      	beq.n	8002fba <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d003      	beq.n	8002fba <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fb6:	2b07      	cmp	r3, #7
 8002fb8:	d102      	bne.n	8002fc0 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e001      	b.n	8002fc4 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	01db      	lsls	r3, r3, #7
 8002fce:	4413      	add	r3, r2
 8002fd0:	3384      	adds	r3, #132	; 0x84
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	01db      	lsls	r3, r3, #7
 8002fde:	440b      	add	r3, r1
 8002fe0:	3384      	adds	r3, #132	; 0x84
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	01db      	lsls	r3, r3, #7
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3384      	adds	r3, #132	; 0x84
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	041a      	lsls	r2, r3, #16
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	1acb      	subs	r3, r1, r3
 8003010:	69f9      	ldr	r1, [r7, #28]
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	3303      	adds	r3, #3
 8003018:	4313      	orrs	r3, r2
 800301a:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	01db      	lsls	r3, r3, #7
 8003026:	4413      	add	r3, r2
 8003028:	3384      	adds	r3, #132	; 0x84
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	01db      	lsls	r3, r3, #7
 8003036:	440b      	add	r3, r1
 8003038:	3384      	adds	r3, #132	; 0x84
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003040:	f023 0307 	bic.w	r3, r3, #7
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	01db      	lsls	r3, r3, #7
 8003050:	4413      	add	r3, r2
 8003052:	3384      	adds	r3, #132	; 0x84
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	4413      	add	r3, r2
 8003068:	3384      	adds	r3, #132	; 0x84
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	01db      	lsls	r3, r3, #7
 8003076:	440b      	add	r3, r1
 8003078:	3384      	adds	r3, #132	; 0x84
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_PWREx_EnableOverDrive+0x90>)
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_PWREx_EnableOverDrive+0x90>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_PWREx_EnableOverDrive+0x90>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_PWREx_EnableOverDrive+0x94>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030bc:	f7fd fe70 	bl	8000da0 <HAL_GetTick>
 80030c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c2:	e009      	b.n	80030d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c4:	f7fd fe6c 	bl	8000da0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d2:	d901      	bls.n	80030d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e01f      	b.n	8003118 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d1ee      	bne.n	80030c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ec:	f7fd fe58 	bl	8000da0 <HAL_GetTick>
 80030f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f2:	e009      	b.n	8003108 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030f4:	f7fd fe54 	bl	8000da0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003102:	d901      	bls.n	8003108 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e007      	b.n	8003118 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003114:	d1ee      	bne.n	80030f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	420e0040 	.word	0x420e0040
 8003128:	40007000 	.word	0x40007000
 800312c:	420e0044 	.word	0x420e0044

08003130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e22d      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d075      	beq.n	800323a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	4ba3      	ldr	r3, [pc, #652]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d00c      	beq.n	8003174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315a:	4ba0      	ldr	r3, [pc, #640]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b9d      	ldr	r3, [pc, #628]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003172:	d10b      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	4b99      	ldr	r3, [pc, #612]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05b      	beq.n	8003238 <HAL_RCC_OscConfig+0x108>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d157      	bne.n	8003238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e208      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x74>
 8003196:	4a91      	ldr	r2, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003198:	4b90      	ldr	r3, [pc, #576]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x98>
 80031ae:	4a8b      	ldr	r2, [pc, #556]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	4b8a      	ldr	r3, [pc, #552]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4a88      	ldr	r2, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	4b87      	ldr	r3, [pc, #540]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031c8:	4a84      	ldr	r2, [pc, #528]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	4b84      	ldr	r3, [pc, #528]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4a81      	ldr	r2, [pc, #516]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fd fdda 	bl	8000da0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fd fdd6 	bl	8000da0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1cd      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fd fdc6 	bl	8000da0 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003218:	f7fd fdc2 	bl	8000da0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1b9      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0xe8>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e18d      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4956      	ldr	r1, [pc, #344]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003284:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b4f      	ldr	r3, [pc, #316]	; (80033e0 <HAL_RCC_OscConfig+0x2b0>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd fd7b 	bl	8000da0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fd fd77 	bl	8000da0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e16e      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4943      	ldr	r1, [pc, #268]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_OscConfig+0x2b0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd fd5a 	bl	8000da0 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fd fd56 	bl	8000da0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e14d      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d030      	beq.n	800337c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_OscConfig+0x2b4>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fd fd3a 	bl	8000da0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003330:	f7fd fd36 	bl	8000da0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e12d      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x200>
 800334e:	e015      	b.n	800337c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_OscConfig+0x2b4>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fd fd23 	bl	8000da0 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335e:	f7fd fd1f 	bl	8000da0 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e116      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a0 	beq.w	80034ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x2b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d121      	bne.n	800340a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_RCC_OscConfig+0x2b8>)
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_RCC_OscConfig+0x2b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fd fce5 	bl	8000da0 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e011      	b.n	80033fe <HAL_RCC_OscConfig+0x2ce>
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	42470000 	.word	0x42470000
 80033e4:	42470e80 	.word	0x42470e80
 80033e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fd fcd8 	bl	8000da0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0cf      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x478>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x2f0>
 8003412:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003414:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	e01c      	b.n	800345a <HAL_RCC_OscConfig+0x32a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b05      	cmp	r3, #5
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x312>
 8003428:	4a60      	ldr	r2, [pc, #384]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 800342a:	4b60      	ldr	r3, [pc, #384]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	e00b      	b.n	800345a <HAL_RCC_OscConfig+0x32a>
 8003442:	4a5a      	ldr	r2, [pc, #360]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	4a57      	ldr	r2, [pc, #348]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003450:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d015      	beq.n	800348e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fd fc9d 	bl	8000da0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fd fc99 	bl	8000da0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e08e      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ee      	beq.n	800346a <HAL_RCC_OscConfig+0x33a>
 800348c:	e014      	b.n	80034b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fd fc87 	bl	8000da0 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fc83 	bl	8000da0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e078      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ee      	bne.n	8003496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 80034c0:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d064      	beq.n	800359c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d05c      	beq.n	8003598 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d141      	bne.n	800356a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_RCC_OscConfig+0x480>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fc58 	bl	8000da0 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd fc54 	bl	8000da0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e04b      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003512:	4926      	ldr	r1, [pc, #152]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_RCC_OscConfig+0x480>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fd fc2d 	bl	8000da0 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fd fc29 	bl	8000da0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e020      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x41a>
 8003568:	e018      	b.n	800359c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_RCC_OscConfig+0x480>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fd fc16 	bl	8000da0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fd fc12 	bl	8000da0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e009      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCC_OscConfig+0x47c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x448>
 8003596:	e001      	b.n	800359c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40007000 	.word	0x40007000
 80035ac:	40023800 	.word	0x40023800
 80035b0:	42470060 	.word	0x42470060

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ca      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b67      	ldr	r3, [pc, #412]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d20c      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b62      	ldr	r3, [pc, #392]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b6      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	4b58      	ldr	r3, [pc, #352]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	4b52      	ldr	r3, [pc, #328]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	494f      	ldr	r1, [pc, #316]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	4b4f      	ldr	r3, [pc, #316]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07d      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06d      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e065      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4936      	ldr	r1, [pc, #216]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	4b35      	ldr	r3, [pc, #212]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 0203 	bic.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fb7c 	bl	8000da0 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fd fb78 	bl	8000da0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04d      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d90c      	bls.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 020f 	and.w	r2, r3, #15
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e030      	b.n	800375e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4918      	ldr	r1, [pc, #96]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4911      	ldr	r1, [pc, #68]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f81d 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 800373e:	4601      	mov	r1, r0
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	fa21 f303 	lsr.w	r3, r1, r3
 8003752:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003756:	2000      	movs	r0, #0
 8003758:	f006 f9d6 	bl	8009b08 <HAL_InitTick>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00
 800376c:	40023800 	.word	0x40023800
 8003770:	0800cbc0 	.word	0x0800cbc0
 8003774:	20000098 	.word	0x20000098

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	b08f      	sub	sp, #60	; 0x3c
 800377e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
 8003788:	2300      	movs	r3, #0
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003790:	4b62      	ldr	r3, [pc, #392]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b04      	cmp	r3, #4
 800379a:	d007      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x34>
 800379c:	2b08      	cmp	r3, #8
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f040 80b2 	bne.w	800390a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a6:	4b5e      	ldr	r3, [pc, #376]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80037aa:	e0b1      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ac:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037b0:	e0ae      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b2:	4b5a      	ldr	r3, [pc, #360]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037bc:	4b57      	ldr	r3, [pc, #348]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d04e      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c8:	4b54      	ldr	r3, [pc, #336]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	ea01 0103 	and.w	r1, r1, r3
 80037de:	ea02 0204 	and.w	r2, r2, r4
 80037e2:	460b      	mov	r3, r1
 80037e4:	4614      	mov	r4, r2
 80037e6:	0160      	lsls	r0, r4, #5
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24
 80037ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ec:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80037f0:	6278      	str	r0, [r7, #36]	; 0x24
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037fa:	1a5b      	subs	r3, r3, r1
 80037fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003800:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003804:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003808:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800380c:	ebb8 0803 	subs.w	r8, r8, r3
 8003810:	eb69 0904 	sbc.w	r9, r9, r4
 8003814:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800382c:	eb18 0801 	adds.w	r8, r8, r1
 8003830:	eb49 0902 	adc.w	r9, r9, r2
 8003834:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800384c:	4640      	mov	r0, r8
 800384e:	4649      	mov	r1, r9
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	f04f 0400 	mov.w	r4, #0
 8003856:	461a      	mov	r2, r3
 8003858:	4623      	mov	r3, r4
 800385a:	f7fd f8e3 	bl	8000a24 <__aeabi_uldivmod>
 800385e:	4603      	mov	r3, r0
 8003860:	460c      	mov	r4, r1
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
 8003864:	e043      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003866:	4b2d      	ldr	r3, [pc, #180]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	f04f 0400 	mov.w	r4, #0
 8003870:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	ea01 0103 	and.w	r1, r1, r3
 800387c:	ea02 0204 	and.w	r2, r2, r4
 8003880:	460b      	mov	r3, r1
 8003882:	4614      	mov	r4, r2
 8003884:	0160      	lsls	r0, r4, #5
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	015b      	lsls	r3, r3, #5
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003898:	1a5b      	subs	r3, r3, r1
 800389a:	eb64 0402 	sbc.w	r4, r4, r2
 800389e:	01a6      	lsls	r6, r4, #6
 80038a0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80038a4:	019d      	lsls	r5, r3, #6
 80038a6:	1aed      	subs	r5, r5, r3
 80038a8:	eb66 0604 	sbc.w	r6, r6, r4
 80038ac:	00f3      	lsls	r3, r6, #3
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	00eb      	lsls	r3, r5, #3
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	e897 0060 	ldmia.w	r7, {r5, r6}
 80038c0:	186d      	adds	r5, r5, r1
 80038c2:	eb46 0602 	adc.w	r6, r6, r2
 80038c6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80038ca:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80038ce:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80038d2:	4655      	mov	r5, sl
 80038d4:	465e      	mov	r6, fp
 80038d6:	4628      	mov	r0, r5
 80038d8:	4631      	mov	r1, r6
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	f04f 0400 	mov.w	r4, #0
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	f7fd f89e 	bl	8000a24 <__aeabi_uldivmod>
 80038e8:	4603      	mov	r3, r0
 80038ea:	460c      	mov	r4, r1
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	3301      	adds	r3, #1
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80038fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003908:	e002      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800390e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003912:	4618      	mov	r0, r3
 8003914:	373c      	adds	r7, #60	; 0x3c
 8003916:	46bd      	mov	sp, r7
 8003918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000098 	.word	0x20000098

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4601      	mov	r1, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4a03      	ldr	r2, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	0800cbd0 	.word	0x0800cbd0

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4601      	mov	r1, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4a03      	ldr	r2, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0800cbd0 	.word	0x0800cbd0

08003990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	220f      	movs	r2, #15
 800399e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCC_GetClockConfig+0x60>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d061      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a1c:	4ba3      	ldr	r3, [pc, #652]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a22:	f7fd f9bd 	bl	8000da0 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a2a:	f7fd f9b9 	bl	8000da0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e177      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a3c:	4b9c      	ldr	r3, [pc, #624]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a54:	4996      	ldr	r1, [pc, #600]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	019a      	lsls	r2, r3, #6
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a74:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	0f1b      	lsrs	r3, r3, #28
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003a82:	498b      	ldr	r1, [pc, #556]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	019a      	lsls	r2, r3, #6
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a9c:	4984      	ldr	r1, [pc, #528]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a9e:	4b84      	ldr	r3, [pc, #528]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	f023 021f 	bic.w	r2, r3, #31
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ab4:	4b7d      	ldr	r3, [pc, #500]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aba:	f7fd f971 	bl	8000da0 <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ac2:	f7fd f96d 	bl	8000da0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e12b      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d079      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af8:	4b6e      	ldr	r3, [pc, #440]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003afe:	f7fd f94f 	bl	8000da0 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b06:	f7fd f94b 	bl	8000da0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e109      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b18:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d0ef      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b32:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	0f1b      	lsrs	r3, r3, #28
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b40:	495b      	ldr	r1, [pc, #364]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	019a      	lsls	r2, r3, #6
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	071b      	lsls	r3, r3, #28
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b5a:	4955      	ldr	r1, [pc, #340]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b5c:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01e      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b80:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	0e1b      	lsrs	r3, r3, #24
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b8e:	4948      	ldr	r1, [pc, #288]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	019a      	lsls	r2, r3, #6
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	071b      	lsls	r3, r3, #28
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ba8:	4941      	ldr	r1, [pc, #260]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fd f8ec 	bl	8000da0 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bcc:	f7fd f8e8 	bl	8000da0 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0a6      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bea:	d1ef      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 808d 	beq.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c16:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c22:	f7fd f8bd 	bl	8000da0 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fd f8b9 	bl	8000da0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e077      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d039      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d032      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c7c:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d11e      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fd f887 	bl	8000da0 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	e014      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fd f883 	bl	8000da0 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d90b      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e03f      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003cac:	42470068 	.word	0x42470068
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	42470070 	.word	0x42470070
 8003cb8:	40007000 	.word	0x40007000
 8003cbc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0e4      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003cda:	4916      	ldr	r1, [pc, #88]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
 8003cf4:	e005      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003cf6:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	490c      	ldr	r1, [pc, #48]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	4313      	orrs	r3, r2
 8003d12:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d20:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d28:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	424711e0 	.word	0x424711e0

08003d3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e025      	b.n	8003d9c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f002 fde9 	bl	800693c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f001 fa1f 	bl	80051c0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	f001 fa8a 	bl	80052a6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d101      	bne.n	8003dc0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e018      	b.n	8003df2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fae7 	bl	80053a4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d104      	bne.n	8003de8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2205      	movs	r2, #5
 8003de2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003de6:	e003      	b.n	8003df0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d101      	bne.n	8003e14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
 8003e12:	e00e      	b.n	8003e32 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 fafa 	bl	800541c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e055      	b.n	8003ef8 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f004 fb64 	bl	8008534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6851      	ldr	r1, [r2, #4]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6912      	ldr	r2, [r2, #16]
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6952      	ldr	r2, [r2, #20]
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6992      	ldr	r2, [r2, #24]
 8003ea8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003eac:	4311      	orrs	r1, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	69d2      	ldr	r2, [r2, #28]
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6a12      	ldr	r2, [r2, #32]
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6992      	ldr	r2, [r2, #24]
 8003eca:	0c12      	lsrs	r2, r2, #16
 8003ecc:	f002 0104 	and.w	r1, r2, #4
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	69d2      	ldr	r2, [r2, #28]
 8003ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e01a      	b.n	8003f48 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f004 fb4a 	bl	80085c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_SPI_Transmit+0x22>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e11c      	b.n	80041ac <HAL_SPI_Transmit+0x25c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f7a:	f7fc ff11 	bl	8000da0 <HAL_GetTick>
 8003f7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f94:	e101      	b.n	800419a <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_Transmit+0x52>
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa6:	e0f8      	b.n	800419a <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2203      	movs	r2, #3
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fee:	d107      	bne.n	8004000 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d007      	beq.n	800401e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	d14b      	bne.n	80040c0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Transmit+0xe6>
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d13e      	bne.n	80040b4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800403e:	8812      	ldrh	r2, [r2, #0]
 8004040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800405a:	e02b      	b.n	80040b4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d112      	bne.n	8004090 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	86da      	strh	r2, [r3, #54]	; 0x36
 800408e:	e011      	b.n	80040b4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004090:	f7fc fe86 	bl	8000da0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d303      	bcc.n	80040a8 <HAL_SPI_Transmit+0x158>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a6:	d102      	bne.n	80040ae <HAL_SPI_Transmit+0x15e>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040b2:	e072      	b.n	800419a <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ce      	bne.n	800405c <HAL_SPI_Transmit+0x10c>
 80040be:	e04c      	b.n	800415a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_SPI_Transmit+0x17e>
 80040c8:	8afb      	ldrh	r3, [r7, #22]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d140      	bne.n	8004150 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040f4:	e02c      	b.n	8004150 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d113      	bne.n	800412c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	86da      	strh	r2, [r3, #54]	; 0x36
 800412a:	e011      	b.n	8004150 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800412c:	f7fc fe38 	bl	8000da0 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	1ad2      	subs	r2, r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d303      	bcc.n	8004144 <HAL_SPI_Transmit+0x1f4>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004142:	d102      	bne.n	800414a <HAL_SPI_Transmit+0x1fa>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800414e:	e024      	b.n	800419a <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cd      	bne.n	80040f6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fb7b 	bl	800485a <SPI_EndRxTxTransaction>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d0:	d112      	bne.n	80041f8 <HAL_SPI_Receive+0x44>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10e      	bne.n	80041f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2204      	movs	r2, #4
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f8e6 	bl	80043c0 <HAL_SPI_TransmitReceive>
 80041f4:	4603      	mov	r3, r0
 80041f6:	e0df      	b.n	80043b8 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_SPI_Receive+0x52>
 8004202:	2302      	movs	r3, #2
 8004204:	e0d8      	b.n	80043b8 <HAL_SPI_Receive+0x204>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800420e:	f7fc fdc7 	bl	8000da0 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d002      	beq.n	8004226 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004224:	e0bf      	b.n	80043a6 <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Receive+0x7e>
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004236:	e0b6      	b.n	80043a6 <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2204      	movs	r2, #4
 800423c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427e:	d107      	bne.n	8004290 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800428e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d007      	beq.n	80042ae <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d161      	bne.n	800437a <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042b6:	e02d      	b.n	8004314 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d114      	bne.n	80042f0 <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	320c      	adds	r2, #12
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042ee:	e011      	b.n	8004314 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f0:	f7fc fd56 	bl	8000da0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad2      	subs	r2, r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d303      	bcc.n	8004308 <HAL_SPI_Receive+0x154>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004306:	d102      	bne.n	800430e <HAL_SPI_Receive+0x15a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004312:	e048      	b.n	80043a6 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1cc      	bne.n	80042b8 <HAL_SPI_Receive+0x104>
 800431e:	e031      	b.n	8004384 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d113      	bne.n	8004356 <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	68d2      	ldr	r2, [r2, #12]
 8004338:	b292      	uxth	r2, r2
 800433a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004354:	e011      	b.n	800437a <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004356:	f7fc fd23 	bl	8000da0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d303      	bcc.n	800436e <HAL_SPI_Receive+0x1ba>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800436c:	d102      	bne.n	8004374 <HAL_SPI_Receive+0x1c0>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004378:	e015      	b.n	80043a6 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1cd      	bne.n	8004320 <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fa31 	bl	80047f0 <SPI_EndRxTransaction>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	; 0x30
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043ce:	2301      	movs	r3, #1
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x26>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e188      	b.n	80046f8 <HAL_SPI_TransmitReceive+0x338>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ee:	f7fc fcd7 	bl	8000da0 <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800440c:	2b01      	cmp	r3, #1
 800440e:	d00f      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x70>
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004416:	d107      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x68>
 8004420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004424:	2b04      	cmp	r3, #4
 8004426:	d003      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800442e:	e159      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x82>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x82>
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004448:	e14c      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b04      	cmp	r3, #4
 8004454:	d003      	beq.n	800445e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	887a      	ldrh	r2, [r7, #2]
 8004486:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d007      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ba:	d178      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x10a>
 80044c4:	8b7b      	ldrh	r3, [r7, #26]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d166      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044d2:	8812      	ldrh	r2, [r2, #0]
 80044d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ee:	e053      	b.n	8004598 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d11b      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x176>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d016      	beq.n	8004536 <HAL_SPI_TransmitReceive+0x176>
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d113      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004516:	8812      	ldrh	r2, [r2, #0]
 8004518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	1c9a      	adds	r2, r3, #2
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d119      	bne.n	8004578 <HAL_SPI_TransmitReceive+0x1b8>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d014      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	68d2      	ldr	r2, [r2, #12]
 8004558:	b292      	uxth	r2, r2
 800455a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	1c9a      	adds	r2, r3, #2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004578:	f7fc fc12 	bl	8000da0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	429a      	cmp	r2, r3
 8004586:	d307      	bcc.n	8004598 <HAL_SPI_TransmitReceive+0x1d8>
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458e:	d003      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004596:	e0a5      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1a6      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x130>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1a1      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x130>
 80045ac:	e07c      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_TransmitReceive+0x1fc>
 80045b6:	8b7b      	ldrh	r3, [r7, #26]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d16b      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045c6:	7812      	ldrb	r2, [r2, #0]
 80045c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045e2:	e057      	b.n	8004694 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d11c      	bne.n	800462c <HAL_SPI_TransmitReceive+0x26c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d017      	beq.n	800462c <HAL_SPI_TransmitReceive+0x26c>
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d114      	bne.n	800462c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d119      	bne.n	800466e <HAL_SPI_TransmitReceive+0x2ae>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d014      	beq.n	800466e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	68d2      	ldr	r2, [r2, #12]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800466a:	2301      	movs	r3, #1
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800466e:	f7fc fb97 	bl	8000da0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	1ad2      	subs	r2, r2, r3
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	429a      	cmp	r2, r3
 800467c:	d303      	bcc.n	8004686 <HAL_SPI_TransmitReceive+0x2c6>
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004684:	d102      	bne.n	800468c <HAL_SPI_TransmitReceive+0x2cc>
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004692:	e027      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1a2      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x224>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d19d      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f8d4 	bl	800485a <SPI_EndRxTxTransaction>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046c4:	e00e      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3730      	adds	r7, #48	; 0x30
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470e:	b2db      	uxtb	r3, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472c:	e04c      	b.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004734:	d048      	beq.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004736:	f7fc fb33 	bl	8000da0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d202      	bcs.n	800474c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d13d      	bne.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	6852      	ldr	r2, [r2, #4]
 8004756:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800475a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004764:	d111      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	d004      	beq.n	800477a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004778:	d107      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004792:	d10f      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e00f      	b.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	401a      	ands	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d1a3      	bne.n	800472e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004804:	d111      	bne.n	800482a <SPI_EndRxTransaction+0x3a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d004      	beq.n	800481a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d107      	bne.n	800482a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004828:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2200      	movs	r2, #0
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff ff71 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	f043 0220 	orr.w	r2, r3, #32
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e000      	b.n	8004852 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af02      	add	r7, sp, #8
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2200      	movs	r2, #0
 800486e:	2180      	movs	r1, #128	; 0x80
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff ff53 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e000      	b.n	800488e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e01d      	b.n	80048e4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f815 	bl	80048ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f000 f967 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b06      	cmp	r3, #6
 8004928:	d007      	beq.n	800493a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d122      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b02      	cmp	r3, #2
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0202 	mvn.w	r2, #2
 8004974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8ee 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8e0 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8f1 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0204 	mvn.w	r2, #4
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8c4 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8b6 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8c7 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0208 	mvn.w	r2, #8
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2204      	movs	r2, #4
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f89a 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f88c 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f89d 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0210 	mvn.w	r2, #16
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2208      	movs	r2, #8
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f870 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f862 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f873 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0201 	mvn.w	r2, #1
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f003 fce4 	bl	8008494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f902 	bl	8004cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d10e      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f838 	bl	8004b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d10e      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d107      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0220 	mvn.w	r2, #32
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8cc 	bl	8004ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <TIM_Base_SetConfig+0x118>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <TIM_Base_SetConfig+0x11c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d027      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <TIM_Base_SetConfig+0x118>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d023      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <TIM_Base_SetConfig+0x11c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <TIM_Base_SetConfig+0x128>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <TIM_Base_SetConfig+0x12c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <TIM_Base_SetConfig+0x130>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <TIM_Base_SetConfig+0x134>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <TIM_Base_SetConfig+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <TIM_Base_SetConfig+0x13c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0xf8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d103      	bne.n	8004ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	615a      	str	r2, [r3, #20]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	40001800 	.word	0x40001800
 8004ce0:	40001c00 	.word	0x40001c00
 8004ce4:	40002000 	.word	0x40002000

08004ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e03f      	b.n	8004da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f005 fa48 	bl	800a1cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	; 0x24
 8004d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	68d2      	ldr	r2, [r2, #12]
 8004d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f829 	bl	8004dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6912      	ldr	r2, [r2, #16]
 8004d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	6952      	ldr	r2, [r2, #20]
 8004d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	6912      	ldr	r2, [r2, #16]
 8004dbe:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68d2      	ldr	r2, [r2, #12]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004df0:	f023 030c 	bic.w	r3, r3, #12
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	430b      	orrs	r3, r1
 8004df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6952      	ldr	r2, [r2, #20]
 8004e04:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6992      	ldr	r2, [r2, #24]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	f040 80e4 	bne.w	8004fe4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4aab      	ldr	r2, [pc, #684]	; (80050d0 <UART_SetConfig+0x324>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <UART_SetConfig+0x84>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4aaa      	ldr	r2, [pc, #680]	; (80050d4 <UART_SetConfig+0x328>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d16c      	bne.n	8004f0a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681c      	ldr	r4, [r3, #0]
 8004e34:	f7fe fd98 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009a      	lsls	r2, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	4aa2      	ldr	r2, [pc, #648]	; (80050d8 <UART_SetConfig+0x32c>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	011d      	lsls	r5, r3, #4
 8004e58:	f7fe fd86 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009a      	lsls	r2, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e72:	f7fe fd79 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004e76:	4602      	mov	r2, r0
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009a      	lsls	r2, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	4a92      	ldr	r2, [pc, #584]	; (80050d8 <UART_SetConfig+0x32c>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	2264      	movs	r2, #100	; 0x64
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	1af3      	subs	r3, r6, r3
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	3332      	adds	r3, #50	; 0x32
 8004ea0:	4a8d      	ldr	r2, [pc, #564]	; (80050d8 <UART_SetConfig+0x32c>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eae:	441d      	add	r5, r3
 8004eb0:	f7fe fd5a 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009a      	lsls	r2, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eca:	f7fe fd4d 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4a7c      	ldr	r2, [pc, #496]	; (80050d8 <UART_SetConfig+0x32c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2264      	movs	r2, #100	; 0x64
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	1af3      	subs	r3, r6, r3
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	3332      	adds	r3, #50	; 0x32
 8004ef8:	4a77      	ldr	r2, [pc, #476]	; (80050d8 <UART_SetConfig+0x32c>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	442b      	add	r3, r5
 8004f06:	60a3      	str	r3, [r4, #8]
 8004f08:	e154      	b.n	80051b4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681c      	ldr	r4, [r3, #0]
 8004f0e:	f7fe fd17 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009a      	lsls	r2, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	4a6b      	ldr	r2, [pc, #428]	; (80050d8 <UART_SetConfig+0x32c>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	011d      	lsls	r5, r3, #4
 8004f32:	f7fe fd05 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009a      	lsls	r2, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f4c:	f7fe fcf8 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009a      	lsls	r2, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f66:	4a5c      	ldr	r2, [pc, #368]	; (80050d8 <UART_SetConfig+0x32c>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2264      	movs	r2, #100	; 0x64
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	1af3      	subs	r3, r6, r3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3332      	adds	r3, #50	; 0x32
 8004f7a:	4a57      	ldr	r2, [pc, #348]	; (80050d8 <UART_SetConfig+0x32c>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f88:	441d      	add	r5, r3
 8004f8a:	f7fe fcd9 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009a      	lsls	r2, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fa4:	f7fe fccc 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009a      	lsls	r2, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	4a46      	ldr	r2, [pc, #280]	; (80050d8 <UART_SetConfig+0x32c>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	2264      	movs	r2, #100	; 0x64
 8004fc8:	fb02 f303 	mul.w	r3, r2, r3
 8004fcc:	1af3      	subs	r3, r6, r3
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	3332      	adds	r3, #50	; 0x32
 8004fd2:	4a41      	ldr	r2, [pc, #260]	; (80050d8 <UART_SetConfig+0x32c>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	442b      	add	r3, r5
 8004fe0:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004fe2:	e0e7      	b.n	80051b4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a39      	ldr	r2, [pc, #228]	; (80050d0 <UART_SetConfig+0x324>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <UART_SetConfig+0x24c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a38      	ldr	r2, [pc, #224]	; (80050d4 <UART_SetConfig+0x328>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d171      	bne.n	80050dc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681c      	ldr	r4, [r3, #0]
 8004ffc:	f7fe fcb4 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8005000:	4602      	mov	r2, r0
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009a      	lsls	r2, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	4a30      	ldr	r2, [pc, #192]	; (80050d8 <UART_SetConfig+0x32c>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	011d      	lsls	r5, r3, #4
 8005020:	f7fe fca2 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8005024:	4602      	mov	r2, r0
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009a      	lsls	r2, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	fbb2 f6f3 	udiv	r6, r2, r3
 800503a:	f7fe fc95 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 800503e:	4602      	mov	r2, r0
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009a      	lsls	r2, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <UART_SetConfig+0x32c>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2264      	movs	r2, #100	; 0x64
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	1af3      	subs	r3, r6, r3
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	3332      	adds	r3, #50	; 0x32
 8005068:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <UART_SetConfig+0x32c>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005074:	441d      	add	r5, r3
 8005076:	f7fe fc77 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 800507a:	4602      	mov	r2, r0
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009a      	lsls	r2, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005090:	f7fe fc6a 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8005094:	4602      	mov	r2, r0
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <UART_SetConfig+0x32c>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2264      	movs	r2, #100	; 0x64
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	1af3      	subs	r3, r6, r3
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	3332      	adds	r3, #50	; 0x32
 80050be:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <UART_SetConfig+0x32c>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	442b      	add	r3, r5
 80050cc:	60a3      	str	r3, [r4, #8]
 80050ce:	e071      	b.n	80051b4 <UART_SetConfig+0x408>
 80050d0:	40011000 	.word	0x40011000
 80050d4:	40011400 	.word	0x40011400
 80050d8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681c      	ldr	r4, [r3, #0]
 80050e0:	f7fe fc2e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009a      	lsls	r2, r3, #2
 80050ee:	441a      	add	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	4a30      	ldr	r2, [pc, #192]	; (80051bc <UART_SetConfig+0x410>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	011d      	lsls	r5, r3, #4
 8005104:	f7fe fc1c 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005108:	4602      	mov	r2, r0
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009a      	lsls	r2, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	fbb2 f6f3 	udiv	r6, r2, r3
 800511e:	f7fe fc0f 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005122:	4602      	mov	r2, r0
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009a      	lsls	r2, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <UART_SetConfig+0x410>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2264      	movs	r2, #100	; 0x64
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	1af3      	subs	r3, r6, r3
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	3332      	adds	r3, #50	; 0x32
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <UART_SetConfig+0x410>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005158:	441d      	add	r5, r3
 800515a:	f7fe fbf1 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 800515e:	4602      	mov	r2, r0
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009a      	lsls	r2, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	fbb2 f6f3 	udiv	r6, r2, r3
 8005174:	f7fe fbe4 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005178:	4602      	mov	r2, r0
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <UART_SetConfig+0x410>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	2264      	movs	r2, #100	; 0x64
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	1af3      	subs	r3, r6, r3
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	3332      	adds	r3, #50	; 0x32
 80051a2:	4a06      	ldr	r2, [pc, #24]	; (80051bc <UART_SetConfig+0x410>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	442b      	add	r3, r5
 80051b0:	60a3      	str	r3, [r4, #8]
}
 80051b2:	e7ff      	b.n	80051b4 <UART_SetConfig+0x408>
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051bc:	51eb851f 	.word	0x51eb851f

080051c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d029      	beq.n	800522e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051ea:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051f4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80051fa:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005200:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005206:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800520c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005212:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005218:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800521e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e034      	b.n	8005298 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800523a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005244:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800524a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800525e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005262:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800526c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005272:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005278:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800527e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005284:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d02e      	beq.n	800531e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052cc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	3b01      	subs	r3, #1
 80052da:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052dc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80052e6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052f0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052fa:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	3b01      	subs	r3, #1
 8005302:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005304:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	3b01      	subs	r3, #1
 800530c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800530e:	4313      	orrs	r3, r2
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e03b      	b.n	8005396 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800532e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	3b01      	subs	r3, #1
 8005336:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	3b01      	subs	r3, #1
 800533e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005340:	4313      	orrs	r3, r2
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005354:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	3b01      	subs	r3, #1
 8005362:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005364:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	3b01      	subs	r3, #1
 800536c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800536e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005378:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	3b01      	subs	r3, #1
 8005380:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005382:	4313      	orrs	r3, r2
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053c0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80053ca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80053dc:	f7fb fce0 	bl	8000da0 <HAL_GetTick>
 80053e0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80053e2:	e010      	b.n	8005406 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ea:	d00c      	beq.n	8005406 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <FMC_SDRAM_SendCommand+0x5e>
 80053f2:	f7fb fcd5 	bl	8000da0 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d901      	bls.n	8005406 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e006      	b.n	8005414 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d0e8      	beq.n	80053e4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	4603      	mov	r3, r0
 800544a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005454:	2b84      	cmp	r3, #132	; 0x84
 8005456:	d005      	beq.n	8005464 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005458:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	3303      	adds	r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005464:	68fb      	ldr	r3, [r7, #12]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005476:	f000 fe29 	bl	80060cc <vTaskStartScheduler>
  
  return osOK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}

08005480 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005482:	b087      	sub	sp, #28
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685c      	ldr	r4, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005496:	b29e      	uxth	r6, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ffcf 	bl	8005442 <makeFreeRtosPriority>
 80054a4:	4602      	mov	r2, r0
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	9200      	str	r2, [sp, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	4632      	mov	r2, r6
 80054b2:	4629      	mov	r1, r5
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fcab 	bl	8005e10 <xTaskCreate>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80054c4:	68fb      	ldr	r3, [r7, #12]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <osDelay+0x16>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	e000      	b.n	80054e6 <osDelay+0x18>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fdbc 	bl	8006064 <vTaskDelay>
  
  return osOK;
 80054ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f103 0208 	add.w	r2, r3, #8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800550e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0208 	add.w	r2, r3, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f103 0208 	add.w	r2, r3, #8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ae:	d103      	bne.n	80055b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e00c      	b.n	80055d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3308      	adds	r3, #8
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e002      	b.n	80055c6 <vListInsert+0x2e>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d9f6      	bls.n	80055c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	601a      	str	r2, [r3, #0]
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6892      	ldr	r2, [r2, #8]
 8005620:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6852      	ldr	r2, [r2, #4]
 800562a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d103      	bne.n	800563e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b04      	subs	r3, #4
 8005670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3b04      	subs	r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3b04      	subs	r3, #4
 800568e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005690:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <pxPortInitialiseStack+0x64>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b14      	subs	r3, #20
 800569a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3b04      	subs	r3, #4
 80056a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f06f 0202 	mvn.w	r2, #2
 80056ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b20      	subs	r3, #32
 80056b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056b6:	68fb      	ldr	r3, [r7, #12]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	080056c9 	.word	0x080056c9

080056c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056d2:	4b11      	ldr	r3, [pc, #68]	; (8005718 <prvTaskExitError+0x50>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056da:	d009      	beq.n	80056f0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e7fe      	b.n	80056ee <prvTaskExitError+0x26>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005702:	bf00      	nop
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0fc      	beq.n	8005704 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000004 	.word	0x20000004
 800571c:	00000000 	.word	0x00000000

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	20003cd8 	.word	0x20003cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	; (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b44      	ldr	r3, [pc, #272]	; (8005888 <xPortStartScheduler+0x118>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a44      	ldr	r2, [pc, #272]	; (800588c <xPortStartScheduler+0x11c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d109      	bne.n	8005794 <xPortStartScheduler+0x24>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e7fe      	b.n	8005792 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005794:	4b3c      	ldr	r3, [pc, #240]	; (8005888 <xPortStartScheduler+0x118>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a3d      	ldr	r2, [pc, #244]	; (8005890 <xPortStartScheduler+0x120>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d109      	bne.n	80057b2 <xPortStartScheduler+0x42>
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e7fe      	b.n	80057b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057b2:	4b38      	ldr	r3, [pc, #224]	; (8005894 <xPortStartScheduler+0x124>)
 80057b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	22ff      	movs	r2, #255	; 0xff
 80057c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	4b30      	ldr	r3, [pc, #192]	; (8005898 <xPortStartScheduler+0x128>)
 80057d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057da:	4b30      	ldr	r3, [pc, #192]	; (800589c <xPortStartScheduler+0x12c>)
 80057dc:	2207      	movs	r2, #7
 80057de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e0:	e009      	b.n	80057f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80057e2:	4b2e      	ldr	r3, [pc, #184]	; (800589c <xPortStartScheduler+0x12c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	4a2c      	ldr	r2, [pc, #176]	; (800589c <xPortStartScheduler+0x12c>)
 80057ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d0ef      	beq.n	80057e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <xPortStartScheduler+0x12c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1c3 0307 	rsb	r3, r3, #7
 800580a:	2b04      	cmp	r3, #4
 800580c:	d009      	beq.n	8005822 <xPortStartScheduler+0xb2>
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	e7fe      	b.n	8005820 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005822:	4b1e      	ldr	r3, [pc, #120]	; (800589c <xPortStartScheduler+0x12c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	4a1c      	ldr	r2, [pc, #112]	; (800589c <xPortStartScheduler+0x12c>)
 800582a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <xPortStartScheduler+0x12c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <xPortStartScheduler+0x12c>)
 8005836:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005840:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <xPortStartScheduler+0x130>)
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <xPortStartScheduler+0x130>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800584a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <xPortStartScheduler+0x130>)
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <xPortStartScheduler+0x130>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005856:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005858:	f000 f8d6 	bl	8005a08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <xPortStartScheduler+0x134>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005862:	f000 f8f5 	bl	8005a50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005866:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <xPortStartScheduler+0x138>)
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <xPortStartScheduler+0x138>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005870:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005872:	f7ff ff69 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005876:	f000 fdd5 	bl	8006424 <vTaskSwitchContext>
	prvTaskExitError();
 800587a:	f7ff ff25 	bl	80056c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000ed00 	.word	0xe000ed00
 800588c:	410fc271 	.word	0x410fc271
 8005890:	410fc270 	.word	0x410fc270
 8005894:	e000e400 	.word	0xe000e400
 8005898:	200000b8 	.word	0x200000b8
 800589c:	200000bc 	.word	0x200000bc
 80058a0:	e000ed20 	.word	0xe000ed20
 80058a4:	20000004 	.word	0x20000004
 80058a8:	e000ef34 	.word	0xe000ef34

080058ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <vPortEnterCritical+0x54>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <vPortEnterCritical+0x54>)
 80058cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <vPortEnterCritical+0x54>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10e      	bne.n	80058f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <vPortEnterCritical+0x58>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <vPortEnterCritical+0x48>
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	e7fe      	b.n	80058f2 <vPortEnterCritical+0x46>
	}
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000004 	.word	0x20000004
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <vPortExitCritical+0x4c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <vPortExitCritical+0x22>
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	e7fe      	b.n	8005928 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800592a:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <vPortExitCritical+0x4c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3b01      	subs	r3, #1
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <vPortExitCritical+0x4c>)
 8005932:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <vPortExitCritical+0x4c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <vPortExitCritical+0x3e>
 800593c:	2300      	movs	r3, #0
 800593e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000004 	.word	0x20000004
	...

08005960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005960:	f3ef 8009 	mrs	r0, PSP
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <pxCurrentTCBConst>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	f01e 0f10 	tst.w	lr, #16
 8005970:	bf08      	it	eq
 8005972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	6010      	str	r0, [r2, #0]
 800597c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005984:	f380 8811 	msr	BASEPRI, r0
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f000 fd48 	bl	8006424 <vTaskSwitchContext>
 8005994:	f04f 0000 	mov.w	r0, #0
 8005998:	f380 8811 	msr	BASEPRI, r0
 800599c:	bc09      	pop	{r0, r3}
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	6808      	ldr	r0, [r1, #0]
 80059a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a6:	f01e 0f10 	tst.w	lr, #16
 80059aa:	bf08      	it	eq
 80059ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059b0:	f380 8809 	msr	PSP, r0
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	f3af 8000 	nop.w

080059c0 <pxCurrentTCBConst>:
 80059c0:	20003cd8 	.word	0x20003cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop

080059c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059e0:	f000 fc64 	bl	80062ac <xTaskIncrementTick>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <SysTick_Handler+0x3c>)
 80059ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <vPortSetupTimerInterrupt+0x34>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <vPortSetupTimerInterrupt+0x38>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a18:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <vPortSetupTimerInterrupt+0x3c>)
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <vPortSetupTimerInterrupt+0x40>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	490b      	ldr	r1, [pc, #44]	; (8005a4c <vPortSetupTimerInterrupt+0x44>)
 8005a20:	fba1 1303 	umull	r1, r3, r1, r3
 8005a24:	099b      	lsrs	r3, r3, #6
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <vPortSetupTimerInterrupt+0x34>)
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	601a      	str	r2, [r3, #0]
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000e010 	.word	0xe000e010
 8005a40:	e000e018 	.word	0xe000e018
 8005a44:	e000e014 	.word	0xe000e014
 8005a48:	20000098 	.word	0x20000098
 8005a4c:	10624dd3 	.word	0x10624dd3

08005a50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a60 <vPortEnableVFP+0x10>
 8005a54:	6801      	ldr	r1, [r0, #0]
 8005a56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a5a:	6001      	str	r1, [r0, #0]
 8005a5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a5e:	bf00      	nop
 8005a60:	e000ed88 	.word	0xe000ed88

08005a64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a70:	f000 fb72 	bl	8006158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a74:	4b57      	ldr	r3, [pc, #348]	; (8005bd4 <pvPortMalloc+0x170>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a7c:	f000 f90c 	bl	8005c98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a80:	4b55      	ldr	r3, [pc, #340]	; (8005bd8 <pvPortMalloc+0x174>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 808c 	bne.w	8005ba6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01c      	beq.n	8005ace <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a94:	2208      	movs	r2, #8
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d013      	beq.n	8005ace <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f023 0307 	bic.w	r3, r3, #7
 8005aac:	3308      	adds	r3, #8
 8005aae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <pvPortMalloc+0x6a>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e7fe      	b.n	8005acc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d068      	beq.n	8005ba6 <pvPortMalloc+0x142>
 8005ad4:	4b41      	ldr	r3, [pc, #260]	; (8005bdc <pvPortMalloc+0x178>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d863      	bhi.n	8005ba6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ade:	4b40      	ldr	r3, [pc, #256]	; (8005be0 <pvPortMalloc+0x17c>)
 8005ae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <pvPortMalloc+0x17c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae8:	e004      	b.n	8005af4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d203      	bcs.n	8005b06 <pvPortMalloc+0xa2>
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f1      	bne.n	8005aea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b06:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <pvPortMalloc+0x170>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d04a      	beq.n	8005ba6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2208      	movs	r2, #8
 8005b16:	4413      	add	r3, r2
 8005b18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d91e      	bls.n	8005b70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <pvPortMalloc+0xf4>
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	e7fe      	b.n	8005b56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b6a:	69b8      	ldr	r0, [r7, #24]
 8005b6c:	f000 f8f6 	bl	8005d5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b70:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <pvPortMalloc+0x178>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <pvPortMalloc+0x178>)
 8005b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b7e:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <pvPortMalloc+0x178>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <pvPortMalloc+0x180>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d203      	bcs.n	8005b92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b8a:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <pvPortMalloc+0x178>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <pvPortMalloc+0x180>)
 8005b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <pvPortMalloc+0x174>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ba6:	f000 fae5 	bl	8006174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <pvPortMalloc+0x164>
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e7fe      	b.n	8005bc6 <pvPortMalloc+0x162>
	return pvReturn;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20003cc8 	.word	0x20003cc8
 8005bd8:	20003cd4 	.word	0x20003cd4
 8005bdc:	20003ccc 	.word	0x20003ccc
 8005be0:	20003cc0 	.word	0x20003cc0
 8005be4:	20003cd0 	.word	0x20003cd0

08005be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d046      	beq.n	8005c88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <vPortFree+0xa8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <vPortFree+0x42>
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e7fe      	b.n	8005c28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <vPortFree+0x5e>
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	e7fe      	b.n	8005c44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <vPortFree+0xa8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d019      	beq.n	8005c88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d115      	bne.n	8005c88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <vPortFree+0xa8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	401a      	ands	r2, r3
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c6c:	f000 fa74 	bl	8006158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <vPortFree+0xac>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4a06      	ldr	r2, [pc, #24]	; (8005c94 <vPortFree+0xac>)
 8005c7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c7e:	6938      	ldr	r0, [r7, #16]
 8005c80:	f000 f86c 	bl	8005d5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c84:	f000 fa76 	bl	8006174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20003cd4 	.word	0x20003cd4
 8005c94:	20003ccc 	.word	0x20003ccc

08005c98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ca4:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <prvHeapInit+0xac>)
 8005ca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3307      	adds	r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <prvHeapInit+0xac>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	; (8005d48 <prvHeapInit+0xb0>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <prvHeapInit+0xb0>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <prvHeapInit+0xb4>)
 8005cf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <prvHeapInit+0xb4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <prvHeapInit+0xb4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	1ad2      	subs	r2, r2, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <prvHeapInit+0xb4>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <prvHeapInit+0xb8>)
 8005d26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4a09      	ldr	r2, [pc, #36]	; (8005d54 <prvHeapInit+0xbc>)
 8005d2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <prvHeapInit+0xc0>)
 8005d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d36:	601a      	str	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	200000c0 	.word	0x200000c0
 8005d48:	20003cc0 	.word	0x20003cc0
 8005d4c:	20003cc8 	.word	0x20003cc8
 8005d50:	20003cd0 	.word	0x20003cd0
 8005d54:	20003ccc 	.word	0x20003ccc
 8005d58:	20003cd4 	.word	0x20003cd4

08005d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d64:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <prvInsertBlockIntoFreeList+0xac>)
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e002      	b.n	8005d70 <prvInsertBlockIntoFreeList+0x14>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d3f7      	bcc.n	8005d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d108      	bne.n	8005d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d118      	bne.n	8005de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <prvInsertBlockIntoFreeList+0xb0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d00d      	beq.n	8005dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e008      	b.n	8005dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <prvInsertBlockIntoFreeList+0xb0>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	e003      	b.n	8005dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d002      	beq.n	8005dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20003cc0 	.word	0x20003cc0
 8005e0c:	20003cc8 	.word	0x20003cc8

08005e10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	; 0x30
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fe1d 	bl	8005a64 <pvPortMalloc>
 8005e2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e32:	2054      	movs	r0, #84	; 0x54
 8005e34:	f7ff fe16 	bl	8005a64 <pvPortMalloc>
 8005e38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
 8005e46:	e005      	b.n	8005e54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e48:	6978      	ldr	r0, [r7, #20]
 8005e4a:	f7ff fecd 	bl	8005be8 <vPortFree>
 8005e4e:	e001      	b.n	8005e54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e5a:	88fa      	ldrh	r2, [r7, #6]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9303      	str	r3, [sp, #12]
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f80e 	bl	8005e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e76:	69f8      	ldr	r0, [r7, #28]
 8005e78:	f000 f88a 	bl	8005f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e002      	b.n	8005e88 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e88:	69bb      	ldr	r3, [r7, #24]
	}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b088      	sub	sp, #32
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f023 0307 	bic.w	r3, r3, #7
 8005eb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <prvInitialiseNewTask+0x46>
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e7fe      	b.n	8005ed6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e012      	b.n	8005f04 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	7819      	ldrb	r1, [r3, #0]
 8005ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	3334      	adds	r3, #52	; 0x34
 8005eee:	460a      	mov	r2, r1
 8005ef0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d006      	beq.n	8005f0c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d9e9      	bls.n	8005ede <prvInitialiseNewTask+0x4c>
 8005f0a:	e000      	b.n	8005f0e <prvInitialiseNewTask+0x7c>
		{
			break;
 8005f0c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	2b06      	cmp	r3, #6
 8005f1a:	d901      	bls.n	8005f20 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f1c:	2306      	movs	r3, #6
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	2200      	movs	r2, #0
 8005f30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fafd 	bl	8005536 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	3318      	adds	r3, #24
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff faf8 	bl	8005536 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	f1c3 0207 	rsb	r2, r3, #7
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2200      	movs	r2, #0
 8005f60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	68f9      	ldr	r1, [r7, #12]
 8005f6e:	69b8      	ldr	r0, [r7, #24]
 8005f70:	f7ff fb76 	bl	8005660 <pxPortInitialiseStack>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f86:	bf00      	nop
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f98:	f7ff fc88 	bl	80058ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f9c:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <prvAddNewTaskToReadyList+0xb8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4a29      	ldr	r2, [pc, #164]	; (8006048 <prvAddNewTaskToReadyList+0xb8>)
 8005fa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fa6:	4b29      	ldr	r3, [pc, #164]	; (800604c <prvAddNewTaskToReadyList+0xbc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fae:	4a27      	ldr	r2, [pc, #156]	; (800604c <prvAddNewTaskToReadyList+0xbc>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fb4:	4b24      	ldr	r3, [pc, #144]	; (8006048 <prvAddNewTaskToReadyList+0xb8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d110      	bne.n	8005fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fbc:	f000 faa4 	bl	8006508 <prvInitialiseTaskLists>
 8005fc0:	e00d      	b.n	8005fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <prvAddNewTaskToReadyList+0xc0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <prvAddNewTaskToReadyList+0xbc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d802      	bhi.n	8005fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	; (800604c <prvAddNewTaskToReadyList+0xbc>)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <prvAddNewTaskToReadyList+0xc4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	; (8006054 <prvAddNewTaskToReadyList+0xc4>)
 8005fe6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	4b19      	ldr	r3, [pc, #100]	; (8006058 <prvAddNewTaskToReadyList+0xc8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4a15      	ldr	r2, [pc, #84]	; (800605c <prvAddNewTaskToReadyList+0xcc>)
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7ff fa9d 	bl	8005550 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006016:	f7ff fc77 	bl	8005908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <prvAddNewTaskToReadyList+0xc0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <prvAddNewTaskToReadyList+0xbc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	429a      	cmp	r2, r3
 800602e:	d207      	bcs.n	8006040 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <prvAddNewTaskToReadyList+0xd0>)
 8006032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20003dd8 	.word	0x20003dd8
 800604c:	20003cd8 	.word	0x20003cd8
 8006050:	20003de4 	.word	0x20003de4
 8006054:	20003df4 	.word	0x20003df4
 8006058:	20003de0 	.word	0x20003de0
 800605c:	20003cdc 	.word	0x20003cdc
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <vTaskDelay+0x60>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <vTaskDelay+0x2e>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	e7fe      	b.n	8006090 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006092:	f000 f861 	bl	8006158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006096:	2100      	movs	r1, #0
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fad7 	bl	800664c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800609e:	f000 f869 	bl	8006174 <xTaskResumeAll>
 80060a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d107      	bne.n	80060ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <vTaskDelay+0x64>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20003e00 	.word	0x20003e00
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <vTaskStartScheduler+0x74>)
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2300      	movs	r3, #0
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	4919      	ldr	r1, [pc, #100]	; (8006144 <vTaskStartScheduler+0x78>)
 80060e0:	4819      	ldr	r0, [pc, #100]	; (8006148 <vTaskStartScheduler+0x7c>)
 80060e2:	f7ff fe95 	bl	8005e10 <xTaskCreate>
 80060e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d115      	bne.n	800611a <vTaskStartScheduler+0x4e>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <vTaskStartScheduler+0x80>)
 8006102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006108:	4b11      	ldr	r3, [pc, #68]	; (8006150 <vTaskStartScheduler+0x84>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <vTaskStartScheduler+0x88>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006114:	f7ff fb2c 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006118:	e00d      	b.n	8006136 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006120:	d109      	bne.n	8006136 <vTaskStartScheduler+0x6a>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	e7fe      	b.n	8006134 <vTaskStartScheduler+0x68>
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20003dfc 	.word	0x20003dfc
 8006144:	0800a3ec 	.word	0x0800a3ec
 8006148:	080064d9 	.word	0x080064d9
 800614c:	20003df8 	.word	0x20003df8
 8006150:	20003de4 	.word	0x20003de4
 8006154:	20003ddc 	.word	0x20003ddc

08006158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <vTaskSuspendAll+0x18>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	4a03      	ldr	r2, [pc, #12]	; (8006170 <vTaskSuspendAll+0x18>)
 8006164:	6013      	str	r3, [r2, #0]
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20003e00 	.word	0x20003e00

08006174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006182:	4b41      	ldr	r3, [pc, #260]	; (8006288 <xTaskResumeAll+0x114>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <xTaskResumeAll+0x2a>
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	e7fe      	b.n	800619c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800619e:	f7ff fb85 	bl	80058ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061a2:	4b39      	ldr	r3, [pc, #228]	; (8006288 <xTaskResumeAll+0x114>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4a37      	ldr	r2, [pc, #220]	; (8006288 <xTaskResumeAll+0x114>)
 80061aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ac:	4b36      	ldr	r3, [pc, #216]	; (8006288 <xTaskResumeAll+0x114>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d161      	bne.n	8006278 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061b4:	4b35      	ldr	r3, [pc, #212]	; (800628c <xTaskResumeAll+0x118>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d05d      	beq.n	8006278 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061bc:	e02e      	b.n	800621c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061be:	4b34      	ldr	r3, [pc, #208]	; (8006290 <xTaskResumeAll+0x11c>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3318      	adds	r3, #24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fa1d 	bl	800560a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff fa18 	bl	800560a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	2201      	movs	r2, #1
 80061e0:	409a      	lsls	r2, r3
 80061e2:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <xTaskResumeAll+0x120>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	4a2a      	ldr	r2, [pc, #168]	; (8006294 <xTaskResumeAll+0x120>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <xTaskResumeAll+0x124>)
 80061fa:	441a      	add	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7ff f9a4 	bl	8005550 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	4b23      	ldr	r3, [pc, #140]	; (800629c <xTaskResumeAll+0x128>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006216:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <xTaskResumeAll+0x12c>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <xTaskResumeAll+0x11c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1cc      	bne.n	80061be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800622a:	f000 f9e9 	bl	8006600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800622e:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <xTaskResumeAll+0x130>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d010      	beq.n	800625c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800623a:	f000 f837 	bl	80062ac <xTaskIncrementTick>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <xTaskResumeAll+0x12c>)
 8006246:	2201      	movs	r2, #1
 8006248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3b01      	subs	r3, #1
 800624e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f1      	bne.n	800623a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <xTaskResumeAll+0x130>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <xTaskResumeAll+0x12c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <xTaskResumeAll+0x134>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006278:	f7ff fb46 	bl	8005908 <vPortExitCritical>

	return xAlreadyYielded;
 800627c:	68bb      	ldr	r3, [r7, #8]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20003e00 	.word	0x20003e00
 800628c:	20003dd8 	.word	0x20003dd8
 8006290:	20003d98 	.word	0x20003d98
 8006294:	20003de0 	.word	0x20003de0
 8006298:	20003cdc 	.word	0x20003cdc
 800629c:	20003cd8 	.word	0x20003cd8
 80062a0:	20003dec 	.word	0x20003dec
 80062a4:	20003de8 	.word	0x20003de8
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b6:	4b50      	ldr	r3, [pc, #320]	; (80063f8 <xTaskIncrementTick+0x14c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 808c 	bne.w	80063d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062c0:	4b4e      	ldr	r3, [pc, #312]	; (80063fc <xTaskIncrementTick+0x150>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062c8:	4a4c      	ldr	r2, [pc, #304]	; (80063fc <xTaskIncrementTick+0x150>)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11f      	bne.n	8006314 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80062d4:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <xTaskIncrementTick+0x154>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <xTaskIncrementTick+0x46>
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	e7fe      	b.n	80062f0 <xTaskIncrementTick+0x44>
 80062f2:	4b43      	ldr	r3, [pc, #268]	; (8006400 <xTaskIncrementTick+0x154>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	4b42      	ldr	r3, [pc, #264]	; (8006404 <xTaskIncrementTick+0x158>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a40      	ldr	r2, [pc, #256]	; (8006400 <xTaskIncrementTick+0x154>)
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	4a40      	ldr	r2, [pc, #256]	; (8006404 <xTaskIncrementTick+0x158>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4b40      	ldr	r3, [pc, #256]	; (8006408 <xTaskIncrementTick+0x15c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a3e      	ldr	r2, [pc, #248]	; (8006408 <xTaskIncrementTick+0x15c>)
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	f000 f976 	bl	8006600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006314:	4b3d      	ldr	r3, [pc, #244]	; (800640c <xTaskIncrementTick+0x160>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	429a      	cmp	r2, r3
 800631c:	d34d      	bcc.n	80063ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631e:	4b38      	ldr	r3, [pc, #224]	; (8006400 <xTaskIncrementTick+0x154>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <xTaskIncrementTick+0x80>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <xTaskIncrementTick+0x82>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <xTaskIncrementTick+0x160>)
 8006334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006338:	601a      	str	r2, [r3, #0]
					break;
 800633a:	e03e      	b.n	80063ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800633c:	4b30      	ldr	r3, [pc, #192]	; (8006400 <xTaskIncrementTick+0x154>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d203      	bcs.n	800635c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006354:	4a2d      	ldr	r2, [pc, #180]	; (800640c <xTaskIncrementTick+0x160>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6013      	str	r3, [r2, #0]
						break;
 800635a:	e02e      	b.n	80063ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	3304      	adds	r3, #4
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff f952 	bl	800560a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3318      	adds	r3, #24
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff f949 	bl	800560a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <xTaskIncrementTick+0x164>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4313      	orrs	r3, r2
 8006386:	4a22      	ldr	r2, [pc, #136]	; (8006410 <xTaskIncrementTick+0x164>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <xTaskIncrementTick+0x168>)
 8006398:	441a      	add	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7ff f8d5 	bl	8005550 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <xTaskIncrementTick+0x16c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d3b4      	bcc.n	800631e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b8:	e7b1      	b.n	800631e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ba:	4b17      	ldr	r3, [pc, #92]	; (8006418 <xTaskIncrementTick+0x16c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4914      	ldr	r1, [pc, #80]	; (8006414 <xTaskIncrementTick+0x168>)
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d907      	bls.n	80063e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e004      	b.n	80063e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <xTaskIncrementTick+0x170>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a0f      	ldr	r2, [pc, #60]	; (800641c <xTaskIncrementTick+0x170>)
 80063e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80063e2:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <xTaskIncrementTick+0x174>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80063ea:	2301      	movs	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063ee:	697b      	ldr	r3, [r7, #20]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20003e00 	.word	0x20003e00
 80063fc:	20003ddc 	.word	0x20003ddc
 8006400:	20003d90 	.word	0x20003d90
 8006404:	20003d94 	.word	0x20003d94
 8006408:	20003df0 	.word	0x20003df0
 800640c:	20003df8 	.word	0x20003df8
 8006410:	20003de0 	.word	0x20003de0
 8006414:	20003cdc 	.word	0x20003cdc
 8006418:	20003cd8 	.word	0x20003cd8
 800641c:	20003de8 	.word	0x20003de8
 8006420:	20003dec 	.word	0x20003dec

08006424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800642a:	4b26      	ldr	r3, [pc, #152]	; (80064c4 <vTaskSwitchContext+0xa0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006432:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <vTaskSwitchContext+0xa4>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006438:	e03e      	b.n	80064b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800643a:	4b23      	ldr	r3, [pc, #140]	; (80064c8 <vTaskSwitchContext+0xa4>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006440:	4b22      	ldr	r3, [pc, #136]	; (80064cc <vTaskSwitchContext+0xa8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	fab3 f383 	clz	r3, r3
 800644c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	f1c3 031f 	rsb	r3, r3, #31
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	491e      	ldr	r1, [pc, #120]	; (80064d0 <vTaskSwitchContext+0xac>)
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <vTaskSwitchContext+0x5a>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	e7fe      	b.n	800647c <vTaskSwitchContext+0x58>
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <vTaskSwitchContext+0xac>)
 800648a:	4413      	add	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3308      	adds	r3, #8
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d104      	bne.n	80064ae <vTaskSwitchContext+0x8a>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4a07      	ldr	r2, [pc, #28]	; (80064d4 <vTaskSwitchContext+0xb0>)
 80064b6:	6013      	str	r3, [r2, #0]
}
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	20003e00 	.word	0x20003e00
 80064c8:	20003dec 	.word	0x20003dec
 80064cc:	20003de0 	.word	0x20003de0
 80064d0:	20003cdc 	.word	0x20003cdc
 80064d4:	20003cd8 	.word	0x20003cd8

080064d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064e0:	f000 f852 	bl	8006588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <prvIdleTask+0x28>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d9f9      	bls.n	80064e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <prvIdleTask+0x2c>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064fc:	e7f0      	b.n	80064e0 <prvIdleTask+0x8>
 80064fe:	bf00      	nop
 8006500:	20003cdc 	.word	0x20003cdc
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	e00c      	b.n	800652e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <prvInitialiseTaskLists+0x60>)
 8006520:	4413      	add	r3, r2
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe ffe7 	bl	80054f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3301      	adds	r3, #1
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b06      	cmp	r3, #6
 8006532:	d9ef      	bls.n	8006514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006534:	480d      	ldr	r0, [pc, #52]	; (800656c <prvInitialiseTaskLists+0x64>)
 8006536:	f7fe ffde 	bl	80054f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800653a:	480d      	ldr	r0, [pc, #52]	; (8006570 <prvInitialiseTaskLists+0x68>)
 800653c:	f7fe ffdb 	bl	80054f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006540:	480c      	ldr	r0, [pc, #48]	; (8006574 <prvInitialiseTaskLists+0x6c>)
 8006542:	f7fe ffd8 	bl	80054f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006546:	480c      	ldr	r0, [pc, #48]	; (8006578 <prvInitialiseTaskLists+0x70>)
 8006548:	f7fe ffd5 	bl	80054f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800654c:	480b      	ldr	r0, [pc, #44]	; (800657c <prvInitialiseTaskLists+0x74>)
 800654e:	f7fe ffd2 	bl	80054f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006552:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <prvInitialiseTaskLists+0x78>)
 8006554:	4a05      	ldr	r2, [pc, #20]	; (800656c <prvInitialiseTaskLists+0x64>)
 8006556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <prvInitialiseTaskLists+0x7c>)
 800655a:	4a05      	ldr	r2, [pc, #20]	; (8006570 <prvInitialiseTaskLists+0x68>)
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20003cdc 	.word	0x20003cdc
 800656c:	20003d68 	.word	0x20003d68
 8006570:	20003d7c 	.word	0x20003d7c
 8006574:	20003d98 	.word	0x20003d98
 8006578:	20003dac 	.word	0x20003dac
 800657c:	20003dc4 	.word	0x20003dc4
 8006580:	20003d90 	.word	0x20003d90
 8006584:	20003d94 	.word	0x20003d94

08006588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800658e:	e019      	b.n	80065c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006590:	f7ff f98c 	bl	80058ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <prvCheckTasksWaitingTermination+0x4c>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff f832 	bl	800560a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <prvCheckTasksWaitingTermination+0x50>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <prvCheckTasksWaitingTermination+0x50>)
 80065ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <prvCheckTasksWaitingTermination+0x54>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <prvCheckTasksWaitingTermination+0x54>)
 80065b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065ba:	f7ff f9a5 	bl	8005908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f80e 	bl	80065e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <prvCheckTasksWaitingTermination+0x54>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e1      	bne.n	8006590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20003dac 	.word	0x20003dac
 80065d8:	20003dd8 	.word	0x20003dd8
 80065dc:	20003dc0 	.word	0x20003dc0

080065e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fafb 	bl	8005be8 <vPortFree>
			vPortFree( pxTCB );
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff faf8 	bl	8005be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <prvResetNextTaskUnblockTime+0x44>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <prvResetNextTaskUnblockTime+0x14>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <prvResetNextTaskUnblockTime+0x16>
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <prvResetNextTaskUnblockTime+0x48>)
 800661c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006620:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006622:	e008      	b.n	8006636 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006624:	4b07      	ldr	r3, [pc, #28]	; (8006644 <prvResetNextTaskUnblockTime+0x44>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	4a05      	ldr	r2, [pc, #20]	; (8006648 <prvResetNextTaskUnblockTime+0x48>)
 8006634:	6013      	str	r3, [r2, #0]
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20003d90 	.word	0x20003d90
 8006648:	20003df8 	.word	0x20003df8

0800664c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006656:	4b29      	ldr	r3, [pc, #164]	; (80066fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665c:	4b28      	ldr	r3, [pc, #160]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe ffd1 	bl	800560a <uxListRemove>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	2201      	movs	r2, #1
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43da      	mvns	r2, r3
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <prvAddCurrentTaskToDelayedList+0xb8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4013      	ands	r3, r2
 8006682:	4a20      	ldr	r2, [pc, #128]	; (8006704 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006684:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668c:	d10a      	bne.n	80066a4 <prvAddCurrentTaskToDelayedList+0x58>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006694:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	481a      	ldr	r0, [pc, #104]	; (8006708 <prvAddCurrentTaskToDelayedList+0xbc>)
 800669e:	f7fe ff57 	bl	8005550 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066a2:	e026      	b.n	80066f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d209      	bcs.n	80066d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fe ff65 	bl	8005598 <vListInsert>
}
 80066ce:	e010      	b.n	80066f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <prvAddCurrentTaskToDelayedList+0xc4>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f7fe ff5b 	bl	8005598 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066e2:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d202      	bcs.n	80066f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066ec:	4a09      	ldr	r2, [pc, #36]	; (8006714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6013      	str	r3, [r2, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20003ddc 	.word	0x20003ddc
 8006700:	20003cd8 	.word	0x20003cd8
 8006704:	20003de0 	.word	0x20003de0
 8006708:	20003dc4 	.word	0x20003dc4
 800670c:	20003d94 	.word	0x20003d94
 8006710:	20003d90 	.word	0x20003d90
 8006714:	20003df8 	.word	0x20003df8

08006718 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <MX_DMA2D_Init+0x34>)
 800671e:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <MX_DMA2D_Init+0x38>)
 8006720:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8006722:	4b0a      	ldr	r3, [pc, #40]	; (800674c <MX_DMA2D_Init+0x34>)
 8006724:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006728:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <MX_DMA2D_Init+0x34>)
 800672c:	2200      	movs	r2, #0
 800672e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <MX_DMA2D_Init+0x34>)
 8006732:	2200      	movs	r2, #0
 8006734:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006736:	4805      	ldr	r0, [pc, #20]	; (800674c <MX_DMA2D_Init+0x34>)
 8006738:	f7fa fc40 	bl	8000fbc <HAL_DMA2D_Init>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8006742:	f001 feb9 	bl	80084b8 <Error_Handler>
  }

}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20003ef8 	.word	0x20003ef8
 8006750:	4002b000 	.word	0x4002b000

08006754 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0b      	ldr	r2, [pc, #44]	; (8006790 <HAL_DMA2D_MspInit+0x3c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10d      	bne.n	8006782 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <HAL_DMA2D_MspInit+0x40>)
 800676c:	4b09      	ldr	r3, [pc, #36]	; (8006794 <HAL_DMA2D_MspInit+0x40>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006774:	6313      	str	r3, [r2, #48]	; 0x30
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <HAL_DMA2D_MspInit+0x40>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	4002b000 	.word	0x4002b000
 8006794:	40023800 	.word	0x40023800

08006798 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800679e:	4b1f      	ldr	r3, [pc, #124]	; (800681c <MX_FMC_Init+0x84>)
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <MX_FMC_Init+0x88>)
 80067a2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80067a4:	4b1d      	ldr	r3, [pc, #116]	; (800681c <MX_FMC_Init+0x84>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80067aa:	4b1c      	ldr	r3, [pc, #112]	; (800681c <MX_FMC_Init+0x84>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80067b0:	4b1a      	ldr	r3, [pc, #104]	; (800681c <MX_FMC_Init+0x84>)
 80067b2:	2204      	movs	r2, #4
 80067b4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80067b6:	4b19      	ldr	r3, [pc, #100]	; (800681c <MX_FMC_Init+0x84>)
 80067b8:	2210      	movs	r2, #16
 80067ba:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80067bc:	4b17      	ldr	r3, [pc, #92]	; (800681c <MX_FMC_Init+0x84>)
 80067be:	2240      	movs	r2, #64	; 0x40
 80067c0:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80067c2:	4b16      	ldr	r3, [pc, #88]	; (800681c <MX_FMC_Init+0x84>)
 80067c4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80067c8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <MX_FMC_Init+0x84>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <MX_FMC_Init+0x84>)
 80067d2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80067d6:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80067d8:	4b10      	ldr	r3, [pc, #64]	; (800681c <MX_FMC_Init+0x84>)
 80067da:	2200      	movs	r2, #0
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <MX_FMC_Init+0x84>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80067e4:	2302      	movs	r3, #2
 80067e6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80067e8:	2307      	movs	r3, #7
 80067ea:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80067ec:	2304      	movs	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80067f0:	2307      	movs	r3, #7
 80067f2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80067f4:	2303      	movs	r3, #3
 80067f6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80067f8:	2302      	movs	r3, #2
 80067fa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80067fc:	2302      	movs	r3, #2
 80067fe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4805      	ldr	r0, [pc, #20]	; (800681c <MX_FMC_Init+0x84>)
 8006806:	f7fd fa99 	bl	8003d3c <HAL_SDRAM_Init>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <MX_FMC_Init+0x7c>
  {
    Error_Handler( );
 8006810:	f001 fe52 	bl	80084b8 <Error_Handler>
  }

}
 8006814:	bf00      	nop
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20003f38 	.word	0x20003f38
 8006820:	a0000140 	.word	0xa0000140

08006824 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800682a:	4b3c      	ldr	r3, [pc, #240]	; (800691c <HAL_FMC_MspInit+0xf8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d16f      	bne.n	8006912 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8006832:	4b3a      	ldr	r3, [pc, #232]	; (800691c <HAL_FMC_MspInit+0xf8>)
 8006834:	2201      	movs	r2, #1
 8006836:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006838:	2300      	movs	r3, #0
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4a38      	ldr	r2, [pc, #224]	; (8006920 <HAL_FMC_MspInit+0xfc>)
 800683e:	4b38      	ldr	r3, [pc, #224]	; (8006920 <HAL_FMC_MspInit+0xfc>)
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6393      	str	r3, [r2, #56]	; 0x38
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <HAL_FMC_MspInit+0xfc>)
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006854:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006858:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800685a:	2302      	movs	r3, #2
 800685c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006862:	2303      	movs	r3, #3
 8006864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006866:	230c      	movs	r3, #12
 8006868:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	4619      	mov	r1, r3
 800686e:	482d      	ldr	r0, [pc, #180]	; (8006924 <HAL_FMC_MspInit+0x100>)
 8006870:	f7fa fe2e 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006874:	2301      	movs	r3, #1
 8006876:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006878:	2302      	movs	r3, #2
 800687a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006880:	2303      	movs	r3, #3
 8006882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006884:	230c      	movs	r3, #12
 8006886:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006888:	1d3b      	adds	r3, r7, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4826      	ldr	r0, [pc, #152]	; (8006928 <HAL_FMC_MspInit+0x104>)
 800688e:	f7fa fe1f 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006892:	f248 1333 	movw	r3, #33075	; 0x8133
 8006896:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006898:	2302      	movs	r3, #2
 800689a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a0:	2303      	movs	r3, #3
 80068a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068a4:	230c      	movs	r3, #12
 80068a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068a8:	1d3b      	adds	r3, r7, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	481f      	ldr	r0, [pc, #124]	; (800692c <HAL_FMC_MspInit+0x108>)
 80068ae:	f7fa fe0f 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80068b2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80068b6:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c0:	2303      	movs	r3, #3
 80068c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068c4:	230c      	movs	r3, #12
 80068c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4818      	ldr	r0, [pc, #96]	; (8006930 <HAL_FMC_MspInit+0x10c>)
 80068ce:	f7fa fdff 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80068d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80068d6:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d8:	2302      	movs	r3, #2
 80068da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e0:	2303      	movs	r3, #3
 80068e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068e4:	230c      	movs	r3, #12
 80068e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068e8:	1d3b      	adds	r3, r7, #4
 80068ea:	4619      	mov	r1, r3
 80068ec:	4811      	ldr	r0, [pc, #68]	; (8006934 <HAL_FMC_MspInit+0x110>)
 80068ee:	f7fa fdef 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80068f2:	2360      	movs	r3, #96	; 0x60
 80068f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f6:	2302      	movs	r3, #2
 80068f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fe:	2303      	movs	r3, #3
 8006900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006902:	230c      	movs	r3, #12
 8006904:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	4619      	mov	r1, r3
 800690a:	480b      	ldr	r0, [pc, #44]	; (8006938 <HAL_FMC_MspInit+0x114>)
 800690c:	f7fa fde0 	bl	80014d0 <HAL_GPIO_Init>
 8006910:	e000      	b.n	8006914 <HAL_FMC_MspInit+0xf0>
    return;
 8006912:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20003e04 	.word	0x20003e04
 8006920:	40023800 	.word	0x40023800
 8006924:	40021400 	.word	0x40021400
 8006928:	40020800 	.word	0x40020800
 800692c:	40021800 	.word	0x40021800
 8006930:	40021000 	.word	0x40021000
 8006934:	40020c00 	.word	0x40020c00
 8006938:	40020400 	.word	0x40020400

0800693c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006944:	f7ff ff6e 	bl	8006824 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b094      	sub	sp, #80	; 0x50
 8006954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	ts_struct = &struktura;
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <MX_FREERTOS_Init+0xb4>)
 8006958:	4a2b      	ldr	r2, [pc, #172]	; (8006a08 <MX_FREERTOS_Init+0xb8>)
 800695a:	601a      	str	r2, [r3, #0]
	ts_init(ts_struct);
 800695c:	4b29      	ldr	r3, [pc, #164]	; (8006a04 <MX_FREERTOS_Init+0xb4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fd85 	bl	8008470 <ts_init>
	initMenu(ts_struct, globalClassHandler);
 8006966:	4b27      	ldr	r3, [pc, #156]	; (8006a04 <MX_FREERTOS_Init+0xb4>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <MX_FREERTOS_Init+0xbc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f000 fefd 	bl	8007770 <initMenu>
		/* definition and creation of mpuTask */
		osThreadDef(mpuTask, StartDefaultTask, osPriorityNormal, 0, 128);
		//empty thread

		/* definition and creation of lcdTask */
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityHigh, 0, 128);
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <MX_FREERTOS_Init+0xc0>)
 8006978:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800697c:	461d      	mov	r5, r3
 800697e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006982:	682b      	ldr	r3, [r5, #0]
 8006984:	6023      	str	r3, [r4, #0]
		lcdTaskHandle = osThreadCreate(osThread(LCD_handling), NULL);
 8006986:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fd77 	bl	8005480 <osThreadCreate>
 8006992:	4602      	mov	r2, r0
 8006994:	4b1f      	ldr	r3, [pc, #124]	; (8006a14 <MX_FREERTOS_Init+0xc4>)
 8006996:	601a      	str	r2, [r3, #0]

		/* definition and creation of touchTask */
		osThreadDef(TS_handling, StartTS_handling, osPriorityNormal, 0, 128);
 8006998:	4b1f      	ldr	r3, [pc, #124]	; (8006a18 <MX_FREERTOS_Init+0xc8>)
 800699a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800699e:	461d      	mov	r5, r3
 80069a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	6023      	str	r3, [r4, #0]
		touchTaskHandle = osThreadCreate(osThread(TS_handling), NULL);
 80069a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fd66 	bl	8005480 <osThreadCreate>
 80069b4:	4602      	mov	r2, r0
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <MX_FREERTOS_Init+0xcc>)
 80069b8:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(MPU_handling, StartMPU_handling, osPriorityNormal, 0, 128);
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <MX_FREERTOS_Init+0xd0>)
 80069bc:	f107 0414 	add.w	r4, r7, #20
 80069c0:	461d      	mov	r5, r3
 80069c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	6023      	str	r3, [r4, #0]
		mpuTaskHandle = osThreadCreate(osThread(MPU_handling), NULL);
 80069ca:	f107 0314 	add.w	r3, r7, #20
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe fd55 	bl	8005480 <osThreadCreate>
 80069d6:	4602      	mov	r2, r0
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <MX_FREERTOS_Init+0xd4>)
 80069da:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(GAME_master, StartGAME_master, osPriorityNormal, 0, 128);
 80069dc:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <MX_FREERTOS_Init+0xd8>)
 80069de:	463c      	mov	r4, r7
 80069e0:	461d      	mov	r5, r3
 80069e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	6023      	str	r3, [r4, #0]
		gameTaskHandle = osThreadCreate(osThread(GAME_master), NULL);
 80069ea:	463b      	mov	r3, r7
 80069ec:	2100      	movs	r1, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fd46 	bl	8005480 <osThreadCreate>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <MX_FREERTOS_Init+0xdc>)
 80069f8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80069fa:	bf00      	nop
 80069fc:	3750      	adds	r7, #80	; 0x50
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bdb0      	pop	{r4, r5, r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20003f8c 	.word	0x20003f8c
 8006a08:	20003f70 	.word	0x20003f70
 8006a0c:	20003f80 	.word	0x20003f80
 8006a10:	0800a404 	.word	0x0800a404
 8006a14:	20003f88 	.word	0x20003f88
 8006a18:	0800a424 	.word	0x0800a424
 8006a1c:	20003f6c 	.word	0x20003f6c
 8006a20:	0800a448 	.word	0x0800a448
 8006a24:	20003f7c 	.word	0x20003f7c
 8006a28:	0800a468 	.word	0x0800a468
 8006a2c:	20003f84 	.word	0x20003f84

08006a30 <StartLCD_handling>:
 * @brief Function implementing the lcdTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartLCD_handling(void const * argument) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7fe fd48 	bl	80054ce <osDelay>
		if (HAL_GetTick() - startTime >= 50) {
 8006a3e:	f7fa f9af 	bl	8000da0 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <StartLCD_handling+0x40>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b31      	cmp	r3, #49	; 0x31
 8006a4c:	d9f4      	bls.n	8006a38 <StartLCD_handling+0x8>
			flagTouch = 0; //wyzerowanie flagi
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <StartLCD_handling+0x44>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

			Display(globalClassHandler);
 8006a54:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <StartLCD_handling+0x48>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fee9 	bl	8007830 <Display>
			Service();
 8006a5e:	f000 ff0b 	bl	8007878 <Service>
			startTime = HAL_GetTick(); //eliminacja drgan
 8006a62:	f7fa f99d 	bl	8000da0 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	4b01      	ldr	r3, [pc, #4]	; (8006a70 <StartLCD_handling+0x40>)
 8006a6a:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8006a6c:	e7e4      	b.n	8006a38 <StartLCD_handling+0x8>
 8006a6e:	bf00      	nop
 8006a70:	20003f90 	.word	0x20003f90
 8006a74:	20003e14 	.word	0x20003e14
 8006a78:	20003f80 	.word	0x20003f80

08006a7c <StartTS_handling>:
 * @brief Function implementing the touchTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTS_handling(void const * argument) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006a84:	2001      	movs	r0, #1
 8006a86:	f7fe fd22 	bl	80054ce <osDelay>
		BSP_TS_GetState(ts_struct);
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <StartTS_handling+0x40>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f002 ff5c 	bl	800994c <BSP_TS_GetState>
		if (ts_struct->TouchDetected) {
 8006a94:	4b09      	ldr	r3, [pc, #36]	; (8006abc <StartTS_handling+0x40>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <StartTS_handling+0x30>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006aa4:	4806      	ldr	r0, [pc, #24]	; (8006ac0 <StartTS_handling+0x44>)
 8006aa6:	f7fa ffc9 	bl	8001a3c <HAL_GPIO_WritePin>
 8006aaa:	e7eb      	b.n	8006a84 <StartTS_handling+0x8>
		}
		else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006aac:	2200      	movs	r2, #0
 8006aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ab2:	4803      	ldr	r0, [pc, #12]	; (8006ac0 <StartTS_handling+0x44>)
 8006ab4:	f7fa ffc2 	bl	8001a3c <HAL_GPIO_WritePin>
		osDelay(1);
 8006ab8:	e7e4      	b.n	8006a84 <StartTS_handling+0x8>
 8006aba:	bf00      	nop
 8006abc:	20003f8c 	.word	0x20003f8c
 8006ac0:	40021800 	.word	0x40021800

08006ac4 <StartMPU_handling>:
	}
	/* USER CODE END StartTask03 */
}

/* USER CODE END Header_StartDefaultTask */
void StartMPU_handling(void const * argument) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for (;;) {
		read_gyro(&x, &y, &z);
 8006acc:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <StartMPU_handling+0x1c>)
 8006ace:	4905      	ldr	r1, [pc, #20]	; (8006ae4 <StartMPU_handling+0x20>)
 8006ad0:	4805      	ldr	r0, [pc, #20]	; (8006ae8 <StartMPU_handling+0x24>)
 8006ad2:	f000 f9d1 	bl	8006e78 <read_gyro>
		//printf("X-Axis: %d ", x);
		//printf("Y-Axis: %d ", y);
		//printf("Z-Axis: %d\r\n", z);
		osDelay(10);
 8006ad6:	200a      	movs	r0, #10
 8006ad8:	f7fe fcf9 	bl	80054ce <osDelay>
		read_gyro(&x, &y, &z);
 8006adc:	e7f6      	b.n	8006acc <StartMPU_handling+0x8>
 8006ade:	bf00      	nop
 8006ae0:	20003e10 	.word	0x20003e10
 8006ae4:	20003e0c 	.word	0x20003e0c
 8006ae8:	20003e08 	.word	0x20003e08

08006aec <StartGAME_master>:
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE END Header_StartDefaultTask */
void StartGAME_master(void const * argument) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006af4:	2001      	movs	r0, #1
 8006af6:	f7fe fcea 	bl	80054ce <osDelay>
 8006afa:	e7fb      	b.n	8006af4 <StartGAME_master+0x8>

08006afc <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	; 0x38
 8006b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	605a      	str	r2, [r3, #4]
 8006b0c:	609a      	str	r2, [r3, #8]
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b12:	2300      	movs	r3, #0
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	4a89      	ldr	r2, [pc, #548]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b18:	4b88      	ldr	r3, [pc, #544]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	f043 0304 	orr.w	r3, r3, #4
 8006b20:	6313      	str	r3, [r2, #48]	; 0x30
 8006b22:	4b86      	ldr	r3, [pc, #536]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	623b      	str	r3, [r7, #32]
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	4a82      	ldr	r2, [pc, #520]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b34:	4b81      	ldr	r3, [pc, #516]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	f043 0320 	orr.w	r3, r3, #32
 8006b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3e:	4b7f      	ldr	r3, [pc, #508]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	4a7b      	ldr	r2, [pc, #492]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b50:	4b7a      	ldr	r3, [pc, #488]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5a:	4b78      	ldr	r3, [pc, #480]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b62:	61bb      	str	r3, [r7, #24]
 8006b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	4a74      	ldr	r2, [pc, #464]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b6c:	4b73      	ldr	r3, [pc, #460]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6313      	str	r3, [r2, #48]	; 0x30
 8006b76:	4b71      	ldr	r3, [pc, #452]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	4a6d      	ldr	r2, [pc, #436]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b88:	4b6c      	ldr	r3, [pc, #432]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	f043 0302 	orr.w	r3, r3, #2
 8006b90:	6313      	str	r3, [r2, #48]	; 0x30
 8006b92:	4b6a      	ldr	r3, [pc, #424]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	4a66      	ldr	r2, [pc, #408]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006ba4:	4b65      	ldr	r3, [pc, #404]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bac:	6313      	str	r3, [r2, #48]	; 0x30
 8006bae:	4b63      	ldr	r3, [pc, #396]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	4a5f      	ldr	r2, [pc, #380]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006bc0:	4b5e      	ldr	r3, [pc, #376]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	f043 0310 	orr.w	r3, r3, #16
 8006bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bca:	4b5c      	ldr	r3, [pc, #368]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	4a58      	ldr	r2, [pc, #352]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006bdc:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	f043 0308 	orr.w	r3, r3, #8
 8006be4:	6313      	str	r3, [r2, #48]	; 0x30
 8006be6:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <MX_GPIO_Init+0x240>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2116      	movs	r1, #22
 8006bf6:	4852      	ldr	r0, [pc, #328]	; (8006d40 <MX_GPIO_Init+0x244>)
 8006bf8:	f7fa ff20 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2180      	movs	r1, #128	; 0x80
 8006c00:	4850      	ldr	r0, [pc, #320]	; (8006d44 <MX_GPIO_Init+0x248>)
 8006c02:	f7fa ff1b 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8006c06:	2200      	movs	r2, #0
 8006c08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006c0c:	484e      	ldr	r0, [pc, #312]	; (8006d48 <MX_GPIO_Init+0x24c>)
 8006c0e:	f7fa ff15 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006c12:	2200      	movs	r2, #0
 8006c14:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006c18:	484c      	ldr	r0, [pc, #304]	; (8006d4c <MX_GPIO_Init+0x250>)
 8006c1a:	f7fa ff0f 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8006c1e:	2316      	movs	r3, #22
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c22:	2301      	movs	r3, #1
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c32:	4619      	mov	r1, r3
 8006c34:	4842      	ldr	r0, [pc, #264]	; (8006d40 <MX_GPIO_Init+0x244>)
 8006c36:	f7fa fc4b 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8006c3a:	f248 0307 	movw	r3, #32775	; 0x8007
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006c40:	4b43      	ldr	r3, [pc, #268]	; (8006d50 <MX_GPIO_Init+0x254>)
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	483d      	ldr	r0, [pc, #244]	; (8006d44 <MX_GPIO_Init+0x248>)
 8006c50:	f7fa fc3e 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c60:	2300      	movs	r3, #0
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4836      	ldr	r0, [pc, #216]	; (8006d44 <MX_GPIO_Init+0x248>)
 8006c6c:	f7fa fc30 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8006c70:	2320      	movs	r3, #32
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006c74:	4b36      	ldr	r3, [pc, #216]	; (8006d50 <MX_GPIO_Init+0x254>)
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8006c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c80:	4619      	mov	r1, r3
 8006c82:	482f      	ldr	r0, [pc, #188]	; (8006d40 <MX_GPIO_Init+0x244>)
 8006c84:	f7fa fc24 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006c88:	2304      	movs	r3, #4
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c98:	4619      	mov	r1, r3
 8006c9a:	482e      	ldr	r0, [pc, #184]	; (8006d54 <MX_GPIO_Init+0x258>)
 8006c9c:	f7fa fc18 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006ca0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4825      	ldr	r0, [pc, #148]	; (8006d54 <MX_GPIO_Init+0x258>)
 8006cbe:	f7fa fc07 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	481f      	ldr	r0, [pc, #124]	; (8006d54 <MX_GPIO_Init+0x258>)
 8006cd8:	f7fa fbfa 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8006cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4815      	ldr	r0, [pc, #84]	; (8006d48 <MX_GPIO_Init+0x24c>)
 8006cf2:	f7fa fbed 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8006cf6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d04:	2300      	movs	r3, #0
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	480e      	ldr	r0, [pc, #56]	; (8006d48 <MX_GPIO_Init+0x24c>)
 8006d10:	f7fa fbde 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8006d14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d22:	2300      	movs	r3, #0
 8006d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4807      	ldr	r0, [pc, #28]	; (8006d4c <MX_GPIO_Init+0x250>)
 8006d2e:	f7fa fbcf 	bl	80014d0 <HAL_GPIO_Init>

}
 8006d32:	bf00      	nop
 8006d34:	3738      	adds	r7, #56	; 0x38
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40020800 	.word	0x40020800
 8006d44:	40020000 	.word	0x40020000
 8006d48:	40020c00 	.word	0x40020c00
 8006d4c:	40021800 	.word	0x40021800
 8006d50:	10120000 	.word	0x10120000
 8006d54:	40020400 	.word	0x40020400

08006d58 <writegyro>:
#include "spi.h"
#include "gyro.h"
#include "FreeRTOS.h"
#include "task.h"

void writegyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006d58:	b084      	sub	sp, #16
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	f107 0e08 	add.w	lr, r7, #8
 8006d62:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    taskENTER_CRITICAL();
 8006d66:	f7fe fda1 	bl	80058ac <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2102      	movs	r1, #2
 8006d6e:	4810      	ldr	r0, [pc, #64]	; (8006db0 <writegyro+0x58>)
 8006d70:	f7fa fe64 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006d74:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006d78:	2332      	movs	r3, #50	; 0x32
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f107 0008 	add.w	r0, r7, #8
 8006d80:	f7fd f8e6 	bl	8003f50 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI, &data, 1, 50);
 8006d84:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006d88:	2332      	movs	r3, #50	; 0x32
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f107 0008 	add.w	r0, r7, #8
 8006d90:	f7fd f8de 	bl	8003f50 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006d94:	2201      	movs	r2, #1
 8006d96:	2102      	movs	r1, #2
 8006d98:	4805      	ldr	r0, [pc, #20]	; (8006db0 <writegyro+0x58>)
 8006d9a:	f7fa fe4f 	bl	8001a3c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006d9e:	f7fe fdb3 	bl	8005908 <vPortExitCritical>
}
 8006da2:	bf00      	nop
 8006da4:	46bd      	mov	sp, r7
 8006da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006daa:	b004      	add	sp, #16
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40020800 	.word	0x40020800

08006db4 <readgyro>:

uint8_t readgyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006db4:	b084      	sub	sp, #16
 8006db6:	b580      	push	{r7, lr}
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	f107 0e08 	add.w	lr, r7, #8
 8006dbe:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	address = address | 0x80;
 8006dc2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006dc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    taskENTER_CRITICAL();
 8006dd0:	f7fe fd6c 	bl	80058ac <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	4810      	ldr	r0, [pc, #64]	; (8006e1c <readgyro+0x68>)
 8006dda:	f7fa fe2f 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006dde:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006de2:	2332      	movs	r3, #50	; 0x32
 8006de4:	2201      	movs	r2, #1
 8006de6:	f107 0008 	add.w	r0, r7, #8
 8006dea:	f7fd f8b1 	bl	8003f50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI, &data, 1, 50);
 8006dee:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006df2:	2332      	movs	r3, #50	; 0x32
 8006df4:	2201      	movs	r2, #1
 8006df6:	f107 0008 	add.w	r0, r7, #8
 8006dfa:	f7fd f9db 	bl	80041b4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006dfe:	2201      	movs	r2, #1
 8006e00:	2102      	movs	r1, #2
 8006e02:	4806      	ldr	r0, [pc, #24]	; (8006e1c <readgyro+0x68>)
 8006e04:	f7fa fe1a 	bl	8001a3c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006e08:	f7fe fd7e 	bl	8005908 <vPortExitCritical>

	return data;
 8006e0c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e18:	b004      	add	sp, #16
 8006e1a:	4770      	bx	lr
 8006e1c:	40020800 	.word	0x40020800

08006e20 <gyro_init>:

void gyro_init() {
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b095      	sub	sp, #84	; 0x54
 8006e24:	af14      	add	r7, sp, #80	; 0x50
	writegyro(hspi5, 0x20, 0x0F);
 8006e26:	4c13      	ldr	r4, [pc, #76]	; (8006e74 <gyro_init+0x54>)
 8006e28:	230f      	movs	r3, #15
 8006e2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	9312      	str	r3, [sp, #72]	; 0x48
 8006e30:	4668      	mov	r0, sp
 8006e32:	f104 0310 	add.w	r3, r4, #16
 8006e36:	2248      	movs	r2, #72	; 0x48
 8006e38:	4619      	mov	r1, r3
 8006e3a:	f003 fa77 	bl	800a32c <memcpy>
 8006e3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006e42:	f7ff ff89 	bl	8006d58 <writegyro>
	writegyro(hspi5, 0x23, 0x30);
 8006e46:	4c0b      	ldr	r4, [pc, #44]	; (8006e74 <gyro_init+0x54>)
 8006e48:	2330      	movs	r3, #48	; 0x30
 8006e4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e4c:	2323      	movs	r3, #35	; 0x23
 8006e4e:	9312      	str	r3, [sp, #72]	; 0x48
 8006e50:	4668      	mov	r0, sp
 8006e52:	f104 0310 	add.w	r3, r4, #16
 8006e56:	2248      	movs	r2, #72	; 0x48
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f003 fa67 	bl	800a32c <memcpy>
 8006e5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006e62:	f7ff ff79 	bl	8006d58 <writegyro>
	HAL_Delay(100);
 8006e66:	2064      	movs	r0, #100	; 0x64
 8006e68:	f7f9 ffa6 	bl	8000db8 <HAL_Delay>
}
 8006e6c:	bf00      	nop
 8006e6e:	3704      	adds	r7, #4
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}
 8006e74:	200040e0 	.word	0x200040e0

08006e78 <read_gyro>:

void read_gyro(int *gyrox, int *gyroy, int *gyroz) {
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b099      	sub	sp, #100	; 0x64
 8006e7c:	af14      	add	r7, sp, #80	; 0x50
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
	static float zgyro = 0;
	static float delta[3] = { 0 };
	static float current[3] = { 0 };
	static float time_delay = 10;

	datax[0] = readgyro(hspi5, 0x28, datax[0]);
 8006e84:	4bc6      	ldr	r3, [pc, #792]	; (80071a0 <read_gyro+0x328>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	4cc6      	ldr	r4, [pc, #792]	; (80071a4 <read_gyro+0x32c>)
 8006e8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e8c:	2328      	movs	r3, #40	; 0x28
 8006e8e:	9312      	str	r3, [sp, #72]	; 0x48
 8006e90:	4668      	mov	r0, sp
 8006e92:	f104 0310 	add.w	r3, r4, #16
 8006e96:	2248      	movs	r2, #72	; 0x48
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f003 fa47 	bl	800a32c <memcpy>
 8006e9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ea2:	f7ff ff87 	bl	8006db4 <readgyro>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4bbd      	ldr	r3, [pc, #756]	; (80071a0 <read_gyro+0x328>)
 8006eac:	701a      	strb	r2, [r3, #0]
	datax[1] = readgyro(hspi5, 0x29, datax[1]);
 8006eae:	4bbc      	ldr	r3, [pc, #752]	; (80071a0 <read_gyro+0x328>)
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	4cbc      	ldr	r4, [pc, #752]	; (80071a4 <read_gyro+0x32c>)
 8006eb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eb6:	2329      	movs	r3, #41	; 0x29
 8006eb8:	9312      	str	r3, [sp, #72]	; 0x48
 8006eba:	4668      	mov	r0, sp
 8006ebc:	f104 0310 	add.w	r3, r4, #16
 8006ec0:	2248      	movs	r2, #72	; 0x48
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f003 fa32 	bl	800a32c <memcpy>
 8006ec8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ecc:	f7ff ff72 	bl	8006db4 <readgyro>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4bb2      	ldr	r3, [pc, #712]	; (80071a0 <read_gyro+0x328>)
 8006ed6:	705a      	strb	r2, [r3, #1]

	datay[0] = readgyro(hspi5, 0x2A, datay[0]);
 8006ed8:	4bb3      	ldr	r3, [pc, #716]	; (80071a8 <read_gyro+0x330>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	4cb1      	ldr	r4, [pc, #708]	; (80071a4 <read_gyro+0x32c>)
 8006ede:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ee0:	232a      	movs	r3, #42	; 0x2a
 8006ee2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ee4:	4668      	mov	r0, sp
 8006ee6:	f104 0310 	add.w	r3, r4, #16
 8006eea:	2248      	movs	r2, #72	; 0x48
 8006eec:	4619      	mov	r1, r3
 8006eee:	f003 fa1d 	bl	800a32c <memcpy>
 8006ef2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ef6:	f7ff ff5d 	bl	8006db4 <readgyro>
 8006efa:	4603      	mov	r3, r0
 8006efc:	461a      	mov	r2, r3
 8006efe:	4baa      	ldr	r3, [pc, #680]	; (80071a8 <read_gyro+0x330>)
 8006f00:	701a      	strb	r2, [r3, #0]
	datay[1] = readgyro(hspi5, 0x2B, datay[1]);
 8006f02:	4ba9      	ldr	r3, [pc, #676]	; (80071a8 <read_gyro+0x330>)
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	4ca7      	ldr	r4, [pc, #668]	; (80071a4 <read_gyro+0x32c>)
 8006f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f0a:	232b      	movs	r3, #43	; 0x2b
 8006f0c:	9312      	str	r3, [sp, #72]	; 0x48
 8006f0e:	4668      	mov	r0, sp
 8006f10:	f104 0310 	add.w	r3, r4, #16
 8006f14:	2248      	movs	r2, #72	; 0x48
 8006f16:	4619      	mov	r1, r3
 8006f18:	f003 fa08 	bl	800a32c <memcpy>
 8006f1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006f20:	f7ff ff48 	bl	8006db4 <readgyro>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	4b9f      	ldr	r3, [pc, #636]	; (80071a8 <read_gyro+0x330>)
 8006f2a:	705a      	strb	r2, [r3, #1]

	dataz[0] = readgyro(hspi5, 0x2C, dataz[0]);
 8006f2c:	4b9f      	ldr	r3, [pc, #636]	; (80071ac <read_gyro+0x334>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	4c9c      	ldr	r4, [pc, #624]	; (80071a4 <read_gyro+0x32c>)
 8006f32:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f34:	232c      	movs	r3, #44	; 0x2c
 8006f36:	9312      	str	r3, [sp, #72]	; 0x48
 8006f38:	4668      	mov	r0, sp
 8006f3a:	f104 0310 	add.w	r3, r4, #16
 8006f3e:	2248      	movs	r2, #72	; 0x48
 8006f40:	4619      	mov	r1, r3
 8006f42:	f003 f9f3 	bl	800a32c <memcpy>
 8006f46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006f4a:	f7ff ff33 	bl	8006db4 <readgyro>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	4b96      	ldr	r3, [pc, #600]	; (80071ac <read_gyro+0x334>)
 8006f54:	701a      	strb	r2, [r3, #0]
	dataz[1] = readgyro(hspi5, 0x2D, dataz[1]);
 8006f56:	4b95      	ldr	r3, [pc, #596]	; (80071ac <read_gyro+0x334>)
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	4c92      	ldr	r4, [pc, #584]	; (80071a4 <read_gyro+0x32c>)
 8006f5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f5e:	232d      	movs	r3, #45	; 0x2d
 8006f60:	9312      	str	r3, [sp, #72]	; 0x48
 8006f62:	4668      	mov	r0, sp
 8006f64:	f104 0310 	add.w	r3, r4, #16
 8006f68:	2248      	movs	r2, #72	; 0x48
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f003 f9de 	bl	800a32c <memcpy>
 8006f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006f74:	f7ff ff1e 	bl	8006db4 <readgyro>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <read_gyro+0x334>)
 8006f7e:	705a      	strb	r2, [r3, #1]

	xgyro = datax[1] * 256 + datax[0];
 8006f80:	4b87      	ldr	r3, [pc, #540]	; (80071a0 <read_gyro+0x328>)
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	4a86      	ldr	r2, [pc, #536]	; (80071a0 <read_gyro+0x328>)
 8006f88:	7812      	ldrb	r2, [r2, #0]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f94:	4b86      	ldr	r3, [pc, #536]	; (80071b0 <read_gyro+0x338>)
 8006f96:	edc3 7a00 	vstr	s15, [r3]
	if (xgyro > 32767) {
 8006f9a:	4b85      	ldr	r3, [pc, #532]	; (80071b0 <read_gyro+0x338>)
 8006f9c:	edd3 7a00 	vldr	s15, [r3]
 8006fa0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80071b4 <read_gyro+0x33c>
 8006fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fac:	dd09      	ble.n	8006fc2 <read_gyro+0x14a>
		xgyro -= 65536;
 8006fae:	4b80      	ldr	r3, [pc, #512]	; (80071b0 <read_gyro+0x338>)
 8006fb0:	edd3 7a00 	vldr	s15, [r3]
 8006fb4:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80071b8 <read_gyro+0x340>
 8006fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fbc:	4b7c      	ldr	r3, [pc, #496]	; (80071b0 <read_gyro+0x338>)
 8006fbe:	edc3 7a00 	vstr	s15, [r3]
	}
	ygyro = datay[1] * 256 + datay[0];
 8006fc2:	4b79      	ldr	r3, [pc, #484]	; (80071a8 <read_gyro+0x330>)
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	4a77      	ldr	r2, [pc, #476]	; (80071a8 <read_gyro+0x330>)
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	4413      	add	r3, r2
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fd6:	4b79      	ldr	r3, [pc, #484]	; (80071bc <read_gyro+0x344>)
 8006fd8:	edc3 7a00 	vstr	s15, [r3]
	if (ygyro > 32767) {
 8006fdc:	4b77      	ldr	r3, [pc, #476]	; (80071bc <read_gyro+0x344>)
 8006fde:	edd3 7a00 	vldr	s15, [r3]
 8006fe2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80071b4 <read_gyro+0x33c>
 8006fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fee:	dd09      	ble.n	8007004 <read_gyro+0x18c>
		ygyro -= 65536;
 8006ff0:	4b72      	ldr	r3, [pc, #456]	; (80071bc <read_gyro+0x344>)
 8006ff2:	edd3 7a00 	vldr	s15, [r3]
 8006ff6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80071b8 <read_gyro+0x340>
 8006ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ffe:	4b6f      	ldr	r3, [pc, #444]	; (80071bc <read_gyro+0x344>)
 8007000:	edc3 7a00 	vstr	s15, [r3]
	}
	zgyro = dataz[1] * 256 + dataz[0];
 8007004:	4b69      	ldr	r3, [pc, #420]	; (80071ac <read_gyro+0x334>)
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	4a68      	ldr	r2, [pc, #416]	; (80071ac <read_gyro+0x334>)
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	4413      	add	r3, r2
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007018:	4b69      	ldr	r3, [pc, #420]	; (80071c0 <read_gyro+0x348>)
 800701a:	edc3 7a00 	vstr	s15, [r3]
	if (zgyro > 32767) {
 800701e:	4b68      	ldr	r3, [pc, #416]	; (80071c0 <read_gyro+0x348>)
 8007020:	edd3 7a00 	vldr	s15, [r3]
 8007024:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80071b4 <read_gyro+0x33c>
 8007028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800702c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007030:	dd09      	ble.n	8007046 <read_gyro+0x1ce>
		zgyro -= 65536;
 8007032:	4b63      	ldr	r3, [pc, #396]	; (80071c0 <read_gyro+0x348>)
 8007034:	edd3 7a00 	vldr	s15, [r3]
 8007038:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80071b8 <read_gyro+0x340>
 800703c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007040:	4b5f      	ldr	r3, [pc, #380]	; (80071c0 <read_gyro+0x348>)
 8007042:	edc3 7a00 	vstr	s15, [r3]
	}
	xgyro -= 29;
 8007046:	4b5a      	ldr	r3, [pc, #360]	; (80071b0 <read_gyro+0x338>)
 8007048:	edd3 7a00 	vldr	s15, [r3]
 800704c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8007050:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007054:	4b56      	ldr	r3, [pc, #344]	; (80071b0 <read_gyro+0x338>)
 8007056:	edc3 7a00 	vstr	s15, [r3]
	ygyro -= 8;
 800705a:	4b58      	ldr	r3, [pc, #352]	; (80071bc <read_gyro+0x344>)
 800705c:	edd3 7a00 	vldr	s15, [r3]
 8007060:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007064:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007068:	4b54      	ldr	r3, [pc, #336]	; (80071bc <read_gyro+0x344>)
 800706a:	edc3 7a00 	vstr	s15, [r3]
	zgyro += 12;
 800706e:	4b54      	ldr	r3, [pc, #336]	; (80071c0 <read_gyro+0x348>)
 8007070:	edd3 7a00 	vldr	s15, [r3]
 8007074:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8007078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800707c:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <read_gyro+0x348>)
 800707e:	edc3 7a00 	vstr	s15, [r3]
	xgyro *= 0.07;
 8007082:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <read_gyro+0x338>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7f9 fa16 	bl	80004b8 <__aeabi_f2d>
 800708c:	a342      	add	r3, pc, #264	; (adr r3, 8007198 <read_gyro+0x320>)
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f7f9 fa65 	bl	8000560 <__aeabi_dmul>
 8007096:	4603      	mov	r3, r0
 8007098:	460c      	mov	r4, r1
 800709a:	4618      	mov	r0, r3
 800709c:	4621      	mov	r1, r4
 800709e:	f7f9 fc71 	bl	8000984 <__aeabi_d2f>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b42      	ldr	r3, [pc, #264]	; (80071b0 <read_gyro+0x338>)
 80070a6:	601a      	str	r2, [r3, #0]
	ygyro *= 0.07;
 80070a8:	4b44      	ldr	r3, [pc, #272]	; (80071bc <read_gyro+0x344>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7f9 fa03 	bl	80004b8 <__aeabi_f2d>
 80070b2:	a339      	add	r3, pc, #228	; (adr r3, 8007198 <read_gyro+0x320>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f7f9 fa52 	bl	8000560 <__aeabi_dmul>
 80070bc:	4603      	mov	r3, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	4618      	mov	r0, r3
 80070c2:	4621      	mov	r1, r4
 80070c4:	f7f9 fc5e 	bl	8000984 <__aeabi_d2f>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b3c      	ldr	r3, [pc, #240]	; (80071bc <read_gyro+0x344>)
 80070cc:	601a      	str	r2, [r3, #0]
	zgyro *= 0.07;
 80070ce:	4b3c      	ldr	r3, [pc, #240]	; (80071c0 <read_gyro+0x348>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7f9 f9f0 	bl	80004b8 <__aeabi_f2d>
 80070d8:	a32f      	add	r3, pc, #188	; (adr r3, 8007198 <read_gyro+0x320>)
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f7f9 fa3f 	bl	8000560 <__aeabi_dmul>
 80070e2:	4603      	mov	r3, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	4618      	mov	r0, r3
 80070e8:	4621      	mov	r1, r4
 80070ea:	f7f9 fc4b 	bl	8000984 <__aeabi_d2f>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <read_gyro+0x348>)
 80070f2:	601a      	str	r2, [r3, #0]

	delta[0] = xgyro * (time_delay);
 80070f4:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <read_gyro+0x338>)
 80070f6:	ed93 7a00 	vldr	s14, [r3]
 80070fa:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <read_gyro+0x34c>)
 80070fc:	edd3 7a00 	vldr	s15, [r3]
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007104:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <read_gyro+0x350>)
 8007106:	edc3 7a00 	vstr	s15, [r3]
	current[0] += delta[0];
 800710a:	4b30      	ldr	r3, [pc, #192]	; (80071cc <read_gyro+0x354>)
 800710c:	ed93 7a00 	vldr	s14, [r3]
 8007110:	4b2d      	ldr	r3, [pc, #180]	; (80071c8 <read_gyro+0x350>)
 8007112:	edd3 7a00 	vldr	s15, [r3]
 8007116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800711a:	4b2c      	ldr	r3, [pc, #176]	; (80071cc <read_gyro+0x354>)
 800711c:	edc3 7a00 	vstr	s15, [r3]

	delta[1] = ygyro * (time_delay);
 8007120:	4b26      	ldr	r3, [pc, #152]	; (80071bc <read_gyro+0x344>)
 8007122:	ed93 7a00 	vldr	s14, [r3]
 8007126:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <read_gyro+0x34c>)
 8007128:	edd3 7a00 	vldr	s15, [r3]
 800712c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007130:	4b25      	ldr	r3, [pc, #148]	; (80071c8 <read_gyro+0x350>)
 8007132:	edc3 7a01 	vstr	s15, [r3, #4]
	current[1] += delta[1];
 8007136:	4b25      	ldr	r3, [pc, #148]	; (80071cc <read_gyro+0x354>)
 8007138:	ed93 7a01 	vldr	s14, [r3, #4]
 800713c:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <read_gyro+0x350>)
 800713e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <read_gyro+0x354>)
 8007148:	edc3 7a01 	vstr	s15, [r3, #4]

	delta[2] = zgyro * (time_delay);
 800714c:	4b1c      	ldr	r3, [pc, #112]	; (80071c0 <read_gyro+0x348>)
 800714e:	ed93 7a00 	vldr	s14, [r3]
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <read_gyro+0x34c>)
 8007154:	edd3 7a00 	vldr	s15, [r3]
 8007158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715c:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <read_gyro+0x350>)
 800715e:	edc3 7a02 	vstr	s15, [r3, #8]
	current[2] += delta[2];
 8007162:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <read_gyro+0x354>)
 8007164:	ed93 7a02 	vldr	s14, [r3, #8]
 8007168:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <read_gyro+0x350>)
 800716a:	edd3 7a02 	vldr	s15, [r3, #8]
 800716e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007172:	4b16      	ldr	r3, [pc, #88]	; (80071cc <read_gyro+0x354>)
 8007174:	edc3 7a02 	vstr	s15, [r3, #8]

	*gyrox = ((int) current[0])/182/6;
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <read_gyro+0x354>)
 800717a:	edd3 7a00 	vldr	s15, [r3]
 800717e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007182:	ee17 3a90 	vmov	r3, s15
 8007186:	4a12      	ldr	r2, [pc, #72]	; (80071d0 <read_gyro+0x358>)
 8007188:	fb82 1203 	smull	r1, r2, r2, r3
 800718c:	441a      	add	r2, r3
 800718e:	1292      	asrs	r2, r2, #10
 8007190:	17db      	asrs	r3, r3, #31
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	e01e      	b.n	80071d4 <read_gyro+0x35c>
 8007196:	bf00      	nop
 8007198:	1eb851ec 	.word	0x1eb851ec
 800719c:	3fb1eb85 	.word	0x3fb1eb85
 80071a0:	20003e18 	.word	0x20003e18
 80071a4:	200040e0 	.word	0x200040e0
 80071a8:	20003e1c 	.word	0x20003e1c
 80071ac:	20003e20 	.word	0x20003e20
 80071b0:	20003e24 	.word	0x20003e24
 80071b4:	46fffe00 	.word	0x46fffe00
 80071b8:	47800000 	.word	0x47800000
 80071bc:	20003e28 	.word	0x20003e28
 80071c0:	20003e2c 	.word	0x20003e2c
 80071c4:	20000018 	.word	0x20000018
 80071c8:	20003e30 	.word	0x20003e30
 80071cc:	20003e3c 	.word	0x20003e3c
 80071d0:	f00f00f1 	.word	0xf00f00f1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]
	*gyroy = ((int) current[1])/182/6;
 80071d8:	4b29      	ldr	r3, [pc, #164]	; (8007280 <read_gyro+0x408>)
 80071da:	edd3 7a01 	vldr	s15, [r3, #4]
 80071de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071e2:	ee17 3a90 	vmov	r3, s15
 80071e6:	4a27      	ldr	r2, [pc, #156]	; (8007284 <read_gyro+0x40c>)
 80071e8:	fb82 1203 	smull	r1, r2, r2, r3
 80071ec:	441a      	add	r2, r3
 80071ee:	1292      	asrs	r2, r2, #10
 80071f0:	17db      	asrs	r3, r3, #31
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	601a      	str	r2, [r3, #0]
	*gyroz = ((int) current[2])/182/6;
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <read_gyro+0x408>)
 80071fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80071fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007202:	ee17 3a90 	vmov	r3, s15
 8007206:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <read_gyro+0x40c>)
 8007208:	fb82 1203 	smull	r1, r2, r2, r3
 800720c:	441a      	add	r2, r3
 800720e:	1292      	asrs	r2, r2, #10
 8007210:	17db      	asrs	r3, r3, #31
 8007212:	1ad2      	subs	r2, r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]

	*gyrox = *gyrox % 360;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <read_gyro+0x410>)
 800721e:	fb82 1203 	smull	r1, r2, r2, r3
 8007222:	441a      	add	r2, r3
 8007224:	1211      	asrs	r1, r2, #8
 8007226:	17da      	asrs	r2, r3, #31
 8007228:	1a8a      	subs	r2, r1, r2
 800722a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800722e:	fb01 f202 	mul.w	r2, r1, r2
 8007232:	1a9a      	subs	r2, r3, r2
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]
	*gyroy = *gyroy % 360;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a12      	ldr	r2, [pc, #72]	; (8007288 <read_gyro+0x410>)
 800723e:	fb82 1203 	smull	r1, r2, r2, r3
 8007242:	441a      	add	r2, r3
 8007244:	1211      	asrs	r1, r2, #8
 8007246:	17da      	asrs	r2, r3, #31
 8007248:	1a8a      	subs	r2, r1, r2
 800724a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800724e:	fb01 f202 	mul.w	r2, r1, r2
 8007252:	1a9a      	subs	r2, r3, r2
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	601a      	str	r2, [r3, #0]
	*gyroz = *gyroz % 360;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a0a      	ldr	r2, [pc, #40]	; (8007288 <read_gyro+0x410>)
 800725e:	fb82 1203 	smull	r1, r2, r2, r3
 8007262:	441a      	add	r2, r3
 8007264:	1211      	asrs	r1, r2, #8
 8007266:	17da      	asrs	r2, r3, #31
 8007268:	1a8a      	subs	r2, r1, r2
 800726a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800726e:	fb01 f202 	mul.w	r2, r1, r2
 8007272:	1a9a      	subs	r2, r3, r2
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bd90      	pop	{r4, r7, pc}
 8007280:	20003e3c 	.word	0x20003e3c
 8007284:	f00f00f1 	.word	0xf00f00f1
 8007288:	b60b60b7 	.word	0xb60b60b7

0800728c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8007290:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <MX_I2C3_Init+0x74>)
 8007292:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <MX_I2C3_Init+0x78>)
 8007294:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007296:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <MX_I2C3_Init+0x74>)
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <MX_I2C3_Init+0x7c>)
 800729a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800729c:	4b18      	ldr	r3, [pc, #96]	; (8007300 <MX_I2C3_Init+0x74>)
 800729e:	2200      	movs	r2, #0
 80072a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80072a2:	4b17      	ldr	r3, [pc, #92]	; (8007300 <MX_I2C3_Init+0x74>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <MX_I2C3_Init+0x74>)
 80072aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80072b0:	4b13      	ldr	r3, [pc, #76]	; (8007300 <MX_I2C3_Init+0x74>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <MX_I2C3_Init+0x74>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <MX_I2C3_Init+0x74>)
 80072be:	2200      	movs	r2, #0
 80072c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <MX_I2C3_Init+0x74>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80072c8:	480d      	ldr	r0, [pc, #52]	; (8007300 <MX_I2C3_Init+0x74>)
 80072ca:	f7fa fbd1 	bl	8001a70 <HAL_I2C_Init>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80072d4:	f001 f8f0 	bl	80084b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80072d8:	2100      	movs	r1, #0
 80072da:	4809      	ldr	r0, [pc, #36]	; (8007300 <MX_I2C3_Init+0x74>)
 80072dc:	f7fb fb83 	bl	80029e6 <HAL_I2CEx_ConfigAnalogFilter>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80072e6:	f001 f8e7 	bl	80084b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80072ea:	2100      	movs	r1, #0
 80072ec:	4804      	ldr	r0, [pc, #16]	; (8007300 <MX_I2C3_Init+0x74>)
 80072ee:	f7fb fbb6 	bl	8002a5e <HAL_I2CEx_ConfigDigitalFilter>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80072f8:	f001 f8de 	bl	80084b8 <Error_Handler>
  }

}
 80072fc:	bf00      	nop
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20003f94 	.word	0x20003f94
 8007304:	40005c00 	.word	0x40005c00
 8007308:	000186a0 	.word	0x000186a0

0800730c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	; 0x28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	609a      	str	r2, [r3, #8]
 8007320:	60da      	str	r2, [r3, #12]
 8007322:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a29      	ldr	r2, [pc, #164]	; (80073d0 <HAL_I2C_MspInit+0xc4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d14b      	bne.n	80073c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800732e:	2300      	movs	r3, #0
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	4a28      	ldr	r2, [pc, #160]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 8007334:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	f043 0304 	orr.w	r3, r3, #4
 800733c:	6313      	str	r3, [r2, #48]	; 0x30
 800733e:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	4a21      	ldr	r2, [pc, #132]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 8007350:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	6313      	str	r3, [r2, #48]	; 0x30
 800735a:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8007366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800736a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800736c:	2312      	movs	r3, #18
 800736e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007370:	2301      	movs	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007378:	2304      	movs	r3, #4
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800737c:	f107 0314 	add.w	r3, r7, #20
 8007380:	4619      	mov	r1, r3
 8007382:	4815      	ldr	r0, [pc, #84]	; (80073d8 <HAL_I2C_MspInit+0xcc>)
 8007384:	f7fa f8a4 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8007388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800738e:	2312      	movs	r3, #18
 8007390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007392:	2301      	movs	r3, #1
 8007394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007396:	2300      	movs	r3, #0
 8007398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800739a:	2304      	movs	r3, #4
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800739e:	f107 0314 	add.w	r3, r7, #20
 80073a2:	4619      	mov	r1, r3
 80073a4:	480d      	ldr	r0, [pc, #52]	; (80073dc <HAL_I2C_MspInit+0xd0>)
 80073a6:	f7fa f893 	bl	80014d0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 80073b0:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073b8:	6413      	str	r3, [r2, #64]	; 0x40
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_I2C_MspInit+0xc8>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c2:	60bb      	str	r3, [r7, #8]
 80073c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80073c6:	bf00      	nop
 80073c8:	3728      	adds	r7, #40	; 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40005c00 	.word	0x40005c00
 80073d4:	40023800 	.word	0x40023800
 80073d8:	40020800 	.word	0x40020800
 80073dc:	40020000 	.word	0x40020000

080073e0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a0b      	ldr	r2, [pc, #44]	; (800741c <HAL_I2C_MspDeInit+0x3c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d10f      	bne.n	8007412 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80073f2:	4a0b      	ldr	r2, [pc, #44]	; (8007420 <HAL_I2C_MspDeInit+0x40>)
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <HAL_I2C_MspDeInit+0x40>)
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073fc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80073fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007402:	4808      	ldr	r0, [pc, #32]	; (8007424 <HAL_I2C_MspDeInit+0x44>)
 8007404:	f7fa fa0e 	bl	8001824 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8007408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800740c:	4806      	ldr	r0, [pc, #24]	; (8007428 <HAL_I2C_MspDeInit+0x48>)
 800740e:	f7fa fa09 	bl	8001824 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40005c00 	.word	0x40005c00
 8007420:	40023800 	.word	0x40023800
 8007424:	40020800 	.word	0x40020800
 8007428:	40020000 	.word	0x40020000

0800742c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8007430:	f001 fb0e 	bl	8008a50 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8007434:	20ca      	movs	r0, #202	; 0xca
 8007436:	f000 f95d 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800743a:	20c3      	movs	r0, #195	; 0xc3
 800743c:	f000 f967 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8007440:	2008      	movs	r0, #8
 8007442:	f000 f964 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8007446:	2050      	movs	r0, #80	; 0x50
 8007448:	f000 f961 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800744c:	20cf      	movs	r0, #207	; 0xcf
 800744e:	f000 f951 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007452:	2000      	movs	r0, #0
 8007454:	f000 f95b 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8007458:	20c1      	movs	r0, #193	; 0xc1
 800745a:	f000 f958 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800745e:	2030      	movs	r0, #48	; 0x30
 8007460:	f000 f955 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8007464:	20ed      	movs	r0, #237	; 0xed
 8007466:	f000 f945 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800746a:	2064      	movs	r0, #100	; 0x64
 800746c:	f000 f94f 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8007470:	2003      	movs	r0, #3
 8007472:	f000 f94c 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8007476:	2012      	movs	r0, #18
 8007478:	f000 f949 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800747c:	2081      	movs	r0, #129	; 0x81
 800747e:	f000 f946 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8007482:	20e8      	movs	r0, #232	; 0xe8
 8007484:	f000 f936 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8007488:	2085      	movs	r0, #133	; 0x85
 800748a:	f000 f940 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800748e:	2000      	movs	r0, #0
 8007490:	f000 f93d 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007494:	2078      	movs	r0, #120	; 0x78
 8007496:	f000 f93a 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800749a:	20cb      	movs	r0, #203	; 0xcb
 800749c:	f000 f92a 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80074a0:	2039      	movs	r0, #57	; 0x39
 80074a2:	f000 f934 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80074a6:	202c      	movs	r0, #44	; 0x2c
 80074a8:	f000 f931 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80074ac:	2000      	movs	r0, #0
 80074ae:	f000 f92e 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80074b2:	2034      	movs	r0, #52	; 0x34
 80074b4:	f000 f92b 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80074b8:	2002      	movs	r0, #2
 80074ba:	f000 f928 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80074be:	20f7      	movs	r0, #247	; 0xf7
 80074c0:	f000 f918 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80074c4:	2020      	movs	r0, #32
 80074c6:	f000 f922 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80074ca:	20ea      	movs	r0, #234	; 0xea
 80074cc:	f000 f912 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80074d0:	2000      	movs	r0, #0
 80074d2:	f000 f91c 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80074d6:	2000      	movs	r0, #0
 80074d8:	f000 f919 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80074dc:	20b1      	movs	r0, #177	; 0xb1
 80074de:	f000 f909 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80074e2:	2000      	movs	r0, #0
 80074e4:	f000 f913 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80074e8:	201b      	movs	r0, #27
 80074ea:	f000 f910 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80074ee:	20b6      	movs	r0, #182	; 0xb6
 80074f0:	f000 f900 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80074f4:	200a      	movs	r0, #10
 80074f6:	f000 f90a 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80074fa:	20a2      	movs	r0, #162	; 0xa2
 80074fc:	f000 f907 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8007500:	20c0      	movs	r0, #192	; 0xc0
 8007502:	f000 f8f7 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8007506:	2010      	movs	r0, #16
 8007508:	f000 f901 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800750c:	20c1      	movs	r0, #193	; 0xc1
 800750e:	f000 f8f1 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8007512:	2010      	movs	r0, #16
 8007514:	f000 f8fb 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8007518:	20c5      	movs	r0, #197	; 0xc5
 800751a:	f000 f8eb 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800751e:	2045      	movs	r0, #69	; 0x45
 8007520:	f000 f8f5 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8007524:	2015      	movs	r0, #21
 8007526:	f000 f8f2 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800752a:	20c7      	movs	r0, #199	; 0xc7
 800752c:	f000 f8e2 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8007530:	2090      	movs	r0, #144	; 0x90
 8007532:	f000 f8ec 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8007536:	2036      	movs	r0, #54	; 0x36
 8007538:	f000 f8dc 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800753c:	20c8      	movs	r0, #200	; 0xc8
 800753e:	f000 f8e6 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8007542:	20f2      	movs	r0, #242	; 0xf2
 8007544:	f000 f8d6 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007548:	2000      	movs	r0, #0
 800754a:	f000 f8e0 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800754e:	20b0      	movs	r0, #176	; 0xb0
 8007550:	f000 f8d0 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8007554:	20c2      	movs	r0, #194	; 0xc2
 8007556:	f000 f8da 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800755a:	20b6      	movs	r0, #182	; 0xb6
 800755c:	f000 f8ca 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8007560:	200a      	movs	r0, #10
 8007562:	f000 f8d4 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8007566:	20a7      	movs	r0, #167	; 0xa7
 8007568:	f000 f8d1 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800756c:	2027      	movs	r0, #39	; 0x27
 800756e:	f000 f8ce 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8007572:	2004      	movs	r0, #4
 8007574:	f000 f8cb 	bl	800770e <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8007578:	202a      	movs	r0, #42	; 0x2a
 800757a:	f000 f8bb 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800757e:	2000      	movs	r0, #0
 8007580:	f000 f8c5 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007584:	2000      	movs	r0, #0
 8007586:	f000 f8c2 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800758a:	2000      	movs	r0, #0
 800758c:	f000 f8bf 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8007590:	20ef      	movs	r0, #239	; 0xef
 8007592:	f000 f8bc 	bl	800770e <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8007596:	202b      	movs	r0, #43	; 0x2b
 8007598:	f000 f8ac 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800759c:	2000      	movs	r0, #0
 800759e:	f000 f8b6 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80075a2:	2000      	movs	r0, #0
 80075a4:	f000 f8b3 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80075a8:	2001      	movs	r0, #1
 80075aa:	f000 f8b0 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80075ae:	203f      	movs	r0, #63	; 0x3f
 80075b0:	f000 f8ad 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80075b4:	20f6      	movs	r0, #246	; 0xf6
 80075b6:	f000 f89d 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80075ba:	2001      	movs	r0, #1
 80075bc:	f000 f8a7 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80075c0:	2000      	movs	r0, #0
 80075c2:	f000 f8a4 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80075c6:	2006      	movs	r0, #6
 80075c8:	f000 f8a1 	bl	800770e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80075cc:	202c      	movs	r0, #44	; 0x2c
 80075ce:	f000 f891 	bl	80076f4 <ili9341_WriteReg>
  LCD_Delay(200);
 80075d2:	20c8      	movs	r0, #200	; 0xc8
 80075d4:	f001 fb2a 	bl	8008c2c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80075d8:	2026      	movs	r0, #38	; 0x26
 80075da:	f000 f88b 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80075de:	2001      	movs	r0, #1
 80075e0:	f000 f895 	bl	800770e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80075e4:	20e0      	movs	r0, #224	; 0xe0
 80075e6:	f000 f885 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80075ea:	200f      	movs	r0, #15
 80075ec:	f000 f88f 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80075f0:	2029      	movs	r0, #41	; 0x29
 80075f2:	f000 f88c 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80075f6:	2024      	movs	r0, #36	; 0x24
 80075f8:	f000 f889 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80075fc:	200c      	movs	r0, #12
 80075fe:	f000 f886 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8007602:	200e      	movs	r0, #14
 8007604:	f000 f883 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8007608:	2009      	movs	r0, #9
 800760a:	f000 f880 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800760e:	204e      	movs	r0, #78	; 0x4e
 8007610:	f000 f87d 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007614:	2078      	movs	r0, #120	; 0x78
 8007616:	f000 f87a 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800761a:	203c      	movs	r0, #60	; 0x3c
 800761c:	f000 f877 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8007620:	2009      	movs	r0, #9
 8007622:	f000 f874 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8007626:	2013      	movs	r0, #19
 8007628:	f000 f871 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800762c:	2005      	movs	r0, #5
 800762e:	f000 f86e 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8007632:	2017      	movs	r0, #23
 8007634:	f000 f86b 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007638:	2011      	movs	r0, #17
 800763a:	f000 f868 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800763e:	2000      	movs	r0, #0
 8007640:	f000 f865 	bl	800770e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8007644:	20e1      	movs	r0, #225	; 0xe1
 8007646:	f000 f855 	bl	80076f4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800764a:	2000      	movs	r0, #0
 800764c:	f000 f85f 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8007650:	2016      	movs	r0, #22
 8007652:	f000 f85c 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8007656:	201b      	movs	r0, #27
 8007658:	f000 f859 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800765c:	2004      	movs	r0, #4
 800765e:	f000 f856 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007662:	2011      	movs	r0, #17
 8007664:	f000 f853 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8007668:	2007      	movs	r0, #7
 800766a:	f000 f850 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800766e:	2031      	movs	r0, #49	; 0x31
 8007670:	f000 f84d 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8007674:	2033      	movs	r0, #51	; 0x33
 8007676:	f000 f84a 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800767a:	2042      	movs	r0, #66	; 0x42
 800767c:	f000 f847 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007680:	2005      	movs	r0, #5
 8007682:	f000 f844 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007686:	200c      	movs	r0, #12
 8007688:	f000 f841 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800768c:	200a      	movs	r0, #10
 800768e:	f000 f83e 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8007692:	2028      	movs	r0, #40	; 0x28
 8007694:	f000 f83b 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8007698:	202f      	movs	r0, #47	; 0x2f
 800769a:	f000 f838 	bl	800770e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800769e:	200f      	movs	r0, #15
 80076a0:	f000 f835 	bl	800770e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80076a4:	2011      	movs	r0, #17
 80076a6:	f000 f825 	bl	80076f4 <ili9341_WriteReg>
  LCD_Delay(200);
 80076aa:	20c8      	movs	r0, #200	; 0xc8
 80076ac:	f001 fabe 	bl	8008c2c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80076b0:	2029      	movs	r0, #41	; 0x29
 80076b2:	f000 f81f 	bl	80076f4 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80076b6:	202c      	movs	r0, #44	; 0x2c
 80076b8:	f000 f81c 	bl	80076f4 <ili9341_WriteReg>
}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}

080076c0 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80076c4:	f001 f9c4 	bl	8008a50 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80076c8:	2103      	movs	r1, #3
 80076ca:	20d3      	movs	r0, #211	; 0xd3
 80076cc:	f000 f82c 	bl	8007728 <ili9341_ReadData>
 80076d0:	4603      	mov	r3, r0
 80076d2:	b29b      	uxth	r3, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80076dc:	2029      	movs	r0, #41	; 0x29
 80076de:	f000 f809 	bl	80076f4 <ili9341_WriteReg>
}
 80076e2:	bf00      	nop
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80076ea:	2028      	movs	r0, #40	; 0x28
 80076ec:	f000 f802 	bl	80076f4 <ili9341_WriteReg>
}
 80076f0:	bf00      	nop
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fa3f 	bl	8008b84 <LCD_IO_WriteReg>
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	4603      	mov	r3, r0
 8007716:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	4618      	mov	r0, r3
 800771c:	f001 fa10 	bl	8008b40 <LCD_IO_WriteData>
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	460a      	mov	r2, r1
 8007732:	80fb      	strh	r3, [r7, #6]
 8007734:	4613      	mov	r3, r2
 8007736:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8007738:	797a      	ldrb	r2, [r7, #5]
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fa42 	bl	8008bc8 <LCD_IO_ReadData>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800774e:	b480      	push	{r7}
 8007750:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8007752:	23f0      	movs	r3, #240	; 0xf0
}
 8007754:	4618      	mov	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800775e:	b480      	push	{r7}
 8007760:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8007762:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8007766:	4618      	mov	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <initMenu>:

extern int x;
extern int y;
extern int z;

void initMenu(TS_StateTypeDef* str, globalClass* globalClassHandler) {
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	localstr = str;
 800777a:	4a06      	ldr	r2, [pc, #24]	; (8007794 <initMenu+0x24>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6013      	str	r3, [r2, #0]
	localClassHandler = globalClassHandler;
 8007780:	4a05      	ldr	r2, [pc, #20]	; (8007798 <initMenu+0x28>)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6013      	str	r3, [r2, #0]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20003fe8 	.word	0x20003fe8
 8007798:	20003fec 	.word	0x20003fec

0800779c <screenRefresh>:

void screenRefresh(void) {
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
	BSP_LCD_SelectLayer(1);
 80077a0:	2001      	movs	r0, #1
 80077a2:	f001 fb51 	bl	8008e48 <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80077a6:	4808      	ldr	r0, [pc, #32]	; (80077c8 <screenRefresh+0x2c>)
 80077a8:	f001 fb90 	bl	8008ecc <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b0:	f001 fb72 	bl	8008e98 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b8:	f001 fba2 	bl	8008f00 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font24);
 80077bc:	4802      	ldr	r0, [pc, #8]	; (80077c8 <screenRefresh+0x2c>)
 80077be:	f001 fb85 	bl	8008ecc <BSP_LCD_SetFont>
}
 80077c2:	bf00      	nop
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000010 	.word	0x20000010

080077cc <DrawButton>:

void DrawButton(char* text, uint8_t line_number) {
 80077cc:	b590      	push	{r4, r7, lr}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80077d8:	4813      	ldr	r0, [pc, #76]	; (8007828 <DrawButton+0x5c>)
 80077da:	f001 fb45 	bl	8008e68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(20, line_number, BSP_LCD_GetXSize()-40, 44);
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	b29c      	uxth	r4, r3
 80077e2:	f001 fab3 	bl	8008d4c <BSP_LCD_GetXSize>
 80077e6:	4603      	mov	r3, r0
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b28      	subs	r3, #40	; 0x28
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	232c      	movs	r3, #44	; 0x2c
 80077f0:	4621      	mov	r1, r4
 80077f2:	2014      	movs	r0, #20
 80077f4:	f001 fddc 	bl	80093b0 <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 80077f8:	480b      	ldr	r0, [pc, #44]	; (8007828 <DrawButton+0x5c>)
 80077fa:	f001 fb4d 	bl	8008e98 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007802:	f001 fb31 	bl	8008e68 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8007806:	4809      	ldr	r0, [pc, #36]	; (800782c <DrawButton+0x60>)
 8007808:	f001 fb60 	bl	8008ecc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, line_number + 14, (uint8_t*)text,
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	b29b      	uxth	r3, r3
 8007810:	330e      	adds	r3, #14
 8007812:	b299      	uxth	r1, r3
 8007814:	2301      	movs	r3, #1
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	2000      	movs	r0, #0
 800781a:	f001 fbdf 	bl	8008fdc <BSP_LCD_DisplayStringAt>
			CENTER_MODE);
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	bd90      	pop	{r4, r7, pc}
 8007826:	bf00      	nop
 8007828:	ff000080 	.word	0xff000080
 800782c:	20000008 	.word	0x20000008

08007830 <Display>:

void Display(void) {
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
	if (page == 0) Display_Intro();
 8007834:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <Display+0x44>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <Display+0x10>
 800783c:	f000 f83a 	bl	80078b4 <Display_Intro>
	if (page == 1) Display_Menu();
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <Display+0x44>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <Display+0x1c>
 8007848:	f000 f956 	bl	8007af8 <Display_Menu>
	if (page == 2) Display_Start();
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <Display+0x44>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d101      	bne.n	8007858 <Display+0x28>
 8007854:	f000 f982 	bl	8007b5c <Display_Start>
	if (page == 3) Display_Odczyty();
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <Display+0x44>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d101      	bne.n	8007864 <Display+0x34>
 8007860:	f000 f9cc 	bl	8007bfc <Display_Odczyty>
	if (page == 4) Display_Onas();
 8007864:	4b03      	ldr	r3, [pc, #12]	; (8007874 <Display+0x44>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d101      	bne.n	8007870 <Display+0x40>
 800786c:	f000 fa52 	bl	8007d14 <Display_Onas>
}
 8007870:	bf00      	nop
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20003e4c 	.word	0x20003e4c

08007878 <Service>:

void Service(void) {
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
	if (page == 1) menuService();
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <Service+0x38>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <Service+0x10>
 8007884:	f000 fa84 	bl	8007d90 <menuService>
	if (page == 2) startService();
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <Service+0x38>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d101      	bne.n	8007894 <Service+0x1c>
 8007890:	f000 faca 	bl	8007e28 <startService>
	if (page == 3) odczytyService();
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <Service+0x38>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d101      	bne.n	80078a0 <Service+0x28>
 800789c:	f000 fae8 	bl	8007e70 <odczytyService>
	if (page == 4) onasService();
 80078a0:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <Service+0x38>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d101      	bne.n	80078ac <Service+0x34>
 80078a8:	f000 fb06 	bl	8007eb8 <onasService>
}
 80078ac:	bf00      	nop
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20003e4c 	.word	0x20003e4c

080078b4 <Display_Intro>:

void Display_Intro(void) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
	if(switchingINTRO_flag == 0) {
 80078ba:	4b89      	ldr	r3, [pc, #548]	; (8007ae0 <Display_Intro+0x22c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 810a 	bne.w	8007ad8 <Display_Intro+0x224>
		switchingINTRO_flag = 1;
 80078c4:	4b86      	ldr	r3, [pc, #536]	; (8007ae0 <Display_Intro+0x22c>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
		screenRefresh();
 80078ca:	f7ff ff67 	bl	800779c <screenRefresh>
		int waitTime = 500;
 80078ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80078d2:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80078d4:	4883      	ldr	r0, [pc, #524]	; (8007ae4 <Display_Intro+0x230>)
 80078d6:	f001 fac7 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80078da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078de:	f001 fadb 	bl	8008e98 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"LABIRINTH", CENTER_MODE);
 80078e2:	2301      	movs	r3, #1
 80078e4:	4a80      	ldr	r2, [pc, #512]	; (8007ae8 <Display_Intro+0x234>)
 80078e6:	2150      	movs	r1, #80	; 0x50
 80078e8:	2000      	movs	r0, #0
 80078ea:	f001 fb77 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 110, (uint8_t*)"GAME", CENTER_MODE);
 80078ee:	2301      	movs	r3, #1
 80078f0:	4a7e      	ldr	r2, [pc, #504]	; (8007aec <Display_Intro+0x238>)
 80078f2:	216e      	movs	r1, #110	; 0x6e
 80078f4:	2000      	movs	r0, #0
 80078f6:	f001 fb71 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80078fa:	487a      	ldr	r0, [pc, #488]	; (8007ae4 <Display_Intro+0x230>)
 80078fc:	f001 fab4 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 8007900:	2314      	movs	r3, #20
 8007902:	2214      	movs	r2, #20
 8007904:	2196      	movs	r1, #150	; 0x96
 8007906:	2050      	movs	r0, #80	; 0x50
 8007908:	f001 fd52 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 180, 20, 20);
 800790c:	2314      	movs	r3, #20
 800790e:	2214      	movs	r2, #20
 8007910:	21b4      	movs	r1, #180	; 0xb4
 8007912:	2050      	movs	r0, #80	; 0x50
 8007914:	f001 fd4c 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 210, 20, 20);
 8007918:	2314      	movs	r3, #20
 800791a:	2214      	movs	r2, #20
 800791c:	21d2      	movs	r1, #210	; 0xd2
 800791e:	2050      	movs	r0, #80	; 0x50
 8007920:	f001 fd46 	bl	80093b0 <BSP_LCD_FillRect>

		BSP_LCD_FillRect(110, 150, 20, 20);
 8007924:	2314      	movs	r3, #20
 8007926:	2214      	movs	r2, #20
 8007928:	2196      	movs	r1, #150	; 0x96
 800792a:	206e      	movs	r0, #110	; 0x6e
 800792c:	f001 fd40 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 180, 20, 20);
 8007930:	2314      	movs	r3, #20
 8007932:	2214      	movs	r2, #20
 8007934:	21b4      	movs	r1, #180	; 0xb4
 8007936:	206e      	movs	r0, #110	; 0x6e
 8007938:	f001 fd3a 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 210, 20, 20);
 800793c:	2314      	movs	r3, #20
 800793e:	2214      	movs	r2, #20
 8007940:	21d2      	movs	r1, #210	; 0xd2
 8007942:	206e      	movs	r0, #110	; 0x6e
 8007944:	f001 fd34 	bl	80093b0 <BSP_LCD_FillRect>

		BSP_LCD_FillRect(140, 150, 20, 20);
 8007948:	2314      	movs	r3, #20
 800794a:	2214      	movs	r2, #20
 800794c:	2196      	movs	r1, #150	; 0x96
 800794e:	208c      	movs	r0, #140	; 0x8c
 8007950:	f001 fd2e 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007954:	2314      	movs	r3, #20
 8007956:	2214      	movs	r2, #20
 8007958:	21b4      	movs	r1, #180	; 0xb4
 800795a:	208c      	movs	r0, #140	; 0x8c
 800795c:	f001 fd28 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007960:	2314      	movs	r3, #20
 8007962:	2214      	movs	r2, #20
 8007964:	21d2      	movs	r1, #210	; 0xd2
 8007966:	208c      	movs	r0, #140	; 0x8c
 8007968:	f001 fd22 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800796c:	485d      	ldr	r0, [pc, #372]	; (8007ae4 <Display_Intro+0x230>)
 800796e:	f001 fa93 	bl	8008e98 <BSP_LCD_SetBackColor>
		//Loading module
		HAL_Delay(waitTime);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f7f9 fa1f 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800797a:	485d      	ldr	r0, [pc, #372]	; (8007af0 <Display_Intro+0x23c>)
 800797c:	f001 fa74 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 8007980:	2314      	movs	r3, #20
 8007982:	2214      	movs	r2, #20
 8007984:	2196      	movs	r1, #150	; 0x96
 8007986:	2050      	movs	r0, #80	; 0x50
 8007988:	f001 fd12 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800798c:	4858      	ldr	r0, [pc, #352]	; (8007af0 <Display_Intro+0x23c>)
 800798e:	f001 fa83 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f7f9 fa0f 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800799a:	4855      	ldr	r0, [pc, #340]	; (8007af0 <Display_Intro+0x23c>)
 800799c:	f001 fa64 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 180, 20, 20);
 80079a0:	2314      	movs	r3, #20
 80079a2:	2214      	movs	r2, #20
 80079a4:	21b4      	movs	r1, #180	; 0xb4
 80079a6:	2050      	movs	r0, #80	; 0x50
 80079a8:	f001 fd02 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80079ac:	4850      	ldr	r0, [pc, #320]	; (8007af0 <Display_Intro+0x23c>)
 80079ae:	f001 fa73 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7f9 f9ff 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80079ba:	484d      	ldr	r0, [pc, #308]	; (8007af0 <Display_Intro+0x23c>)
 80079bc:	f001 fa54 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 210, 20, 20);
 80079c0:	2314      	movs	r3, #20
 80079c2:	2214      	movs	r2, #20
 80079c4:	21d2      	movs	r1, #210	; 0xd2
 80079c6:	2050      	movs	r0, #80	; 0x50
 80079c8:	f001 fcf2 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80079cc:	4848      	ldr	r0, [pc, #288]	; (8007af0 <Display_Intro+0x23c>)
 80079ce:	f001 fa63 	bl	8008e98 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7f9 f9ef 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80079da:	4845      	ldr	r0, [pc, #276]	; (8007af0 <Display_Intro+0x23c>)
 80079dc:	f001 fa44 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 210, 20, 20);
 80079e0:	2314      	movs	r3, #20
 80079e2:	2214      	movs	r2, #20
 80079e4:	21d2      	movs	r1, #210	; 0xd2
 80079e6:	206e      	movs	r0, #110	; 0x6e
 80079e8:	f001 fce2 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80079ec:	4840      	ldr	r0, [pc, #256]	; (8007af0 <Display_Intro+0x23c>)
 80079ee:	f001 fa53 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7f9 f9df 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80079fa:	483d      	ldr	r0, [pc, #244]	; (8007af0 <Display_Intro+0x23c>)
 80079fc:	f001 fa34 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007a00:	2314      	movs	r3, #20
 8007a02:	2214      	movs	r2, #20
 8007a04:	21d2      	movs	r1, #210	; 0xd2
 8007a06:	208c      	movs	r0, #140	; 0x8c
 8007a08:	f001 fcd2 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a0c:	4838      	ldr	r0, [pc, #224]	; (8007af0 <Display_Intro+0x23c>)
 8007a0e:	f001 fa43 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f9 f9cf 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a1a:	4835      	ldr	r0, [pc, #212]	; (8007af0 <Display_Intro+0x23c>)
 8007a1c:	f001 fa24 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007a20:	2314      	movs	r3, #20
 8007a22:	2214      	movs	r2, #20
 8007a24:	21b4      	movs	r1, #180	; 0xb4
 8007a26:	208c      	movs	r0, #140	; 0x8c
 8007a28:	f001 fcc2 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a2c:	4830      	ldr	r0, [pc, #192]	; (8007af0 <Display_Intro+0x23c>)
 8007a2e:	f001 fa33 	bl	8008e98 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7f9 f9bf 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a3a:	482d      	ldr	r0, [pc, #180]	; (8007af0 <Display_Intro+0x23c>)
 8007a3c:	f001 fa14 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 150, 20, 20);
 8007a40:	2314      	movs	r3, #20
 8007a42:	2214      	movs	r2, #20
 8007a44:	2196      	movs	r1, #150	; 0x96
 8007a46:	208c      	movs	r0, #140	; 0x8c
 8007a48:	f001 fcb2 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a4c:	4828      	ldr	r0, [pc, #160]	; (8007af0 <Display_Intro+0x23c>)
 8007a4e:	f001 fa23 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f9 f9af 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a5a:	4825      	ldr	r0, [pc, #148]	; (8007af0 <Display_Intro+0x23c>)
 8007a5c:	f001 fa04 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 150, 20, 20);
 8007a60:	2314      	movs	r3, #20
 8007a62:	2214      	movs	r2, #20
 8007a64:	2196      	movs	r1, #150	; 0x96
 8007a66:	206e      	movs	r0, #110	; 0x6e
 8007a68:	f001 fca2 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a6c:	4820      	ldr	r0, [pc, #128]	; (8007af0 <Display_Intro+0x23c>)
 8007a6e:	f001 fa13 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7f9 f99f 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a7a:	481d      	ldr	r0, [pc, #116]	; (8007af0 <Display_Intro+0x23c>)
 8007a7c:	f001 f9f4 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 180, 20, 20);
 8007a80:	2314      	movs	r3, #20
 8007a82:	2214      	movs	r2, #20
 8007a84:	21b4      	movs	r1, #180	; 0xb4
 8007a86:	206e      	movs	r0, #110	; 0x6e
 8007a88:	f001 fc92 	bl	80093b0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a8c:	4818      	ldr	r0, [pc, #96]	; (8007af0 <Display_Intro+0x23c>)
 8007a8e:	f001 fa03 	bl	8008e98 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f9 f98f 	bl	8000db8 <HAL_Delay>

		for(int i=80; i>=20; i--)
 8007a9a:	2350      	movs	r3, #80	; 0x50
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	e015      	b.n	8007acc <Display_Intro+0x218>
		{
			screenRefresh();
 8007aa0:	f7ff fe7c 	bl	800779c <screenRefresh>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007aa4:	480f      	ldr	r0, [pc, #60]	; (8007ae4 <Display_Intro+0x230>)
 8007aa6:	f001 f9df 	bl	8008e68 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aae:	f001 f9f3 	bl	8008e98 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, i, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	b299      	uxth	r1, r3
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4a0b      	ldr	r2, [pc, #44]	; (8007ae8 <Display_Intro+0x234>)
 8007aba:	2000      	movs	r0, #0
 8007abc:	f001 fa8e 	bl	8008fdc <BSP_LCD_DisplayStringAt>
			HAL_Delay(15);
 8007ac0:	200f      	movs	r0, #15
 8007ac2:	f7f9 f979 	bl	8000db8 <HAL_Delay>
		for(int i=80; i>=20; i--)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b13      	cmp	r3, #19
 8007ad0:	dce6      	bgt.n	8007aa0 <Display_Intro+0x1ec>
		}
		page = 1;
 8007ad2:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <Display_Intro+0x240>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
	}
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20003e48 	.word	0x20003e48
 8007ae4:	ff000080 	.word	0xff000080
 8007ae8:	0800a484 	.word	0x0800a484
 8007aec:	0800a490 	.word	0x0800a490
 8007af0:	ffff0000 	.word	0xffff0000
 8007af4:	20003e4c 	.word	0x20003e4c

08007af8 <Display_Menu>:

void Display_Menu(void) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
	if(switchingMENU_flag == 1) {
 8007afc:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <Display_Menu+0x4c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d11d      	bne.n	8007b40 <Display_Menu+0x48>
		switchingMENU_flag = 0;
 8007b04:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <Display_Menu+0x4c>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007b0a:	f7ff fe47 	bl	800779c <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007b0e:	480e      	ldr	r0, [pc, #56]	; (8007b48 <Display_Menu+0x50>)
 8007b10:	f001 f9aa 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b18:	f001 f9be 	bl	8008e98 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4a0b      	ldr	r2, [pc, #44]	; (8007b4c <Display_Menu+0x54>)
 8007b20:	2114      	movs	r1, #20
 8007b22:	2000      	movs	r0, #0
 8007b24:	f001 fa5a 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		DrawButton("START",60);
 8007b28:	213c      	movs	r1, #60	; 0x3c
 8007b2a:	4809      	ldr	r0, [pc, #36]	; (8007b50 <Display_Menu+0x58>)
 8007b2c:	f7ff fe4e 	bl	80077cc <DrawButton>
		DrawButton("ODCZYTY",120);
 8007b30:	2178      	movs	r1, #120	; 0x78
 8007b32:	4808      	ldr	r0, [pc, #32]	; (8007b54 <Display_Menu+0x5c>)
 8007b34:	f7ff fe4a 	bl	80077cc <DrawButton>
		DrawButton("O NAS",180);
 8007b38:	21b4      	movs	r1, #180	; 0xb4
 8007b3a:	4807      	ldr	r0, [pc, #28]	; (8007b58 <Display_Menu+0x60>)
 8007b3c:	f7ff fe46 	bl	80077cc <DrawButton>
	}
}
 8007b40:	bf00      	nop
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000054 	.word	0x20000054
 8007b48:	ff000080 	.word	0xff000080
 8007b4c:	0800a484 	.word	0x0800a484
 8007b50:	0800a498 	.word	0x0800a498
 8007b54:	0800a4a0 	.word	0x0800a4a0
 8007b58:	0800a4a8 	.word	0x0800a4a8

08007b5c <Display_Start>:

void Display_Start(void) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
	if(switchingSTART_flag == 1) {
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <Display_Start+0x7c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d135      	bne.n	8007bd4 <Display_Start+0x78>
		switchingSTART_flag = 0;
 8007b68:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <Display_Start+0x7c>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007b6e:	f7ff fe15 	bl	800779c <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007b72:	481a      	ldr	r0, [pc, #104]	; (8007bdc <Display_Start+0x80>)
 8007b74:	f001 f978 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b7c:	f001 f98c 	bl	8008e98 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"SCENA GRY", CENTER_MODE);
 8007b80:	2301      	movs	r3, #1
 8007b82:	4a17      	ldr	r2, [pc, #92]	; (8007be0 <Display_Start+0x84>)
 8007b84:	2114      	movs	r1, #20
 8007b86:	2000      	movs	r0, #0
 8007b88:	f001 fa28 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007b8c:	21fa      	movs	r1, #250	; 0xfa
 8007b8e:	4815      	ldr	r0, [pc, #84]	; (8007be4 <Display_Start+0x88>)
 8007b90:	f7ff fe1c 	bl	80077cc <DrawButton>

		static uint16_t xpos = 100;
		static uint16_t ypos = 100;
		xpos += x;
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <Display_Start+0x8c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <Display_Start+0x90>)
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <Display_Start+0x90>)
 8007ba4:	801a      	strh	r2, [r3, #0]
		ypos += y;
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <Display_Start+0x94>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <Display_Start+0x98>)
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <Display_Start+0x98>)
 8007bb6:	801a      	strh	r2, [r3, #0]

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007bb8:	480f      	ldr	r0, [pc, #60]	; (8007bf8 <Display_Start+0x9c>)
 8007bba:	f001 f955 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(ypos, xpos, 10);
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <Display_Start+0x98>)
 8007bc0:	8818      	ldrh	r0, [r3, #0]
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <Display_Start+0x90>)
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	220a      	movs	r2, #10
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f001 fc4b 	bl	8009464 <BSP_LCD_FillCircle>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007bce:	480a      	ldr	r0, [pc, #40]	; (8007bf8 <Display_Start+0x9c>)
 8007bd0:	f001 f962 	bl	8008e98 <BSP_LCD_SetBackColor>
	}
}
 8007bd4:	bf00      	nop
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000058 	.word	0x20000058
 8007bdc:	ff000080 	.word	0xff000080
 8007be0:	0800a4b0 	.word	0x0800a4b0
 8007be4:	0800a4bc 	.word	0x0800a4bc
 8007be8:	20003e08 	.word	0x20003e08
 8007bec:	20000064 	.word	0x20000064
 8007bf0:	20003e0c 	.word	0x20003e0c
 8007bf4:	20000066 	.word	0x20000066
 8007bf8:	ffff0000 	.word	0xffff0000

08007bfc <Display_Odczyty>:

void Display_Odczyty(void) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08c      	sub	sp, #48	; 0x30
 8007c00:	af00      	add	r7, sp, #0
	if(switchingODCZYTY_flag == 1) {
 8007c02:	4b3a      	ldr	r3, [pc, #232]	; (8007cec <Display_Odczyty+0xf0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d16b      	bne.n	8007ce2 <Display_Odczyty+0xe6>
		switchingODCZYTY_flag = 0;
 8007c0a:	4b38      	ldr	r3, [pc, #224]	; (8007cec <Display_Odczyty+0xf0>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007c10:	f7ff fdc4 	bl	800779c <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007c14:	4836      	ldr	r0, [pc, #216]	; (8007cf0 <Display_Odczyty+0xf4>)
 8007c16:	f001 f927 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c1e:	f001 f93b 	bl	8008e98 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"ODCZYTY MPU", CENTER_MODE);
 8007c22:	2301      	movs	r3, #1
 8007c24:	4a33      	ldr	r2, [pc, #204]	; (8007cf4 <Display_Odczyty+0xf8>)
 8007c26:	2114      	movs	r1, #20
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f001 f9d7 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007c2e:	21fa      	movs	r1, #250	; 0xfa
 8007c30:	4831      	ldr	r0, [pc, #196]	; (8007cf8 <Display_Odczyty+0xfc>)
 8007c32:	f7ff fdcb 	bl	80077cc <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007c36:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007c3a:	f001 f915 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c42:	f001 f929 	bl	8008e98 <BSP_LCD_SetBackColor>

		uint8_t xaxis[14] = "X ASIX: ";
 8007c46:	4a2d      	ldr	r2, [pc, #180]	; (8007cfc <Display_Odczyty+0x100>)
 8007c48:	f107 0320 	add.w	r3, r7, #32
 8007c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c4e:	c303      	stmia	r3!, {r0, r1}
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	711a      	strb	r2, [r3, #4]
		uint8_t yaxis[14] = "Y ASIX: ";
 8007c5c:	4a28      	ldr	r2, [pc, #160]	; (8007d00 <Display_Odczyty+0x104>)
 8007c5e:	f107 0310 	add.w	r3, r7, #16
 8007c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c64:	c303      	stmia	r3!, {r0, r1}
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	f107 0319 	add.w	r3, r7, #25
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	711a      	strb	r2, [r3, #4]
		uint8_t zaxis[14] = "Z ASIX: ";
 8007c72:	4a24      	ldr	r2, [pc, #144]	; (8007d04 <Display_Odczyty+0x108>)
 8007c74:	463b      	mov	r3, r7
 8007c76:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c78:	c303      	stmia	r3!, {r0, r1}
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	f107 0309 	add.w	r3, r7, #9
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	711a      	strb	r2, [r3, #4]
		itoa(x, &xaxis[8], 10);
 8007c86:	4b20      	ldr	r3, [pc, #128]	; (8007d08 <Display_Odczyty+0x10c>)
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	f107 0320 	add.w	r3, r7, #32
 8007c8e:	3308      	adds	r3, #8
 8007c90:	220a      	movs	r2, #10
 8007c92:	4619      	mov	r1, r3
 8007c94:	f002 fb48 	bl	800a328 <itoa>
		itoa(y, &yaxis[8], 10);
 8007c98:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <Display_Odczyty+0x110>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	f107 0310 	add.w	r3, r7, #16
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f002 fb3f 	bl	800a328 <itoa>
		itoa(z, &zaxis[8], 10);
 8007caa:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <Display_Odczyty+0x114>)
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	463b      	mov	r3, r7
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	220a      	movs	r2, #10
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f002 fb37 	bl	800a328 <itoa>
		BSP_LCD_DisplayStringAt(0, 60, xaxis, CENTER_MODE);
 8007cba:	f107 0220 	add.w	r2, r7, #32
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	213c      	movs	r1, #60	; 0x3c
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	f001 f98a 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 100, yaxis, CENTER_MODE);
 8007cc8:	f107 0210 	add.w	r2, r7, #16
 8007ccc:	2301      	movs	r3, #1
 8007cce:	2164      	movs	r1, #100	; 0x64
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f001 f983 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 140, zaxis, CENTER_MODE);
 8007cd6:	463a      	mov	r2, r7
 8007cd8:	2301      	movs	r3, #1
 8007cda:	218c      	movs	r1, #140	; 0x8c
 8007cdc:	2000      	movs	r0, #0
 8007cde:	f001 f97d 	bl	8008fdc <BSP_LCD_DisplayStringAt>

	}
}
 8007ce2:	bf00      	nop
 8007ce4:	3730      	adds	r7, #48	; 0x30
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	2000005c 	.word	0x2000005c
 8007cf0:	ff000080 	.word	0xff000080
 8007cf4:	0800a4c4 	.word	0x0800a4c4
 8007cf8:	0800a4bc 	.word	0x0800a4bc
 8007cfc:	0800a4d0 	.word	0x0800a4d0
 8007d00:	0800a4e0 	.word	0x0800a4e0
 8007d04:	0800a4f0 	.word	0x0800a4f0
 8007d08:	20003e08 	.word	0x20003e08
 8007d0c:	20003e0c 	.word	0x20003e0c
 8007d10:	20003e10 	.word	0x20003e10

08007d14 <Display_Onas>:

void Display_Onas(void) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
	if(switchingONAS_flag == 1) {
 8007d18:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <Display_Onas+0x64>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d129      	bne.n	8007d74 <Display_Onas+0x60>
		switchingONAS_flag = 0;
 8007d20:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <Display_Onas+0x64>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007d26:	f7ff fd39 	bl	800779c <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007d2a:	4814      	ldr	r0, [pc, #80]	; (8007d7c <Display_Onas+0x68>)
 8007d2c:	f001 f89c 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d34:	f001 f8b0 	bl	8008e98 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"Autorzy", CENTER_MODE);
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <Display_Onas+0x6c>)
 8007d3c:	2114      	movs	r1, #20
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f001 f94c 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007d44:	21fa      	movs	r1, #250	; 0xfa
 8007d46:	480f      	ldr	r0, [pc, #60]	; (8007d84 <Display_Onas+0x70>)
 8007d48:	f7ff fd40 	bl	80077cc <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007d4c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d50:	f001 f88a 	bl	8008e68 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d58:	f001 f89e 	bl	8008e98 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"Adam Krzykala", CENTER_MODE);
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <Display_Onas+0x74>)
 8007d60:	213c      	movs	r1, #60	; 0x3c
 8007d62:	2000      	movs	r0, #0
 8007d64:	f001 f93a 	bl	8008fdc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Szymon Rajca", CENTER_MODE);
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4a08      	ldr	r2, [pc, #32]	; (8007d8c <Display_Onas+0x78>)
 8007d6c:	2150      	movs	r1, #80	; 0x50
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f001 f934 	bl	8008fdc <BSP_LCD_DisplayStringAt>

	}
}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	20000060 	.word	0x20000060
 8007d7c:	ff000080 	.word	0xff000080
 8007d80:	0800a500 	.word	0x0800a500
 8007d84:	0800a4bc 	.word	0x0800a4bc
 8007d88:	0800a508 	.word	0x0800a508
 8007d8c:	0800a518 	.word	0x0800a518

08007d90 <menuService>:


void menuService(void) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8007d94:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <menuService+0x84>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d038      	beq.n	8007e10 <menuService+0x80>
		if (localstr->Y >= 60 && localstr->Y <= 104)
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <menuService+0x84>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	889b      	ldrh	r3, [r3, #4]
 8007da4:	2b3b      	cmp	r3, #59	; 0x3b
 8007da6:	d90d      	bls.n	8007dc4 <menuService+0x34>
 8007da8:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <menuService+0x84>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	889b      	ldrh	r3, [r3, #4]
 8007dae:	2b68      	cmp	r3, #104	; 0x68
 8007db0:	d808      	bhi.n	8007dc4 <menuService+0x34>
				{

			page = 2;
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <menuService+0x88>)
 8007db4:	2202      	movs	r2, #2
 8007db6:	601a      	str	r2, [r3, #0]
			switchingSTART_flag = 1;
 8007db8:	4b18      	ldr	r3, [pc, #96]	; (8007e1c <menuService+0x8c>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007dbe:	2032      	movs	r0, #50	; 0x32
 8007dc0:	f7f8 fffa 	bl	8000db8 <HAL_Delay>
		}
		if (localstr->Y >= 120 && localstr->Y <= 164)
 8007dc4:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <menuService+0x84>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	889b      	ldrh	r3, [r3, #4]
 8007dca:	2b77      	cmp	r3, #119	; 0x77
 8007dcc:	d90d      	bls.n	8007dea <menuService+0x5a>
 8007dce:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <menuService+0x84>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	889b      	ldrh	r3, [r3, #4]
 8007dd4:	2ba4      	cmp	r3, #164	; 0xa4
 8007dd6:	d808      	bhi.n	8007dea <menuService+0x5a>
						{

			page = 3;
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <menuService+0x88>)
 8007dda:	2203      	movs	r2, #3
 8007ddc:	601a      	str	r2, [r3, #0]
			switchingODCZYTY_flag = 1;
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <menuService+0x90>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007de4:	2032      	movs	r0, #50	; 0x32
 8007de6:	f7f8 ffe7 	bl	8000db8 <HAL_Delay>
				}
		if (localstr->Y >= 180 && localstr->Y <= 224)
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <menuService+0x84>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	889b      	ldrh	r3, [r3, #4]
 8007df0:	2bb3      	cmp	r3, #179	; 0xb3
 8007df2:	d90d      	bls.n	8007e10 <menuService+0x80>
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <menuService+0x84>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	889b      	ldrh	r3, [r3, #4]
 8007dfa:	2be0      	cmp	r3, #224	; 0xe0
 8007dfc:	d808      	bhi.n	8007e10 <menuService+0x80>
						{

			page = 4;
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <menuService+0x88>)
 8007e00:	2204      	movs	r2, #4
 8007e02:	601a      	str	r2, [r3, #0]
			switchingONAS_flag = 1;
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <menuService+0x94>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007e0a:	2032      	movs	r0, #50	; 0x32
 8007e0c:	f7f8 ffd4 	bl	8000db8 <HAL_Delay>
				}
	}
}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20003fe8 	.word	0x20003fe8
 8007e18:	20003e4c 	.word	0x20003e4c
 8007e1c:	20000058 	.word	0x20000058
 8007e20:	2000005c 	.word	0x2000005c
 8007e24:	20000060 	.word	0x20000060

08007e28 <startService>:

void startService(void) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <startService+0x3c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d013      	beq.n	8007e5e <startService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <startService+0x3c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	889b      	ldrh	r3, [r3, #4]
 8007e3c:	2bf9      	cmp	r3, #249	; 0xf9
 8007e3e:	d90e      	bls.n	8007e5e <startService+0x36>
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <startService+0x3c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	889b      	ldrh	r3, [r3, #4]
 8007e46:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007e4a:	d808      	bhi.n	8007e5e <startService+0x36>
				{
			page = 1;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <startService+0x40>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8007e52:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <startService+0x44>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007e58:	2032      	movs	r0, #50	; 0x32
 8007e5a:	f7f8 ffad 	bl	8000db8 <HAL_Delay>
		}
	}
}
 8007e5e:	bf00      	nop
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20003fe8 	.word	0x20003fe8
 8007e68:	20003e4c 	.word	0x20003e4c
 8007e6c:	20000054 	.word	0x20000054

08007e70 <odczytyService>:

void odczytyService(void) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8007e74:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <odczytyService+0x3c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d013      	beq.n	8007ea6 <odczytyService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <odczytyService+0x3c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	889b      	ldrh	r3, [r3, #4]
 8007e84:	2bf9      	cmp	r3, #249	; 0xf9
 8007e86:	d90e      	bls.n	8007ea6 <odczytyService+0x36>
 8007e88:	4b08      	ldr	r3, [pc, #32]	; (8007eac <odczytyService+0x3c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	889b      	ldrh	r3, [r3, #4]
 8007e8e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007e92:	d808      	bhi.n	8007ea6 <odczytyService+0x36>
				{
			page = 1;
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <odczytyService+0x40>)
 8007e96:	2201      	movs	r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8007e9a:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <odczytyService+0x44>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007ea0:	2032      	movs	r0, #50	; 0x32
 8007ea2:	f7f8 ff89 	bl	8000db8 <HAL_Delay>
		}
	}
}
 8007ea6:	bf00      	nop
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20003fe8 	.word	0x20003fe8
 8007eb0:	20003e4c 	.word	0x20003e4c
 8007eb4:	20000054 	.word	0x20000054

08007eb8 <onasService>:

void onasService(void) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <onasService+0x3c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d013      	beq.n	8007eee <onasService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <onasService+0x3c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	889b      	ldrh	r3, [r3, #4]
 8007ecc:	2bf9      	cmp	r3, #249	; 0xf9
 8007ece:	d90e      	bls.n	8007eee <onasService+0x36>
 8007ed0:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <onasService+0x3c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007eda:	d808      	bhi.n	8007eee <onasService+0x36>
				{
			page = 1;
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <onasService+0x40>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <onasService+0x44>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007ee8:	2032      	movs	r0, #50	; 0x32
 8007eea:	f7f8 ff65 	bl	8000db8 <HAL_Delay>
		}
	}
}
 8007eee:	bf00      	nop
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20003fe8 	.word	0x20003fe8
 8007ef8:	20003e4c 	.word	0x20003e4c
 8007efc:	20000054 	.word	0x20000054

08007f00 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b09a      	sub	sp, #104	; 0x68
 8007f04:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f0a:	2234      	movs	r2, #52	; 0x34
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f002 fa17 	bl	800a342 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8007f14:	463b      	mov	r3, r7
 8007f16:	2234      	movs	r2, #52	; 0x34
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f002 fa11 	bl	800a342 <memset>

  hltdc.Instance = LTDC;
 8007f20:	4b4e      	ldr	r3, [pc, #312]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f22:	4a4f      	ldr	r2, [pc, #316]	; (8008060 <MX_LTDC_Init+0x160>)
 8007f24:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007f26:	4b4d      	ldr	r3, [pc, #308]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007f2c:	4b4b      	ldr	r3, [pc, #300]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007f32:	4b4a      	ldr	r3, [pc, #296]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007f38:	4b48      	ldr	r3, [pc, #288]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8007f3e:	4b47      	ldr	r3, [pc, #284]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f40:	2207      	movs	r2, #7
 8007f42:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8007f44:	4b45      	ldr	r3, [pc, #276]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f46:	2203      	movs	r2, #3
 8007f48:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8007f4a:	4b44      	ldr	r3, [pc, #272]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f4c:	220e      	movs	r2, #14
 8007f4e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8007f50:	4b42      	ldr	r3, [pc, #264]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f52:	2205      	movs	r2, #5
 8007f54:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 8007f56:	4b41      	ldr	r3, [pc, #260]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f58:	f240 1225 	movw	r2, #293	; 0x125
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 8007f5e:	4b3f      	ldr	r3, [pc, #252]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f60:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007f64:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 8007f66:	4b3d      	ldr	r3, [pc, #244]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f68:	f240 122b 	movw	r2, #299	; 0x12b
 8007f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 8007f6e:	4b3b      	ldr	r3, [pc, #236]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f70:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007f7e:	4b37      	ldr	r3, [pc, #220]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007f86:	4b35      	ldr	r3, [pc, #212]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007f8e:	4833      	ldr	r0, [pc, #204]	; (800805c <MX_LTDC_Init+0x15c>)
 8007f90:	f7fa fda4 	bl	8002adc <HAL_LTDC_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8007f9a:	f000 fa8d 	bl	80084b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8007fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fbe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8007fc0:	2305      	movs	r3, #5
 8007fc2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4619      	mov	r1, r3
 8007fea:	481c      	ldr	r0, [pc, #112]	; (800805c <MX_LTDC_Init+0x15c>)
 8007fec:	f7fa fe46 	bl	8002c7c <HAL_LTDC_ConfigLayer>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8007ff6:	f000 fa5f 	bl	80084b8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800801a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800801c:	2305      	movs	r3, #5
 800801e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800803e:	463b      	mov	r3, r7
 8008040:	2201      	movs	r2, #1
 8008042:	4619      	mov	r1, r3
 8008044:	4805      	ldr	r0, [pc, #20]	; (800805c <MX_LTDC_Init+0x15c>)
 8008046:	f7fa fe19 	bl	8002c7c <HAL_LTDC_ConfigLayer>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8008050:	f000 fa32 	bl	80084b8 <Error_Handler>
  }

}
 8008054:	bf00      	nop
 8008056:	3768      	adds	r7, #104	; 0x68
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20003ff0 	.word	0x20003ff0
 8008060:	40016800 	.word	0x40016800

08008064 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	; 0x38
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	609a      	str	r2, [r3, #8]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a77      	ldr	r2, [pc, #476]	; (8008260 <HAL_LTDC_MspInit+0x1fc>)
 8008082:	4293      	cmp	r3, r2
 8008084:	f040 80e8 	bne.w	8008258 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008088:	2300      	movs	r3, #0
 800808a:	623b      	str	r3, [r7, #32]
 800808c:	4a75      	ldr	r2, [pc, #468]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 800808e:	4b75      	ldr	r3, [pc, #468]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008096:	6453      	str	r3, [r2, #68]	; 0x44
 8008098:	4b72      	ldr	r3, [pc, #456]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 800809a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	4a6e      	ldr	r2, [pc, #440]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080aa:	4b6e      	ldr	r3, [pc, #440]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f043 0320 	orr.w	r3, r3, #32
 80080b2:	6313      	str	r3, [r2, #48]	; 0x30
 80080b4:	4b6b      	ldr	r3, [pc, #428]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
 80080c4:	4a67      	ldr	r2, [pc, #412]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080c6:	4b67      	ldr	r3, [pc, #412]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	6313      	str	r3, [r2, #48]	; 0x30
 80080d0:	4b64      	ldr	r3, [pc, #400]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	4a60      	ldr	r2, [pc, #384]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080e2:	4b60      	ldr	r3, [pc, #384]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	f043 0302 	orr.w	r3, r3, #2
 80080ea:	6313      	str	r3, [r2, #48]	; 0x30
 80080ec:	4b5d      	ldr	r3, [pc, #372]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80080f8:	2300      	movs	r3, #0
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	4a59      	ldr	r2, [pc, #356]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 80080fe:	4b59      	ldr	r3, [pc, #356]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008106:	6313      	str	r3, [r2, #48]	; 0x30
 8008108:	4b56      	ldr	r3, [pc, #344]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	4a52      	ldr	r2, [pc, #328]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 800811a:	4b52      	ldr	r3, [pc, #328]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	f043 0304 	orr.w	r3, r3, #4
 8008122:	6313      	str	r3, [r2, #48]	; 0x30
 8008124:	4b4f      	ldr	r3, [pc, #316]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008130:	2300      	movs	r3, #0
 8008132:	60bb      	str	r3, [r7, #8]
 8008134:	4a4b      	ldr	r2, [pc, #300]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 8008136:	4b4b      	ldr	r3, [pc, #300]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	f043 0308 	orr.w	r3, r3, #8
 800813e:	6313      	str	r3, [r2, #48]	; 0x30
 8008140:	4b48      	ldr	r3, [pc, #288]	; (8008264 <HAL_LTDC_MspInit+0x200>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800814c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008152:	2302      	movs	r3, #2
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008156:	2300      	movs	r3, #0
 8008158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800815a:	2300      	movs	r3, #0
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800815e:	230e      	movs	r3, #14
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8008162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008166:	4619      	mov	r1, r3
 8008168:	483f      	ldr	r0, [pc, #252]	; (8008268 <HAL_LTDC_MspInit+0x204>)
 800816a:	f7f9 f9b1 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800816e:	f641 0358 	movw	r3, #6232	; 0x1858
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008174:	2302      	movs	r3, #2
 8008176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008178:	2300      	movs	r3, #0
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800817c:	2300      	movs	r3, #0
 800817e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008180:	230e      	movs	r3, #14
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008188:	4619      	mov	r1, r3
 800818a:	4838      	ldr	r0, [pc, #224]	; (800826c <HAL_LTDC_MspInit+0x208>)
 800818c:	f7f9 f9a0 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8008190:	2303      	movs	r3, #3
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008194:	2302      	movs	r3, #2
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008198:	2300      	movs	r3, #0
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819c:	2300      	movs	r3, #0
 800819e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80081a0:	2309      	movs	r3, #9
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081a8:	4619      	mov	r1, r3
 80081aa:	4831      	ldr	r0, [pc, #196]	; (8008270 <HAL_LTDC_MspInit+0x20c>)
 80081ac:	f7f9 f990 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80081b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081b6:	2302      	movs	r3, #2
 80081b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081be:	2300      	movs	r3, #0
 80081c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80081c2:	230e      	movs	r3, #14
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ca:	4619      	mov	r1, r3
 80081cc:	4828      	ldr	r0, [pc, #160]	; (8008270 <HAL_LTDC_MspInit+0x20c>)
 80081ce:	f7f9 f97f 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80081d2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d8:	2302      	movs	r3, #2
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081dc:	2300      	movs	r3, #0
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081e0:	2300      	movs	r3, #0
 80081e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80081e4:	230e      	movs	r3, #14
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80081e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ec:	4619      	mov	r1, r3
 80081ee:	4821      	ldr	r0, [pc, #132]	; (8008274 <HAL_LTDC_MspInit+0x210>)
 80081f0:	f7f9 f96e 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80081f4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081fa:	2302      	movs	r3, #2
 80081fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008202:	2300      	movs	r3, #0
 8008204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008206:	230e      	movs	r3, #14
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800820a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800820e:	4619      	mov	r1, r3
 8008210:	4819      	ldr	r0, [pc, #100]	; (8008278 <HAL_LTDC_MspInit+0x214>)
 8008212:	f7f9 f95d 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8008216:	2348      	movs	r3, #72	; 0x48
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800821a:	2302      	movs	r3, #2
 800821c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821e:	2300      	movs	r3, #0
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008222:	2300      	movs	r3, #0
 8008224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008226:	230e      	movs	r3, #14
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800822a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800822e:	4619      	mov	r1, r3
 8008230:	4812      	ldr	r0, [pc, #72]	; (800827c <HAL_LTDC_MspInit+0x218>)
 8008232:	f7f9 f94d 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8008236:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800823c:	2302      	movs	r3, #2
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008240:	2300      	movs	r3, #0
 8008242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008244:	2300      	movs	r3, #0
 8008246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008248:	2309      	movs	r3, #9
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800824c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008250:	4619      	mov	r1, r3
 8008252:	4808      	ldr	r0, [pc, #32]	; (8008274 <HAL_LTDC_MspInit+0x210>)
 8008254:	f7f9 f93c 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8008258:	bf00      	nop
 800825a:	3738      	adds	r7, #56	; 0x38
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40016800 	.word	0x40016800
 8008264:	40023800 	.word	0x40023800
 8008268:	40021400 	.word	0x40021400
 800826c:	40020000 	.word	0x40020000
 8008270:	40020400 	.word	0x40020400
 8008274:	40021800 	.word	0x40021800
 8008278:	40020800 	.word	0x40020800
 800827c:	40020c00 	.word	0x40020c00

08008280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008284:	f7f8 fd56 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008288:	f000 f822 	bl	80082d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initPointers(&hdma2d, &hltdc, &hsdram1);
 800828c:	4a0d      	ldr	r2, [pc, #52]	; (80082c4 <main+0x44>)
 800828e:	490e      	ldr	r1, [pc, #56]	; (80082c8 <main+0x48>)
 8008290:	480e      	ldr	r0, [pc, #56]	; (80082cc <main+0x4c>)
 8008292:	f000 f8a7 	bl	80083e4 <initPointers>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008296:	f7fe fc31 	bl	8006afc <MX_GPIO_Init>
  MX_LTDC_Init();
 800829a:	f7ff fe31 	bl	8007f00 <MX_LTDC_Init>
  MX_FMC_Init();
 800829e:	f7fe fa7b 	bl	8006798 <MX_FMC_Init>
  MX_DMA2D_Init();
 80082a2:	f7fe fa39 	bl	8006718 <MX_DMA2D_Init>
  MX_I2C3_Init();
 80082a6:	f7fe fff1 	bl	800728c <MX_I2C3_Init>
  MX_SPI5_Init();
 80082aa:	f000 f90d 	bl	80084c8 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80082ae:	f001 ff63 	bl	800a178 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  gyro_init();
 80082b2:	f7fe fdb5 	bl	8006e20 <gyro_init>
  ltdc_finishConfig();
 80082b6:	f000 f8bd 	bl	8008434 <ltdc_finishConfig>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80082ba:	f7fe fb49 	bl	8006950 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80082be:	f7fd f8d8 	bl	8005472 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80082c2:	e7fe      	b.n	80082c2 <main+0x42>
 80082c4:	20003f38 	.word	0x20003f38
 80082c8:	20003ff0 	.word	0x20003ff0
 80082cc:	20003ef8 	.word	0x20003ef8

080082d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b0a0      	sub	sp, #128	; 0x80
 80082d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082da:	2230      	movs	r2, #48	; 0x30
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 f82f 	bl	800a342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	609a      	str	r2, [r3, #8]
 80082f0:	60da      	str	r2, [r3, #12]
 80082f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80082f4:	f107 030c 	add.w	r3, r7, #12
 80082f8:	2230      	movs	r2, #48	; 0x30
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f002 f820 	bl	800a342 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008302:	2300      	movs	r3, #0
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	4a35      	ldr	r2, [pc, #212]	; (80083dc <SystemClock_Config+0x10c>)
 8008308:	4b34      	ldr	r3, [pc, #208]	; (80083dc <SystemClock_Config+0x10c>)
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008310:	6413      	str	r3, [r2, #64]	; 0x40
 8008312:	4b32      	ldr	r3, [pc, #200]	; (80083dc <SystemClock_Config+0x10c>)
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831a:	60bb      	str	r3, [r7, #8]
 800831c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
 8008322:	4a2f      	ldr	r2, [pc, #188]	; (80083e0 <SystemClock_Config+0x110>)
 8008324:	4b2e      	ldr	r3, [pc, #184]	; (80083e0 <SystemClock_Config+0x110>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4b2c      	ldr	r3, [pc, #176]	; (80083e0 <SystemClock_Config+0x110>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800833a:	2301      	movs	r3, #1
 800833c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800833e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008342:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008344:	2302      	movs	r3, #2
 8008346:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008348:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800834c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800834e:	2304      	movs	r3, #4
 8008350:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008352:	23b4      	movs	r3, #180	; 0xb4
 8008354:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008356:	2302      	movs	r3, #2
 8008358:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800835a:	2307      	movs	r3, #7
 800835c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800835e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008362:	4618      	mov	r0, r3
 8008364:	f7fa fee4 	bl	8003130 <HAL_RCC_OscConfig>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800836e:	f000 f8a3 	bl	80084b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008372:	f7fa fe8d 	bl	8003090 <HAL_PWREx_EnableOverDrive>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800837c:	f000 f89c 	bl	80084b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008380:	230f      	movs	r3, #15
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008384:	2302      	movs	r3, #2
 8008386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008388:	2300      	movs	r3, #0
 800838a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800838c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008396:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008398:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800839c:	2105      	movs	r1, #5
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fb f908 	bl	80035b4 <HAL_RCC_ClockConfig>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <SystemClock_Config+0xde>
  {
    Error_Handler();
 80083aa:	f000 f885 	bl	80084b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80083ae:	2308      	movs	r3, #8
 80083b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80083b2:	23c0      	movs	r3, #192	; 0xc0
 80083b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80083b6:	2304      	movs	r3, #4
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80083ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fb fb15 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80083d0:	f000 f872 	bl	80084b8 <Error_Handler>
  }
}
 80083d4:	bf00      	nop
 80083d6:	3780      	adds	r7, #128	; 0x80
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40007000 	.word	0x40007000

080083e4 <initPointers>:

uint8_t tickBuffer[50];
uint8_t tickSize;

void initPointers(DMA2D_HandleTypeDef* arg_hdma2d,
		LTDC_HandleTypeDef* arg_hltdc, SDRAM_HandleTypeDef* arg_hsdram1) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
	p_hdma2d = arg_hdma2d;
 80083f0:	4a0d      	ldr	r2, [pc, #52]	; (8008428 <initPointers+0x44>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6013      	str	r3, [r2, #0]
	p_hltdc = arg_hltdc;
 80083f6:	4a0d      	ldr	r2, [pc, #52]	; (800842c <initPointers+0x48>)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6013      	str	r3, [r2, #0]
	p_hsdram1 = arg_hsdram1;
 80083fc:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <initPointers+0x4c>)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6013      	str	r3, [r2, #0]

	LTDCSetup(p_hltdc);
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <initPointers+0x48>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fc70 	bl	8008cec <LTDCSetup>
	RAMSetup(p_hsdram1);
 800840c:	4b08      	ldr	r3, [pc, #32]	; (8008430 <initPointers+0x4c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f001 f9e7 	bl	80097e4 <RAMSetup>
	DMASetup(p_hdma2d);
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <initPointers+0x44>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fc76 	bl	8008d0c <DMASetup>
}
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	200040d8 	.word	0x200040d8
 800842c:	200040dc 	.word	0x200040dc
 8008430:	2000409c 	.word	0x2000409c

08008434 <ltdc_finishConfig>:

void fmc_finishConfig() {
	p_hsdram1->Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
}

void ltdc_finishConfig() {
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
	initILI9341();
 8008438:	f000 fc78 	bl	8008d2c <initILI9341>
	RAMSetup(p_hsdram1);
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <ltdc_finishConfig+0x34>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4618      	mov	r0, r3
 8008442:	f001 f9cf 	bl	80097e4 <RAMSetup>
	/* Initialize the SDRAM */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008446:	f240 506a 	movw	r0, #1386	; 0x56a
 800844a:	f001 f9db 	bl	8009804 <BSP_SDRAM_Initialization_sequence>
	/* Set the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800844e:	4807      	ldr	r0, [pc, #28]	; (800846c <ltdc_finishConfig+0x38>)
 8008450:	f000 fd3c 	bl	8008ecc <BSP_LCD_SetFont>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8008454:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008458:	2001      	movs	r0, #1
 800845a:	f000 fc8f 	bl	8008d7c <BSP_LCD_LayerDefaultInit>
	HAL_Delay(100);
 800845e:	2064      	movs	r0, #100	; 0x64
 8008460:	f7f8 fcaa 	bl	8000db8 <HAL_Delay>
}
 8008464:	bf00      	nop
 8008466:	bd80      	pop	{r7, pc}
 8008468:	2000409c 	.word	0x2000409c
 800846c:	20000010 	.word	0x20000010

08008470 <ts_init>:
void ts_init(TS_StateTypeDef* struktura) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	BSP_TS_Init(1000, 1000);
 8008478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800847c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008480:	f001 fa2a 	bl	80098d8 <BSP_TS_Init>
	BSP_TS_GetState(struktura);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fa61 	bl	800994c <BSP_TS_GetState>

}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a04      	ldr	r2, [pc, #16]	; (80084b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d101      	bne.n	80084aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80084a6:	f7f8 fc67 	bl	8000d78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40001000 	.word	0x40001000

080084b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
	...

080084c8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80084cc:	4b17      	ldr	r3, [pc, #92]	; (800852c <MX_SPI5_Init+0x64>)
 80084ce:	4a18      	ldr	r2, [pc, #96]	; (8008530 <MX_SPI5_Init+0x68>)
 80084d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80084d2:	4b16      	ldr	r3, [pc, #88]	; (800852c <MX_SPI5_Init+0x64>)
 80084d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80084d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80084da:	4b14      	ldr	r3, [pc, #80]	; (800852c <MX_SPI5_Init+0x64>)
 80084dc:	2200      	movs	r2, #0
 80084de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <MX_SPI5_Init+0x64>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <MX_SPI5_Init+0x64>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <MX_SPI5_Init+0x64>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80084f2:	4b0e      	ldr	r3, [pc, #56]	; (800852c <MX_SPI5_Init+0x64>)
 80084f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <MX_SPI5_Init+0x64>)
 80084fc:	2218      	movs	r2, #24
 80084fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <MX_SPI5_Init+0x64>)
 8008502:	2200      	movs	r2, #0
 8008504:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <MX_SPI5_Init+0x64>)
 8008508:	2200      	movs	r2, #0
 800850a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <MX_SPI5_Init+0x64>)
 800850e:	2200      	movs	r2, #0
 8008510:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <MX_SPI5_Init+0x64>)
 8008514:	220a      	movs	r2, #10
 8008516:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008518:	4804      	ldr	r0, [pc, #16]	; (800852c <MX_SPI5_Init+0x64>)
 800851a:	f7fb fc8e 	bl	8003e3a <HAL_SPI_Init>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008524:	f7ff ffc8 	bl	80084b8 <Error_Handler>
  }

}
 8008528:	bf00      	nop
 800852a:	bd80      	pop	{r7, pc}
 800852c:	200040e0 	.word	0x200040e0
 8008530:	40015000 	.word	0x40015000

08008534 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <HAL_SPI_MspInit+0x84>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d12c      	bne.n	80085b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	4a18      	ldr	r2, [pc, #96]	; (80085bc <HAL_SPI_MspInit+0x88>)
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <HAL_SPI_MspInit+0x88>)
 800855e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008564:	6453      	str	r3, [r2, #68]	; 0x44
 8008566:	4b15      	ldr	r3, [pc, #84]	; (80085bc <HAL_SPI_MspInit+0x88>)
 8008568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <HAL_SPI_MspInit+0x88>)
 8008578:	4b10      	ldr	r3, [pc, #64]	; (80085bc <HAL_SPI_MspInit+0x88>)
 800857a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857c:	f043 0320 	orr.w	r3, r3, #32
 8008580:	6313      	str	r3, [r2, #48]	; 0x30
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <HAL_SPI_MspInit+0x88>)
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800858e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008594:	2302      	movs	r3, #2
 8008596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008598:	2300      	movs	r3, #0
 800859a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800859c:	2300      	movs	r3, #0
 800859e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80085a0:	2305      	movs	r3, #5
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	4619      	mov	r1, r3
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <HAL_SPI_MspInit+0x8c>)
 80085ac:	f7f8 ff90 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80085b0:	bf00      	nop
 80085b2:	3728      	adds	r7, #40	; 0x28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40015000 	.word	0x40015000
 80085bc:	40023800 	.word	0x40023800
 80085c0:	40021400 	.word	0x40021400

080085c4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <HAL_SPI_MspDeInit+0x30>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d10a      	bne.n	80085ec <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80085d6:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <HAL_SPI_MspDeInit+0x34>)
 80085d8:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <HAL_SPI_MspDeInit+0x34>)
 80085da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085e0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80085e2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80085e6:	4805      	ldr	r0, [pc, #20]	; (80085fc <HAL_SPI_MspDeInit+0x38>)
 80085e8:	f7f9 f91c 	bl	8001824 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40015000 	.word	0x40015000
 80085f8:	40023800 	.word	0x40023800
 80085fc:	40021400 	.word	0x40021400

08008600 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a33      	ldr	r2, [pc, #204]	; (80086dc <I2Cx_MspInit+0xdc>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d15f      	bne.n	80086d2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	4a32      	ldr	r2, [pc, #200]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008618:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <I2Cx_MspInit+0xe0>)
 800861a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861c:	f043 0304 	orr.w	r3, r3, #4
 8008620:	6313      	str	r3, [r2, #48]	; 0x30
 8008622:	4b2f      	ldr	r3, [pc, #188]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	4a2b      	ldr	r2, [pc, #172]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008634:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	6313      	str	r3, [r2, #48]	; 0x30
 800863e:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800864a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800864e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8008650:	2312      	movs	r3, #18
 8008652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008654:	2300      	movs	r3, #0
 8008656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8008658:	2302      	movs	r3, #2
 800865a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800865c:	2304      	movs	r3, #4
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	4619      	mov	r1, r3
 8008666:	481f      	ldr	r0, [pc, #124]	; (80086e4 <I2Cx_MspInit+0xe4>)
 8008668:	f7f8 ff32 	bl	80014d0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800866c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008670:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8008672:	f107 0314 	add.w	r3, r7, #20
 8008676:	4619      	mov	r1, r3
 8008678:	481b      	ldr	r0, [pc, #108]	; (80086e8 <I2Cx_MspInit+0xe8>)
 800867a:	f7f8 ff29 	bl	80014d0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	4a17      	ldr	r2, [pc, #92]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008684:	4b16      	ldr	r3, [pc, #88]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800868c:	6413      	str	r3, [r2, #64]	; 0x40
 800868e:	4b14      	ldr	r3, [pc, #80]	; (80086e0 <I2Cx_MspInit+0xe0>)
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008696:	60bb      	str	r3, [r7, #8]
 8008698:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800869a:	4a11      	ldr	r2, [pc, #68]	; (80086e0 <I2Cx_MspInit+0xe0>)
 800869c:	4b10      	ldr	r3, [pc, #64]	; (80086e0 <I2Cx_MspInit+0xe0>)
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086a4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80086a6:	4a0e      	ldr	r2, [pc, #56]	; (80086e0 <I2Cx_MspInit+0xe0>)
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <I2Cx_MspInit+0xe0>)
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80086b0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80086b2:	2200      	movs	r2, #0
 80086b4:	210f      	movs	r1, #15
 80086b6:	2048      	movs	r0, #72	; 0x48
 80086b8:	f7f8 fc56 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80086bc:	2048      	movs	r0, #72	; 0x48
 80086be:	f7f8 fc6f 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80086c2:	2200      	movs	r2, #0
 80086c4:	210f      	movs	r1, #15
 80086c6:	2049      	movs	r0, #73	; 0x49
 80086c8:	f7f8 fc4e 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80086cc:	2049      	movs	r0, #73	; 0x49
 80086ce:	f7f8 fc67 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80086d2:	bf00      	nop
 80086d4:	3728      	adds	r7, #40	; 0x28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40005c00 	.word	0x40005c00
 80086e0:	40023800 	.word	0x40023800
 80086e4:	40020000 	.word	0x40020000
 80086e8:	40020800 	.word	0x40020800

080086ec <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80086f0:	4814      	ldr	r0, [pc, #80]	; (8008744 <I2Cx_Init+0x58>)
 80086f2:	f7f9 fe35 	bl	8002360 <HAL_I2C_GetState>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d121      	bne.n	8008740 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80086fc:	4b11      	ldr	r3, [pc, #68]	; (8008744 <I2Cx_Init+0x58>)
 80086fe:	4a12      	ldr	r2, [pc, #72]	; (8008748 <I2Cx_Init+0x5c>)
 8008700:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <I2Cx_Init+0x58>)
 8008704:	4a11      	ldr	r2, [pc, #68]	; (800874c <I2Cx_Init+0x60>)
 8008706:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8008708:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <I2Cx_Init+0x58>)
 800870a:	2200      	movs	r2, #0
 800870c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800870e:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <I2Cx_Init+0x58>)
 8008710:	2200      	movs	r2, #0
 8008712:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <I2Cx_Init+0x58>)
 8008716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800871a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <I2Cx_Init+0x58>)
 800871e:	2200      	movs	r2, #0
 8008720:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <I2Cx_Init+0x58>)
 8008724:	2200      	movs	r2, #0
 8008726:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <I2Cx_Init+0x58>)
 800872a:	2200      	movs	r2, #0
 800872c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <I2Cx_Init+0x58>)
 8008730:	2200      	movs	r2, #0
 8008732:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8008734:	4803      	ldr	r0, [pc, #12]	; (8008744 <I2Cx_Init+0x58>)
 8008736:	f7ff ff63 	bl	8008600 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800873a:	4802      	ldr	r0, [pc, #8]	; (8008744 <I2Cx_Init+0x58>)
 800873c:	f7f9 f998 	bl	8001a70 <HAL_I2C_Init>
  }
}
 8008740:	bf00      	nop
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20004138 	.word	0x20004138
 8008748:	40005c00 	.word	0x40005c00
 800874c:	000186a0 	.word	0x000186a0

08008750 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8008756:	2300      	movs	r3, #0
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	4a13      	ldr	r2, [pc, #76]	; (80087a8 <I2Cx_ITConfig+0x58>)
 800875c:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <I2Cx_ITConfig+0x58>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	6313      	str	r3, [r2, #48]	; 0x30
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <I2Cx_ITConfig+0x58>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8008772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8008778:	2301      	movs	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800877c:	2300      	movs	r3, #0
 800877e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <I2Cx_ITConfig+0x5c>)
 8008782:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8008784:	1d3b      	adds	r3, r7, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4809      	ldr	r0, [pc, #36]	; (80087b0 <I2Cx_ITConfig+0x60>)
 800878a:	f7f8 fea1 	bl	80014d0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800878e:	2200      	movs	r2, #0
 8008790:	210f      	movs	r1, #15
 8008792:	2028      	movs	r0, #40	; 0x28
 8008794:	f7f8 fbe8 	bl	8000f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8008798:	2028      	movs	r0, #40	; 0x28
 800879a:	f7f8 fc01 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
}
 800879e:	bf00      	nop
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	10210000 	.word	0x10210000
 80087b0:	40020000 	.word	0x40020000

080087b4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af04      	add	r7, sp, #16
 80087ba:	4603      	mov	r3, r0
 80087bc:	71fb      	strb	r3, [r7, #7]
 80087be:	460b      	mov	r3, r1
 80087c0:	71bb      	strb	r3, [r7, #6]
 80087c2:	4613      	mov	r3, r2
 80087c4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	b299      	uxth	r1, r3
 80087ce:	79bb      	ldrb	r3, [r7, #6]
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <I2Cx_WriteData+0x4c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	2301      	movs	r3, #1
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	1d7b      	adds	r3, r7, #5
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	2301      	movs	r3, #1
 80087e2:	4808      	ldr	r0, [pc, #32]	; (8008804 <I2Cx_WriteData+0x50>)
 80087e4:	f7f9 fa9c 	bl	8001d20 <HAL_I2C_Mem_Write>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80087f2:	f000 f863 	bl	80088bc <I2Cx_Error>
  }        
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000068 	.word	0x20000068
 8008804:	20004138 	.word	0x20004138

08008808 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af04      	add	r7, sp, #16
 800880e:	4603      	mov	r3, r0
 8008810:	460a      	mov	r2, r1
 8008812:	71fb      	strb	r3, [r7, #7]
 8008814:	4613      	mov	r3, r2
 8008816:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	b299      	uxth	r1, r3
 8008824:	79bb      	ldrb	r3, [r7, #6]
 8008826:	b29a      	uxth	r2, r3
 8008828:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <I2Cx_ReadData+0x50>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	9302      	str	r3, [sp, #8]
 800882e:	2301      	movs	r3, #1
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f107 030e 	add.w	r3, r7, #14
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	2301      	movs	r3, #1
 800883a:	4808      	ldr	r0, [pc, #32]	; (800885c <I2Cx_ReadData+0x54>)
 800883c:	f7f9 fb6a 	bl	8001f14 <HAL_I2C_Mem_Read>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800884a:	f000 f837 	bl	80088bc <I2Cx_Error>
  
  }
  return value;
 800884e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000068 	.word	0x20000068
 800885c:	20004138 	.word	0x20004138

08008860 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af04      	add	r7, sp, #16
 8008866:	603a      	str	r2, [r7, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
 800886e:	460b      	mov	r3, r1
 8008870:	71bb      	strb	r3, [r7, #6]
 8008872:	4613      	mov	r3, r2
 8008874:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	b299      	uxth	r1, r3
 800887e:	79bb      	ldrb	r3, [r7, #6]
 8008880:	b29a      	uxth	r2, r3
 8008882:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <I2Cx_ReadBuffer+0x54>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	9302      	str	r3, [sp, #8]
 8008888:	88bb      	ldrh	r3, [r7, #4]
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	2301      	movs	r3, #1
 8008892:	4809      	ldr	r0, [pc, #36]	; (80088b8 <I2Cx_ReadBuffer+0x58>)
 8008894:	f7f9 fb3e 	bl	8001f14 <HAL_I2C_Mem_Read>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e002      	b.n	80088ac <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80088a6:	f000 f809 	bl	80088bc <I2Cx_Error>

    return 1;
 80088aa:	2301      	movs	r3, #1
  }
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20000068 	.word	0x20000068
 80088b8:	20004138 	.word	0x20004138

080088bc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80088c0:	4803      	ldr	r0, [pc, #12]	; (80088d0 <I2Cx_Error+0x14>)
 80088c2:	f7f9 f9fd 	bl	8001cc0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80088c6:	f7ff ff11 	bl	80086ec <I2Cx_Init>
}
 80088ca:	bf00      	nop
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20004138 	.word	0x20004138

080088d4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80088d8:	4819      	ldr	r0, [pc, #100]	; (8008940 <SPIx_Init+0x6c>)
 80088da:	f7fb ff11 	bl	8004700 <HAL_SPI_GetState>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d12b      	bne.n	800893c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80088e4:	4b16      	ldr	r3, [pc, #88]	; (8008940 <SPIx_Init+0x6c>)
 80088e6:	4a17      	ldr	r2, [pc, #92]	; (8008944 <SPIx_Init+0x70>)
 80088e8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <SPIx_Init+0x6c>)
 80088ec:	2218      	movs	r2, #24
 80088ee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80088f0:	4b13      	ldr	r3, [pc, #76]	; (8008940 <SPIx_Init+0x6c>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80088f6:	4b12      	ldr	r3, [pc, #72]	; (8008940 <SPIx_Init+0x6c>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <SPIx_Init+0x6c>)
 80088fe:	2200      	movs	r2, #0
 8008900:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <SPIx_Init+0x6c>)
 8008904:	2200      	movs	r2, #0
 8008906:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8008908:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <SPIx_Init+0x6c>)
 800890a:	2207      	movs	r2, #7
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800890e:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <SPIx_Init+0x6c>)
 8008910:	2200      	movs	r2, #0
 8008912:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <SPIx_Init+0x6c>)
 8008916:	2200      	movs	r2, #0
 8008918:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <SPIx_Init+0x6c>)
 800891c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008920:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <SPIx_Init+0x6c>)
 8008924:	2200      	movs	r2, #0
 8008926:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <SPIx_Init+0x6c>)
 800892a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800892e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <SPIx_Init+0x6c>)
 8008932:	f000 f853 	bl	80089dc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8008936:	4802      	ldr	r0, [pc, #8]	; (8008940 <SPIx_Init+0x6c>)
 8008938:	f7fb fa7f 	bl	8003e3a <HAL_SPI_Init>
  }
}
 800893c:	bf00      	nop
 800893e:	bd80      	pop	{r7, pc}
 8008940:	20003e50 	.word	0x20003e50
 8008944:	40015000 	.word	0x40015000

08008948 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	b29a      	uxth	r2, r3
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <SPIx_Read+0x38>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f107 0108 	add.w	r1, r7, #8
 8008962:	4808      	ldr	r0, [pc, #32]	; (8008984 <SPIx_Read+0x3c>)
 8008964:	f7fb fc26 	bl	80041b4 <HAL_SPI_Receive>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008972:	f000 f827 	bl	80089c4 <SPIx_Error>
  }
  
  return readvalue;
 8008976:	68bb      	ldr	r3, [r7, #8]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	2000006c 	.word	0x2000006c
 8008984:	20003e50 	.word	0x20003e50

08008988 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <SPIx_Write+0x34>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	1db9      	adds	r1, r7, #6
 800899c:	2201      	movs	r2, #1
 800899e:	4808      	ldr	r0, [pc, #32]	; (80089c0 <SPIx_Write+0x38>)
 80089a0:	f7fb fad6 	bl	8003f50 <HAL_SPI_Transmit>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80089ae:	f000 f809 	bl	80089c4 <SPIx_Error>
  }
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	2000006c 	.word	0x2000006c
 80089c0:	20003e50 	.word	0x20003e50

080089c4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80089c8:	4803      	ldr	r0, [pc, #12]	; (80089d8 <SPIx_Error+0x14>)
 80089ca:	f7fb fa99 	bl	8003f00 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80089ce:	f7ff ff81 	bl	80088d4 <SPIx_Init>
}
 80089d2:	bf00      	nop
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20003e50 	.word	0x20003e50

080089dc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80089e4:	2300      	movs	r3, #0
 80089e6:	613b      	str	r3, [r7, #16]
 80089e8:	4a17      	ldr	r2, [pc, #92]	; (8008a48 <SPIx_MspInit+0x6c>)
 80089ea:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <SPIx_MspInit+0x6c>)
 80089ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089f2:	6453      	str	r3, [r2, #68]	; 0x44
 80089f4:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <SPIx_MspInit+0x6c>)
 80089f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4a10      	ldr	r2, [pc, #64]	; (8008a48 <SPIx_MspInit+0x6c>)
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <SPIx_MspInit+0x6c>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	f043 0320 	orr.w	r3, r3, #32
 8008a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8008a10:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <SPIx_MspInit+0x6c>)
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8008a1c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8008a22:	2302      	movs	r3, #2
 8008a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8008a26:	2302      	movs	r3, #2
 8008a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8008a2e:	2305      	movs	r3, #5
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	4619      	mov	r1, r3
 8008a38:	4804      	ldr	r0, [pc, #16]	; (8008a4c <SPIx_MspInit+0x70>)
 8008a3a:	f7f8 fd49 	bl	80014d0 <HAL_GPIO_Init>
}
 8008a3e:	bf00      	nop
 8008a40:	3728      	adds	r7, #40	; 0x28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	40023800 	.word	0x40023800
 8008a4c:	40021400 	.word	0x40021400

08008a50 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8008a56:	4b36      	ldr	r3, [pc, #216]	; (8008b30 <LCD_IO_Init+0xe0>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d164      	bne.n	8008b28 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8008a5e:	4b34      	ldr	r3, [pc, #208]	; (8008b30 <LCD_IO_Init+0xe0>)
 8008a60:	2201      	movs	r2, #1
 8008a62:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8008a64:	2300      	movs	r3, #0
 8008a66:	60bb      	str	r3, [r7, #8]
 8008a68:	4a32      	ldr	r2, [pc, #200]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008a6a:	4b32      	ldr	r3, [pc, #200]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	f043 0308 	orr.w	r3, r3, #8
 8008a72:	6313      	str	r3, [r2, #48]	; 0x30
 8008a74:	4b2f      	ldr	r3, [pc, #188]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	60bb      	str	r3, [r7, #8]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8008a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008a86:	2301      	movs	r3, #1
 8008a88:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	4619      	mov	r1, r3
 8008a98:	4827      	ldr	r0, [pc, #156]	; (8008b38 <LCD_IO_Init+0xe8>)
 8008a9a:	f7f8 fd19 	bl	80014d0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008aa4:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa8:	f043 0308 	orr.w	r3, r3, #8
 8008aac:	6313      	str	r3, [r2, #48]	; 0x30
 8008aae:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	607b      	str	r3, [r7, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8008aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008abe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4819      	ldr	r0, [pc, #100]	; (8008b38 <LCD_IO_Init+0xe8>)
 8008ad4:	f7f8 fcfc 	bl	80014d0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8008ad8:	2300      	movs	r3, #0
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	f043 0304 	orr.w	r3, r3, #4
 8008ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8008ae8:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <LCD_IO_Init+0xe4>)
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8008af4:	2304      	movs	r3, #4
 8008af6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008af8:	2301      	movs	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008b00:	2302      	movs	r3, #2
 8008b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8008b04:	f107 030c 	add.w	r3, r7, #12
 8008b08:	4619      	mov	r1, r3
 8008b0a:	480c      	ldr	r0, [pc, #48]	; (8008b3c <LCD_IO_Init+0xec>)
 8008b0c:	f7f8 fce0 	bl	80014d0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8008b10:	2200      	movs	r2, #0
 8008b12:	2104      	movs	r1, #4
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <LCD_IO_Init+0xec>)
 8008b16:	f7f8 ff91 	bl	8001a3c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	4807      	ldr	r0, [pc, #28]	; (8008b3c <LCD_IO_Init+0xec>)
 8008b20:	f7f8 ff8c 	bl	8001a3c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8008b24:	f7ff fed6 	bl	80088d4 <SPIx_Init>
  }
}
 8008b28:	bf00      	nop
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20003ea8 	.word	0x20003ea8
 8008b34:	40023800 	.word	0x40023800
 8008b38:	40020c00 	.word	0x40020c00
 8008b3c:	40020800 	.word	0x40020800

08008b40 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b50:	480a      	ldr	r0, [pc, #40]	; (8008b7c <LCD_IO_WriteData+0x3c>)
 8008b52:	f7f8 ff73 	bl	8001a3c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8008b56:	2200      	movs	r2, #0
 8008b58:	2104      	movs	r1, #4
 8008b5a:	4809      	ldr	r0, [pc, #36]	; (8008b80 <LCD_IO_WriteData+0x40>)
 8008b5c:	f7f8 ff6e 	bl	8001a3c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff ff10 	bl	8008988 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008b68:	2201      	movs	r2, #1
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	4804      	ldr	r0, [pc, #16]	; (8008b80 <LCD_IO_WriteData+0x40>)
 8008b6e:	f7f8 ff65 	bl	8001a3c <HAL_GPIO_WritePin>
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40020c00 	.word	0x40020c00
 8008b80:	40020800 	.word	0x40020800

08008b84 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b94:	480a      	ldr	r0, [pc, #40]	; (8008bc0 <LCD_IO_WriteReg+0x3c>)
 8008b96:	f7f8 ff51 	bl	8001a3c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2104      	movs	r1, #4
 8008b9e:	4809      	ldr	r0, [pc, #36]	; (8008bc4 <LCD_IO_WriteReg+0x40>)
 8008ba0:	f7f8 ff4c 	bl	8001a3c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff feed 	bl	8008988 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008bae:	2201      	movs	r2, #1
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	4804      	ldr	r0, [pc, #16]	; (8008bc4 <LCD_IO_WriteReg+0x40>)
 8008bb4:	f7f8 ff42 	bl	8001a3c <HAL_GPIO_WritePin>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40020c00 	.word	0x40020c00
 8008bc4:	40020800 	.word	0x40020800

08008bc8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	460a      	mov	r2, r1
 8008bd2:	80fb      	strh	r3, [r7, #6]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2104      	movs	r1, #4
 8008be0:	4810      	ldr	r0, [pc, #64]	; (8008c24 <LCD_IO_ReadData+0x5c>)
 8008be2:	f7f8 ff2b 	bl	8001a3c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8008be6:	2200      	movs	r2, #0
 8008be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008bec:	480e      	ldr	r0, [pc, #56]	; (8008c28 <LCD_IO_ReadData+0x60>)
 8008bee:	f7f8 ff25 	bl	8001a3c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff fec7 	bl	8008988 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8008bfa:	797b      	ldrb	r3, [r7, #5]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff fea3 	bl	8008948 <SPIx_Read>
 8008c02:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008c04:	2201      	movs	r2, #1
 8008c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c0a:	4807      	ldr	r0, [pc, #28]	; (8008c28 <LCD_IO_ReadData+0x60>)
 8008c0c:	f7f8 ff16 	bl	8001a3c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008c10:	2201      	movs	r2, #1
 8008c12:	2104      	movs	r1, #4
 8008c14:	4803      	ldr	r0, [pc, #12]	; (8008c24 <LCD_IO_ReadData+0x5c>)
 8008c16:	f7f8 ff11 	bl	8001a3c <HAL_GPIO_WritePin>
  
  return readvalue;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40020800 	.word	0x40020800
 8008c28:	40020c00 	.word	0x40020c00

08008c2c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7f8 f8bf 	bl	8000db8 <HAL_Delay>
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8008c46:	f7ff fd51 	bl	80086ec <I2Cx_Init>
}
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8008c52:	f7ff fd7d 	bl	8008750 <I2Cx_ITConfig>
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	4603      	mov	r3, r0
 8008c62:	71fb      	strb	r3, [r7, #7]
 8008c64:	460b      	mov	r3, r1
 8008c66:	71bb      	strb	r3, [r7, #6]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8008c6c:	797a      	ldrb	r2, [r7, #5]
 8008c6e:	79b9      	ldrb	r1, [r7, #6]
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff fd9e 	bl	80087b4 <I2Cx_WriteData>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	460a      	mov	r2, r1
 8008c8a:	71fb      	strb	r3, [r7, #7]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8008c90:	79ba      	ldrb	r2, [r7, #6]
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fdb6 	bl	8008808 <I2Cx_ReadData>
 8008c9c:	4603      	mov	r3, r0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	603a      	str	r2, [r7, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	71fb      	strb	r3, [r7, #7]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	71bb      	strb	r3, [r7, #6]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8008cbc:	88bb      	ldrh	r3, [r7, #4]
 8008cbe:	79b9      	ldrb	r1, [r7, #6]
 8008cc0:	79f8      	ldrb	r0, [r7, #7]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	f7ff fdcc 	bl	8008860 <I2Cx_ReadBuffer>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	b29b      	uxth	r3, r3
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7f8 f86b 	bl	8000db8 <HAL_Delay>
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <LTDCSetup>:
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c);
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex);
static void ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize,
		uint32_t ColorMode);
void LTDCSetup(LTDC_HandleTypeDef* arg_wsk) {
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	LtdcHandler = arg_wsk;
 8008cf4:	4a04      	ldr	r2, [pc, #16]	; (8008d08 <LTDCSetup+0x1c>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6013      	str	r3, [r2, #0]
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	2000418c 	.word	0x2000418c

08008d0c <DMASetup>:
void DMASetup(DMA2D_HandleTypeDef* arg_wsk) {
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	Dma2dHandler = arg_wsk;
 8008d14:	4a04      	ldr	r2, [pc, #16]	; (8008d28 <DMASetup+0x1c>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6013      	str	r3, [r2, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	20003eac 	.word	0x20003eac

08008d2c <initILI9341>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */

void initILI9341() {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
	/* Select the device */
	LcdDrv = &ili9341_drv;
 8008d30:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <initILI9341+0x18>)
 8008d32:	4a05      	ldr	r2, [pc, #20]	; (8008d48 <initILI9341+0x1c>)
 8008d34:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8008d36:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <initILI9341+0x18>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4798      	blx	r3
}
 8008d3e:	bf00      	nop
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20004190 	.word	0x20004190
 8008d48:	2000001c 	.word	0x2000001c

08008d4c <BSP_LCD_GetXSize>:

/**
 * @brief  Gets the LCD X size.
 * @retval The used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelWidth();
 8008d50:	4b03      	ldr	r3, [pc, #12]	; (8008d60 <BSP_LCD_GetXSize+0x14>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20004190 	.word	0x20004190

08008d64 <BSP_LCD_GetYSize>:

/**
 * @brief  Gets the LCD Y size.
 * @retval The used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelHeight();
 8008d68:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <BSP_LCD_GetYSize+0x14>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	4798      	blx	r3
 8008d70:	4603      	mov	r3, r0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20004190 	.word	0x20004190

08008d7c <BSP_LCD_LayerDefaultInit>:
/**
 * @brief  Initializes the LCD layers.
 * @param  LayerIndex: the layer foreground or background.
 * @param  FB_Address: the layer frame buffer.
 */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address) {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b090      	sub	sp, #64	; 0x40
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	80fb      	strh	r3, [r7, #6]
	LCD_LayerCfgTypeDef Layercfg;

	/* Layer Init */
	Layercfg.WindowX0 = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
	Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8008d8c:	f7ff ffde 	bl	8008d4c <BSP_LCD_GetXSize>
 8008d90:	4603      	mov	r3, r0
 8008d92:	613b      	str	r3, [r7, #16]
	Layercfg.WindowY0 = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]
	Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8008d98:	f7ff ffe4 	bl	8008d64 <BSP_LCD_GetYSize>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	61bb      	str	r3, [r7, #24]
	Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]
	Layercfg.FBStartAdress = FB_Address;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	633b      	str	r3, [r7, #48]	; 0x30
	Layercfg.Alpha = 255;
 8008da8:	23ff      	movs	r3, #255	; 0xff
 8008daa:	623b      	str	r3, [r7, #32]
	Layercfg.Alpha0 = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
	Layercfg.Backcolor.Blue = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Layercfg.Backcolor.Green = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	Layercfg.Backcolor.Red = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008dc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008dc8:	2307      	movs	r3, #7
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8008dcc:	f7ff ffbe 	bl	8008d4c <BSP_LCD_GetXSize>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
	Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8008dd4:	f7ff ffc6 	bl	8008d64 <BSP_LCD_GetYSize>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_LTDC_ConfigLayer(LtdcHandler, &Layercfg, LayerIndex);
 8008ddc:	4b17      	ldr	r3, [pc, #92]	; (8008e3c <BSP_LCD_LayerDefaultInit+0xc0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	88fa      	ldrh	r2, [r7, #6]
 8008de2:	f107 010c 	add.w	r1, r7, #12
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7f9 ff48 	bl	8002c7c <HAL_LTDC_ConfigLayer>

	DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	4914      	ldr	r1, [pc, #80]	; (8008e40 <BSP_LCD_LayerDefaultInit+0xc4>)
 8008df0:	4613      	mov	r3, r2
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e00:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].pFont = &Font24;
 8008e02:	88fa      	ldrh	r2, [r7, #6]
 8008e04:	490e      	ldr	r1, [pc, #56]	; (8008e40 <BSP_LCD_LayerDefaultInit+0xc4>)
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	3308      	adds	r3, #8
 8008e12:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <BSP_LCD_LayerDefaultInit+0xc8>)
 8008e14:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8008e16:	88fa      	ldrh	r2, [r7, #6]
 8008e18:	4909      	ldr	r1, [pc, #36]	; (8008e40 <BSP_LCD_LayerDefaultInit+0xc4>)
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8008e28:	601a      	str	r2, [r3, #0]

	/* Dithering activation */
	HAL_LTDC_EnableDither(LtdcHandler);
 8008e2a:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <BSP_LCD_LayerDefaultInit+0xc0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f9 ff62 	bl	8002cf8 <HAL_LTDC_EnableDither>
}
 8008e34:	bf00      	nop
 8008e36:	3740      	adds	r7, #64	; 0x40
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	2000418c 	.word	0x2000418c
 8008e40:	20003eb4 	.word	0x20003eb4
 8008e44:	20000010 	.word	0x20000010

08008e48 <BSP_LCD_SelectLayer>:

/**
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: the Layer foreground or background.
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex) {
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 8008e50:	4a04      	ldr	r2, [pc, #16]	; (8008e64 <BSP_LCD_SelectLayer+0x1c>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20003eb0 	.word	0x20003eb0

08008e68 <BSP_LCD_SetTextColor>:

/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetTextColor(uint32_t Color) {
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <BSP_LCD_SetTextColor+0x28>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	4907      	ldr	r1, [pc, #28]	; (8008e94 <BSP_LCD_SetTextColor+0x2c>)
 8008e76:	4613      	mov	r3, r2
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	440b      	add	r3, r1
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20003eb0 	.word	0x20003eb0
 8008e94:	20003eb4 	.word	0x20003eb4

08008e98 <BSP_LCD_SetBackColor>:

/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetBackColor(uint32_t Color) {
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 8008ea0:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <BSP_LCD_SetBackColor+0x2c>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	4908      	ldr	r1, [pc, #32]	; (8008ec8 <BSP_LCD_SetBackColor+0x30>)
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	601a      	str	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20003eb0 	.word	0x20003eb0
 8008ec8:	20003eb4 	.word	0x20003eb4

08008ecc <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 8008ed4:	4b08      	ldr	r3, [pc, #32]	; (8008ef8 <BSP_LCD_SetFont+0x2c>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4908      	ldr	r1, [pc, #32]	; (8008efc <BSP_LCD_SetFont+0x30>)
 8008eda:	4613      	mov	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20003eb0 	.word	0x20003eb0
 8008efc:	20003eb4 	.word	0x20003eb4

08008f00 <BSP_LCD_Clear>:

/**
 * @brief  Clears the hole LCD.
 * @param  Color: the color of the background
 */
void BSP_LCD_Clear(uint32_t Color) {
 8008f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	FillBuffer(ActiveLayer,
 8008f08:	4b10      	ldr	r3, [pc, #64]	; (8008f4c <BSP_LCD_Clear+0x4c>)
 8008f0a:	681c      	ldr	r4, [r3, #0]
			(uint32_t *) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress),
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <BSP_LCD_Clear+0x50>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <BSP_LCD_Clear+0x4c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2134      	movs	r1, #52	; 0x34
 8008f16:	fb01 f303 	mul.w	r3, r1, r3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	335c      	adds	r3, #92	; 0x5c
 8008f1e:	681b      	ldr	r3, [r3, #0]
	FillBuffer(ActiveLayer,
 8008f20:	461d      	mov	r5, r3
 8008f22:	f7ff ff13 	bl	8008d4c <BSP_LCD_GetXSize>
 8008f26:	4606      	mov	r6, r0
 8008f28:	f7ff ff1c 	bl	8008d64 <BSP_LCD_GetYSize>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	2300      	movs	r3, #0
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	4613      	mov	r3, r2
 8008f38:	4632      	mov	r2, r6
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fc13 	bl	8009768 <FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20003eb0 	.word	0x20003eb0
 8008f50:	2000418c 	.word	0x2000418c

08008f54 <BSP_LCD_DisplayChar>:
 * @brief  Displays one character.
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8008f54:	b590      	push	{r4, r7, lr}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	80fb      	strh	r3, [r7, #6]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	80bb      	strh	r3, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos,
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8008f66:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <BSP_LCD_DisplayChar+0x80>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	491b      	ldr	r1, [pc, #108]	; (8008fd8 <BSP_LCD_DisplayChar+0x84>)
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	3308      	adds	r3, #8
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6819      	ldr	r1, [r3, #0]
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	f1a3 0020 	sub.w	r0, r3, #32
					*\
 DrawProp[ActiveLayer].pFont->Height
 8008f82:	4b14      	ldr	r3, [pc, #80]	; (8008fd4 <BSP_LCD_DisplayChar+0x80>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	4c14      	ldr	r4, [pc, #80]	; (8008fd8 <BSP_LCD_DisplayChar+0x84>)
 8008f88:	4613      	mov	r3, r2
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4423      	add	r3, r4
 8008f92:	3308      	adds	r3, #8
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	88db      	ldrh	r3, [r3, #6]
					*\
 8008f98:	fb03 f000 	mul.w	r0, r3, r0
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <BSP_LCD_DisplayChar+0x80>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	4c0d      	ldr	r4, [pc, #52]	; (8008fd8 <BSP_LCD_DisplayChar+0x84>)
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4423      	add	r3, r4
 8008fac:	3308      	adds	r3, #8
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	889b      	ldrh	r3, [r3, #4]
 8008fb2:	3307      	adds	r3, #7
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	da00      	bge.n	8008fba <BSP_LCD_DisplayChar+0x66>
 8008fb8:	3307      	adds	r3, #7
 8008fba:	10db      	asrs	r3, r3, #3
 8008fbc:	fb03 f300 	mul.w	r3, r3, r0
	DrawChar(Xpos, Ypos,
 8008fc0:	18ca      	adds	r2, r1, r3
 8008fc2:	88b9      	ldrh	r1, [r7, #4]
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fb14 	bl	80095f4 <DrawChar>
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd90      	pop	{r4, r7, pc}
 8008fd4:	20003eb0 	.word	0x20003eb0
 8008fd8:	20003eb4 	.word	0x20003eb4

08008fdc <BSP_LCD_DisplayStringAt>:
 *                @arg CENTER_MODE
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 8008fdc:	b5b0      	push	{r4, r5, r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60ba      	str	r2, [r7, #8]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	81fb      	strh	r3, [r7, #14]
 8008fea:	460b      	mov	r3, r1
 8008fec:	81bb      	strh	r3, [r7, #12]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
	uint16_t refcolumn = 1, i = 0;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	83fb      	strh	r3, [r7, #30]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	2300      	movs	r3, #0
 8009000:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 8009006:	e002      	b.n	800900e <BSP_LCD_DisplayStringAt+0x32>
		size++;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	3301      	adds	r3, #1
 800900c:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	617a      	str	r2, [r7, #20]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f6      	bne.n	8009008 <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 800901a:	f7ff fe97 	bl	8008d4c <BSP_LCD_GetXSize>
 800901e:	4b4a      	ldr	r3, [pc, #296]	; (8009148 <BSP_LCD_DisplayStringAt+0x16c>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	494a      	ldr	r1, [pc, #296]	; (800914c <BSP_LCD_DisplayStringAt+0x170>)
 8009024:	4613      	mov	r3, r2
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	3308      	adds	r3, #8
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	889b      	ldrh	r3, [r3, #4]
 8009034:	fbb0 f3f3 	udiv	r3, r0, r3
 8009038:	613b      	str	r3, [r7, #16]

	switch (mode) {
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d01c      	beq.n	800907a <BSP_LCD_DisplayStringAt+0x9e>
 8009040:	2b03      	cmp	r3, #3
 8009042:	d017      	beq.n	8009074 <BSP_LCD_DisplayStringAt+0x98>
 8009044:	2b01      	cmp	r3, #1
 8009046:	d12e      	bne.n	80090a6 <BSP_LCD_DisplayStringAt+0xca>
	case CENTER_MODE: {
		refcolumn = X
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	1ad1      	subs	r1, r2, r3
 800904e:	4b3e      	ldr	r3, [pc, #248]	; (8009148 <BSP_LCD_DisplayStringAt+0x16c>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	483e      	ldr	r0, [pc, #248]	; (800914c <BSP_LCD_DisplayStringAt+0x170>)
 8009054:	4613      	mov	r3, r2
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4403      	add	r3, r0
 800905e:	3308      	adds	r3, #8
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	889b      	ldrh	r3, [r3, #4]
 8009064:	fb03 f301 	mul.w	r3, r3, r1
 8009068:	085b      	lsrs	r3, r3, #1
 800906a:	b29a      	uxth	r2, r3
		refcolumn = X
 800906c:	89fb      	ldrh	r3, [r7, #14]
 800906e:	4413      	add	r3, r2
 8009070:	83fb      	strh	r3, [r7, #30]
		break;
 8009072:	e01b      	b.n	80090ac <BSP_LCD_DisplayStringAt+0xd0>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8009074:	89fb      	ldrh	r3, [r7, #14]
 8009076:	83fb      	strh	r3, [r7, #30]
		break;
 8009078:	e018      	b.n	80090ac <BSP_LCD_DisplayStringAt+0xd0>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	b299      	uxth	r1, r3
 8009082:	4b31      	ldr	r3, [pc, #196]	; (8009148 <BSP_LCD_DisplayStringAt+0x16c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4831      	ldr	r0, [pc, #196]	; (800914c <BSP_LCD_DisplayStringAt+0x170>)
 8009088:	4613      	mov	r3, r2
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4403      	add	r3, r0
 8009092:	3308      	adds	r3, #8
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	889b      	ldrh	r3, [r3, #4]
 8009098:	fb11 f303 	smulbb	r3, r1, r3
 800909c:	b29a      	uxth	r2, r3
 800909e:	89fb      	ldrh	r3, [r7, #14]
 80090a0:	4413      	add	r3, r2
 80090a2:	83fb      	strh	r3, [r7, #30]
		break;
 80090a4:	e002      	b.n	80090ac <BSP_LCD_DisplayStringAt+0xd0>
	}
	default: {
		refcolumn = X;
 80090a6:	89fb      	ldrh	r3, [r7, #14]
 80090a8:	83fb      	strh	r3, [r7, #30]
		break;
 80090aa:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 80090ac:	e01a      	b.n	80090e4 <BSP_LCD_DisplayStringAt+0x108>
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	781a      	ldrb	r2, [r3, #0]
 80090b2:	89b9      	ldrh	r1, [r7, #12]
 80090b4:	8bfb      	ldrh	r3, [r7, #30]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff ff4c 	bl	8008f54 <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80090bc:	4b22      	ldr	r3, [pc, #136]	; (8009148 <BSP_LCD_DisplayStringAt+0x16c>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	4922      	ldr	r1, [pc, #136]	; (800914c <BSP_LCD_DisplayStringAt+0x170>)
 80090c2:	4613      	mov	r3, r2
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3308      	adds	r3, #8
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	889a      	ldrh	r2, [r3, #4]
 80090d2:	8bfb      	ldrh	r3, [r7, #30]
 80090d4:	4413      	add	r3, r2
 80090d6:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	3301      	adds	r3, #1
 80090dc:	60bb      	str	r3, [r7, #8]
		i++;
 80090de:	8bbb      	ldrh	r3, [r7, #28]
 80090e0:	3301      	adds	r3, #1
 80090e2:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	781b      	ldrb	r3, [r3, #0]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bf14      	ite	ne
 80090ec:	2301      	movne	r3, #1
 80090ee:	2300      	moveq	r3, #0
 80090f0:	b2dc      	uxtb	r4, r3
 80090f2:	f7ff fe2b 	bl	8008d4c <BSP_LCD_GetXSize>
 80090f6:	4605      	mov	r5, r0
 80090f8:	8bb9      	ldrh	r1, [r7, #28]
 80090fa:	4b13      	ldr	r3, [pc, #76]	; (8009148 <BSP_LCD_DisplayStringAt+0x16c>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4813      	ldr	r0, [pc, #76]	; (800914c <BSP_LCD_DisplayStringAt+0x170>)
 8009100:	4613      	mov	r3, r2
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4403      	add	r3, r0
 800910a:	3308      	adds	r3, #8
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	889b      	ldrh	r3, [r3, #4]
 8009110:	fb03 f301 	mul.w	r3, r3, r1
 8009114:	1aeb      	subs	r3, r5, r3
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 8009116:	b299      	uxth	r1, r3
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <BSP_LCD_DisplayStringAt+0x16c>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	480b      	ldr	r0, [pc, #44]	; (800914c <BSP_LCD_DisplayStringAt+0x170>)
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4403      	add	r3, r0
 8009128:	3308      	adds	r3, #8
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	889b      	ldrh	r3, [r3, #4]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 800912e:	4299      	cmp	r1, r3
 8009130:	bf2c      	ite	cs
 8009132:	2301      	movcs	r3, #1
 8009134:	2300      	movcc	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	4023      	ands	r3, r4
 800913a:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1b6      	bne.n	80090ae <BSP_LCD_DisplayStringAt+0xd2>
	}
}
 8009140:	bf00      	nop
 8009142:	3720      	adds	r7, #32
 8009144:	46bd      	mov	sp, r7
 8009146:	bdb0      	pop	{r4, r5, r7, pc}
 8009148:	20003eb0 	.word	0x20003eb0
 800914c:	20003eb4 	.word	0x20003eb4

08009150 <BSP_LCD_DrawHLine>:
 * @brief  Displays an horizontal line.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Length: line length
 */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length) {
 8009150:	b5b0      	push	{r4, r5, r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af02      	add	r7, sp, #8
 8009156:	4603      	mov	r3, r0
 8009158:	80fb      	strh	r3, [r7, #6]
 800915a:	460b      	mov	r3, r1
 800915c:	80bb      	strh	r3, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	807b      	strh	r3, [r7, #2]
	uint32_t xaddress = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]

	/* Get the line address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009166:	4b17      	ldr	r3, [pc, #92]	; (80091c4 <BSP_LCD_DrawHLine+0x74>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b17      	ldr	r3, [pc, #92]	; (80091c8 <BSP_LCD_DrawHLine+0x78>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2134      	movs	r1, #52	; 0x34
 8009170:	fb01 f303 	mul.w	r3, r1, r3
 8009174:	4413      	add	r3, r2
 8009176:	335c      	adds	r3, #92	; 0x5c
 8009178:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800917a:	f7ff fde7 	bl	8008d4c <BSP_LCD_GetXSize>
 800917e:	4602      	mov	r2, r0
 8009180:	88bb      	ldrh	r3, [r7, #4]
 8009182:	fb03 f202 	mul.w	r2, r3, r2
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 800918c:	4423      	add	r3, r4
 800918e:	60fb      	str	r3, [r7, #12]

	/* Write line */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Length, 1, 0,
 8009190:	4b0d      	ldr	r3, [pc, #52]	; (80091c8 <BSP_LCD_DrawHLine+0x78>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	68fc      	ldr	r4, [r7, #12]
 8009196:	887d      	ldrh	r5, [r7, #2]
 8009198:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <BSP_LCD_DrawHLine+0x78>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	490b      	ldr	r1, [pc, #44]	; (80091cc <BSP_LCD_DrawHLine+0x7c>)
 800919e:	4613      	mov	r3, r2
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	2300      	movs	r3, #0
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	2301      	movs	r3, #1
 80091b2:	462a      	mov	r2, r5
 80091b4:	4621      	mov	r1, r4
 80091b6:	f000 fad7 	bl	8009768 <FillBuffer>
			DrawProp[ActiveLayer].TextColor);
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bdb0      	pop	{r4, r5, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000418c 	.word	0x2000418c
 80091c8:	20003eb0 	.word	0x20003eb0
 80091cc:	20003eb4 	.word	0x20003eb4

080091d0 <BSP_LCD_DrawCircle>:
 * @brief  Displays a circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 80091d0:	b590      	push	{r4, r7, lr}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	80fb      	strh	r3, [r7, #6]
 80091da:	460b      	mov	r3, r1
 80091dc:	80bb      	strh	r3, [r7, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	807b      	strh	r3, [r7, #2]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 80091e2:	887b      	ldrh	r3, [r7, #2]
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	f1c3 0303 	rsb	r3, r3, #3
 80091ea:	617b      	str	r3, [r7, #20]
	curx = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
	cury = Radius;
 80091f0:	887b      	ldrh	r3, [r7, #2]
 80091f2:	60fb      	str	r3, [r7, #12]

	while (curx <= cury) {
 80091f4:	e0cf      	b.n	8009396 <BSP_LCD_DrawCircle+0x1c6>
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury),
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	4413      	add	r3, r2
 80091fe:	b298      	uxth	r0, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	b29b      	uxth	r3, r3
 8009204:	88ba      	ldrh	r2, [r7, #4]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	b29c      	uxth	r4, r3
 800920a:	4b67      	ldr	r3, [pc, #412]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4967      	ldr	r1, [pc, #412]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 8009210:	4613      	mov	r3, r2
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	4621      	mov	r1, r4
 8009220:	f000 f9c0 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury),
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	b29b      	uxth	r3, r3
 8009228:	88fa      	ldrh	r2, [r7, #6]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	b298      	uxth	r0, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	b29b      	uxth	r3, r3
 8009232:	88ba      	ldrh	r2, [r7, #4]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	b29c      	uxth	r4, r3
 8009238:	4b5b      	ldr	r3, [pc, #364]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	495b      	ldr	r1, [pc, #364]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 800923e:	4613      	mov	r3, r2
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	4621      	mov	r1, r4
 800924e:	f000 f9a9 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx),
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	b29a      	uxth	r2, r3
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	4413      	add	r3, r2
 800925a:	b298      	uxth	r0, r3
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	b29b      	uxth	r3, r3
 8009260:	88ba      	ldrh	r2, [r7, #4]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	b29c      	uxth	r4, r3
 8009266:	4b50      	ldr	r3, [pc, #320]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4950      	ldr	r1, [pc, #320]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 800926c:	4613      	mov	r3, r2
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	4621      	mov	r1, r4
 800927c:	f000 f992 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx),
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	b29b      	uxth	r3, r3
 8009284:	88fa      	ldrh	r2, [r7, #6]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b298      	uxth	r0, r3
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	b29b      	uxth	r3, r3
 800928e:	88ba      	ldrh	r2, [r7, #4]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	b29c      	uxth	r4, r3
 8009294:	4b44      	ldr	r3, [pc, #272]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4944      	ldr	r1, [pc, #272]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 800929a:	4613      	mov	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	4621      	mov	r1, r4
 80092aa:	f000 f97b 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury),
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	4413      	add	r3, r2
 80092b6:	b298      	uxth	r0, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	88bb      	ldrh	r3, [r7, #4]
 80092be:	4413      	add	r3, r2
 80092c0:	b29c      	uxth	r4, r3
 80092c2:	4b39      	ldr	r3, [pc, #228]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	4939      	ldr	r1, [pc, #228]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 80092c8:	4613      	mov	r3, r2
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	4621      	mov	r1, r4
 80092d8:	f000 f964 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury),
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	b298      	uxth	r0, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	88bb      	ldrh	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	b29c      	uxth	r4, r3
 80092f0:	4b2d      	ldr	r3, [pc, #180]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	492d      	ldr	r1, [pc, #180]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	4621      	mov	r1, r4
 8009306:	f000 f94d 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx),
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	b29a      	uxth	r2, r3
 800930e:	88fb      	ldrh	r3, [r7, #6]
 8009310:	4413      	add	r3, r2
 8009312:	b298      	uxth	r0, r3
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	b29a      	uxth	r2, r3
 8009318:	88bb      	ldrh	r3, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	b29c      	uxth	r4, r3
 800931e:	4b22      	ldr	r3, [pc, #136]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4922      	ldr	r1, [pc, #136]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 8009324:	4613      	mov	r3, r2
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	440b      	add	r3, r1
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	4621      	mov	r1, r4
 8009334:	f000 f936 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx),
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	b29b      	uxth	r3, r3
 800933c:	88fa      	ldrh	r2, [r7, #6]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	b298      	uxth	r0, r3
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	b29a      	uxth	r2, r3
 8009346:	88bb      	ldrh	r3, [r7, #4]
 8009348:	4413      	add	r3, r2
 800934a:	b29c      	uxth	r4, r3
 800934c:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <BSP_LCD_DrawCircle+0x1d8>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	4916      	ldr	r1, [pc, #88]	; (80093ac <BSP_LCD_DrawCircle+0x1dc>)
 8009352:	4613      	mov	r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	4621      	mov	r1, r4
 8009362:	f000 f91f 	bl	80095a4 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);

		if (d < 0) {
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	da06      	bge.n	800937a <BSP_LCD_DrawCircle+0x1aa>
			d += (curx << 2) + 6;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	009a      	lsls	r2, r3, #2
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	4413      	add	r3, r2
 8009374:	3306      	adds	r3, #6
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e00a      	b.n	8009390 <BSP_LCD_DrawCircle+0x1c0>
		} else {
			d += ((curx - cury) << 2) + 10;
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	009a      	lsls	r2, r3, #2
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	4413      	add	r3, r2
 8009386:	330a      	adds	r3, #10
 8009388:	617b      	str	r3, [r7, #20]
			cury--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3b01      	subs	r3, #1
 800938e:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	3301      	adds	r3, #1
 8009394:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	429a      	cmp	r2, r3
 800939c:	f67f af2b 	bls.w	80091f6 <BSP_LCD_DrawCircle+0x26>
	}
}
 80093a0:	bf00      	nop
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd90      	pop	{r4, r7, pc}
 80093a8:	20003eb0 	.word	0x20003eb0
 80093ac:	20003eb4 	.word	0x20003eb4

080093b0 <BSP_LCD_FillRect>:
 * @param  Ypos: the Y position
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height) {
 80093b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b4:	b086      	sub	sp, #24
 80093b6:	af02      	add	r7, sp, #8
 80093b8:	4604      	mov	r4, r0
 80093ba:	4608      	mov	r0, r1
 80093bc:	4611      	mov	r1, r2
 80093be:	461a      	mov	r2, r3
 80093c0:	4623      	mov	r3, r4
 80093c2:	80fb      	strh	r3, [r7, #6]
 80093c4:	4603      	mov	r3, r0
 80093c6:	80bb      	strh	r3, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	807b      	strh	r3, [r7, #2]
 80093cc:	4613      	mov	r3, r2
 80093ce:	803b      	strh	r3, [r7, #0]
	uint32_t xaddress = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80093d4:	4b20      	ldr	r3, [pc, #128]	; (8009458 <BSP_LCD_FillRect+0xa8>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	4920      	ldr	r1, [pc, #128]	; (800945c <BSP_LCD_FillRect+0xac>)
 80093da:	4613      	mov	r3, r2
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff fd3e 	bl	8008e68 <BSP_LCD_SetTextColor>

	/* Get the rectangle start address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <BSP_LCD_FillRect+0xb0>)
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	4b19      	ldr	r3, [pc, #100]	; (8009458 <BSP_LCD_FillRect+0xa8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2134      	movs	r1, #52	; 0x34
 80093f6:	fb01 f303 	mul.w	r3, r1, r3
 80093fa:	4413      	add	r3, r2
 80093fc:	335c      	adds	r3, #92	; 0x5c
 80093fe:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8009400:	f7ff fca4 	bl	8008d4c <BSP_LCD_GetXSize>
 8009404:	4602      	mov	r2, r0
 8009406:	88bb      	ldrh	r3, [r7, #4]
 8009408:	fb03 f202 	mul.w	r2, r3, r2
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009412:	4423      	add	r3, r4
 8009414:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009416:	4b10      	ldr	r3, [pc, #64]	; (8009458 <BSP_LCD_FillRect+0xa8>)
 8009418:	681c      	ldr	r4, [r3, #0]
 800941a:	68fd      	ldr	r5, [r7, #12]
 800941c:	887e      	ldrh	r6, [r7, #2]
 800941e:	f8b7 8000 	ldrh.w	r8, [r7]
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8009422:	f7ff fc93 	bl	8008d4c <BSP_LCD_GetXSize>
 8009426:	4602      	mov	r2, r0
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009428:	887b      	ldrh	r3, [r7, #2]
 800942a:	1ad1      	subs	r1, r2, r3
 800942c:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <BSP_LCD_FillRect+0xa8>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	480a      	ldr	r0, [pc, #40]	; (800945c <BSP_LCD_FillRect+0xac>)
 8009432:	4613      	mov	r3, r2
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4403      	add	r3, r0
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	9100      	str	r1, [sp, #0]
 8009442:	4643      	mov	r3, r8
 8009444:	4632      	mov	r2, r6
 8009446:	4629      	mov	r1, r5
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f98d 	bl	8009768 <FillBuffer>
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009458:	20003eb0 	.word	0x20003eb0
 800945c:	20003eb4 	.word	0x20003eb4
 8009460:	2000418c 	.word	0x2000418c

08009464 <BSP_LCD_FillCircle>:
 * @brief  Displays a full circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	80fb      	strh	r3, [r7, #6]
 800946e:	460b      	mov	r3, r1
 8009470:	80bb      	strh	r3, [r7, #4]
 8009472:	4613      	mov	r3, r2
 8009474:	807b      	strh	r3, [r7, #2]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8009476:	887b      	ldrh	r3, [r7, #2]
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	f1c3 0303 	rsb	r3, r3, #3
 800947e:	617b      	str	r3, [r7, #20]

	curx = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]
	cury = Radius;
 8009484:	887b      	ldrh	r3, [r7, #2]
 8009486:	60fb      	str	r3, [r7, #12]

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009488:	4b44      	ldr	r3, [pc, #272]	; (800959c <BSP_LCD_FillCircle+0x138>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4944      	ldr	r1, [pc, #272]	; (80095a0 <BSP_LCD_FillCircle+0x13c>)
 800948e:	4613      	mov	r3, r2
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fce4 	bl	8008e68 <BSP_LCD_SetTextColor>

	while (curx <= cury) {
 80094a0:	e061      	b.n	8009566 <BSP_LCD_FillCircle+0x102>
		if (cury > 0) {
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d021      	beq.n	80094ec <BSP_LCD_FillCircle+0x88>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	88fa      	ldrh	r2, [r7, #6]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	b298      	uxth	r0, r3
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	88bb      	ldrh	r3, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	b299      	uxth	r1, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	f7ff fe43 	bl	8009150 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	b298      	uxth	r0, r3
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	88ba      	ldrh	r2, [r7, #4]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	b299      	uxth	r1, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	f7ff fe32 	bl	8009150 <BSP_LCD_DrawHLine>
		}

		if (curx > 0) {
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d021      	beq.n	8009536 <BSP_LCD_FillCircle+0xd2>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	88fa      	ldrh	r2, [r7, #6]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	b298      	uxth	r0, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	88ba      	ldrh	r2, [r7, #4]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	b299      	uxth	r1, r3
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	b29b      	uxth	r3, r3
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	b29b      	uxth	r3, r3
 800950e:	461a      	mov	r2, r3
 8009510:	f7ff fe1e 	bl	8009150 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	b29b      	uxth	r3, r3
 8009518:	88fa      	ldrh	r2, [r7, #6]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	b298      	uxth	r0, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	b29a      	uxth	r2, r3
 8009522:	88bb      	ldrh	r3, [r7, #4]
 8009524:	4413      	add	r3, r2
 8009526:	b299      	uxth	r1, r3
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	b29b      	uxth	r3, r3
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	b29b      	uxth	r3, r3
 8009530:	461a      	mov	r2, r3
 8009532:	f7ff fe0d 	bl	8009150 <BSP_LCD_DrawHLine>
		}
		if (d < 0) {
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	da06      	bge.n	800954a <BSP_LCD_FillCircle+0xe6>
			d += (curx << 2) + 6;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	009a      	lsls	r2, r3, #2
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	3306      	adds	r3, #6
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e00a      	b.n	8009560 <BSP_LCD_FillCircle+0xfc>
		} else {
			d += ((curx - cury) << 2) + 10;
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	009a      	lsls	r2, r3, #2
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	4413      	add	r3, r2
 8009556:	330a      	adds	r3, #10
 8009558:	617b      	str	r3, [r7, #20]
			cury--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3b01      	subs	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	429a      	cmp	r2, r3
 800956c:	d999      	bls.n	80094a2 <BSP_LCD_FillCircle+0x3e>
	}

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800956e:	4b0b      	ldr	r3, [pc, #44]	; (800959c <BSP_LCD_FillCircle+0x138>)
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	490b      	ldr	r1, [pc, #44]	; (80095a0 <BSP_LCD_FillCircle+0x13c>)
 8009574:	4613      	mov	r3, r2
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff fc71 	bl	8008e68 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8009586:	887a      	ldrh	r2, [r7, #2]
 8009588:	88b9      	ldrh	r1, [r7, #4]
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fe1f 	bl	80091d0 <BSP_LCD_DrawCircle>
}
 8009592:	bf00      	nop
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20003eb0 	.word	0x20003eb0
 80095a0:	20003eb4 	.word	0x20003eb4

080095a4 <BSP_LCD_DrawPixel>:
 * @brief  Writes Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 80095a4:	b5b0      	push	{r4, r5, r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	603a      	str	r2, [r7, #0]
 80095ae:	80fb      	strh	r3, [r7, #6]
 80095b0:	460b      	mov	r3, r1
 80095b2:	80bb      	strh	r3, [r7, #4]
	/* Write data value to all SDRAM memory */
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 80095b4:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <BSP_LCD_DrawPixel+0x48>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <BSP_LCD_DrawPixel+0x4c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2134      	movs	r1, #52	; 0x34
 80095be:	fb01 f303 	mul.w	r3, r1, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	335c      	adds	r3, #92	; 0x5c
 80095c6:	681c      	ldr	r4, [r3, #0]
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80095c8:	88bd      	ldrh	r5, [r7, #4]
 80095ca:	f7ff fbbf 	bl	8008d4c <BSP_LCD_GetXSize>
 80095ce:	4603      	mov	r3, r0
 80095d0:	fb03 f205 	mul.w	r2, r3, r5
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4423      	add	r3, r4
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 80095dc:	461a      	mov	r2, r3
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	6013      	str	r3, [r2, #0]
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bdb0      	pop	{r4, r5, r7, pc}
 80095ea:	bf00      	nop
 80095ec:	2000418c 	.word	0x2000418c
 80095f0:	20003eb0 	.word	0x20003eb0

080095f4 <DrawChar>:
 * @brief  Draws a character on LCD.
 * @param  Xpos: the Line where to display the character shape
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c) {
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	603a      	str	r2, [r7, #0]
 80095fe:	80fb      	strh	r3, [r7, #6]
 8009600:	460b      	mov	r3, r1
 8009602:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	2300      	movs	r3, #0
 800960a:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]

	height = DrawProp[ActiveLayer].pFont->Height;
 8009610:	4b53      	ldr	r3, [pc, #332]	; (8009760 <DrawChar+0x16c>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4953      	ldr	r1, [pc, #332]	; (8009764 <DrawChar+0x170>)
 8009616:	4613      	mov	r3, r2
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	440b      	add	r3, r1
 8009620:	3308      	adds	r3, #8
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	88db      	ldrh	r3, [r3, #6]
 8009626:	827b      	strh	r3, [r7, #18]
	width = DrawProp[ActiveLayer].pFont->Width;
 8009628:	4b4d      	ldr	r3, [pc, #308]	; (8009760 <DrawChar+0x16c>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	494d      	ldr	r1, [pc, #308]	; (8009764 <DrawChar+0x170>)
 800962e:	4613      	mov	r3, r2
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	3308      	adds	r3, #8
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	889b      	ldrh	r3, [r3, #4]
 800963e:	823b      	strh	r3, [r7, #16]

	offset = 8 * ((width + 7) / 8) - width;
 8009640:	8a3b      	ldrh	r3, [r7, #16]
 8009642:	3307      	adds	r3, #7
 8009644:	2b00      	cmp	r3, #0
 8009646:	da00      	bge.n	800964a <DrawChar+0x56>
 8009648:	3307      	adds	r3, #7
 800964a:	10db      	asrs	r3, r3, #3
 800964c:	b2db      	uxtb	r3, r3
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	b2da      	uxtb	r2, r3
 8009652:	8a3b      	ldrh	r3, [r7, #16]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < height; i++) {
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
 800965e:	e076      	b.n	800974e <DrawChar+0x15a>
		pchar = ((uint8_t *) c + (width + 7) / 8 * i);
 8009660:	8a3b      	ldrh	r3, [r7, #16]
 8009662:	3307      	adds	r3, #7
 8009664:	2b00      	cmp	r3, #0
 8009666:	da00      	bge.n	800966a <DrawChar+0x76>
 8009668:	3307      	adds	r3, #7
 800966a:	10db      	asrs	r3, r3, #3
 800966c:	461a      	mov	r2, r3
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	fb03 f302 	mul.w	r3, r3, r2
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	4413      	add	r3, r2
 8009678:	60bb      	str	r3, [r7, #8]

		switch (((width + 7) / 8)) {
 800967a:	8a3b      	ldrh	r3, [r7, #16]
 800967c:	3307      	adds	r3, #7
 800967e:	2b00      	cmp	r3, #0
 8009680:	da00      	bge.n	8009684 <DrawChar+0x90>
 8009682:	3307      	adds	r3, #7
 8009684:	10db      	asrs	r3, r3, #3
 8009686:	2b01      	cmp	r3, #1
 8009688:	d002      	beq.n	8009690 <DrawChar+0x9c>
 800968a:	2b02      	cmp	r3, #2
 800968c:	d004      	beq.n	8009698 <DrawChar+0xa4>
 800968e:	e00c      	b.n	80096aa <DrawChar+0xb6>
		case 1:
			line = pchar[0];
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	617b      	str	r3, [r7, #20]
			break;
 8009696:	e016      	b.n	80096c6 <DrawChar+0xd2>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	021b      	lsls	r3, r3, #8
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	3201      	adds	r2, #1
 80096a2:	7812      	ldrb	r2, [r2, #0]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]
			break;
 80096a8:	e00d      	b.n	80096c6 <DrawChar+0xd2>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	041a      	lsls	r2, r3, #16
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3301      	adds	r3, #1
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	4313      	orrs	r3, r2
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	3202      	adds	r2, #2
 80096be:	7812      	ldrb	r2, [r2, #0]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
			break;
 80096c4:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 80096c6:	2300      	movs	r3, #0
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e036      	b.n	800973a <DrawChar+0x146>
			if (line & (1 << (width - j + offset - 1))) {
 80096cc:	8a3a      	ldrh	r2, [r7, #16]
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	4413      	add	r3, r2
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2201      	movs	r2, #1
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d012      	beq.n	800970e <DrawChar+0x11a>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	4413      	add	r3, r2
 80096f0:	b298      	uxth	r0, r3
 80096f2:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <DrawChar+0x16c>)
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	491b      	ldr	r1, [pc, #108]	; (8009764 <DrawChar+0x170>)
 80096f8:	4613      	mov	r3, r2
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	88bb      	ldrh	r3, [r7, #4]
 8009706:	4619      	mov	r1, r3
 8009708:	f7ff ff4c 	bl	80095a4 <BSP_LCD_DrawPixel>
 800970c:	e012      	b.n	8009734 <DrawChar+0x140>
						DrawProp[ActiveLayer].TextColor);
			} else {
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	b29a      	uxth	r2, r3
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	4413      	add	r3, r2
 8009716:	b298      	uxth	r0, r3
 8009718:	4b11      	ldr	r3, [pc, #68]	; (8009760 <DrawChar+0x16c>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	4911      	ldr	r1, [pc, #68]	; (8009764 <DrawChar+0x170>)
 800971e:	4613      	mov	r3, r2
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	3304      	adds	r3, #4
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	88bb      	ldrh	r3, [r7, #4]
 800972e:	4619      	mov	r1, r3
 8009730:	f7ff ff38 	bl	80095a4 <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	3301      	adds	r3, #1
 8009738:	61bb      	str	r3, [r7, #24]
 800973a:	8a3a      	ldrh	r2, [r7, #16]
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	429a      	cmp	r2, r3
 8009740:	d8c4      	bhi.n	80096cc <DrawChar+0xd8>
						DrawProp[ActiveLayer].BackColor);
			}
		}
		Ypos++;
 8009742:	88bb      	ldrh	r3, [r7, #4]
 8009744:	3301      	adds	r3, #1
 8009746:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < height; i++) {
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	3301      	adds	r3, #1
 800974c:	61fb      	str	r3, [r7, #28]
 800974e:	8a7a      	ldrh	r2, [r7, #18]
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	429a      	cmp	r2, r3
 8009754:	d884      	bhi.n	8009660 <DrawChar+0x6c>
	}
}
 8009756:	bf00      	nop
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20003eb0 	.word	0x20003eb0
 8009764:	20003eb4 	.word	0x20003eb4

08009768 <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]

	/* Register to memory mode with ARGB8888 as color Mode */

	Dma2dHandler->Init.Mode = DMA2D_R2M;
 8009776:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <FillBuffer+0x78>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800977e:	605a      	str	r2, [r3, #4]
	Dma2dHandler->Init.ColorMode = DMA2D_ARGB8888;
 8009780:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <FillBuffer+0x78>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2200      	movs	r2, #0
 8009786:	609a      	str	r2, [r3, #8]
	Dma2dHandler->Init.OutputOffset = OffLine;
 8009788:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <FillBuffer+0x78>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	60da      	str	r2, [r3, #12]

	//Dma2dHandler->Instance = DMA2D;

	/* DMA2D Initialization */

	if (HAL_DMA2D_Init(Dma2dHandler) == HAL_OK) {
 8009790:	4b13      	ldr	r3, [pc, #76]	; (80097e0 <FillBuffer+0x78>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4618      	mov	r0, r3
 8009796:	f7f7 fc11 	bl	8000fbc <HAL_DMA2D_Init>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11a      	bne.n	80097d6 <FillBuffer+0x6e>
		if (HAL_DMA2D_ConfigLayer(Dma2dHandler, LayerIndex) == HAL_OK) {
 80097a0:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <FillBuffer+0x78>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68f9      	ldr	r1, [r7, #12]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7f7 fd66 	bl	8001278 <HAL_DMA2D_ConfigLayer>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d111      	bne.n	80097d6 <FillBuffer+0x6e>
			if (HAL_DMA2D_Start(Dma2dHandler, ColorIndex, (uint32_t) pDst,
 80097b2:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <FillBuffer+0x78>)
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69f9      	ldr	r1, [r7, #28]
 80097c0:	f7f7 fc45 	bl	800104e <HAL_DMA2D_Start>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <FillBuffer+0x6e>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(Dma2dHandler, 10);
 80097ca:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <FillBuffer+0x78>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	210a      	movs	r1, #10
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7f7 fc67 	bl	80010a4 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20003eac 	.word	0x20003eac

080097e4 <RAMSetup>:

/**
 * @brief  Initializes the SDRAM device.
 */

void RAMSetup(SDRAM_HandleTypeDef* arg_wsk) {
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	SdramHandle = arg_wsk;
 80097ec:	4a04      	ldr	r2, [pc, #16]	; (8009800 <RAMSetup+0x1c>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6013      	str	r3, [r2, #0]
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20003ecc 	.word	0x20003ecc

08009804 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8009810:	4b2f      	ldr	r3, [pc, #188]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009816:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009818:	2208      	movs	r2, #8
 800981a:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 800981c:	4b2c      	ldr	r3, [pc, #176]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 800981e:	2201      	movs	r2, #1
 8009820:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009822:	4b2b      	ldr	r3, [pc, #172]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009824:	2200      	movs	r2, #0
 8009826:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009828:	4b2a      	ldr	r3, [pc, #168]	; (80098d4 <BSP_SDRAM_Initialization_sequence+0xd0>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009830:	4927      	ldr	r1, [pc, #156]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009832:	4618      	mov	r0, r3
 8009834:	f7fa fab6 	bl	8003da4 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8009838:	2001      	movs	r0, #1
 800983a:	f7f7 fabd 	bl	8000db8 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800983e:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009840:	2202      	movs	r2, #2
 8009842:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009844:	4b22      	ldr	r3, [pc, #136]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009846:	2208      	movs	r2, #8
 8009848:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 800984a:	4b21      	ldr	r3, [pc, #132]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 800984c:	2201      	movs	r2, #1
 800984e:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009850:	4b1f      	ldr	r3, [pc, #124]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009852:	2200      	movs	r2, #0
 8009854:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009856:	4b1f      	ldr	r3, [pc, #124]	; (80098d4 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800985e:	491c      	ldr	r1, [pc, #112]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009860:	4618      	mov	r0, r3
 8009862:	f7fa fa9f 	bl	8003da4 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009866:	4b1a      	ldr	r3, [pc, #104]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009868:	2203      	movs	r2, #3
 800986a:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800986c:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 800986e:	2208      	movs	r2, #8
 8009870:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 8009872:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009874:	2204      	movs	r2, #4
 8009876:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009878:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 800987a:	2200      	movs	r2, #0
 800987c:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 800987e:	4b15      	ldr	r3, [pc, #84]	; (80098d4 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009886:	4912      	ldr	r1, [pc, #72]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009888:	4618      	mov	r0, r3
 800988a:	f7fa fa8b 	bl	8003da4 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 800988e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8009892:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009896:	2204      	movs	r2, #4
 8009898:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 800989c:	2208      	movs	r2, #8
 800989e:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 80098a0:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 80098aa:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <BSP_SDRAM_Initialization_sequence+0xd0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098b4:	4906      	ldr	r1, [pc, #24]	; (80098d0 <BSP_SDRAM_Initialization_sequence+0xcc>)
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fa fa74 	bl	8003da4 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(SdramHandle, RefreshCount);
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <BSP_SDRAM_Initialization_sequence+0xd0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fa fa99 	bl	8003dfa <HAL_SDRAM_ProgramRefreshRate>
}
 80098c8:	bf00      	nop
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20003ed0 	.word	0x20003ed0
 80098d4:	20003ecc 	.word	0x20003ecc

080098d8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	460a      	mov	r2, r1
 80098e2:	80fb      	strh	r3, [r7, #6]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80098ec:	4a13      	ldr	r2, [pc, #76]	; (800993c <BSP_TS_Init+0x64>)
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80098f2:	4a13      	ldr	r2, [pc, #76]	; (8009940 <BSP_TS_Init+0x68>)
 80098f4:	88bb      	ldrh	r3, [r7, #4]
 80098f6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80098f8:	4b12      	ldr	r3, [pc, #72]	; (8009944 <BSP_TS_Init+0x6c>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2082      	movs	r0, #130	; 0x82
 80098fe:	4798      	blx	r3
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	f640 0311 	movw	r3, #2065	; 0x811
 8009908:	429a      	cmp	r2, r3
 800990a:	d104      	bne.n	8009916 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800990c:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <BSP_TS_Init+0x70>)
 800990e:	4a0d      	ldr	r2, [pc, #52]	; (8009944 <BSP_TS_Init+0x6c>)
 8009910:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d109      	bne.n	8009930 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800991c:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <BSP_TS_Init+0x70>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2082      	movs	r0, #130	; 0x82
 8009924:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8009926:	4b08      	ldr	r3, [pc, #32]	; (8009948 <BSP_TS_Init+0x70>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2082      	movs	r0, #130	; 0x82
 800992e:	4798      	blx	r3
  }

  return ret;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20003ee4 	.word	0x20003ee4
 8009940:	20003ee6 	.word	0x20003ee6
 8009944:	20000070 	.word	0x20000070
 8009948:	20003ee0 	.word	0x20003ee0

0800994c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8009954:	4b4f      	ldr	r3, [pc, #316]	; (8009a94 <BSP_TS_GetState+0x148>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2082      	movs	r0, #130	; 0x82
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 808d 	beq.w	8009a8a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8009970:	4b48      	ldr	r3, [pc, #288]	; (8009a94 <BSP_TS_GetState+0x148>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	f107 020c 	add.w	r2, r7, #12
 800997a:	f107 010e 	add.w	r1, r7, #14
 800997e:	2082      	movs	r0, #130	; 0x82
 8009980:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8009982:	89bb      	ldrh	r3, [r7, #12]
 8009984:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009988:	b29b      	uxth	r3, r3
 800998a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800998c:	89bb      	ldrh	r3, [r7, #12]
 800998e:	4a42      	ldr	r2, [pc, #264]	; (8009a98 <BSP_TS_GetState+0x14c>)
 8009990:	fba2 2303 	umull	r2, r3, r2, r3
 8009994:	08db      	lsrs	r3, r3, #3
 8009996:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8009998:	8abb      	ldrh	r3, [r7, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	82bb      	strh	r3, [r7, #20]
 80099a2:	e008      	b.n	80099b6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80099a4:	4b3d      	ldr	r3, [pc, #244]	; (8009a9c <BSP_TS_GetState+0x150>)
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	8aba      	ldrh	r2, [r7, #20]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d903      	bls.n	80099b6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80099ae:	4b3b      	ldr	r3, [pc, #236]	; (8009a9c <BSP_TS_GetState+0x150>)
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80099b6:	8abb      	ldrh	r3, [r7, #20]
 80099b8:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80099ba:	89fb      	ldrh	r3, [r7, #14]
 80099bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d806      	bhi.n	80099d2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80099c4:	89fb      	ldrh	r3, [r7, #14]
 80099c6:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80099ca:	330e      	adds	r3, #14
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	81fb      	strh	r3, [r7, #14]
 80099d0:	e005      	b.n	80099de <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80099d2:	89fb      	ldrh	r3, [r7, #14]
 80099d4:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80099d8:	3308      	adds	r3, #8
 80099da:	b29b      	uxth	r3, r3
 80099dc:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80099de:	89fb      	ldrh	r3, [r7, #14]
 80099e0:	4a2f      	ldr	r2, [pc, #188]	; (8009aa0 <BSP_TS_GetState+0x154>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	08db      	lsrs	r3, r3, #3
 80099e8:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80099ea:	8afb      	ldrh	r3, [r7, #22]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d102      	bne.n	80099f6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	82fb      	strh	r3, [r7, #22]
 80099f4:	e008      	b.n	8009a08 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80099f6:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <BSP_TS_GetState+0x158>)
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	8afa      	ldrh	r2, [r7, #22]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d903      	bls.n	8009a08 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <BSP_TS_GetState+0x158>)
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8009a08:	8afb      	ldrh	r3, [r7, #22]
 8009a0a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8009a0c:	89fb      	ldrh	r3, [r7, #14]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4b25      	ldr	r3, [pc, #148]	; (8009aa8 <BSP_TS_GetState+0x15c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d906      	bls.n	8009a26 <BSP_TS_GetState+0xda>
 8009a18:	89fa      	ldrh	r2, [r7, #14]
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <BSP_TS_GetState+0x15c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	e005      	b.n	8009a32 <BSP_TS_GetState+0xe6>
 8009a26:	4b20      	ldr	r3, [pc, #128]	; (8009aa8 <BSP_TS_GetState+0x15c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	89fb      	ldrh	r3, [r7, #14]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8009a34:	89bb      	ldrh	r3, [r7, #12]
 8009a36:	461a      	mov	r2, r3
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <BSP_TS_GetState+0x160>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d906      	bls.n	8009a4e <BSP_TS_GetState+0x102>
 8009a40:	89ba      	ldrh	r2, [r7, #12]
 8009a42:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <BSP_TS_GetState+0x160>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	e005      	b.n	8009a5a <BSP_TS_GetState+0x10e>
 8009a4e:	4b17      	ldr	r3, [pc, #92]	; (8009aac <BSP_TS_GetState+0x160>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	89bb      	ldrh	r3, [r7, #12]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8009a5c:	8a7a      	ldrh	r2, [r7, #18]
 8009a5e:	8a3b      	ldrh	r3, [r7, #16]
 8009a60:	4413      	add	r3, r2
 8009a62:	2b05      	cmp	r3, #5
 8009a64:	dd07      	ble.n	8009a76 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8009a66:	89fb      	ldrh	r3, [r7, #14]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <BSP_TS_GetState+0x15c>)
 8009a6c:	601a      	str	r2, [r3, #0]
      _y = y; 
 8009a6e:	89bb      	ldrh	r3, [r7, #12]
 8009a70:	461a      	mov	r2, r3
 8009a72:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <BSP_TS_GetState+0x160>)
 8009a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <BSP_TS_GetState+0x15c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8009a80:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <BSP_TS_GetState+0x160>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	809a      	strh	r2, [r3, #4]
  }
}
 8009a8a:	bf00      	nop
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20003ee0 	.word	0x20003ee0
 8009a98:	ba2e8ba3 	.word	0xba2e8ba3
 8009a9c:	20003ee6 	.word	0x20003ee6
 8009aa0:	88888889 	.word	0x88888889
 8009aa4:	20003ee4 	.word	0x20003ee4
 8009aa8:	20003ee8 	.word	0x20003ee8
 8009aac:	20003eec 	.word	0x20003eec

08009ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	607b      	str	r3, [r7, #4]
 8009aba:	4a12      	ldr	r2, [pc, #72]	; (8009b04 <HAL_MspInit+0x54>)
 8009abc:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <HAL_MspInit+0x54>)
 8009abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <HAL_MspInit+0x54>)
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	4a0b      	ldr	r2, [pc, #44]	; (8009b04 <HAL_MspInit+0x54>)
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <HAL_MspInit+0x54>)
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <HAL_MspInit+0x54>)
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009aee:	2200      	movs	r2, #0
 8009af0:	210f      	movs	r1, #15
 8009af2:	f06f 0001 	mvn.w	r0, #1
 8009af6:	f7f7 fa37 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	40023800 	.word	0x40023800

08009b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	; 0x30
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8009b18:	2200      	movs	r2, #0
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	2036      	movs	r0, #54	; 0x36
 8009b1e:	f7f7 fa23 	bl	8000f68 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8009b22:	2036      	movs	r0, #54	; 0x36
 8009b24:	f7f7 fa3c 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	4a1f      	ldr	r2, [pc, #124]	; (8009bac <HAL_InitTick+0xa4>)
 8009b2e:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <HAL_InitTick+0xa4>)
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	f043 0310 	orr.w	r3, r3, #16
 8009b36:	6413      	str	r3, [r2, #64]	; 0x40
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <HAL_InitTick+0xa4>)
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	f003 0310 	and.w	r3, r3, #16
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009b44:	f107 0210 	add.w	r2, r7, #16
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f9 ff1e 	bl	8003990 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009b54:	f7f9 fef4 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <HAL_InitTick+0xa8>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	0c9b      	lsrs	r3, r3, #18
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009b6c:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b6e:	4a12      	ldr	r2, [pc, #72]	; (8009bb8 <HAL_InitTick+0xb0>)
 8009b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009b72:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009b7a:	4a0e      	ldr	r2, [pc, #56]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b86:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009b8c:	4809      	ldr	r0, [pc, #36]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b8e:	f7fa fe82 	bl	8004896 <HAL_TIM_Base_Init>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8009b98:	4806      	ldr	r0, [pc, #24]	; (8009bb4 <HAL_InitTick+0xac>)
 8009b9a:	f7fa feb1 	bl	8004900 <HAL_TIM_Base_Start_IT>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	e000      	b.n	8009ba4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3730      	adds	r7, #48	; 0x30
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40023800 	.word	0x40023800
 8009bb0:	431bde83 	.word	0x431bde83
 8009bb4:	20004194 	.word	0x20004194
 8009bb8:	40001000 	.word	0x40001000

08009bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009bc0:	bf00      	nop
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009bce:	e7fe      	b.n	8009bce <HardFault_Handler+0x4>

08009bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009bd4:	e7fe      	b.n	8009bd4 <MemManage_Handler+0x4>

08009bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009bda:	e7fe      	b.n	8009bda <BusFault_Handler+0x4>

08009bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009be0:	e7fe      	b.n	8009be0 <UsageFault_Handler+0x4>

08009be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009be2:	b480      	push	{r7}
 8009be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009be6:	bf00      	nop
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009bf4:	4802      	ldr	r0, [pc, #8]	; (8009c00 <TIM6_DAC_IRQHandler+0x10>)
 8009bf6:	f7fa fea7 	bl	8004948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009bfa:	bf00      	nop
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20004194 	.word	0x20004194

08009c04 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8009c0e:	88fb      	ldrh	r3, [r7, #6]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fa59 	bl	800a0c8 <stmpe811_GetInstance>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2bff      	cmp	r3, #255	; 0xff
 8009c1e:	d112      	bne.n	8009c46 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8009c20:	2000      	movs	r0, #0
 8009c22:	f000 fa51 	bl	800a0c8 <stmpe811_GetInstance>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d80a      	bhi.n	8009c46 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	b2d1      	uxtb	r1, r2
 8009c36:	4a06      	ldr	r2, [pc, #24]	; (8009c50 <stmpe811_Init+0x4c>)
 8009c38:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8009c3a:	f7ff f802 	bl	8008c42 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 f807 	bl	8009c54 <stmpe811_Reset>
    }
  }
}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20003ef0 	.word	0x20003ef0

08009c54 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8009c5e:	88fb      	ldrh	r3, [r7, #6]
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2202      	movs	r2, #2
 8009c64:	2103      	movs	r1, #3
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fff7 	bl	8008c5a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8009c6c:	200a      	movs	r0, #10
 8009c6e:	f7ff f831 	bl	8008cd4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2200      	movs	r2, #0
 8009c78:	2103      	movs	r1, #3
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe ffed 	bl	8008c5a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8009c80:	2002      	movs	r0, #2
 8009c82:	f7ff f827 	bl	8008cd4 <IOE_Delay>
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8009c8e:	b590      	push	{r4, r7, lr}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	4603      	mov	r3, r0
 8009c96:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8009c98:	f7fe ffd3 	bl	8008c42 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8009c9c:	88fb      	ldrh	r3, [r7, #6]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe ffec 	bl	8008c80 <IOE_Read>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe ffe3 	bl	8008c80 <IOE_Read>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8009cbe:	4323      	orrs	r3, r4
 8009cc0:	b21b      	sxth	r3, r3
 8009cc2:	b29b      	uxth	r3, r3
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd90      	pop	{r4, r7, pc}

08009ccc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8009cda:	88fb      	ldrh	r3, [r7, #6]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2109      	movs	r1, #9
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe ffcd 	bl	8008c80 <IOE_Read>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	f043 0301 	orr.w	r3, r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8009cf2:	88fb      	ldrh	r3, [r7, #6]
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	7bfa      	ldrb	r2, [r7, #15]
 8009cf8:	2109      	movs	r1, #9
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe ffad 	bl	8008c5a <IOE_Write>
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8009d16:	88fb      	ldrh	r3, [r7, #6]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2109      	movs	r1, #9
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe ffaf 	bl	8008c80 <IOE_Read>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
 8009d28:	f023 0301 	bic.w	r3, r3, #1
 8009d2c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8009d2e:	88fb      	ldrh	r3, [r7, #6]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	7bfa      	ldrb	r2, [r7, #15]
 8009d34:	2109      	movs	r1, #9
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe ff8f 	bl	8008c5a <IOE_Write>
    
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	460a      	mov	r2, r1
 8009d4e:	80fb      	strh	r3, [r7, #6]
 8009d50:	4613      	mov	r3, r2
 8009d52:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	210a      	movs	r1, #10
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe ff8e 	bl	8008c80 <IOE_Read>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8009d68:	7bfa      	ldrb	r2, [r7, #15]
 8009d6a:	797b      	ldrb	r3, [r7, #5]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	7bfa      	ldrb	r2, [r7, #15]
 8009d76:	210a      	movs	r1, #10
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe ff6e 	bl	8008c5a <IOE_Write>
}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	460a      	mov	r2, r1
 8009d90:	80fb      	strh	r3, [r7, #6]
 8009d92:	4613      	mov	r3, r2
 8009d94:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	210a      	movs	r1, #10
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe ff6d 	bl	8008c80 <IOE_Read>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8009daa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009dae:	43db      	mvns	r3, r3
 8009db0:	b25a      	sxtb	r2, r3
 8009db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009db6:	4013      	ands	r3, r2
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8009dbc:	88fb      	ldrh	r3, [r7, #6]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	7bfa      	ldrb	r2, [r7, #15]
 8009dc2:	210a      	movs	r1, #10
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fe ff48 	bl	8008c5a <IOE_Write>
}
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	4603      	mov	r3, r0
 8009dda:	460a      	mov	r2, r1
 8009ddc:	80fb      	strh	r3, [r7, #6]
 8009dde:	4613      	mov	r3, r2
 8009de0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	210b      	movs	r1, #11
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe ff49 	bl	8008c80 <IOE_Read>
 8009dee:	4603      	mov	r3, r0
 8009df0:	461a      	mov	r2, r3
 8009df2:	797b      	ldrb	r3, [r7, #5]
 8009df4:	4013      	ands	r3, r2
 8009df6:	b2db      	uxtb	r3, r3
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	460a      	mov	r2, r1
 8009e0a:	80fb      	strh	r3, [r7, #6]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8009e10:	88fb      	ldrh	r3, [r7, #6]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	797a      	ldrb	r2, [r7, #5]
 8009e16:	210b      	movs	r1, #11
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe ff1e 	bl	8008c5a <IOE_Write>
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	6039      	str	r1, [r7, #0]
 8009e30:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2117      	movs	r1, #23
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe ff1f 	bl	8008c80 <IOE_Read>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	b25a      	sxtb	r2, r3
 8009e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e52:	4013      	ands	r3, r2
 8009e54:	b25b      	sxtb	r3, r3
 8009e56:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	7bfa      	ldrb	r2, [r7, #15]
 8009e5e:	2117      	movs	r1, #23
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fefa 	bl	8008c5a <IOE_Write>
}
 8009e66:	bf00      	nop
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	4603      	mov	r3, r0
 8009e76:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2104      	movs	r1, #4
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fefe 	bl	8008c80 <IOE_Read>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	f023 0304 	bic.w	r3, r3, #4
 8009e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8009e90:	88fb      	ldrh	r3, [r7, #6]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	7bfa      	ldrb	r2, [r7, #15]
 8009e96:	2104      	movs	r1, #4
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fede 	bl	8008c5a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8009e9e:	88fb      	ldrh	r3, [r7, #6]
 8009ea0:	21f0      	movs	r1, #240	; 0xf0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7ff ffbf 	bl	8009e26 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	f023 0303 	bic.w	r3, r3, #3
 8009eae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8009eb0:	88fb      	ldrh	r3, [r7, #6]
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	2104      	movs	r1, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fece 	bl	8008c5a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2249      	movs	r2, #73	; 0x49
 8009ec4:	2120      	movs	r1, #32
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fec7 	bl	8008c5a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8009ecc:	2002      	movs	r0, #2
 8009ece:	f7fe ff01 	bl	8008cd4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	2121      	movs	r1, #33	; 0x21
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe febd 	bl	8008c5a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8009ee0:	88fb      	ldrh	r3, [r7, #6]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	229a      	movs	r2, #154	; 0x9a
 8009ee6:	2141      	movs	r1, #65	; 0x41
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe feb6 	bl	8008c5a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8009eee:	88fb      	ldrh	r3, [r7, #6]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	214a      	movs	r1, #74	; 0x4a
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe feaf 	bl	8008c5a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009efc:	88fb      	ldrh	r3, [r7, #6]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2201      	movs	r2, #1
 8009f02:	214b      	movs	r1, #75	; 0x4b
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fea8 	bl	8008c5a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009f0a:	88fb      	ldrh	r3, [r7, #6]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2200      	movs	r2, #0
 8009f10:	214b      	movs	r1, #75	; 0x4b
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fea1 	bl	8008c5a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8009f18:	88fb      	ldrh	r3, [r7, #6]
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	2156      	movs	r1, #86	; 0x56
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe fe9a 	bl	8008c5a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8009f26:	88fb      	ldrh	r3, [r7, #6]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	2158      	movs	r1, #88	; 0x58
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fe93 	bl	8008c5a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2201      	movs	r2, #1
 8009f3a:	2140      	movs	r1, #64	; 0x40
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe fe8c 	bl	8008c5a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	22ff      	movs	r2, #255	; 0xff
 8009f48:	210b      	movs	r1, #11
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fe85 	bl	8008c5a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8009f50:	2002      	movs	r0, #2
 8009f52:	f7fe febf 	bl	8008cd4 <IOE_Delay>
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	4603      	mov	r3, r0
 8009f66:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2140      	movs	r1, #64	; 0x40
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fe84 	bl	8008c80 <IOE_Read>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7e:	2b80      	cmp	r3, #128	; 0x80
 8009f80:	bf0c      	ite	eq
 8009f82:	2301      	moveq	r3, #1
 8009f84:	2300      	movne	r3, #0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8009f90:	88fb      	ldrh	r3, [r7, #6]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	214c      	movs	r1, #76	; 0x4c
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fe72 	bl	8008c80 <IOE_Read>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	73fb      	strb	r3, [r7, #15]
 8009fa6:	e00d      	b.n	8009fc4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2201      	movs	r2, #1
 8009fae:	214b      	movs	r1, #75	; 0x4b
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe fe52 	bl	8008c5a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2200      	movs	r2, #0
 8009fbc:	214b      	movs	r1, #75	; 0x4b
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fe4b 	bl	8008c5a <IOE_Write>
  }
  
  return ret;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8009fdc:	89fb      	ldrh	r3, [r7, #14]
 8009fde:	b2d8      	uxtb	r0, r3
 8009fe0:	f107 0210 	add.w	r2, r7, #16
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	21d7      	movs	r1, #215	; 0xd7
 8009fe8:	f7fe fe5d 	bl	8008ca6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8009fec:	7c3b      	ldrb	r3, [r7, #16]
 8009fee:	061a      	lsls	r2, r3, #24
 8009ff0:	7c7b      	ldrb	r3, [r7, #17]
 8009ff2:	041b      	lsls	r3, r3, #16
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	7cbb      	ldrb	r3, [r7, #18]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	7cfa      	ldrb	r2, [r7, #19]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	0d1b      	lsrs	r3, r3, #20
 800a006:	b29a      	uxth	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	0a1b      	lsrs	r3, r3, #8
 800a010:	b29b      	uxth	r3, r3
 800a012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a016:	b29a      	uxth	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a01c:	89fb      	ldrh	r3, [r7, #14]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2201      	movs	r2, #1
 800a022:	214b      	movs	r1, #75	; 0x4b
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fe18 	bl	8008c5a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a02a:	89fb      	ldrh	r3, [r7, #14]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2200      	movs	r2, #0
 800a030:	214b      	movs	r1, #75	; 0x4b
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fe11 	bl	8008c5a <IOE_Write>
}
 800a038:	bf00      	nop
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800a04a:	f7fe fe00 	bl	8008c4e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a04e:	88fb      	ldrh	r3, [r7, #6]
 800a050:	211f      	movs	r1, #31
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff fe76 	bl	8009d44 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7ff fe36 	bl	8009ccc <stmpe811_EnableGlobalIT>
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800a072:	88fb      	ldrh	r3, [r7, #6]
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff fe47 	bl	8009d08 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	211f      	movs	r1, #31
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff fe81 	bl	8009d86 <stmpe811_DisableITSource>
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	211f      	movs	r1, #31
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fe99 	bl	8009dd2 <stmpe811_ReadGITStatus>
 800a0a0:	4603      	mov	r3, r0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	211f      	movs	r1, #31
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff fea1 	bl	8009e00 <stmpe811_ClearGlobalIT>
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]
 800a0da:	e00b      	b.n	800a0f4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <stmpe811_GetInstance+0x40>)
 800a0e0:	5cd3      	ldrb	r3, [r2, r3]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	88fa      	ldrh	r2, [r7, #6]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d101      	bne.n	800a0ee <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	e006      	b.n	800a0fc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d9f0      	bls.n	800a0dc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800a0fa:	23ff      	movs	r3, #255	; 0xff
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	20003ef0 	.word	0x20003ef0

0800a10c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a110:	4a16      	ldr	r2, [pc, #88]	; (800a16c <SystemInit+0x60>)
 800a112:	4b16      	ldr	r3, [pc, #88]	; (800a16c <SystemInit+0x60>)
 800a114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a11c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a120:	4a13      	ldr	r2, [pc, #76]	; (800a170 <SystemInit+0x64>)
 800a122:	4b13      	ldr	r3, [pc, #76]	; (800a170 <SystemInit+0x64>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f043 0301 	orr.w	r3, r3, #1
 800a12a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a12c:	4b10      	ldr	r3, [pc, #64]	; (800a170 <SystemInit+0x64>)
 800a12e:	2200      	movs	r2, #0
 800a130:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a132:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <SystemInit+0x64>)
 800a134:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <SystemInit+0x64>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a13c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a140:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a142:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <SystemInit+0x64>)
 800a144:	4a0b      	ldr	r2, [pc, #44]	; (800a174 <SystemInit+0x68>)
 800a146:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a148:	4a09      	ldr	r2, [pc, #36]	; (800a170 <SystemInit+0x64>)
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <SystemInit+0x64>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a152:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <SystemInit+0x64>)
 800a156:	2200      	movs	r2, #0
 800a158:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a15a:	4b04      	ldr	r3, [pc, #16]	; (800a16c <SystemInit+0x60>)
 800a15c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a160:	609a      	str	r2, [r3, #8]
#endif
}
 800a162:	bf00      	nop
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	e000ed00 	.word	0xe000ed00
 800a170:	40023800 	.word	0x40023800
 800a174:	24003010 	.word	0x24003010

0800a178 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a17c:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a17e:	4a12      	ldr	r2, [pc, #72]	; (800a1c8 <MX_USART1_UART_Init+0x50>)
 800a180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a182:	4b10      	ldr	r3, [pc, #64]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a18a:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a192:	2200      	movs	r2, #0
 800a194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a196:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a198:	2200      	movs	r2, #0
 800a19a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a19c:	4b09      	ldr	r3, [pc, #36]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a19e:	220c      	movs	r2, #12
 800a1a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a1a2:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a1a8:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a1ae:	4805      	ldr	r0, [pc, #20]	; (800a1c4 <MX_USART1_UART_Init+0x4c>)
 800a1b0:	f7fa fdae 	bl	8004d10 <HAL_UART_Init>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a1ba:	f7fe f97d 	bl	80084b8 <Error_Handler>
  }

}
 800a1be:	bf00      	nop
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200041d4 	.word	0x200041d4
 800a1c8:	40011000 	.word	0x40011000

0800a1cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08a      	sub	sp, #40	; 0x28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	605a      	str	r2, [r3, #4]
 800a1de:	609a      	str	r2, [r3, #8]
 800a1e0:	60da      	str	r2, [r3, #12]
 800a1e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a19      	ldr	r2, [pc, #100]	; (800a250 <HAL_UART_MspInit+0x84>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d12c      	bne.n	800a248 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	613b      	str	r3, [r7, #16]
 800a1f2:	4a18      	ldr	r2, [pc, #96]	; (800a254 <HAL_UART_MspInit+0x88>)
 800a1f4:	4b17      	ldr	r3, [pc, #92]	; (800a254 <HAL_UART_MspInit+0x88>)
 800a1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f8:	f043 0310 	orr.w	r3, r3, #16
 800a1fc:	6453      	str	r3, [r2, #68]	; 0x44
 800a1fe:	4b15      	ldr	r3, [pc, #84]	; (800a254 <HAL_UART_MspInit+0x88>)
 800a200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	4a11      	ldr	r2, [pc, #68]	; (800a254 <HAL_UART_MspInit+0x88>)
 800a210:	4b10      	ldr	r3, [pc, #64]	; (800a254 <HAL_UART_MspInit+0x88>)
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	f043 0301 	orr.w	r3, r3, #1
 800a218:	6313      	str	r3, [r2, #48]	; 0x30
 800a21a:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <HAL_UART_MspInit+0x88>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a226:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a22a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a22c:	2302      	movs	r3, #2
 800a22e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a230:	2301      	movs	r3, #1
 800a232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a234:	2303      	movs	r3, #3
 800a236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a238:	2307      	movs	r3, #7
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	4619      	mov	r1, r3
 800a242:	4805      	ldr	r0, [pc, #20]	; (800a258 <HAL_UART_MspInit+0x8c>)
 800a244:	f7f7 f944 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a248:	bf00      	nop
 800a24a:	3728      	adds	r7, #40	; 0x28
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40011000 	.word	0x40011000
 800a254:	40023800 	.word	0x40023800
 800a258:	40020000 	.word	0x40020000

0800a25c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a25c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a294 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a262:	e003      	b.n	800a26c <LoopCopyDataInit>

0800a264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a264:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a26a:	3104      	adds	r1, #4

0800a26c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a26c:	480b      	ldr	r0, [pc, #44]	; (800a29c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a26e:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a274:	d3f6      	bcc.n	800a264 <CopyDataInit>
  ldr  r2, =_sbss
 800a276:	4a0b      	ldr	r2, [pc, #44]	; (800a2a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a278:	e002      	b.n	800a280 <LoopFillZerobss>

0800a27a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a27a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a27c:	f842 3b04 	str.w	r3, [r2], #4

0800a280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a284:	d3f9      	bcc.n	800a27a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a286:	f7ff ff41 	bl	800a10c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a28a:	f000 f811 	bl	800a2b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a28e:	f7fd fff7 	bl	8008280 <main>
  bx  lr    
 800a292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a294:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800a298:	0800cc10 	.word	0x0800cc10
  ldr  r0, =_sdata
 800a29c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a2a0:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 800a2a4:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 800a2a8:	20004214 	.word	0x20004214

0800a2ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a2ac:	e7fe      	b.n	800a2ac <ADC_IRQHandler>
	...

0800a2b0 <__libc_init_array>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4e0d      	ldr	r6, [pc, #52]	; (800a2e8 <__libc_init_array+0x38>)
 800a2b4:	4c0d      	ldr	r4, [pc, #52]	; (800a2ec <__libc_init_array+0x3c>)
 800a2b6:	1ba4      	subs	r4, r4, r6
 800a2b8:	10a4      	asrs	r4, r4, #2
 800a2ba:	2500      	movs	r5, #0
 800a2bc:	42a5      	cmp	r5, r4
 800a2be:	d109      	bne.n	800a2d4 <__libc_init_array+0x24>
 800a2c0:	4e0b      	ldr	r6, [pc, #44]	; (800a2f0 <__libc_init_array+0x40>)
 800a2c2:	4c0c      	ldr	r4, [pc, #48]	; (800a2f4 <__libc_init_array+0x44>)
 800a2c4:	f000 f886 	bl	800a3d4 <_init>
 800a2c8:	1ba4      	subs	r4, r4, r6
 800a2ca:	10a4      	asrs	r4, r4, #2
 800a2cc:	2500      	movs	r5, #0
 800a2ce:	42a5      	cmp	r5, r4
 800a2d0:	d105      	bne.n	800a2de <__libc_init_array+0x2e>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2d8:	4798      	blx	r3
 800a2da:	3501      	adds	r5, #1
 800a2dc:	e7ee      	b.n	800a2bc <__libc_init_array+0xc>
 800a2de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2e2:	4798      	blx	r3
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	e7f2      	b.n	800a2ce <__libc_init_array+0x1e>
 800a2e8:	0800cc08 	.word	0x0800cc08
 800a2ec:	0800cc08 	.word	0x0800cc08
 800a2f0:	0800cc08 	.word	0x0800cc08
 800a2f4:	0800cc0c 	.word	0x0800cc0c

0800a2f8 <__itoa>:
 800a2f8:	1e93      	subs	r3, r2, #2
 800a2fa:	2b22      	cmp	r3, #34	; 0x22
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	460c      	mov	r4, r1
 800a300:	d904      	bls.n	800a30c <__itoa+0x14>
 800a302:	2300      	movs	r3, #0
 800a304:	700b      	strb	r3, [r1, #0]
 800a306:	461c      	mov	r4, r3
 800a308:	4620      	mov	r0, r4
 800a30a:	bd10      	pop	{r4, pc}
 800a30c:	2a0a      	cmp	r2, #10
 800a30e:	d109      	bne.n	800a324 <__itoa+0x2c>
 800a310:	2800      	cmp	r0, #0
 800a312:	da07      	bge.n	800a324 <__itoa+0x2c>
 800a314:	232d      	movs	r3, #45	; 0x2d
 800a316:	700b      	strb	r3, [r1, #0]
 800a318:	4240      	negs	r0, r0
 800a31a:	2101      	movs	r1, #1
 800a31c:	4421      	add	r1, r4
 800a31e:	f000 f819 	bl	800a354 <__utoa>
 800a322:	e7f1      	b.n	800a308 <__itoa+0x10>
 800a324:	2100      	movs	r1, #0
 800a326:	e7f9      	b.n	800a31c <__itoa+0x24>

0800a328 <itoa>:
 800a328:	f7ff bfe6 	b.w	800a2f8 <__itoa>

0800a32c <memcpy>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	1e43      	subs	r3, r0, #1
 800a330:	440a      	add	r2, r1
 800a332:	4291      	cmp	r1, r2
 800a334:	d100      	bne.n	800a338 <memcpy+0xc>
 800a336:	bd10      	pop	{r4, pc}
 800a338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a340:	e7f7      	b.n	800a332 <memcpy+0x6>

0800a342 <memset>:
 800a342:	4402      	add	r2, r0
 800a344:	4603      	mov	r3, r0
 800a346:	4293      	cmp	r3, r2
 800a348:	d100      	bne.n	800a34c <memset+0xa>
 800a34a:	4770      	bx	lr
 800a34c:	f803 1b01 	strb.w	r1, [r3], #1
 800a350:	e7f9      	b.n	800a346 <memset+0x4>
	...

0800a354 <__utoa>:
 800a354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a356:	4c1e      	ldr	r4, [pc, #120]	; (800a3d0 <__utoa+0x7c>)
 800a358:	b08b      	sub	sp, #44	; 0x2c
 800a35a:	4603      	mov	r3, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	466d      	mov	r5, sp
 800a360:	f104 0e20 	add.w	lr, r4, #32
 800a364:	6820      	ldr	r0, [r4, #0]
 800a366:	6861      	ldr	r1, [r4, #4]
 800a368:	462e      	mov	r6, r5
 800a36a:	c603      	stmia	r6!, {r0, r1}
 800a36c:	3408      	adds	r4, #8
 800a36e:	4574      	cmp	r4, lr
 800a370:	4635      	mov	r5, r6
 800a372:	d1f7      	bne.n	800a364 <__utoa+0x10>
 800a374:	7921      	ldrb	r1, [r4, #4]
 800a376:	7131      	strb	r1, [r6, #4]
 800a378:	1e91      	subs	r1, r2, #2
 800a37a:	6820      	ldr	r0, [r4, #0]
 800a37c:	6030      	str	r0, [r6, #0]
 800a37e:	2922      	cmp	r1, #34	; 0x22
 800a380:	f04f 0100 	mov.w	r1, #0
 800a384:	d904      	bls.n	800a390 <__utoa+0x3c>
 800a386:	7039      	strb	r1, [r7, #0]
 800a388:	460f      	mov	r7, r1
 800a38a:	4638      	mov	r0, r7
 800a38c:	b00b      	add	sp, #44	; 0x2c
 800a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a390:	1e78      	subs	r0, r7, #1
 800a392:	4606      	mov	r6, r0
 800a394:	fbb3 f5f2 	udiv	r5, r3, r2
 800a398:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a39c:	fb02 3315 	mls	r3, r2, r5, r3
 800a3a0:	4473      	add	r3, lr
 800a3a2:	1c4c      	adds	r4, r1, #1
 800a3a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a3a8:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	b965      	cbnz	r5, 800a3ca <__utoa+0x76>
 800a3b0:	553d      	strb	r5, [r7, r4]
 800a3b2:	187a      	adds	r2, r7, r1
 800a3b4:	1acc      	subs	r4, r1, r3
 800a3b6:	42a3      	cmp	r3, r4
 800a3b8:	dae7      	bge.n	800a38a <__utoa+0x36>
 800a3ba:	7844      	ldrb	r4, [r0, #1]
 800a3bc:	7815      	ldrb	r5, [r2, #0]
 800a3be:	f800 5f01 	strb.w	r5, [r0, #1]!
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	f802 4901 	strb.w	r4, [r2], #-1
 800a3c8:	e7f4      	b.n	800a3b4 <__utoa+0x60>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	e7e2      	b.n	800a394 <__utoa+0x40>
 800a3ce:	bf00      	nop
 800a3d0:	0800cbd8 	.word	0x0800cbd8

0800a3d4 <_init>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	bf00      	nop
 800a3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3da:	bc08      	pop	{r3}
 800a3dc:	469e      	mov	lr, r3
 800a3de:	4770      	bx	lr

0800a3e0 <_fini>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	bf00      	nop
 800a3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e6:	bc08      	pop	{r3}
 800a3e8:	469e      	mov	lr, r3
 800a3ea:	4770      	bx	lr
