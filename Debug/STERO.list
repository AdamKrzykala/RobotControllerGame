
STERO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a884  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002818  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d24c  0800d24c  0001d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d254  0800d254  0001d254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d258  0800d258  0001d258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  0800d25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
  8 .bss          00004194  200000a4  200000a4  000200a4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004238  20004238  000200a4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002dfd9  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005886  00000000  00000000  0004e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000020d8  00000000  00000000  00053938  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e20  00000000  00000000  00055a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f762  00000000  00000000  00057830  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009720  00000000  00000000  00066f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000706b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008874  00000000  00000000  00070730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aa1c 	.word	0x0800aa1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0800aa1c 	.word	0x0800aa1c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b97a 	b.w	8000d70 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	468c      	mov	ip, r1
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	9e08      	ldr	r6, [sp, #32]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d151      	bne.n	8000b48 <__udivmoddi4+0xb4>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d96d      	bls.n	8000b86 <__udivmoddi4+0xf2>
 8000aaa:	fab2 fe82 	clz	lr, r2
 8000aae:	f1be 0f00 	cmp.w	lr, #0
 8000ab2:	d00b      	beq.n	8000acc <__udivmoddi4+0x38>
 8000ab4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ab8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000abc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ac0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ac4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ac8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000acc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ad0:	0c25      	lsrs	r5, r4, #16
 8000ad2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ad6:	fa1f f987 	uxth.w	r9, r7
 8000ada:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ade:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ae2:	fb08 f309 	mul.w	r3, r8, r9
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x6c>
 8000aea:	19ed      	adds	r5, r5, r7
 8000aec:	f108 32ff 	add.w	r2, r8, #4294967295
 8000af0:	f080 8123 	bcs.w	8000d3a <__udivmoddi4+0x2a6>
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	f240 8120 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	443d      	add	r5, r7
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b08:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b10:	fb00 f909 	mul.w	r9, r0, r9
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x98>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	f080 810a 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000b22:	45a1      	cmp	r9, r4
 8000b24:	f240 8107 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	443c      	add	r4, r7
 8000b2c:	eba4 0409 	sub.w	r4, r4, r9
 8000b30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d061      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b3a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6034      	str	r4, [r6, #0]
 8000b42:	6073      	str	r3, [r6, #4]
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d907      	bls.n	8000b5c <__udivmoddi4+0xc8>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d054      	beq.n	8000bfa <__udivmoddi4+0x166>
 8000b50:	2100      	movs	r1, #0
 8000b52:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b56:	4608      	mov	r0, r1
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	fab3 f183 	clz	r1, r3
 8000b60:	2900      	cmp	r1, #0
 8000b62:	f040 808e 	bne.w	8000c82 <__udivmoddi4+0x1ee>
 8000b66:	42ab      	cmp	r3, r5
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xdc>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80fa 	bhi.w	8000d64 <__udivmoddi4+0x2d0>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb65 0503 	sbc.w	r5, r5, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	46ac      	mov	ip, r5
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d03f      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b7e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	b912      	cbnz	r2, 8000b8e <__udivmoddi4+0xfa>
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b8e:	fab7 fe87 	clz	lr, r7
 8000b92:	f1be 0f00 	cmp.w	lr, #0
 8000b96:	d134      	bne.n	8000c02 <__udivmoddi4+0x16e>
 8000b98:	1beb      	subs	r3, r5, r7
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ba6:	0c25      	lsrs	r5, r4, #16
 8000ba8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bb0:	fb0c f308 	mul.w	r3, ip, r8
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x134>
 8000bb8:	19ed      	adds	r5, r5, r7
 8000bba:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x132>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	f200 80d1 	bhi.w	8000d68 <__udivmoddi4+0x2d4>
 8000bc6:	4680      	mov	r8, r0
 8000bc8:	1aed      	subs	r5, r5, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bd0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bd4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bd8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x15c>
 8000be0:	19e4      	adds	r4, r4, r7
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x15a>
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	f200 80b8 	bhi.w	8000d5e <__udivmoddi4+0x2ca>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 040c 	sub.w	r4, r4, ip
 8000bf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf8:	e79d      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1ce 0420 	rsb	r4, lr, #32
 8000c06:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c0a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c0e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c12:	0c3a      	lsrs	r2, r7, #16
 8000c14:	fa25 f404 	lsr.w	r4, r5, r4
 8000c18:	ea48 0803 	orr.w	r8, r8, r3
 8000c1c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c20:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c24:	fb02 4411 	mls	r4, r2, r1, r4
 8000c28:	fa1f fc87 	uxth.w	ip, r7
 8000c2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c30:	fb01 f30c 	mul.w	r3, r1, ip
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x1bc>
 8000c3c:	19ed      	adds	r5, r5, r7
 8000c3e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c42:	f080 808a 	bcs.w	8000d5a <__udivmoddi4+0x2c6>
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	f240 8087 	bls.w	8000d5a <__udivmoddi4+0x2c6>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	443d      	add	r5, r7
 8000c50:	1aeb      	subs	r3, r5, r3
 8000c52:	fa1f f588 	uxth.w	r5, r8
 8000c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c62:	fb00 f30c 	mul.w	r3, r0, ip
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x1e6>
 8000c6a:	19ed      	adds	r5, r5, r7
 8000c6c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c70:	d26f      	bcs.n	8000d52 <__udivmoddi4+0x2be>
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	d96d      	bls.n	8000d52 <__udivmoddi4+0x2be>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443d      	add	r5, r7
 8000c7a:	1aeb      	subs	r3, r5, r3
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	e78f      	b.n	8000ba2 <__udivmoddi4+0x10e>
 8000c82:	f1c1 0720 	rsb	r7, r1, #32
 8000c86:	fa22 f807 	lsr.w	r8, r2, r7
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c90:	ea48 0303 	orr.w	r3, r8, r3
 8000c94:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ca2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ca6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000caa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cae:	fa1f f883 	uxth.w	r8, r3
 8000cb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb6:	fb09 f408 	mul.w	r4, r9, r8
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x244>
 8000cc6:	18ed      	adds	r5, r5, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	d243      	bcs.n	8000d56 <__udivmoddi4+0x2c2>
 8000cce:	42ac      	cmp	r4, r5
 8000cd0:	d941      	bls.n	8000d56 <__udivmoddi4+0x2c2>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	441d      	add	r5, r3
 8000cd8:	1b2d      	subs	r5, r5, r4
 8000cda:	fa1f fe8e 	uxth.w	lr, lr
 8000cde:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ce2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ce6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cea:	fb00 f808 	mul.w	r8, r0, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cf2:	18e4      	adds	r4, r4, r3
 8000cf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf8:	d229      	bcs.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfa:	45a0      	cmp	r8, r4
 8000cfc:	d927      	bls.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	441c      	add	r4, r3
 8000d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d06:	eba4 0408 	sub.w	r4, r4, r8
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	454c      	cmp	r4, r9
 8000d10:	46c6      	mov	lr, r8
 8000d12:	464d      	mov	r5, r9
 8000d14:	d315      	bcc.n	8000d42 <__udivmoddi4+0x2ae>
 8000d16:	d012      	beq.n	8000d3e <__udivmoddi4+0x2aa>
 8000d18:	b156      	cbz	r6, 8000d30 <__udivmoddi4+0x29c>
 8000d1a:	ebba 030e 	subs.w	r3, sl, lr
 8000d1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d22:	fa04 f707 	lsl.w	r7, r4, r7
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	6037      	str	r7, [r6, #0]
 8000d2e:	6074      	str	r4, [r6, #4]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	4618      	mov	r0, r3
 8000d38:	e6f8      	b.n	8000b2c <__udivmoddi4+0x98>
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	e6e0      	b.n	8000b00 <__udivmoddi4+0x6c>
 8000d3e:	45c2      	cmp	sl, r8
 8000d40:	d2ea      	bcs.n	8000d18 <__udivmoddi4+0x284>
 8000d42:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d46:	eb69 0503 	sbc.w	r5, r9, r3
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	e7e4      	b.n	8000d18 <__udivmoddi4+0x284>
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e7d7      	b.n	8000d02 <__udivmoddi4+0x26e>
 8000d52:	4640      	mov	r0, r8
 8000d54:	e791      	b.n	8000c7a <__udivmoddi4+0x1e6>
 8000d56:	4681      	mov	r9, r0
 8000d58:	e7be      	b.n	8000cd8 <__udivmoddi4+0x244>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	e778      	b.n	8000c50 <__udivmoddi4+0x1bc>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	e745      	b.n	8000bf0 <__udivmoddi4+0x15c>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e708      	b.n	8000b7a <__udivmoddi4+0xe6>
 8000d68:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6c:	443d      	add	r5, r7
 8000d6e:	e72b      	b.n	8000bc8 <__udivmoddi4+0x134>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8f8 	bl	8000f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f009 f9d4 	bl	800a150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f009 f9a6 	bl	800a0f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20003f0c 	.word	0x20003f0c

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20003f0c 	.word	0x20003f0c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_Delay+0x40>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad2      	subs	r2, r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3f7      	bcc.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	4909      	ldr	r1, [pc, #36]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	095b      	lsrs	r3, r3, #5
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	f002 021f 	and.w	r2, r2, #31
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	4909      	ldr	r1, [pc, #36]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	2201      	movs	r2, #1
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	401a      	ands	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f76:	2101      	movs	r1, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	1e59      	subs	r1, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff4e 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fba:	f7ff ff63 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8000fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	6978      	ldr	r0, [r7, #20]
 8000fc6:	f7ff ffb3 	bl	8000f30 <NVIC_EncodePriority>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff82 	bl	8000edc <__NVIC_SetPriority>
}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff56 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e03b      	b.n	8001086 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 fbb6 	bl	8006794 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6852      	ldr	r2, [r2, #4]
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001050:	f022 0107 	bic.w	r1, r2, #7
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6892      	ldr	r2, [r2, #8]
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800106a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	68c9      	ldr	r1, [r1, #12]
 8001072:	430b      	orrs	r3, r1
 8001074:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af02      	add	r7, sp, #8
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_DMA2D_Start+0x1c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e018      	b.n	80010dc <HAL_DMA2D_Start+0x4e>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2202      	movs	r2, #2
 80010b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f987 	bl	80013d8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d056      	beq.n	80011ae <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001100:	f7ff fe6e 	bl	8000de0 <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001106:	e04b      	b.n	80011a0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001116:	2b00      	cmp	r3, #0
 8001118:	d023      	beq.n	8001162 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	f043 0202 	orr.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2221      	movs	r2, #33	; 0x21
 800114c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2204      	movs	r2, #4
 8001152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0a5      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d01a      	beq.n	80011a0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800116a:	f7ff fe39 	bl	8000de0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d802      	bhi.n	8001180 <HAL_DMA2D_PollForTransfer+0x9c>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10f      	bne.n	80011a0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001184:	f043 0220 	orr.w	r2, r3, #32
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2203      	movs	r2, #3
 8001190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e086      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ac      	beq.n	8001108 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d061      	beq.n	8001294 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fe06 	bl	8000de0 <HAL_GetTick>
 80011d4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80011d6:	e056      	b.n	8001286 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d02e      	beq.n	8001248 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f8:	f043 0204 	orr.w	r2, r3, #4
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	f043 0202 	orr.w	r2, r3, #2
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2229      	movs	r2, #41	; 0x29
 8001232:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2204      	movs	r2, #4
 8001238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e032      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124e:	d01a      	beq.n	8001286 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001250:	f7ff fdc6 	bl	8000de0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	1ad2      	subs	r2, r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d802      	bhi.n	8001266 <HAL_DMA2D_PollForTransfer+0x182>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	f043 0220 	orr.w	r2, r3, #32
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e013      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0a1      	beq.n	80011d8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2212      	movs	r2, #18
 800129a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_DMA2D_ConfigLayer+0x20>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e077      	b.n	80013c8 <HAL_DMA2D_ConfigLayer+0x110>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	3318      	adds	r3, #24
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	4313      	orrs	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_DMA2D_ConfigLayer+0x11c>)
 8001304:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d003      	beq.n	8001316 <HAL_DMA2D_ConfigLayer+0x5e>
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b09      	cmp	r3, #9
 8001314:	d107      	bne.n	8001326 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4313      	orrs	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e005      	b.n	8001332 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4313      	orrs	r3, r2
 8001330:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11f      	bne.n	8001378 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	43d2      	mvns	r2, r2
 8001346:	4011      	ands	r1, r2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	430a      	orrs	r2, r1
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d003      	beq.n	8001368 <HAL_DMA2D_ConfigLayer+0xb0>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d126      	bne.n	80013b6 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68d2      	ldr	r2, [r2, #12]
 8001370:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
 8001376:	e01e      	b.n	80013b6 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	69d1      	ldr	r1, [r2, #28]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	43d2      	mvns	r2, r2
 8001386:	4011      	ands	r1, r2
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	430a      	orrs	r2, r1
 800138c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b0a      	cmp	r3, #10
 800139e:	d003      	beq.n	80013a8 <HAL_DMA2D_ConfigLayer+0xf0>
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d106      	bne.n	80013b6 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68d2      	ldr	r2, [r2, #12]
 80013b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80013b4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	ff03000f 	.word	0xff03000f

080013d8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80013d8:	b480      	push	{r7}
 80013da:	b08b      	sub	sp, #44	; 0x2c
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013f0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	0410      	lsls	r0, r2, #16
 80013f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fa:	4302      	orrs	r2, r0
 80013fc:	430a      	orrs	r2, r1
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001410:	d174      	bne.n	80014fc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001418:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001420:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001428:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	431a      	orrs	r2, r3
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4313      	orrs	r3, r2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	e053      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4313      	orrs	r3, r2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e048      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d111      	bne.n	800148c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	0cdb      	lsrs	r3, r3, #19
 800146c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	0a9b      	lsrs	r3, r3, #10
 8001472:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	02db      	lsls	r3, r3, #11
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	e032      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d117      	bne.n	80014c4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	0fdb      	lsrs	r3, r3, #31
 8001498:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	0cdb      	lsrs	r3, r3, #19
 800149e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	0adb      	lsrs	r3, r3, #11
 80014a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	431a      	orrs	r2, r3
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	03db      	lsls	r3, r3, #15
 80014ba:	431a      	orrs	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4313      	orrs	r3, r2
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	e016      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	0f1b      	lsrs	r3, r3, #28
 80014c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	0d1b      	lsrs	r3, r3, #20
 80014ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	0b1b      	lsrs	r3, r3, #12
 80014d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	011a      	lsls	r2, r3, #4
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	431a      	orrs	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80014fa:	e003      	b.n	8001504 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	372c      	adds	r7, #44	; 0x2c
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e177      	b.n	800181c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8166 	bne.w	8001816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x4a>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d00b      	beq.n	80015f6 <HAL_GPIO_Init+0xe6>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ea:	2b11      	cmp	r3, #17
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80c0 	beq.w	8001816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_GPIO_Init+0x320>)
 800169c:	4b64      	ldr	r3, [pc, #400]	; (8001830 <HAL_GPIO_Init+0x320>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_GPIO_Init+0x320>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_GPIO_Init+0x324>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_GPIO_Init+0x328>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d037      	beq.n	800174e <HAL_GPIO_Init+0x23e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a56      	ldr	r2, [pc, #344]	; (800183c <HAL_GPIO_Init+0x32c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d031      	beq.n	800174a <HAL_GPIO_Init+0x23a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a55      	ldr	r2, [pc, #340]	; (8001840 <HAL_GPIO_Init+0x330>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_GPIO_Init+0x236>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a54      	ldr	r2, [pc, #336]	; (8001844 <HAL_GPIO_Init+0x334>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x232>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a53      	ldr	r2, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x338>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x33c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x22a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x340>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x344>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x348>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_GPIO_Init+0x34c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x21a>
 8001726:	2309      	movs	r3, #9
 8001728:	e012      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172a:	230a      	movs	r3, #10
 800172c:	e010      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172e:	2308      	movs	r3, #8
 8001730:	e00e      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001732:	2307      	movs	r3, #7
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001736:	2306      	movs	r3, #6
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_GPIO_Init+0x324>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001792:	4a33      	ldr	r2, [pc, #204]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_GPIO_Init+0x350>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017bc:	4a28      	ldr	r2, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f ae84 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	3724      	adds	r7, #36	; 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40022000 	.word	0x40022000
 800185c:	40022400 	.word	0x40022400
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e0da      	b.n	8001a36 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	429a      	cmp	r2, r3
 8001898:	f040 80ca 	bne.w	8001a30 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800189c:	4a6b      	ldr	r2, [pc, #428]	; (8001a4c <HAL_GPIO_DeInit+0x1e8>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	4013      	ands	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_GPIO_DeInit+0x1ec>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d037      	beq.n	8001936 <HAL_GPIO_DeInit+0xd2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a62      	ldr	r2, [pc, #392]	; (8001a54 <HAL_GPIO_DeInit+0x1f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_GPIO_DeInit+0xce>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_GPIO_DeInit+0x1f4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_DeInit+0xca>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_GPIO_DeInit+0x1f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_DeInit+0xc6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_GPIO_DeInit+0x1fc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_DeInit+0xc2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <HAL_GPIO_DeInit+0x200>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_DeInit+0xbe>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_GPIO_DeInit+0x204>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_DeInit+0xba>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_GPIO_DeInit+0x208>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_DeInit+0xb6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_GPIO_DeInit+0x20c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_DeInit+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_GPIO_DeInit+0x210>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_DeInit+0xae>
 800190e:	2309      	movs	r3, #9
 8001910:	e012      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001912:	230a      	movs	r3, #10
 8001914:	e010      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001916:	2308      	movs	r3, #8
 8001918:	e00e      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800191a:	2307      	movs	r3, #7
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800191e:	2306      	movs	r3, #6
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001936:	2300      	movs	r3, #0
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	fa03 f202 	lsl.w	r2, r3, r2
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d132      	bne.n	80019b0 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800195a:	483c      	ldr	r0, [pc, #240]	; (8001a4c <HAL_GPIO_DeInit+0x1e8>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_GPIO_DeInit+0x1e8>)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	0892      	lsrs	r2, r2, #2
 8001966:	3202      	adds	r2, #2
 8001968:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	43d2      	mvns	r2, r2
 8001970:	400a      	ands	r2, r1
 8001972:	3302      	adds	r3, #2
 8001974:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001978:	493f      	ldr	r1, [pc, #252]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001986:	493c      	ldr	r1, [pc, #240]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 8001988:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	4013      	ands	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001994:	4938      	ldr	r1, [pc, #224]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019a2:	4935      	ldr	r1, [pc, #212]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2103      	movs	r1, #3
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08d9      	lsrs	r1, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3108      	adds	r1, #8
 80019d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	200f      	movs	r0, #15
 80019e0:	fa00 f303 	lsl.w	r3, r0, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2103      	movs	r1, #3
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2103      	movs	r1, #3
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	f67f af21 	bls.w	8001880 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40021c00 	.word	0x40021c00
 8001a70:	40022000 	.word	0x40022000
 8001a74:	40022400 	.word	0x40022400
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e10f      	b.n	8001ce2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f005 fc7e 	bl	80073d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af4:	f001 ff44 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a7b      	ldr	r2, [pc, #492]	; (8001cec <HAL_I2C_Init+0x23c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d807      	bhi.n	8001b14 <HAL_I2C_Init+0x64>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_I2C_Init+0x240>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e006      	b.n	8001b22 <HAL_I2C_Init+0x72>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_I2C_Init+0x244>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0db      	b.n	8001ce2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_I2C_Init+0x248>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	6852      	ldr	r2, [r2, #4]
 8001b40:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4863      	ldr	r0, [pc, #396]	; (8001cec <HAL_I2C_Init+0x23c>)
 8001b5e:	4283      	cmp	r3, r0
 8001b60:	d802      	bhi.n	8001b68 <HAL_I2C_Init+0xb8>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	e009      	b.n	8001b7c <HAL_I2C_Init+0xcc>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b6e:	fb00 f303 	mul.w	r3, r0, r3
 8001b72:	4862      	ldr	r0, [pc, #392]	; (8001cfc <HAL_I2C_Init+0x24c>)
 8001b74:	fba0 0303 	umull	r0, r3, r0, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4955      	ldr	r1, [pc, #340]	; (8001cec <HAL_I2C_Init+0x23c>)
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d80d      	bhi.n	8001bb8 <HAL_I2C_Init+0x108>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e59      	subs	r1, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	bf38      	it	cc
 8001bb4:	2304      	movcc	r3, #4
 8001bb6:	e04f      	b.n	8001c58 <HAL_I2C_Init+0x1a8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d111      	bne.n	8001be4 <HAL_I2C_Init+0x134>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e5c      	subs	r4, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e012      	b.n	8001c0a <HAL_I2C_Init+0x15a>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e5c      	subs	r4, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	0099      	lsls	r1, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Init+0x162>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e022      	b.n	8001c58 <HAL_I2C_Init+0x1a8>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10e      	bne.n	8001c38 <HAL_I2C_Init+0x188>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1e5c      	subs	r4, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	440b      	add	r3, r1
 8001c28:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c36:	e00f      	b.n	8001c58 <HAL_I2C_Init+0x1a8>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e5c      	subs	r4, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	0099      	lsls	r1, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	69d0      	ldr	r0, [r2, #28]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6a12      	ldr	r2, [r2, #32]
 8001c72:	4302      	orrs	r2, r0
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	6908      	ldr	r0, [r1, #16]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68c9      	ldr	r1, [r1, #12]
 8001c92:	4301      	orrs	r1, r0
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	68d2      	ldr	r2, [r2, #12]
 8001ca2:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6950      	ldr	r0, [r2, #20]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6992      	ldr	r2, [r2, #24]
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	001e847f 	.word	0x001e847f
 8001cf4:	003d08ff 	.word	0x003d08ff
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e021      	b.n	8001d56 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2224      	movs	r2, #36	; 0x24
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f005 fbbe 	bl	80074ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	817b      	strh	r3, [r7, #10]
 8001d72:	460b      	mov	r3, r1
 8001d74:	813b      	strh	r3, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d7a:	f7ff f831 	bl	8000de0 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	f040 80d9 	bne.w	8001f40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2319      	movs	r3, #25
 8001d94:	2201      	movs	r2, #1
 8001d96:	496d      	ldr	r1, [pc, #436]	; (8001f4c <HAL_I2C_Mem_Write+0x1ec>)
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fc67 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0cc      	b.n	8001f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Mem_Write+0x56>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0c5      	b.n	8001f42 <HAL_I2C_Mem_Write+0x1e2>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d007      	beq.n	8001ddc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2221      	movs	r2, #33	; 0x21
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_I2C_Mem_Write+0x1f0>)
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e1e:	88f8      	ldrh	r0, [r7, #6]
 8001e20:	893a      	ldrh	r2, [r7, #8]
 8001e22:	8979      	ldrh	r1, [r7, #10]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fac4 	bl	80023bc <I2C_RequestMemoryWrite>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d052      	beq.n	8001ee0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e081      	b.n	8001f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fce8 	bl	8002818 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d107      	bne.n	8001e66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06b      	b.n	8001f42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_I2C_Mem_Write+0x180>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1aa      	bne.n	8001e3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fcd4 	bl	800289a <I2C_WaitOnBTFFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e016      	b.n	8001f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	00100002 	.word	0x00100002
 8001f50:	ffff0000 	.word	0xffff0000

08001f54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	817b      	strh	r3, [r7, #10]
 8001f66:	460b      	mov	r3, r1
 8001f68:	813b      	strh	r3, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f6e:	f7fe ff37 	bl	8000de0 <HAL_GetTick>
 8001f72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	f040 8208 	bne.w	8002392 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2319      	movs	r3, #25
 8001f88:	2201      	movs	r2, #1
 8001f8a:	497b      	ldr	r1, [pc, #492]	; (8002178 <HAL_I2C_Mem_Read+0x224>)
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fb6d 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e1fb      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_I2C_Mem_Read+0x56>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e1f4      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d007      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2222      	movs	r2, #34	; 0x22
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a5b      	ldr	r2, [pc, #364]	; (800217c <HAL_I2C_Mem_Read+0x228>)
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002012:	88f8      	ldrh	r0, [r7, #6]
 8002014:	893a      	ldrh	r2, [r7, #8]
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa52 	bl	80024cc <I2C_RequestMemoryRead>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e1b0      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	d113      	bne.n	8002062 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e184      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	2b01      	cmp	r3, #1
 8002068:	d11b      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e164      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d11b      	bne.n	80020e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	e144      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020f8:	e138      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	2b03      	cmp	r3, #3
 8002100:	f200 80f1 	bhi.w	80022e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b01      	cmp	r3, #1
 800210a:	d123      	bne.n	8002154 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fc03 	bl	800291c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e139      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	6912      	ldr	r2, [r2, #16]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002152:	e10b      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b02      	cmp	r3, #2
 800215a:	d14e      	bne.n	80021fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002162:	2200      	movs	r2, #0
 8002164:	4906      	ldr	r1, [pc, #24]	; (8002180 <HAL_I2C_Mem_Read+0x22c>)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fa80 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e10e      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
 8002176:	bf00      	nop
 8002178:	00100002 	.word	0x00100002
 800217c:	ffff0000 	.word	0xffff0000
 8002180:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	6912      	ldr	r2, [r2, #16]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	6912      	ldr	r2, [r2, #16]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021f8:	e0b8      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	2200      	movs	r2, #0
 8002202:	4966      	ldr	r1, [pc, #408]	; (800239c <HAL_I2C_Mem_Read+0x448>)
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fa31 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0bf      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	6912      	ldr	r2, [r2, #16]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	2200      	movs	r2, #0
 800225e:	494f      	ldr	r1, [pc, #316]	; (800239c <HAL_I2C_Mem_Read+0x448>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa03 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e091      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	6912      	ldr	r2, [r2, #16]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	6912      	ldr	r2, [r2, #16]
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022e4:	e042      	b.n	800236c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb16 	bl	800291c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e04c      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	6912      	ldr	r2, [r2, #16]
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d118      	bne.n	800236c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	6912      	ldr	r2, [r2, #16]
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f aec2 	bne.w	80020fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002392:	2302      	movs	r3, #2
  }
}
 8002394:	4618      	mov	r0, r3
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	00010004 	.word	0x00010004

080023a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ae:	b2db      	uxtb	r3, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	817b      	strh	r3, [r7, #10]
 80023ce:	460b      	mov	r3, r1
 80023d0:	813b      	strh	r3, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f93a 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e05e      	b.n	80024c0 <I2C_RequestMemoryWrite+0x104>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	897a      	ldrh	r2, [r7, #10]
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800240e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	492c      	ldr	r1, [pc, #176]	; (80024c8 <I2C_RequestMemoryWrite+0x10c>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f97f 	bl	800271a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_RequestMemoryWrite+0x6a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e04c      	b.n	80024c0 <I2C_RequestMemoryWrite+0x104>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	6a39      	ldr	r1, [r7, #32]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f9e9 	bl	8002818 <I2C_WaitOnTXEFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <I2C_RequestMemoryWrite+0xac>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2b04      	cmp	r3, #4
 8002452:	d107      	bne.n	8002464 <I2C_RequestMemoryWrite+0xa8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e02b      	b.n	80024c0 <I2C_RequestMemoryWrite+0x104>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <I2C_RequestMemoryWrite+0xbe>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	893a      	ldrh	r2, [r7, #8]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	e021      	b.n	80024be <I2C_RequestMemoryWrite+0x102>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	0a12      	lsrs	r2, r2, #8
 8002482:	b292      	uxth	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	6a39      	ldr	r1, [r7, #32]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9c3 	bl	8002818 <I2C_WaitOnTXEFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <I2C_RequestMemoryWrite+0xf8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b04      	cmp	r3, #4
 800249e:	d107      	bne.n	80024b0 <I2C_RequestMemoryWrite+0xf4>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e005      	b.n	80024c0 <I2C_RequestMemoryWrite+0x104>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	893a      	ldrh	r2, [r7, #8]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	00010002 	.word	0x00010002

080024cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	2200      	movs	r2, #0
 800250e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f8aa 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e09d      	b.n	800265e <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	897a      	ldrh	r2, [r7, #10]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800252e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	6a3a      	ldr	r2, [r7, #32]
 8002534:	494c      	ldr	r1, [pc, #304]	; (8002668 <I2C_RequestMemoryRead+0x19c>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8ef 	bl	800271a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_RequestMemoryRead+0x7a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e08b      	b.n	800265e <I2C_RequestMemoryRead+0x192>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	6a39      	ldr	r1, [r7, #32]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f959 	bl	8002818 <I2C_WaitOnTXEFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <I2C_RequestMemoryRead+0xbc>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <I2C_RequestMemoryRead+0xb8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e06a      	b.n	800265e <I2C_RequestMemoryRead+0x192>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <I2C_RequestMemoryRead+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	893a      	ldrh	r2, [r7, #8]
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	e021      	b.n	80025de <I2C_RequestMemoryRead+0x112>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	893a      	ldrh	r2, [r7, #8]
 80025a0:	0a12      	lsrs	r2, r2, #8
 80025a2:	b292      	uxth	r2, r2
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025aa:	6a39      	ldr	r1, [r7, #32]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f933 	bl	8002818 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <I2C_RequestMemoryRead+0x108>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <I2C_RequestMemoryRead+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e044      	b.n	800265e <I2C_RequestMemoryRead+0x192>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	893a      	ldrh	r2, [r7, #8]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e0:	6a39      	ldr	r1, [r7, #32]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f918 	bl	8002818 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00d      	beq.n	800260a <I2C_RequestMemoryRead+0x13e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d107      	bne.n	8002606 <I2C_RequestMemoryRead+0x13a>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e029      	b.n	800265e <I2C_RequestMemoryRead+0x192>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2200      	movs	r2, #0
 8002622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f820 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_RequestMemoryRead+0x16a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e013      	b.n	800265e <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	897a      	ldrh	r2, [r7, #10]
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	4907      	ldr	r1, [pc, #28]	; (8002668 <I2C_RequestMemoryRead+0x19c>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f864 	bl	800271a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x190>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <I2C_RequestMemoryRead+0x192>
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	00010002 	.word	0x00010002

0800266c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800267c:	e025      	b.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d021      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7fe fbab 	bl	8000de0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d802      	bhi.n	800269c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d116      	bne.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f043 0220 	orr.w	r2, r3, #32
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e023      	b.n	8002712 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10d      	bne.n	80026f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	e00c      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	429a      	cmp	r2, r3
 800270e:	d0b6      	beq.n	800267e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002728:	e051      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002738:	d123      	bne.n	8002782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002752:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e046      	b.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d021      	beq.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7fe fb29 	bl	8000de0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	1ad2      	subs	r2, r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d802      	bhi.n	80027a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e020      	b.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10c      	bne.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4013      	ands	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	e00b      	b.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d18d      	bne.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002824:	e02d      	b.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f8ce 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e02d      	b.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d021      	beq.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283e:	f7fe facf 	bl	8000de0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	d802      	bhi.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e007      	b.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d1ca      	bne.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a6:	e02d      	b.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f88d 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e02d      	b.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d021      	beq.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7fe fa8e 	bl	8000de0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	1ad2      	subs	r2, r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d802      	bhi.n	80028d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d1ca      	bne.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002928:	e042      	b.n	80029b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d119      	bne.n	800296c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e029      	b.n	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7fe fa38 	bl	8000de0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d802      	bhi.n	8002982 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d1b5      	bne.n	800292a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d11b      	bne.n	8002a18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d129      	bne.n	8002a90 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a5e:	f022 0210 	bic.w	r2, r2, #16
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d12a      	bne.n	8002b0e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
 8002ada:	f023 030f 	bic.w	r3, r3, #15
 8002ade:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	89fa      	ldrh	r2, [r7, #14]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0bf      	b.n	8002cae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f005 fd04 	bl	8008550 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	6992      	ldr	r2, [r2, #24]
 8002b5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002b5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6991      	ldr	r1, [r2, #24]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6850      	ldr	r0, [r2, #4]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6892      	ldr	r2, [r2, #8]
 8002b72:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b78:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6912      	ldr	r2, [r2, #16]
 8002b7e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b80:	430a      	orrs	r2, r1
 8002b82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_LTDC_Init+0x19c>)
 8002b90:	400b      	ands	r3, r1
 8002b92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	6891      	ldr	r1, [r2, #8]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6990      	ldr	r0, [r2, #24]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4302      	orrs	r2, r0
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_LTDC_Init+0x19c>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	68d1      	ldr	r1, [r2, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6a10      	ldr	r0, [r2, #32]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4302      	orrs	r2, r0
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6919      	ldr	r1, [r3, #16]
 8002bea:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_LTDC_Init+0x19c>)
 8002bec:	400b      	ands	r3, r1
 8002bee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6911      	ldr	r1, [r2, #16]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4302      	orrs	r2, r0
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6959      	ldr	r1, [r3, #20]
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_LTDC_Init+0x19c>)
 8002c1a:	400b      	ands	r3, r1
 8002c1c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	6951      	ldr	r1, [r2, #20]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4302      	orrs	r2, r0
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c5a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4302      	orrs	r2, r0
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002c76:	4302      	orrs	r2, r0
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c86:	f042 0206 	orr.w	r2, r2, #6
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	6992      	ldr	r2, [r2, #24]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	f000f800 	.word	0xf000f800

08002cbc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_LTDC_ConfigLayer+0x1a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e02c      	b.n	8002d30 <HAL_LTDC_ConfigLayer+0x74>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2134      	movs	r1, #52	; 0x34
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f83b 	bl	8002d8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdb0      	pop	{r4, r5, r7, pc}

08002d38 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_LTDC_EnableDither+0x16>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e016      	b.n	8002d7c <HAL_LTDC_EnableDither+0x44>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_LTDC_EnableDither+0x50>)
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_LTDC_EnableDither+0x50>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40016800 	.word	0x40016800

08002d8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	4413      	add	r3, r2
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	01db      	lsls	r3, r3, #7
 8002db8:	4413      	add	r3, r2
 8002dba:	3384      	adds	r3, #132	; 0x84
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	01db      	lsls	r3, r3, #7
 8002dc8:	440b      	add	r3, r1
 8002dca:	3384      	adds	r3, #132	; 0x84
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002dd2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	01db      	lsls	r3, r3, #7
 8002dde:	4413      	add	r3, r2
 8002de0:	3384      	adds	r3, #132	; 0x84
 8002de2:	4619      	mov	r1, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	4413      	add	r3, r2
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0c:	4413      	add	r3, r2
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	01db      	lsls	r3, r3, #7
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3384      	adds	r3, #132	; 0x84
 8002e20:	461a      	mov	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	01db      	lsls	r3, r3, #7
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3384      	adds	r3, #132	; 0x84
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	01db      	lsls	r3, r3, #7
 8002e42:	4413      	add	r3, r2
 8002e44:	3384      	adds	r3, #132	; 0x84
 8002e46:	4619      	mov	r1, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e56:	4413      	add	r3, r2
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3384      	adds	r3, #132	; 0x84
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3384      	adds	r3, #132	; 0x84
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	01db      	lsls	r3, r3, #7
 8002e90:	4413      	add	r3, r2
 8002e92:	3384      	adds	r3, #132	; 0x84
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	01db      	lsls	r3, r3, #7
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3384      	adds	r3, #132	; 0x84
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	01db      	lsls	r3, r3, #7
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3384      	adds	r3, #132	; 0x84
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	01db      	lsls	r3, r3, #7
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3384      	adds	r3, #132	; 0x84
 8002eea:	4619      	mov	r1, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	01db      	lsls	r3, r3, #7
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3384      	adds	r3, #132	; 0x84
 8002f10:	461a      	mov	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	01db      	lsls	r3, r3, #7
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3384      	adds	r3, #132	; 0x84
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	01db      	lsls	r3, r3, #7
 8002f32:	4413      	add	r3, r2
 8002f34:	3384      	adds	r3, #132	; 0x84
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	01db      	lsls	r3, r3, #7
 8002f48:	4413      	add	r3, r2
 8002f4a:	3384      	adds	r3, #132	; 0x84
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	01db      	lsls	r3, r3, #7
 8002f58:	440b      	add	r3, r1
 8002f5a:	3384      	adds	r3, #132	; 0x84
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f62:	f023 0307 	bic.w	r3, r3, #7
 8002f66:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	4413      	add	r3, r2
 8002f74:	3384      	adds	r3, #132	; 0x84
 8002f76:	4619      	mov	r1, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	01db      	lsls	r3, r3, #7
 8002f8e:	4413      	add	r3, r2
 8002f90:	3384      	adds	r3, #132	; 0x84
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	01db      	lsls	r3, r3, #7
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3384      	adds	r3, #132	; 0x84
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	01db      	lsls	r3, r3, #7
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3384      	adds	r3, #132	; 0x84
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e01b      	b.n	8003004 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	e014      	b.n	8003004 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d00b      	beq.n	8002ffa <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d007      	beq.n	8002ffa <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d003      	beq.n	8002ffa <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ff6:	2b07      	cmp	r3, #7
 8002ff8:	d102      	bne.n	8003000 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e001      	b.n	8003004 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8003000:	2301      	movs	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	01db      	lsls	r3, r3, #7
 800300e:	4413      	add	r3, r2
 8003010:	3384      	adds	r3, #132	; 0x84
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	440b      	add	r3, r1
 8003020:	3384      	adds	r3, #132	; 0x84
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003028:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	4413      	add	r3, r2
 8003036:	3384      	adds	r3, #132	; 0x84
 8003038:	4618      	mov	r0, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	fb02 f303 	mul.w	r3, r2, r3
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1acb      	subs	r3, r1, r3
 8003050:	69f9      	ldr	r1, [r7, #28]
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	3303      	adds	r3, #3
 8003058:	4313      	orrs	r3, r2
 800305a:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	4413      	add	r3, r2
 8003068:	3384      	adds	r3, #132	; 0x84
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	01db      	lsls	r3, r3, #7
 8003076:	440b      	add	r3, r1
 8003078:	3384      	adds	r3, #132	; 0x84
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003080:	f023 0307 	bic.w	r3, r3, #7
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	4413      	add	r3, r2
 8003092:	3384      	adds	r3, #132	; 0x84
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	01db      	lsls	r3, r3, #7
 80030a6:	4413      	add	r3, r2
 80030a8:	3384      	adds	r3, #132	; 0x84
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	01db      	lsls	r3, r3, #7
 80030b6:	440b      	add	r3, r1
 80030b8:	3384      	adds	r3, #132	; 0x84
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6013      	str	r3, [r2, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_PWREx_EnableOverDrive+0x90>)
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <HAL_PWREx_EnableOverDrive+0x90>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_PWREx_EnableOverDrive+0x90>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_PWREx_EnableOverDrive+0x94>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030fc:	f7fd fe70 	bl	8000de0 <HAL_GetTick>
 8003100:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003102:	e009      	b.n	8003118 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003104:	f7fd fe6c 	bl	8000de0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003112:	d901      	bls.n	8003118 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e01f      	b.n	8003158 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_PWREx_EnableOverDrive+0x98>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d1ee      	bne.n	8003104 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800312c:	f7fd fe58 	bl	8000de0 <HAL_GetTick>
 8003130:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003132:	e009      	b.n	8003148 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003134:	f7fd fe54 	bl	8000de0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003142:	d901      	bls.n	8003148 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e007      	b.n	8003158 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_PWREx_EnableOverDrive+0x98>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003154:	d1ee      	bne.n	8003134 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	420e0040 	.word	0x420e0040
 8003168:	40007000 	.word	0x40007000
 800316c:	420e0044 	.word	0x420e0044

08003170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e22d      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d075      	beq.n	800327a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318e:	4ba3      	ldr	r3, [pc, #652]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d00c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319a:	4ba0      	ldr	r3, [pc, #640]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d112      	bne.n	80031cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b9d      	ldr	r3, [pc, #628]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b2:	d10b      	bne.n	80031cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	4b99      	ldr	r3, [pc, #612]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05b      	beq.n	8003278 <HAL_RCC_OscConfig+0x108>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d157      	bne.n	8003278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e208      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d106      	bne.n	80031e4 <HAL_RCC_OscConfig+0x74>
 80031d6:	4a91      	ldr	r2, [pc, #580]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	4b90      	ldr	r3, [pc, #576]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e01d      	b.n	8003220 <HAL_RCC_OscConfig+0xb0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x98>
 80031ee:	4a8b      	ldr	r2, [pc, #556]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	4b8a      	ldr	r3, [pc, #552]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4a88      	ldr	r2, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0xb0>
 8003208:	4a84      	ldr	r2, [pc, #528]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 800320a:	4b84      	ldr	r3, [pc, #528]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4a81      	ldr	r2, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fd fdda 	bl	8000de0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fd fdd6 	bl	8000de0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1cd      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0xc0>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd fdc6 	bl	8000de0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003258:	f7fd fdc2 	bl	8000de0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e1b9      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	4b6c      	ldr	r3, [pc, #432]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0xe8>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d063      	beq.n	800334e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329a:	2b08      	cmp	r3, #8
 800329c:	d11c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d116      	bne.n	80032d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_RCC_OscConfig+0x152>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e18d      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c2:	4956      	ldr	r1, [pc, #344]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	e03a      	b.n	800334e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <HAL_RCC_OscConfig+0x2b0>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fd fd7b 	bl	8000de0 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ee:	f7fd fd77 	bl	8000de0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e16e      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4943      	ldr	r1, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
 8003320:	e015      	b.n	800334e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_OscConfig+0x2b0>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fd fd5a 	bl	8000de0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003330:	f7fd fd56 	bl	8000de0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e14d      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d030      	beq.n	80033bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d016      	beq.n	8003390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <HAL_RCC_OscConfig+0x2b4>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fd fd3a 	bl	8000de0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003370:	f7fd fd36 	bl	8000de0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e12d      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x200>
 800338e:	e015      	b.n	80033bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_OscConfig+0x2b4>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fd fd23 	bl	8000de0 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339e:	f7fd fd1f 	bl	8000de0 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e116      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a0 	beq.w	800350a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_OscConfig+0x2b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d121      	bne.n	800344a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_RCC_OscConfig+0x2b8>)
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_RCC_OscConfig+0x2b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003412:	f7fd fce5 	bl	8000de0 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	e011      	b.n	800343e <HAL_RCC_OscConfig+0x2ce>
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	42470000 	.word	0x42470000
 8003424:	42470e80 	.word	0x42470e80
 8003428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fd fcd8 	bl	8000de0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0cf      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x478>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d106      	bne.n	8003460 <HAL_RCC_OscConfig+0x2f0>
 8003452:	4a66      	ldr	r2, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003454:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
 800345e:	e01c      	b.n	800349a <HAL_RCC_OscConfig+0x32a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10c      	bne.n	8003482 <HAL_RCC_OscConfig+0x312>
 8003468:	4a60      	ldr	r2, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 800346a:	4b60      	ldr	r3, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	4a5d      	ldr	r2, [pc, #372]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0x32a>
 8003482:	4a5a      	ldr	r2, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
 800348e:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d015      	beq.n	80034ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fd fc9d 	bl	8000de0 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fd fc99 	bl	8000de0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e08e      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ee      	beq.n	80034aa <HAL_RCC_OscConfig+0x33a>
 80034cc:	e014      	b.n	80034f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ce:	f7fd fc87 	bl	8000de0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fd fc83 	bl	8000de0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e078      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	4b3f      	ldr	r3, [pc, #252]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003500:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d064      	beq.n	80035dc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d05c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d141      	bne.n	80035aa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCC_OscConfig+0x480>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd fc58 	bl	8000de0 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fd fc54 	bl	8000de0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e04b      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003552:	4926      	ldr	r1, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	019b      	lsls	r3, r3, #6
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_RCC_OscConfig+0x480>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fd fc2d 	bl	8000de0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fd fc29 	bl	8000de0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e020      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x41a>
 80035a8:	e018      	b.n	80035dc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x480>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fc16 	bl	8000de0 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd fc12 	bl	8000de0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e009      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCC_OscConfig+0x47c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x448>
 80035d6:	e001      	b.n	80035dc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40007000 	.word	0x40007000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470060 	.word	0x42470060

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0ca      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_ClockConfig+0x1b4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d20c      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 020f 	and.w	r2, r3, #15
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b6      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	4b52      	ldr	r3, [pc, #328]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	494f      	ldr	r1, [pc, #316]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d044      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07d      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06d      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e065      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4936      	ldr	r1, [pc, #216]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 0203 	bic.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fb7c 	bl	8000de0 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd fb78 	bl	8000de0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e04d      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d90c      	bls.n	800373c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_ClockConfig+0x1b4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e030      	b.n	800379e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4918      	ldr	r1, [pc, #96]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4911      	ldr	r1, [pc, #68]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f81d 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 800377e:	4601      	mov	r1, r0
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	fa21 f303 	lsr.w	r3, r1, r3
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003796:	2000      	movs	r0, #0
 8003798:	f006 fcda 	bl	800a150 <HAL_InitTick>

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00
 80037ac:	40023800 	.word	0x40023800
 80037b0:	0800d20c 	.word	0x0800d20c
 80037b4:	200000a0 	.word	0x200000a0

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b08f      	sub	sp, #60	; 0x3c
 80037be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
 80037c8:	2300      	movs	r3, #0
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d0:	4b62      	ldr	r3, [pc, #392]	; (800395c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d007      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x34>
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 80b2 	bne.w	800394a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e6:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80037ea:	e0b1      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037f0:	e0ae      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f2:	4b5a      	ldr	r3, [pc, #360]	; (800395c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d04e      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4b54      	ldr	r3, [pc, #336]	; (800395c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	f04f 0400 	mov.w	r4, #0
 8003812:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	ea01 0103 	and.w	r1, r1, r3
 800381e:	ea02 0204 	and.w	r2, r2, r4
 8003822:	460b      	mov	r3, r1
 8003824:	4614      	mov	r4, r2
 8003826:	0160      	lsls	r0, r4, #5
 8003828:	6278      	str	r0, [r7, #36]	; 0x24
 800382a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800382c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003830:	6278      	str	r0, [r7, #36]	; 0x24
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800383a:	1a5b      	subs	r3, r3, r1
 800383c:	eb64 0402 	sbc.w	r4, r4, r2
 8003840:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003844:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003848:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800384c:	ebb8 0803 	subs.w	r8, r8, r3
 8003850:	eb69 0904 	sbc.w	r9, r9, r4
 8003854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800386c:	eb18 0801 	adds.w	r8, r8, r1
 8003870:	eb49 0902 	adc.w	r9, r9, r2
 8003874:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800388c:	4640      	mov	r0, r8
 800388e:	4649      	mov	r1, r9
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	f04f 0400 	mov.w	r4, #0
 8003896:	461a      	mov	r2, r3
 8003898:	4623      	mov	r3, r4
 800389a:	f7fd f8e3 	bl	8000a64 <__aeabi_uldivmod>
 800389e:	4603      	mov	r3, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
 80038a4:	e043      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	ea01 0103 	and.w	r1, r1, r3
 80038bc:	ea02 0204 	and.w	r2, r2, r4
 80038c0:	460b      	mov	r3, r1
 80038c2:	4614      	mov	r4, r2
 80038c4:	0160      	lsls	r0, r4, #5
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	015b      	lsls	r3, r3, #5
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038d8:	1a5b      	subs	r3, r3, r1
 80038da:	eb64 0402 	sbc.w	r4, r4, r2
 80038de:	01a6      	lsls	r6, r4, #6
 80038e0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80038e4:	019d      	lsls	r5, r3, #6
 80038e6:	1aed      	subs	r5, r5, r3
 80038e8:	eb66 0604 	sbc.w	r6, r6, r4
 80038ec:	00f3      	lsls	r3, r6, #3
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	00eb      	lsls	r3, r5, #3
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003900:	186d      	adds	r5, r5, r1
 8003902:	eb46 0602 	adc.w	r6, r6, r2
 8003906:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800390a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800390e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003912:	4655      	mov	r5, sl
 8003914:	465e      	mov	r6, fp
 8003916:	4628      	mov	r0, r5
 8003918:	4631      	mov	r1, r6
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	f04f 0400 	mov.w	r4, #0
 8003920:	461a      	mov	r2, r3
 8003922:	4623      	mov	r3, r4
 8003924:	f7fd f89e 	bl	8000a64 <__aeabi_uldivmod>
 8003928:	4603      	mov	r3, r0
 800392a:	460c      	mov	r4, r1
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	3301      	adds	r3, #1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800393e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003948:	e002      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800394e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003952:	4618      	mov	r0, r3
 8003954:	373c      	adds	r7, #60	; 0x3c
 8003956:	46bd      	mov	sp, r7
 8003958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	00f42400 	.word	0x00f42400
 8003964:	007a1200 	.word	0x007a1200

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCC_GetHCLKFreq+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	200000a0 	.word	0x200000a0

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003984:	f7ff fff0 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003988:	4601      	mov	r1, r0
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0a9b      	lsrs	r3, r3, #10
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4a03      	ldr	r2, [pc, #12]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003996:	5cd3      	ldrb	r3, [r2, r3]
 8003998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40023800 	.word	0x40023800
 80039a4:	0800d21c 	.word	0x0800d21c

080039a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039ac:	f7ff ffdc 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039b0:	4601      	mov	r1, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0b5b      	lsrs	r3, r3, #13
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4a03      	ldr	r2, [pc, #12]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	0800d21c 	.word	0x0800d21c

080039d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	220f      	movs	r2, #15
 80039de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0203 	and.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <HAL_RCC_GetClockConfig+0x60>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	601a      	str	r2, [r3, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40023c00 	.word	0x40023c00

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d061      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a5c:	4ba3      	ldr	r3, [pc, #652]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a62:	f7fd f9bd 	bl	8000de0 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a6a:	f7fd f9b9 	bl	8000de0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e177      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7c:	4b9c      	ldr	r3, [pc, #624]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a94:	4996      	ldr	r1, [pc, #600]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	019a      	lsls	r2, r3, #6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	071b      	lsls	r3, r3, #28
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab4:	4b8e      	ldr	r3, [pc, #568]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	0f1b      	lsrs	r3, r3, #28
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003ac2:	498b      	ldr	r1, [pc, #556]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	019a      	lsls	r2, r3, #6
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003adc:	4984      	ldr	r1, [pc, #528]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ade:	4b84      	ldr	r3, [pc, #528]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	f023 021f 	bic.w	r2, r3, #31
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003af4:	4b7d      	ldr	r3, [pc, #500]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003afa:	f7fd f971 	bl	8000de0 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b02:	f7fd f96d 	bl	8000de0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e12b      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b14:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d079      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b38:	4b6e      	ldr	r3, [pc, #440]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f94f 	bl	8000de0 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b46:	f7fd f94b 	bl	8000de0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e109      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b58:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b64:	d0ef      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	0f1b      	lsrs	r3, r3, #28
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b80:	495b      	ldr	r1, [pc, #364]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	019a      	lsls	r2, r3, #6
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	071b      	lsls	r3, r3, #28
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b9a:	4955      	ldr	r1, [pc, #340]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b9c:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01e      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	0e1b      	lsrs	r3, r3, #24
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bce:	4948      	ldr	r1, [pc, #288]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	019a      	lsls	r2, r3, #6
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003be8:	4941      	ldr	r1, [pc, #260]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fd f8ec 	bl	8000de0 <HAL_GetTick>
 8003c08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c0c:	f7fd f8e8 	bl	8000de0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0a6      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c1e:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2a:	d1ef      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 808d 	beq.w	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c40:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c56:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c62:	f7fd f8bd 	bl	8000de0 <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fd f8b9 	bl	8000de0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e077      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d039      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d032      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d11e      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cce:	f7fd f887 	bl	8000de0 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	e014      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fd f883 	bl	8000de0 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d90b      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e03f      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003cec:	42470068 	.word	0x42470068
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	42470070 	.word	0x42470070
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0e4      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d18:	d10d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003d1a:	4916      	ldr	r1, [pc, #88]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d30:	4313      	orrs	r3, r2
 8003d32:	608b      	str	r3, [r1, #8]
 8003d34:	e005      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003d36:	4a0f      	ldr	r2, [pc, #60]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d38:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d40:	6093      	str	r3, [r2, #8]
 8003d42:	490c      	ldr	r1, [pc, #48]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	4313      	orrs	r3, r2
 8003d52:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d68:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	424711e0 	.word	0x424711e0

08003d7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e025      	b.n	8003ddc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f002 fde9 	bl	800697c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f001 fa1f 	bl	8005200 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	f001 fa8a 	bl	80052e6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d101      	bne.n	8003e00 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e018      	b.n	8003e32 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fae7 	bl	80053e4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d104      	bne.n	8003e28 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2205      	movs	r2, #5
 8003e22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003e26:	e003      	b.n	8003e30 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d101      	bne.n	8003e54 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
 8003e52:	e00e      	b.n	8003e72 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fafa 	bl	800545c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e055      	b.n	8003f38 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f004 fdba 	bl	8008a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6851      	ldr	r1, [r2, #4]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6892      	ldr	r2, [r2, #8]
 8003ed0:	4311      	orrs	r1, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6912      	ldr	r2, [r2, #16]
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6952      	ldr	r2, [r2, #20]
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6992      	ldr	r2, [r2, #24]
 8003ee8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	69d2      	ldr	r2, [r2, #28]
 8003ef2:	4311      	orrs	r1, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6a12      	ldr	r2, [r2, #32]
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6992      	ldr	r2, [r2, #24]
 8003f0a:	0c12      	lsrs	r2, r2, #16
 8003f0c:	f002 0104 	and.w	r1, r2, #4
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	69d2      	ldr	r2, [r2, #28]
 8003f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e01a      	b.n	8003f88 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f004 fda0 	bl	8008ab0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Transmit+0x22>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e11c      	b.n	80041ec <HAL_SPI_Transmit+0x25c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fba:	f7fc ff11 	bl	8000de0 <HAL_GetTick>
 8003fbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd4:	e101      	b.n	80041da <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_SPI_Transmit+0x52>
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe6:	e0f8      	b.n	80041da <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2203      	movs	r2, #3
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d107      	bne.n	8004040 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d007      	beq.n	800405e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004066:	d14b      	bne.n	8004100 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_SPI_Transmit+0xe6>
 8004070:	8afb      	ldrh	r3, [r7, #22]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d13e      	bne.n	80040f4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800407e:	8812      	ldrh	r2, [r2, #0]
 8004080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	1c9a      	adds	r2, r3, #2
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800409a:	e02b      	b.n	80040f4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d112      	bne.n	80040d0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040b2:	8812      	ldrh	r2, [r2, #0]
 80040b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	1c9a      	adds	r2, r3, #2
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80040ce:	e011      	b.n	80040f4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d0:	f7fc fe86 	bl	8000de0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d303      	bcc.n	80040e8 <HAL_SPI_Transmit+0x158>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d102      	bne.n	80040ee <HAL_SPI_Transmit+0x15e>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040f2:	e072      	b.n	80041da <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ce      	bne.n	800409c <HAL_SPI_Transmit+0x10c>
 80040fe:	e04c      	b.n	800419a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_SPI_Transmit+0x17e>
 8004108:	8afb      	ldrh	r3, [r7, #22]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d140      	bne.n	8004190 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004134:	e02c      	b.n	8004190 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d113      	bne.n	800416c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	86da      	strh	r2, [r3, #54]	; 0x36
 800416a:	e011      	b.n	8004190 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416c:	f7fc fe38 	bl	8000de0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad2      	subs	r2, r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d303      	bcc.n	8004184 <HAL_SPI_Transmit+0x1f4>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d102      	bne.n	800418a <HAL_SPI_Transmit+0x1fa>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800418e:	e024      	b.n	80041da <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1cd      	bne.n	8004136 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fb7b 	bl	800489a <SPI_EndRxTxTransaction>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004210:	d112      	bne.n	8004238 <HAL_SPI_Receive+0x44>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10e      	bne.n	8004238 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2204      	movs	r2, #4
 800421e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f8e6 	bl	8004400 <HAL_SPI_TransmitReceive>
 8004234:	4603      	mov	r3, r0
 8004236:	e0df      	b.n	80043f8 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Receive+0x52>
 8004242:	2302      	movs	r3, #2
 8004244:	e0d8      	b.n	80043f8 <HAL_SPI_Receive+0x204>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424e:	f7fc fdc7 	bl	8000de0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d002      	beq.n	8004266 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004260:	2302      	movs	r3, #2
 8004262:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004264:	e0bf      	b.n	80043e6 <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Receive+0x7e>
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004276:	e0b6      	b.n	80043e6 <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2204      	movs	r2, #4
 800427c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042be:	d107      	bne.n	80042d0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d007      	beq.n	80042ee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d161      	bne.n	80043ba <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042f6:	e02d      	b.n	8004354 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d114      	bne.n	8004330 <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	320c      	adds	r2, #12
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800432e:	e011      	b.n	8004354 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004330:	f7fc fd56 	bl	8000de0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d303      	bcc.n	8004348 <HAL_SPI_Receive+0x154>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d102      	bne.n	800434e <HAL_SPI_Receive+0x15a>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004352:	e048      	b.n	80043e6 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1cc      	bne.n	80042f8 <HAL_SPI_Receive+0x104>
 800435e:	e031      	b.n	80043c4 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d113      	bne.n	8004396 <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	68d2      	ldr	r2, [r2, #12]
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004394:	e011      	b.n	80043ba <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004396:	f7fc fd23 	bl	8000de0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d303      	bcc.n	80043ae <HAL_SPI_Receive+0x1ba>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d102      	bne.n	80043b4 <HAL_SPI_Receive+0x1c0>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043b8:	e015      	b.n	80043e6 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1cd      	bne.n	8004360 <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	6839      	ldr	r1, [r7, #0]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa31 	bl	8004830 <SPI_EndRxTransaction>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800440e:	2301      	movs	r3, #1
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x26>
 8004422:	2302      	movs	r3, #2
 8004424:	e188      	b.n	8004738 <HAL_SPI_TransmitReceive+0x338>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442e:	f7fc fcd7 	bl	8000de0 <HAL_GetTick>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004444:	887b      	ldrh	r3, [r7, #2]
 8004446:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800444c:	2b01      	cmp	r3, #1
 800444e:	d00f      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x70>
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004456:	d107      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x68>
 8004460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004464:	2b04      	cmp	r3, #4
 8004466:	d003      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004468:	2302      	movs	r3, #2
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800446e:	e159      	b.n	8004724 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x82>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x82>
 800447c:	887b      	ldrh	r3, [r7, #2]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004488:	e14c      	b.n	8004724 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b04      	cmp	r3, #4
 8004494:	d003      	beq.n	800449e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2205      	movs	r2, #5
 800449a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	887a      	ldrh	r2, [r7, #2]
 80044c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d007      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fa:	d178      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_SPI_TransmitReceive+0x10a>
 8004504:	8b7b      	ldrh	r3, [r7, #26]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d166      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004512:	8812      	ldrh	r2, [r2, #0]
 8004514:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452e:	e053      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d11b      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x176>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x176>
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d113      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004556:	8812      	ldrh	r2, [r2, #0]
 8004558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	1c9a      	adds	r2, r3, #2
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d119      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x1b8>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	68d2      	ldr	r2, [r2, #12]
 8004598:	b292      	uxth	r2, r2
 800459a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b8:	f7fc fc12 	bl	8000de0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1ad2      	subs	r2, r2, r3
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d307      	bcc.n	80045d8 <HAL_SPI_TransmitReceive+0x1d8>
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d003      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045d6:	e0a5      	b.n	8004724 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1a6      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x130>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1a1      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x130>
 80045ec:	e07c      	b.n	80046e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x1fc>
 80045f6:	8b7b      	ldrh	r3, [r7, #26]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d16b      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004622:	e057      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d11c      	bne.n	800466c <HAL_SPI_TransmitReceive+0x26c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d017      	beq.n	800466c <HAL_SPI_TransmitReceive+0x26c>
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d114      	bne.n	800466c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d119      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x2ae>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d014      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	68d2      	ldr	r2, [r2, #12]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046aa:	2301      	movs	r3, #1
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046ae:	f7fc fb97 	bl	8000de0 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	1ad2      	subs	r2, r2, r3
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d303      	bcc.n	80046c6 <HAL_SPI_TransmitReceive+0x2c6>
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d102      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x2cc>
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046d2:	e027      	b.n	8004724 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1a2      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x224>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d19d      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f8d4 	bl	800489a <SPI_EndRxTxTransaction>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004704:	e00e      	b.n	8004724 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004738:	4618      	mov	r0, r3
 800473a:	3730      	adds	r7, #48	; 0x30
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800474e:	b2db      	uxtb	r3, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476c:	e04c      	b.n	8004808 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d048      	beq.n	8004808 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004776:	f7fc fb33 	bl	8000de0 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d202      	bcs.n	800478c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d13d      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	6852      	ldr	r2, [r2, #4]
 8004796:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800479a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a4:	d111      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x6e>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ae:	d004      	beq.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d107      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d2:	d10f      	bne.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e00f      	b.n	8004828 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	401a      	ands	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	429a      	cmp	r2, r3
 8004824:	d1a3      	bne.n	800476e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004844:	d111      	bne.n	800486a <SPI_EndRxTransaction+0x3a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	d004      	beq.n	800485a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d107      	bne.n	800486a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff71 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e000      	b.n	8004892 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af02      	add	r7, sp, #8
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff ff53 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e000      	b.n	80048ce <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e01d      	b.n	8004924 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f815 	bl	800492c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f000 f967 	bl	8004be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d007      	beq.n	800497a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0202 	mvn.w	r2, #2
 80049b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8ee 	bl	8004bac <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8e0 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8f1 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0204 	mvn.w	r2, #4
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8c4 	bl	8004bac <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f8b6 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8c7 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0208 	mvn.w	r2, #8
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2204      	movs	r2, #4
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f89a 	bl	8004bac <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f88c 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f89d 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f870 	bl	8004bac <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f862 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f873 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0201 	mvn.w	r2, #1
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f003 ff3a 	bl	8008980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f902 	bl	8004d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f838 	bl	8004bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0220 	mvn.w	r2, #32
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8cc 	bl	8004d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a40      	ldr	r2, [pc, #256]	; (8004cfc <TIM_Base_SetConfig+0x114>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d00f      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a3d      	ldr	r2, [pc, #244]	; (8004d00 <TIM_Base_SetConfig+0x118>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3c      	ldr	r2, [pc, #240]	; (8004d04 <TIM_Base_SetConfig+0x11c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d007      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3b      	ldr	r2, [pc, #236]	; (8004d08 <TIM_Base_SetConfig+0x120>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3a      	ldr	r2, [pc, #232]	; (8004d0c <TIM_Base_SetConfig+0x124>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2f      	ldr	r2, [pc, #188]	; (8004cfc <TIM_Base_SetConfig+0x114>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02b      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c48:	d027      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <TIM_Base_SetConfig+0x118>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d023      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <TIM_Base_SetConfig+0x11c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01f      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <TIM_Base_SetConfig+0x120>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01b      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <TIM_Base_SetConfig+0x124>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d017      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <TIM_Base_SetConfig+0x128>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <TIM_Base_SetConfig+0x130>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <TIM_Base_SetConfig+0x134>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <TIM_Base_SetConfig+0x138>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <TIM_Base_SetConfig+0x114>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0xf8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a0c      	ldr	r2, [pc, #48]	; (8004d0c <TIM_Base_SetConfig+0x124>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d103      	bne.n	8004ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	615a      	str	r2, [r3, #20]
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40010400 	.word	0x40010400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800
 8004d1c:	40001800 	.word	0x40001800
 8004d20:	40001c00 	.word	0x40001c00
 8004d24:	40002000 	.word	0x40002000

08004d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e03f      	b.n	8004de2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f005 fd4c 	bl	800a814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	; 0x24
 8004d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f829 	bl	8004dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	6912      	ldr	r2, [r2, #16]
 8004da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	6952      	ldr	r2, [r2, #20]
 8004db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	68d2      	ldr	r2, [r2, #12]
 8004dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	6912      	ldr	r2, [r2, #16]
 8004dfe:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e30:	f023 030c 	bic.w	r3, r3, #12
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	430b      	orrs	r3, r1
 8004e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	6952      	ldr	r2, [r2, #20]
 8004e44:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6992      	ldr	r2, [r2, #24]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e58:	f040 80e4 	bne.w	8005024 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4aab      	ldr	r2, [pc, #684]	; (8005110 <UART_SetConfig+0x324>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <UART_SetConfig+0x84>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4aaa      	ldr	r2, [pc, #680]	; (8005114 <UART_SetConfig+0x328>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d16c      	bne.n	8004f4a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681c      	ldr	r4, [r3, #0]
 8004e74:	f7fe fd98 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009a      	lsls	r2, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	4aa2      	ldr	r2, [pc, #648]	; (8005118 <UART_SetConfig+0x32c>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	011d      	lsls	r5, r3, #4
 8004e98:	f7fe fd86 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009a      	lsls	r2, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eb2:	f7fe fd79 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	4a92      	ldr	r2, [pc, #584]	; (8005118 <UART_SetConfig+0x32c>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2264      	movs	r2, #100	; 0x64
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	1af3      	subs	r3, r6, r3
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	3332      	adds	r3, #50	; 0x32
 8004ee0:	4a8d      	ldr	r2, [pc, #564]	; (8005118 <UART_SetConfig+0x32c>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eee:	441d      	add	r5, r3
 8004ef0:	f7fe fd5a 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009a      	lsls	r2, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f0a:	f7fe fd4d 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009a      	lsls	r2, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	4a7c      	ldr	r2, [pc, #496]	; (8005118 <UART_SetConfig+0x32c>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2264      	movs	r2, #100	; 0x64
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	1af3      	subs	r3, r6, r3
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a77      	ldr	r2, [pc, #476]	; (8005118 <UART_SetConfig+0x32c>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	442b      	add	r3, r5
 8004f46:	60a3      	str	r3, [r4, #8]
 8004f48:	e154      	b.n	80051f4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681c      	ldr	r4, [r3, #0]
 8004f4e:	f7fe fd17 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009a      	lsls	r2, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	4a6b      	ldr	r2, [pc, #428]	; (8005118 <UART_SetConfig+0x32c>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011d      	lsls	r5, r3, #4
 8004f72:	f7fe fd05 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f8c:	f7fe fcf8 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009a      	lsls	r2, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	; (8005118 <UART_SetConfig+0x32c>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	2264      	movs	r2, #100	; 0x64
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	1af3      	subs	r3, r6, r3
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	3332      	adds	r3, #50	; 0x32
 8004fba:	4a57      	ldr	r2, [pc, #348]	; (8005118 <UART_SetConfig+0x32c>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fc8:	441d      	add	r5, r3
 8004fca:	f7fe fcd9 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fe4:	f7fe fccc 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009a      	lsls	r2, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	4a46      	ldr	r2, [pc, #280]	; (8005118 <UART_SetConfig+0x32c>)
 8005000:	fba2 2303 	umull	r2, r3, r2, r3
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	2264      	movs	r2, #100	; 0x64
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	1af3      	subs	r3, r6, r3
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	3332      	adds	r3, #50	; 0x32
 8005012:	4a41      	ldr	r2, [pc, #260]	; (8005118 <UART_SetConfig+0x32c>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	442b      	add	r3, r5
 8005020:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005022:	e0e7      	b.n	80051f4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a39      	ldr	r2, [pc, #228]	; (8005110 <UART_SetConfig+0x324>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <UART_SetConfig+0x24c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a38      	ldr	r2, [pc, #224]	; (8005114 <UART_SetConfig+0x328>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d171      	bne.n	800511c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681c      	ldr	r4, [r3, #0]
 800503c:	f7fe fcb4 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8005040:	4602      	mov	r2, r0
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009a      	lsls	r2, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	4a30      	ldr	r2, [pc, #192]	; (8005118 <UART_SetConfig+0x32c>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	011d      	lsls	r5, r3, #4
 8005060:	f7fe fca2 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8005064:	4602      	mov	r2, r0
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009a      	lsls	r2, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	fbb2 f6f3 	udiv	r6, r2, r3
 800507a:	f7fe fc95 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 800507e:	4602      	mov	r2, r0
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009a      	lsls	r2, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <UART_SetConfig+0x32c>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	2264      	movs	r2, #100	; 0x64
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	1af3      	subs	r3, r6, r3
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	3332      	adds	r3, #50	; 0x32
 80050a8:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <UART_SetConfig+0x32c>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b4:	441d      	add	r5, r3
 80050b6:	f7fe fc77 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80050d0:	f7fe fc6a 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009a      	lsls	r2, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <UART_SetConfig+0x32c>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2264      	movs	r2, #100	; 0x64
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	1af3      	subs	r3, r6, r3
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a06      	ldr	r2, [pc, #24]	; (8005118 <UART_SetConfig+0x32c>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	442b      	add	r3, r5
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	e071      	b.n	80051f4 <UART_SetConfig+0x408>
 8005110:	40011000 	.word	0x40011000
 8005114:	40011400 	.word	0x40011400
 8005118:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681c      	ldr	r4, [r3, #0]
 8005120:	f7fe fc2e 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8005124:	4602      	mov	r2, r0
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009a      	lsls	r2, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4a30      	ldr	r2, [pc, #192]	; (80051fc <UART_SetConfig+0x410>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	011d      	lsls	r5, r3, #4
 8005144:	f7fe fc1c 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8005148:	4602      	mov	r2, r0
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009a      	lsls	r2, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	fbb2 f6f3 	udiv	r6, r2, r3
 800515e:	f7fe fc0f 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8005162:	4602      	mov	r2, r0
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009a      	lsls	r2, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	4a20      	ldr	r2, [pc, #128]	; (80051fc <UART_SetConfig+0x410>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2264      	movs	r2, #100	; 0x64
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	1af3      	subs	r3, r6, r3
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	3332      	adds	r3, #50	; 0x32
 800518c:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <UART_SetConfig+0x410>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005198:	441d      	add	r5, r3
 800519a:	f7fe fbf1 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 800519e:	4602      	mov	r2, r0
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009a      	lsls	r2, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80051b4:	f7fe fbe4 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009a      	lsls	r2, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	4a0b      	ldr	r2, [pc, #44]	; (80051fc <UART_SetConfig+0x410>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	2264      	movs	r2, #100	; 0x64
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	1af3      	subs	r3, r6, r3
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	3332      	adds	r3, #50	; 0x32
 80051e2:	4a06      	ldr	r2, [pc, #24]	; (80051fc <UART_SetConfig+0x410>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	442b      	add	r3, r5
 80051f0:	60a3      	str	r3, [r4, #8]
}
 80051f2:	e7ff      	b.n	80051f4 <UART_SetConfig+0x408>
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fc:	51eb851f 	.word	0x51eb851f

08005200 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d029      	beq.n	800526e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800522a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005234:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800523a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005240:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005246:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800524c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005252:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005258:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800525e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e034      	b.n	80052d8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800527a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005284:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800528a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800529e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052a2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052ac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80052b2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80052b8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80052be:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80052c4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d02e      	beq.n	800535e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800530c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	3b01      	subs	r3, #1
 800531a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800531c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	3b01      	subs	r3, #1
 8005324:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005326:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	3b01      	subs	r3, #1
 800532e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005330:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800533a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	3b01      	subs	r3, #1
 8005342:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005344:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	3b01      	subs	r3, #1
 800534c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800534e:	4313      	orrs	r3, r2
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	e03b      	b.n	80053d6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800536a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	3b01      	subs	r3, #1
 8005376:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	3b01      	subs	r3, #1
 800537e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005380:	4313      	orrs	r3, r2
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005394:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80053a4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80053ae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80053b8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	3b01      	subs	r3, #1
 80053c0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80053c2:	4313      	orrs	r3, r2
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005400:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	3b01      	subs	r3, #1
 8005408:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800540a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800541c:	f7fb fce0 	bl	8000de0 <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005422:	e010      	b.n	8005446 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d00c      	beq.n	8005446 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <FMC_SDRAM_SendCommand+0x5e>
 8005432:	f7fb fcd5 	bl	8000de0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d901      	bls.n	8005446 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e006      	b.n	8005454 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b20      	cmp	r3, #32
 8005450:	d0e8      	beq.n	8005424 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005494:	2b84      	cmp	r3, #132	; 0x84
 8005496:	d005      	beq.n	80054a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005498:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	3303      	adds	r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054b6:	f000 fe29 	bl	800610c <vTaskStartScheduler>
  
  return osOK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}

080054c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685c      	ldr	r4, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054d6:	b29e      	uxth	r6, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ffcf 	bl	8005482 <makeFreeRtosPriority>
 80054e4:	4602      	mov	r2, r0
 80054e6:	f107 030c 	add.w	r3, r7, #12
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	9200      	str	r2, [sp, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	4632      	mov	r2, r6
 80054f2:	4629      	mov	r1, r5
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fcab 	bl	8005e50 <xTaskCreate>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d001      	beq.n	8005504 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800550e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <osDelay+0x16>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	e000      	b.n	8005526 <osDelay+0x18>
 8005524:	2301      	movs	r3, #1
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fdbc 	bl	80060a4 <vTaskDelay>
  
  return osOK;
 800552c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f103 0208 	add.w	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f103 0208 	add.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f103 0208 	add.w	r2, r3, #8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d103      	bne.n	80055f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	e00c      	b.n	8005612 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3308      	adds	r3, #8
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e002      	b.n	8005606 <vListInsert+0x2e>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	d9f6      	bls.n	8005600 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6892      	ldr	r2, [r2, #8]
 8005660:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6852      	ldr	r2, [r2, #4]
 800566a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d103      	bne.n	800567e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1e5a      	subs	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b04      	subs	r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b04      	subs	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056d0:	4a0c      	ldr	r2, [pc, #48]	; (8005704 <pxPortInitialiseStack+0x64>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b14      	subs	r3, #20
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b04      	subs	r3, #4
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f06f 0202 	mvn.w	r2, #2
 80056ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b20      	subs	r3, #32
 80056f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	08005709 	.word	0x08005709

08005708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <prvTaskExitError+0x50>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d009      	beq.n	8005730 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e7fe      	b.n	800572e <prvTaskExitError+0x26>
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005742:	bf00      	nop
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0fc      	beq.n	8005744 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000004 	.word	0x20000004
 800575c:	00000000 	.word	0x00000000

08005760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <pxCurrentTCBConst2>)
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	6808      	ldr	r0, [r1, #0]
 8005766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576a:	f380 8809 	msr	PSP, r0
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	4770      	bx	lr
 800577c:	f3af 8000 	nop.w

08005780 <pxCurrentTCBConst2>:
 8005780:	20003ce0 	.word	0x20003ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005788:	4808      	ldr	r0, [pc, #32]	; (80057ac <prvPortStartFirstTask+0x24>)
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f380 8808 	msr	MSP, r0
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f380 8814 	msr	CONTROL, r0
 800579a:	b662      	cpsie	i
 800579c:	b661      	cpsie	f
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	df00      	svc	0
 80057a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057aa:	bf00      	nop
 80057ac:	e000ed08 	.word	0xe000ed08

080057b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057b6:	4b44      	ldr	r3, [pc, #272]	; (80058c8 <xPortStartScheduler+0x118>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a44      	ldr	r2, [pc, #272]	; (80058cc <xPortStartScheduler+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d109      	bne.n	80057d4 <xPortStartScheduler+0x24>
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	e7fe      	b.n	80057d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057d4:	4b3c      	ldr	r3, [pc, #240]	; (80058c8 <xPortStartScheduler+0x118>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3d      	ldr	r2, [pc, #244]	; (80058d0 <xPortStartScheduler+0x120>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d109      	bne.n	80057f2 <xPortStartScheduler+0x42>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e7fe      	b.n	80057f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057f2:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <xPortStartScheduler+0x124>)
 80057f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	22ff      	movs	r2, #255	; 0xff
 8005802:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4b30      	ldr	r3, [pc, #192]	; (80058d8 <xPortStartScheduler+0x128>)
 8005818:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800581a:	4b30      	ldr	r3, [pc, #192]	; (80058dc <xPortStartScheduler+0x12c>)
 800581c:	2207      	movs	r2, #7
 800581e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005820:	e009      	b.n	8005836 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <xPortStartScheduler+0x12c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3b01      	subs	r3, #1
 8005828:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <xPortStartScheduler+0x12c>)
 800582a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	d0ef      	beq.n	8005822 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <xPortStartScheduler+0x12c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1c3 0307 	rsb	r3, r3, #7
 800584a:	2b04      	cmp	r3, #4
 800584c:	d009      	beq.n	8005862 <xPortStartScheduler+0xb2>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	e7fe      	b.n	8005860 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <xPortStartScheduler+0x12c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <xPortStartScheduler+0x12c>)
 800586a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <xPortStartScheduler+0x12c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <xPortStartScheduler+0x12c>)
 8005876:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	b2da      	uxtb	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <xPortStartScheduler+0x130>)
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <xPortStartScheduler+0x130>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800588a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800588c:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <xPortStartScheduler+0x130>)
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <xPortStartScheduler+0x130>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005896:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005898:	f000 f8d6 	bl	8005a48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <xPortStartScheduler+0x134>)
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058a2:	f000 f8f5 	bl	8005a90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <xPortStartScheduler+0x138>)
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <xPortStartScheduler+0x138>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058b2:	f7ff ff69 	bl	8005788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058b6:	f000 fdd5 	bl	8006464 <vTaskSwitchContext>
	prvTaskExitError();
 80058ba:	f7ff ff25 	bl	8005708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	e000ed00 	.word	0xe000ed00
 80058cc:	410fc271 	.word	0x410fc271
 80058d0:	410fc270 	.word	0x410fc270
 80058d4:	e000e400 	.word	0xe000e400
 80058d8:	200000c0 	.word	0x200000c0
 80058dc:	200000c4 	.word	0x200000c4
 80058e0:	e000ed20 	.word	0xe000ed20
 80058e4:	20000004 	.word	0x20000004
 80058e8:	e000ef34 	.word	0xe000ef34

080058ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <vPortEnterCritical+0x54>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <vPortEnterCritical+0x54>)
 800590c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <vPortEnterCritical+0x54>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10e      	bne.n	8005934 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <vPortEnterCritical+0x58>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <vPortEnterCritical+0x48>
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	e7fe      	b.n	8005932 <vPortEnterCritical+0x46>
	}
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000004 	.word	0x20000004
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <vPortExitCritical+0x4c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <vPortExitCritical+0x22>
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e7fe      	b.n	8005968 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <vPortExitCritical+0x4c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3b01      	subs	r3, #1
 8005970:	4a08      	ldr	r2, [pc, #32]	; (8005994 <vPortExitCritical+0x4c>)
 8005972:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <vPortExitCritical+0x4c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <vPortExitCritical+0x3e>
 800597c:	2300      	movs	r3, #0
 800597e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000004 	.word	0x20000004
	...

080059a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059a0:	f3ef 8009 	mrs	r0, PSP
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <pxCurrentTCBConst>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f01e 0f10 	tst.w	lr, #16
 80059b0:	bf08      	it	eq
 80059b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059c4:	f380 8811 	msr	BASEPRI, r0
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f000 fd48 	bl	8006464 <vTaskSwitchContext>
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f380 8811 	msr	BASEPRI, r0
 80059dc:	bc09      	pop	{r0, r3}
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e6:	f01e 0f10 	tst.w	lr, #16
 80059ea:	bf08      	it	eq
 80059ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059f0:	f380 8809 	msr	PSP, r0
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst>:
 8005a00:	20003ce0 	.word	0x20003ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a20:	f000 fc64 	bl	80062ec <xTaskIncrementTick>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <SysTick_Handler+0x3c>)
 8005a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	2300      	movs	r3, #0
 8005a34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	e000ed04 	.word	0xe000ed04

08005a48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <vPortSetupTimerInterrupt+0x34>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortSetupTimerInterrupt+0x38>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a58:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <vPortSetupTimerInterrupt+0x3c>)
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <vPortSetupTimerInterrupt+0x40>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	490b      	ldr	r1, [pc, #44]	; (8005a8c <vPortSetupTimerInterrupt+0x44>)
 8005a60:	fba1 1303 	umull	r1, r3, r1, r3
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	3b01      	subs	r3, #1
 8005a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <vPortSetupTimerInterrupt+0x34>)
 8005a6c:	2207      	movs	r2, #7
 8005a6e:	601a      	str	r2, [r3, #0]
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	e000e010 	.word	0xe000e010
 8005a80:	e000e018 	.word	0xe000e018
 8005a84:	e000e014 	.word	0xe000e014
 8005a88:	200000a0 	.word	0x200000a0
 8005a8c:	10624dd3 	.word	0x10624dd3

08005a90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005aa0 <vPortEnableVFP+0x10>
 8005a94:	6801      	ldr	r1, [r0, #0]
 8005a96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a9a:	6001      	str	r1, [r0, #0]
 8005a9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a9e:	bf00      	nop
 8005aa0:	e000ed88 	.word	0xe000ed88

08005aa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ab0:	f000 fb72 	bl	8006198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ab4:	4b57      	ldr	r3, [pc, #348]	; (8005c14 <pvPortMalloc+0x170>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005abc:	f000 f90c 	bl	8005cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ac0:	4b55      	ldr	r3, [pc, #340]	; (8005c18 <pvPortMalloc+0x174>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f040 808c 	bne.w	8005be6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01c      	beq.n	8005b0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d013      	beq.n	8005b0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f023 0307 	bic.w	r3, r3, #7
 8005aec:	3308      	adds	r3, #8
 8005aee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <pvPortMalloc+0x6a>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e7fe      	b.n	8005b0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d068      	beq.n	8005be6 <pvPortMalloc+0x142>
 8005b14:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <pvPortMalloc+0x178>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d863      	bhi.n	8005be6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b1e:	4b40      	ldr	r3, [pc, #256]	; (8005c20 <pvPortMalloc+0x17c>)
 8005b20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b22:	4b3f      	ldr	r3, [pc, #252]	; (8005c20 <pvPortMalloc+0x17c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b28:	e004      	b.n	8005b34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d203      	bcs.n	8005b46 <pvPortMalloc+0xa2>
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f1      	bne.n	8005b2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <pvPortMalloc+0x170>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d04a      	beq.n	8005be6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2208      	movs	r2, #8
 8005b56:	4413      	add	r3, r2
 8005b58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1ad2      	subs	r2, r2, r3
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d91e      	bls.n	8005bb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <pvPortMalloc+0xf4>
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	e7fe      	b.n	8005b96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005baa:	69b8      	ldr	r0, [r7, #24]
 8005bac:	f000 f8f6 	bl	8005d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <pvPortMalloc+0x178>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <pvPortMalloc+0x178>)
 8005bbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bbe:	4b17      	ldr	r3, [pc, #92]	; (8005c1c <pvPortMalloc+0x178>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <pvPortMalloc+0x180>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d203      	bcs.n	8005bd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <pvPortMalloc+0x178>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <pvPortMalloc+0x180>)
 8005bd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <pvPortMalloc+0x174>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005be6:	f000 fae5 	bl	80061b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <pvPortMalloc+0x164>
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e7fe      	b.n	8005c06 <pvPortMalloc+0x162>
	return pvReturn;
 8005c08:	69fb      	ldr	r3, [r7, #28]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20003cd0 	.word	0x20003cd0
 8005c18:	20003cdc 	.word	0x20003cdc
 8005c1c:	20003cd4 	.word	0x20003cd4
 8005c20:	20003cc8 	.word	0x20003cc8
 8005c24:	20003cd8 	.word	0x20003cd8

08005c28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d046      	beq.n	8005cc8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <vPortFree+0xa8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <vPortFree+0x42>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e7fe      	b.n	8005c68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <vPortFree+0x5e>
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	e7fe      	b.n	8005c84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <vPortFree+0xa8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d019      	beq.n	8005cc8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d115      	bne.n	8005cc8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <vPortFree+0xa8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cac:	f000 fa74 	bl	8006198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <vPortFree+0xac>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	4a06      	ldr	r2, [pc, #24]	; (8005cd4 <vPortFree+0xac>)
 8005cbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cbe:	6938      	ldr	r0, [r7, #16]
 8005cc0:	f000 f86c 	bl	8005d9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cc4:	f000 fa76 	bl	80061b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20003cdc 	.word	0x20003cdc
 8005cd4:	20003cd4 	.word	0x20003cd4

08005cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cde:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ce4:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <prvHeapInit+0xac>)
 8005ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3307      	adds	r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0307 	bic.w	r3, r3, #7
 8005cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <prvHeapInit+0xac>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d10:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <prvHeapInit+0xb0>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d16:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <prvHeapInit+0xb0>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d24:	2208      	movs	r2, #8
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0307 	bic.w	r3, r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <prvHeapInit+0xb4>)
 8005d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d3a:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <prvHeapInit+0xb4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <prvHeapInit+0xb4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <prvHeapInit+0xb4>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <prvHeapInit+0xb8>)
 8005d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <prvHeapInit+0xbc>)
 8005d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d70:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <prvHeapInit+0xc0>)
 8005d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d76:	601a      	str	r2, [r3, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	200000c8 	.word	0x200000c8
 8005d88:	20003cc8 	.word	0x20003cc8
 8005d8c:	20003cd0 	.word	0x20003cd0
 8005d90:	20003cd8 	.word	0x20003cd8
 8005d94:	20003cd4 	.word	0x20003cd4
 8005d98:	20003cdc 	.word	0x20003cdc

08005d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <prvInsertBlockIntoFreeList+0xac>)
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e002      	b.n	8005db0 <prvInsertBlockIntoFreeList+0x14>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3f7      	bcc.n	8005daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d108      	bne.n	8005dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d118      	bne.n	8005e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <prvInsertBlockIntoFreeList+0xb0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d00d      	beq.n	8005e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e008      	b.n	8005e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvInsertBlockIntoFreeList+0xb0>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e003      	b.n	8005e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d002      	beq.n	8005e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20003cc8 	.word	0x20003cc8
 8005e4c:	20003cd0 	.word	0x20003cd0

08005e50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	; 0x30
 8005e54:	af04      	add	r7, sp, #16
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fe1d 	bl	8005aa4 <pvPortMalloc>
 8005e6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e72:	2054      	movs	r0, #84	; 0x54
 8005e74:	f7ff fe16 	bl	8005aa4 <pvPortMalloc>
 8005e78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30
 8005e86:	e005      	b.n	8005e94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e88:	6978      	ldr	r0, [r7, #20]
 8005e8a:	f7ff fecd 	bl	8005c28 <vPortFree>
 8005e8e:	e001      	b.n	8005e94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d013      	beq.n	8005ec2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	9302      	str	r3, [sp, #8]
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f80e 	bl	8005ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb6:	69f8      	ldr	r0, [r7, #28]
 8005eb8:	f000 f88a 	bl	8005fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	e002      	b.n	8005ec8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b088      	sub	sp, #32
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005eea:	3b01      	subs	r3, #1
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f023 0307 	bic.w	r3, r3, #7
 8005ef8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <prvInitialiseNewTask+0x46>
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e7fe      	b.n	8005f16 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e012      	b.n	8005f44 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3334      	adds	r3, #52	; 0x34
 8005f2e:	460a      	mov	r2, r1
 8005f30:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d006      	beq.n	8005f4c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3301      	adds	r3, #1
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d9e9      	bls.n	8005f1e <prvInitialiseNewTask+0x4c>
 8005f4a:	e000      	b.n	8005f4e <prvInitialiseNewTask+0x7c>
		{
			break;
 8005f4c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d901      	bls.n	8005f60 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	2200      	movs	r2, #0
 8005f70:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	3304      	adds	r3, #4
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fafd 	bl	8005576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff faf8 	bl	8005576 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	f1c3 0207 	rsb	r2, r3, #7
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	68f9      	ldr	r1, [r7, #12]
 8005fae:	69b8      	ldr	r0, [r7, #24]
 8005fb0:	f7ff fb76 	bl	80056a0 <pxPortInitialiseStack>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fd8:	f7ff fc88 	bl	80058ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fdc:	4b2a      	ldr	r3, [pc, #168]	; (8006088 <prvAddNewTaskToReadyList+0xb8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	4a29      	ldr	r2, [pc, #164]	; (8006088 <prvAddNewTaskToReadyList+0xb8>)
 8005fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fe6:	4b29      	ldr	r3, [pc, #164]	; (800608c <prvAddNewTaskToReadyList+0xbc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fee:	4a27      	ldr	r2, [pc, #156]	; (800608c <prvAddNewTaskToReadyList+0xbc>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <prvAddNewTaskToReadyList+0xb8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d110      	bne.n	800601e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ffc:	f000 faa4 	bl	8006548 <prvInitialiseTaskLists>
 8006000:	e00d      	b.n	800601e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006002:	4b23      	ldr	r3, [pc, #140]	; (8006090 <prvAddNewTaskToReadyList+0xc0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <prvAddNewTaskToReadyList+0xbc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	429a      	cmp	r2, r3
 8006016:	d802      	bhi.n	800601e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006018:	4a1c      	ldr	r2, [pc, #112]	; (800608c <prvAddNewTaskToReadyList+0xbc>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800601e:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <prvAddNewTaskToReadyList+0xc4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <prvAddNewTaskToReadyList+0xc4>)
 8006026:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <prvAddNewTaskToReadyList+0xc8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <prvAddNewTaskToReadyList+0xc8>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4a15      	ldr	r2, [pc, #84]	; (800609c <prvAddNewTaskToReadyList+0xcc>)
 8006048:	441a      	add	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f7ff fa9d 	bl	8005590 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006056:	f7ff fc77 	bl	8005948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800605a:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <prvAddNewTaskToReadyList+0xc0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00e      	beq.n	8006080 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <prvAddNewTaskToReadyList+0xbc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	429a      	cmp	r2, r3
 800606e:	d207      	bcs.n	8006080 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <prvAddNewTaskToReadyList+0xd0>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20003de0 	.word	0x20003de0
 800608c:	20003ce0 	.word	0x20003ce0
 8006090:	20003dec 	.word	0x20003dec
 8006094:	20003dfc 	.word	0x20003dfc
 8006098:	20003de8 	.word	0x20003de8
 800609c:	20003ce4 	.word	0x20003ce4
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <vTaskDelay+0x60>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <vTaskDelay+0x2e>
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60bb      	str	r3, [r7, #8]
 80060d0:	e7fe      	b.n	80060d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80060d2:	f000 f861 	bl	8006198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060d6:	2100      	movs	r1, #0
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fad7 	bl	800668c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060de:	f000 f869 	bl	80061b4 <xTaskResumeAll>
 80060e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80060ea:	4b07      	ldr	r3, [pc, #28]	; (8006108 <vTaskDelay+0x64>)
 80060ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20003e08 	.word	0x20003e08
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006112:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <vTaskStartScheduler+0x74>)
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	2300      	movs	r3, #0
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	2280      	movs	r2, #128	; 0x80
 800611e:	4919      	ldr	r1, [pc, #100]	; (8006184 <vTaskStartScheduler+0x78>)
 8006120:	4819      	ldr	r0, [pc, #100]	; (8006188 <vTaskStartScheduler+0x7c>)
 8006122:	f7ff fe95 	bl	8005e50 <xTaskCreate>
 8006126:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d115      	bne.n	800615a <vTaskStartScheduler+0x4e>
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <vTaskStartScheduler+0x80>)
 8006142:	f04f 32ff 	mov.w	r2, #4294967295
 8006146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <vTaskStartScheduler+0x84>)
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <vTaskStartScheduler+0x88>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006154:	f7ff fb2c 	bl	80057b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006158:	e00d      	b.n	8006176 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d109      	bne.n	8006176 <vTaskStartScheduler+0x6a>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	e7fe      	b.n	8006174 <vTaskStartScheduler+0x68>
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20003e04 	.word	0x20003e04
 8006184:	0800aa34 	.word	0x0800aa34
 8006188:	08006519 	.word	0x08006519
 800618c:	20003e00 	.word	0x20003e00
 8006190:	20003dec 	.word	0x20003dec
 8006194:	20003de4 	.word	0x20003de4

08006198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800619c:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <vTaskSuspendAll+0x18>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <vTaskSuspendAll+0x18>)
 80061a4:	6013      	str	r3, [r2, #0]
}
 80061a6:	bf00      	nop
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20003e08 	.word	0x20003e08

080061b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061c2:	4b41      	ldr	r3, [pc, #260]	; (80062c8 <xTaskResumeAll+0x114>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <xTaskResumeAll+0x2a>
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	e7fe      	b.n	80061dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061de:	f7ff fb85 	bl	80058ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061e2:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <xTaskResumeAll+0x114>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a37      	ldr	r2, [pc, #220]	; (80062c8 <xTaskResumeAll+0x114>)
 80061ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ec:	4b36      	ldr	r3, [pc, #216]	; (80062c8 <xTaskResumeAll+0x114>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d161      	bne.n	80062b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061f4:	4b35      	ldr	r3, [pc, #212]	; (80062cc <xTaskResumeAll+0x118>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05d      	beq.n	80062b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061fc:	e02e      	b.n	800625c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061fe:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <xTaskResumeAll+0x11c>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3318      	adds	r3, #24
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fa1d 	bl	800564a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa18 	bl	800564a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	2201      	movs	r2, #1
 8006220:	409a      	lsls	r2, r3
 8006222:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <xTaskResumeAll+0x120>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <xTaskResumeAll+0x120>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <xTaskResumeAll+0x124>)
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7ff f9a4 	bl	8005590 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4b23      	ldr	r3, [pc, #140]	; (80062dc <xTaskResumeAll+0x128>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006256:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <xTaskResumeAll+0x12c>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800625c:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <xTaskResumeAll+0x11c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1cc      	bne.n	80061fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800626a:	f000 f9e9 	bl	8006640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800626e:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <xTaskResumeAll+0x130>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d010      	beq.n	800629c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800627a:	f000 f837 	bl	80062ec <xTaskIncrementTick>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006284:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <xTaskResumeAll+0x12c>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3b01      	subs	r3, #1
 800628e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f1      	bne.n	800627a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <xTaskResumeAll+0x130>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <xTaskResumeAll+0x12c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062a8:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <xTaskResumeAll+0x134>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062b8:	f7ff fb46 	bl	8005948 <vPortExitCritical>

	return xAlreadyYielded;
 80062bc:	68bb      	ldr	r3, [r7, #8]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20003e08 	.word	0x20003e08
 80062cc:	20003de0 	.word	0x20003de0
 80062d0:	20003da0 	.word	0x20003da0
 80062d4:	20003de8 	.word	0x20003de8
 80062d8:	20003ce4 	.word	0x20003ce4
 80062dc:	20003ce0 	.word	0x20003ce0
 80062e0:	20003df4 	.word	0x20003df4
 80062e4:	20003df0 	.word	0x20003df0
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f6:	4b50      	ldr	r3, [pc, #320]	; (8006438 <xTaskIncrementTick+0x14c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 808c 	bne.w	8006418 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006300:	4b4e      	ldr	r3, [pc, #312]	; (800643c <xTaskIncrementTick+0x150>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006308:	4a4c      	ldr	r2, [pc, #304]	; (800643c <xTaskIncrementTick+0x150>)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d11f      	bne.n	8006354 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006314:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <xTaskIncrementTick+0x154>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <xTaskIncrementTick+0x46>
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	e7fe      	b.n	8006330 <xTaskIncrementTick+0x44>
 8006332:	4b43      	ldr	r3, [pc, #268]	; (8006440 <xTaskIncrementTick+0x154>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	4b42      	ldr	r3, [pc, #264]	; (8006444 <xTaskIncrementTick+0x158>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a40      	ldr	r2, [pc, #256]	; (8006440 <xTaskIncrementTick+0x154>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4a40      	ldr	r2, [pc, #256]	; (8006444 <xTaskIncrementTick+0x158>)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b40      	ldr	r3, [pc, #256]	; (8006448 <xTaskIncrementTick+0x15c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3301      	adds	r3, #1
 800634c:	4a3e      	ldr	r2, [pc, #248]	; (8006448 <xTaskIncrementTick+0x15c>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	f000 f976 	bl	8006640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006354:	4b3d      	ldr	r3, [pc, #244]	; (800644c <xTaskIncrementTick+0x160>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	429a      	cmp	r2, r3
 800635c:	d34d      	bcc.n	80063fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800635e:	4b38      	ldr	r3, [pc, #224]	; (8006440 <xTaskIncrementTick+0x154>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <xTaskIncrementTick+0x80>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <xTaskIncrementTick+0x82>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006372:	4b36      	ldr	r3, [pc, #216]	; (800644c <xTaskIncrementTick+0x160>)
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	601a      	str	r2, [r3, #0]
					break;
 800637a:	e03e      	b.n	80063fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800637c:	4b30      	ldr	r3, [pc, #192]	; (8006440 <xTaskIncrementTick+0x154>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d203      	bcs.n	800639c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006394:	4a2d      	ldr	r2, [pc, #180]	; (800644c <xTaskIncrementTick+0x160>)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6013      	str	r3, [r2, #0]
						break;
 800639a:	e02e      	b.n	80063fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3304      	adds	r3, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff f952 	bl	800564a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	3318      	adds	r3, #24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff f949 	bl	800564a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	2201      	movs	r2, #1
 80063be:	409a      	lsls	r2, r3
 80063c0:	4b23      	ldr	r3, [pc, #140]	; (8006450 <xTaskIncrementTick+0x164>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	4a22      	ldr	r2, [pc, #136]	; (8006450 <xTaskIncrementTick+0x164>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4a1f      	ldr	r2, [pc, #124]	; (8006454 <xTaskIncrementTick+0x168>)
 80063d8:	441a      	add	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	3304      	adds	r3, #4
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7ff f8d5 	bl	8005590 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <xTaskIncrementTick+0x16c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d3b4      	bcc.n	800635e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063f4:	2301      	movs	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f8:	e7b1      	b.n	800635e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063fa:	4b17      	ldr	r3, [pc, #92]	; (8006458 <xTaskIncrementTick+0x16c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	4914      	ldr	r1, [pc, #80]	; (8006454 <xTaskIncrementTick+0x168>)
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d907      	bls.n	8006422 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006412:	2301      	movs	r3, #1
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	e004      	b.n	8006422 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006418:	4b10      	ldr	r3, [pc, #64]	; (800645c <xTaskIncrementTick+0x170>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	4a0f      	ldr	r2, [pc, #60]	; (800645c <xTaskIncrementTick+0x170>)
 8006420:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <xTaskIncrementTick+0x174>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800642a:	2301      	movs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800642e:	697b      	ldr	r3, [r7, #20]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20003e08 	.word	0x20003e08
 800643c:	20003de4 	.word	0x20003de4
 8006440:	20003d98 	.word	0x20003d98
 8006444:	20003d9c 	.word	0x20003d9c
 8006448:	20003df8 	.word	0x20003df8
 800644c:	20003e00 	.word	0x20003e00
 8006450:	20003de8 	.word	0x20003de8
 8006454:	20003ce4 	.word	0x20003ce4
 8006458:	20003ce0 	.word	0x20003ce0
 800645c:	20003df0 	.word	0x20003df0
 8006460:	20003df4 	.word	0x20003df4

08006464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <vTaskSwitchContext+0xa0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006472:	4b25      	ldr	r3, [pc, #148]	; (8006508 <vTaskSwitchContext+0xa4>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006478:	e03e      	b.n	80064f8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800647a:	4b23      	ldr	r3, [pc, #140]	; (8006508 <vTaskSwitchContext+0xa4>)
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006480:	4b22      	ldr	r3, [pc, #136]	; (800650c <vTaskSwitchContext+0xa8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	fab3 f383 	clz	r3, r3
 800648c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	f1c3 031f 	rsb	r3, r3, #31
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	491e      	ldr	r1, [pc, #120]	; (8006510 <vTaskSwitchContext+0xac>)
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <vTaskSwitchContext+0x5a>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	e7fe      	b.n	80064bc <vTaskSwitchContext+0x58>
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4a11      	ldr	r2, [pc, #68]	; (8006510 <vTaskSwitchContext+0xac>)
 80064ca:	4413      	add	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	605a      	str	r2, [r3, #4]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3308      	adds	r3, #8
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d104      	bne.n	80064ee <vTaskSwitchContext+0x8a>
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a07      	ldr	r2, [pc, #28]	; (8006514 <vTaskSwitchContext+0xb0>)
 80064f6:	6013      	str	r3, [r2, #0]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20003e08 	.word	0x20003e08
 8006508:	20003df4 	.word	0x20003df4
 800650c:	20003de8 	.word	0x20003de8
 8006510:	20003ce4 	.word	0x20003ce4
 8006514:	20003ce0 	.word	0x20003ce0

08006518 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006520:	f000 f852 	bl	80065c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <prvIdleTask+0x28>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d9f9      	bls.n	8006520 <prvIdleTask+0x8>
			{
				taskYIELD();
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <prvIdleTask+0x2c>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800653c:	e7f0      	b.n	8006520 <prvIdleTask+0x8>
 800653e:	bf00      	nop
 8006540:	20003ce4 	.word	0x20003ce4
 8006544:	e000ed04 	.word	0xe000ed04

08006548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	e00c      	b.n	800656e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <prvInitialiseTaskLists+0x60>)
 8006560:	4413      	add	r3, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe ffe7 	bl	8005536 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3301      	adds	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b06      	cmp	r3, #6
 8006572:	d9ef      	bls.n	8006554 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <prvInitialiseTaskLists+0x64>)
 8006576:	f7fe ffde 	bl	8005536 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800657a:	480d      	ldr	r0, [pc, #52]	; (80065b0 <prvInitialiseTaskLists+0x68>)
 800657c:	f7fe ffdb 	bl	8005536 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006580:	480c      	ldr	r0, [pc, #48]	; (80065b4 <prvInitialiseTaskLists+0x6c>)
 8006582:	f7fe ffd8 	bl	8005536 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006586:	480c      	ldr	r0, [pc, #48]	; (80065b8 <prvInitialiseTaskLists+0x70>)
 8006588:	f7fe ffd5 	bl	8005536 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800658c:	480b      	ldr	r0, [pc, #44]	; (80065bc <prvInitialiseTaskLists+0x74>)
 800658e:	f7fe ffd2 	bl	8005536 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <prvInitialiseTaskLists+0x78>)
 8006594:	4a05      	ldr	r2, [pc, #20]	; (80065ac <prvInitialiseTaskLists+0x64>)
 8006596:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <prvInitialiseTaskLists+0x7c>)
 800659a:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <prvInitialiseTaskLists+0x68>)
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20003ce4 	.word	0x20003ce4
 80065ac:	20003d70 	.word	0x20003d70
 80065b0:	20003d84 	.word	0x20003d84
 80065b4:	20003da0 	.word	0x20003da0
 80065b8:	20003db4 	.word	0x20003db4
 80065bc:	20003dcc 	.word	0x20003dcc
 80065c0:	20003d98 	.word	0x20003d98
 80065c4:	20003d9c 	.word	0x20003d9c

080065c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ce:	e019      	b.n	8006604 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065d0:	f7ff f98c 	bl	80058ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065d4:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <prvCheckTasksWaitingTermination+0x4c>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff f832 	bl	800564a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <prvCheckTasksWaitingTermination+0x50>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <prvCheckTasksWaitingTermination+0x50>)
 80065ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvCheckTasksWaitingTermination+0x54>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <prvCheckTasksWaitingTermination+0x54>)
 80065f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065fa:	f7ff f9a5 	bl	8005948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f80e 	bl	8006620 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <prvCheckTasksWaitingTermination+0x54>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e1      	bne.n	80065d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20003db4 	.word	0x20003db4
 8006618:	20003de0 	.word	0x20003de0
 800661c:	20003dc8 	.word	0x20003dc8

08006620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fafb 	bl	8005c28 <vPortFree>
			vPortFree( pxTCB );
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff faf8 	bl	8005c28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <prvResetNextTaskUnblockTime+0x44>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <prvResetNextTaskUnblockTime+0x14>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <prvResetNextTaskUnblockTime+0x16>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <prvResetNextTaskUnblockTime+0x48>)
 800665c:	f04f 32ff 	mov.w	r2, #4294967295
 8006660:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006662:	e008      	b.n	8006676 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <prvResetNextTaskUnblockTime+0x44>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a05      	ldr	r2, [pc, #20]	; (8006688 <prvResetNextTaskUnblockTime+0x48>)
 8006674:	6013      	str	r3, [r2, #0]
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20003d98 	.word	0x20003d98
 8006688:	20003e00 	.word	0x20003e00

0800668c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006696:	4b29      	ldr	r3, [pc, #164]	; (800673c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe ffd1 	bl	800564a <uxListRemove>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43da      	mvns	r2, r3
 80066bc:	4b21      	ldr	r3, [pc, #132]	; (8006744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	4a20      	ldr	r2, [pc, #128]	; (8006744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d10a      	bne.n	80066e4 <prvAddCurrentTaskToDelayedList+0x58>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d4:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	481a      	ldr	r0, [pc, #104]	; (8006748 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066de:	f7fe ff57 	bl	8005590 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066e2:	e026      	b.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4413      	add	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d209      	bcs.n	8006710 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066fc:	4b13      	ldr	r3, [pc, #76]	; (800674c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fe ff65 	bl	80055d8 <vListInsert>
}
 800670e:	e010      	b.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7fe ff5b 	bl	80055d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d202      	bcs.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20003de4 	.word	0x20003de4
 8006740:	20003ce0 	.word	0x20003ce0
 8006744:	20003de8 	.word	0x20003de8
 8006748:	20003dcc 	.word	0x20003dcc
 800674c:	20003d9c 	.word	0x20003d9c
 8006750:	20003d98 	.word	0x20003d98
 8006754:	20003e00 	.word	0x20003e00

08006758 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800675c:	4b0b      	ldr	r3, [pc, #44]	; (800678c <MX_DMA2D_Init+0x34>)
 800675e:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <MX_DMA2D_Init+0x38>)
 8006760:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <MX_DMA2D_Init+0x34>)
 8006764:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006768:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800676a:	4b08      	ldr	r3, [pc, #32]	; (800678c <MX_DMA2D_Init+0x34>)
 800676c:	2200      	movs	r2, #0
 800676e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <MX_DMA2D_Init+0x34>)
 8006772:	2200      	movs	r2, #0
 8006774:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006776:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_DMA2D_Init+0x34>)
 8006778:	f7fa fc40 	bl	8000ffc <HAL_DMA2D_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8006782:	f002 f90f 	bl	80089a4 <Error_Handler>
  }

}
 8006786:	bf00      	nop
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20003f10 	.word	0x20003f10
 8006790:	4002b000 	.word	0x4002b000

08006794 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0b      	ldr	r2, [pc, #44]	; (80067d0 <HAL_DMA2D_MspInit+0x3c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10d      	bne.n	80067c2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <HAL_DMA2D_MspInit+0x40>)
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_DMA2D_MspInit+0x40>)
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067b4:	6313      	str	r3, [r2, #48]	; 0x30
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <HAL_DMA2D_MspInit+0x40>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	4002b000 	.word	0x4002b000
 80067d4:	40023800 	.word	0x40023800

080067d8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80067de:	4b1f      	ldr	r3, [pc, #124]	; (800685c <MX_FMC_Init+0x84>)
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <MX_FMC_Init+0x88>)
 80067e2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80067e4:	4b1d      	ldr	r3, [pc, #116]	; (800685c <MX_FMC_Init+0x84>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80067ea:	4b1c      	ldr	r3, [pc, #112]	; (800685c <MX_FMC_Init+0x84>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80067f0:	4b1a      	ldr	r3, [pc, #104]	; (800685c <MX_FMC_Init+0x84>)
 80067f2:	2204      	movs	r2, #4
 80067f4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <MX_FMC_Init+0x84>)
 80067f8:	2210      	movs	r2, #16
 80067fa:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80067fc:	4b17      	ldr	r3, [pc, #92]	; (800685c <MX_FMC_Init+0x84>)
 80067fe:	2240      	movs	r2, #64	; 0x40
 8006800:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006802:	4b16      	ldr	r3, [pc, #88]	; (800685c <MX_FMC_Init+0x84>)
 8006804:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006808:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800680a:	4b14      	ldr	r3, [pc, #80]	; (800685c <MX_FMC_Init+0x84>)
 800680c:	2200      	movs	r2, #0
 800680e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8006810:	4b12      	ldr	r3, [pc, #72]	; (800685c <MX_FMC_Init+0x84>)
 8006812:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006816:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <MX_FMC_Init+0x84>)
 800681a:	2200      	movs	r2, #0
 800681c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <MX_FMC_Init+0x84>)
 8006820:	2200      	movs	r2, #0
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006824:	2302      	movs	r3, #2
 8006826:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006828:	2307      	movs	r3, #7
 800682a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800682c:	2304      	movs	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006830:	2307      	movs	r3, #7
 8006832:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006834:	2303      	movs	r3, #3
 8006836:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006838:	2302      	movs	r3, #2
 800683a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800683c:	2302      	movs	r3, #2
 800683e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	4619      	mov	r1, r3
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <MX_FMC_Init+0x84>)
 8006846:	f7fd fa99 	bl	8003d7c <HAL_SDRAM_Init>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <MX_FMC_Init+0x7c>
  {
    Error_Handler( );
 8006850:	f002 f8a8 	bl	80089a4 <Error_Handler>
  }

}
 8006854:	bf00      	nop
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20003f50 	.word	0x20003f50
 8006860:	a0000140 	.word	0xa0000140

08006864 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800686a:	4b3c      	ldr	r3, [pc, #240]	; (800695c <HAL_FMC_MspInit+0xf8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d16f      	bne.n	8006952 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8006872:	4b3a      	ldr	r3, [pc, #232]	; (800695c <HAL_FMC_MspInit+0xf8>)
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006878:	2300      	movs	r3, #0
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4a38      	ldr	r2, [pc, #224]	; (8006960 <HAL_FMC_MspInit+0xfc>)
 800687e:	4b38      	ldr	r3, [pc, #224]	; (8006960 <HAL_FMC_MspInit+0xfc>)
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	6393      	str	r3, [r2, #56]	; 0x38
 8006888:	4b35      	ldr	r3, [pc, #212]	; (8006960 <HAL_FMC_MspInit+0xfc>)
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006894:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006898:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689a:	2302      	movs	r3, #2
 800689c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a2:	2303      	movs	r3, #3
 80068a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068a6:	230c      	movs	r3, #12
 80068a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	482d      	ldr	r0, [pc, #180]	; (8006964 <HAL_FMC_MspInit+0x100>)
 80068b0:	f7fa fe2e 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80068b4:	2301      	movs	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c0:	2303      	movs	r3, #3
 80068c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068c4:	230c      	movs	r3, #12
 80068c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4826      	ldr	r0, [pc, #152]	; (8006968 <HAL_FMC_MspInit+0x104>)
 80068ce:	f7fa fe1f 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80068d2:	f248 1333 	movw	r3, #33075	; 0x8133
 80068d6:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d8:	2302      	movs	r3, #2
 80068da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e0:	2303      	movs	r3, #3
 80068e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068e4:	230c      	movs	r3, #12
 80068e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068e8:	1d3b      	adds	r3, r7, #4
 80068ea:	4619      	mov	r1, r3
 80068ec:	481f      	ldr	r0, [pc, #124]	; (800696c <HAL_FMC_MspInit+0x108>)
 80068ee:	f7fa fe0f 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80068f2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80068f6:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f8:	2302      	movs	r3, #2
 80068fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006900:	2303      	movs	r3, #3
 8006902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006904:	230c      	movs	r3, #12
 8006906:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006908:	1d3b      	adds	r3, r7, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4818      	ldr	r0, [pc, #96]	; (8006970 <HAL_FMC_MspInit+0x10c>)
 800690e:	f7fa fdff 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006912:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006916:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006918:	2302      	movs	r3, #2
 800691a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006920:	2303      	movs	r3, #3
 8006922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006924:	230c      	movs	r3, #12
 8006926:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4811      	ldr	r0, [pc, #68]	; (8006974 <HAL_FMC_MspInit+0x110>)
 800692e:	f7fa fdef 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006932:	2360      	movs	r3, #96	; 0x60
 8006934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006936:	2302      	movs	r3, #2
 8006938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800693e:	2303      	movs	r3, #3
 8006940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006942:	230c      	movs	r3, #12
 8006944:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	4619      	mov	r1, r3
 800694a:	480b      	ldr	r0, [pc, #44]	; (8006978 <HAL_FMC_MspInit+0x114>)
 800694c:	f7fa fde0 	bl	8001510 <HAL_GPIO_Init>
 8006950:	e000      	b.n	8006954 <HAL_FMC_MspInit+0xf0>
    return;
 8006952:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20003e0c 	.word	0x20003e0c
 8006960:	40023800 	.word	0x40023800
 8006964:	40021400 	.word	0x40021400
 8006968:	40020800 	.word	0x40020800
 800696c:	40021800 	.word	0x40021800
 8006970:	40021000 	.word	0x40021000
 8006974:	40020c00 	.word	0x40020c00
 8006978:	40020400 	.word	0x40020400

0800697c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006984:	f7ff ff6e 	bl	8006864 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006990:	b5b0      	push	{r4, r5, r7, lr}
 8006992:	b094      	sub	sp, #80	; 0x50
 8006994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	ts_struct = &struktura;
 8006996:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <MX_FREERTOS_Init+0xb4>)
 8006998:	4a2b      	ldr	r2, [pc, #172]	; (8006a48 <MX_FREERTOS_Init+0xb8>)
 800699a:	601a      	str	r2, [r3, #0]
	ts_init(ts_struct);
 800699c:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <MX_FREERTOS_Init+0xb4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 ffdb 	bl	800895c <ts_init>
	initMenu(ts_struct, globalClassHandler);
 80069a6:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <MX_FREERTOS_Init+0xb4>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4b28      	ldr	r3, [pc, #160]	; (8006a4c <MX_FREERTOS_Init+0xbc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	4610      	mov	r0, r2
 80069b2:	f000 ff43 	bl	800783c <initMenu>
		/* definition and creation of mpuTask */
		osThreadDef(mpuTask, StartDefaultTask, osPriorityNormal, 0, 128);
		//empty thread

		/* definition and creation of lcdTask */
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityHigh, 0, 128);
 80069b6:	4b26      	ldr	r3, [pc, #152]	; (8006a50 <MX_FREERTOS_Init+0xc0>)
 80069b8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80069bc:	461d      	mov	r5, r3
 80069be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	6023      	str	r3, [r4, #0]
		lcdTaskHandle = osThreadCreate(osThread(LCD_handling), NULL);
 80069c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fd77 	bl	80054c0 <osThreadCreate>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <MX_FREERTOS_Init+0xc4>)
 80069d6:	601a      	str	r2, [r3, #0]

		/* definition and creation of touchTask */
		osThreadDef(TS_handling, StartTS_handling, osPriorityNormal, 0, 128);
 80069d8:	4b1f      	ldr	r3, [pc, #124]	; (8006a58 <MX_FREERTOS_Init+0xc8>)
 80069da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80069de:	461d      	mov	r5, r3
 80069e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	6023      	str	r3, [r4, #0]
		touchTaskHandle = osThreadCreate(osThread(TS_handling), NULL);
 80069e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069ec:	2100      	movs	r1, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fd66 	bl	80054c0 <osThreadCreate>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <MX_FREERTOS_Init+0xcc>)
 80069f8:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(MPU_handling, StartMPU_handling, osPriorityNormal, 0, 128);
 80069fa:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <MX_FREERTOS_Init+0xd0>)
 80069fc:	f107 0414 	add.w	r4, r7, #20
 8006a00:	461d      	mov	r5, r3
 8006a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a06:	682b      	ldr	r3, [r5, #0]
 8006a08:	6023      	str	r3, [r4, #0]
		mpuTaskHandle = osThreadCreate(osThread(MPU_handling), NULL);
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fd55 	bl	80054c0 <osThreadCreate>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <MX_FREERTOS_Init+0xd4>)
 8006a1a:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(GAME_master, StartGAME_master, osPriorityNormal, 0, 128);
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <MX_FREERTOS_Init+0xd8>)
 8006a1e:	463c      	mov	r4, r7
 8006a20:	461d      	mov	r5, r3
 8006a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	6023      	str	r3, [r4, #0]
		gameTaskHandle = osThreadCreate(osThread(GAME_master), NULL);
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fd46 	bl	80054c0 <osThreadCreate>
 8006a34:	4602      	mov	r2, r0
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <MX_FREERTOS_Init+0xdc>)
 8006a38:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8006a3a:	bf00      	nop
 8006a3c:	3750      	adds	r7, #80	; 0x50
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bdb0      	pop	{r4, r5, r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20003fa8 	.word	0x20003fa8
 8006a48:	20003f88 	.word	0x20003f88
 8006a4c:	20003f98 	.word	0x20003f98
 8006a50:	0800aa4c 	.word	0x0800aa4c
 8006a54:	20003fa4 	.word	0x20003fa4
 8006a58:	0800aa6c 	.word	0x0800aa6c
 8006a5c:	20003f84 	.word	0x20003f84
 8006a60:	0800aa90 	.word	0x0800aa90
 8006a64:	20003f94 	.word	0x20003f94
 8006a68:	0800aab0 	.word	0x0800aab0
 8006a6c:	20003fa0 	.word	0x20003fa0

08006a70 <StartLCD_handling>:
 * @brief Function implementing the lcdTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartLCD_handling(void const * argument) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006a78:	2001      	movs	r0, #1
 8006a7a:	f7fe fd48 	bl	800550e <osDelay>
		if (HAL_GetTick() - startTime >= 50) {
 8006a7e:	f7fa f9af 	bl	8000de0 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <StartLCD_handling+0x40>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b31      	cmp	r3, #49	; 0x31
 8006a8c:	d9f4      	bls.n	8006a78 <StartLCD_handling+0x8>
			flagTouch = 0; //wyzerowanie flagi
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <StartLCD_handling+0x44>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

			Display(globalClassHandler);
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <StartLCD_handling+0x48>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 ff2f 	bl	80078fc <Display>
			Service();
 8006a9e:	f000 ff51 	bl	8007944 <Service>
			startTime = HAL_GetTick(); //eliminacja drgan
 8006aa2:	f7fa f99d 	bl	8000de0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	4b01      	ldr	r3, [pc, #4]	; (8006ab0 <StartLCD_handling+0x40>)
 8006aaa:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8006aac:	e7e4      	b.n	8006a78 <StartLCD_handling+0x8>
 8006aae:	bf00      	nop
 8006ab0:	20003fac 	.word	0x20003fac
 8006ab4:	20003e34 	.word	0x20003e34
 8006ab8:	20003f98 	.word	0x20003f98

08006abc <StartTS_handling>:
 * @brief Function implementing the touchTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTS_handling(void const * argument) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f7fe fd22 	bl	800550e <osDelay>
		BSP_TS_GetState(ts_struct);
 8006aca:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <StartTS_handling+0x40>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f003 fa60 	bl	8009f94 <BSP_TS_GetState>
		if (ts_struct->TouchDetected) {
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <StartTS_handling+0x40>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d006      	beq.n	8006aec <StartTS_handling+0x30>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ae4:	4806      	ldr	r0, [pc, #24]	; (8006b00 <StartTS_handling+0x44>)
 8006ae6:	f7fa ffc9 	bl	8001a7c <HAL_GPIO_WritePin>
 8006aea:	e7eb      	b.n	8006ac4 <StartTS_handling+0x8>
		}
		else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006af2:	4803      	ldr	r0, [pc, #12]	; (8006b00 <StartTS_handling+0x44>)
 8006af4:	f7fa ffc2 	bl	8001a7c <HAL_GPIO_WritePin>
		osDelay(1);
 8006af8:	e7e4      	b.n	8006ac4 <StartTS_handling+0x8>
 8006afa:	bf00      	nop
 8006afc:	20003fa8 	.word	0x20003fa8
 8006b00:	40021800 	.word	0x40021800

08006b04 <StartMPU_handling>:
	}
	/* USER CODE END StartTask03 */
}

/* USER CODE END Header_StartDefaultTask */
void StartMPU_handling(void const * argument) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for (;;) {
		read_gyro(&current_x, &current_y, &current_z);
 8006b0c:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <StartMPU_handling+0x1c>)
 8006b0e:	4905      	ldr	r1, [pc, #20]	; (8006b24 <StartMPU_handling+0x20>)
 8006b10:	4805      	ldr	r0, [pc, #20]	; (8006b28 <StartMPU_handling+0x24>)
 8006b12:	f000 fa69 	bl	8006fe8 <read_gyro>
		//printf("X-Axis: %d ", x);
		//printf("Y-Axis: %d ", y);
		//printf("Z-Axis: %d\r\n", z);
		osDelay(10);
 8006b16:	200a      	movs	r0, #10
 8006b18:	f7fe fcf9 	bl	800550e <osDelay>
		read_gyro(&current_x, &current_y, &current_z);
 8006b1c:	e7f6      	b.n	8006b0c <StartMPU_handling+0x8>
 8006b1e:	bf00      	nop
 8006b20:	20003e24 	.word	0x20003e24
 8006b24:	20003e20 	.word	0x20003e20
 8006b28:	20003e1c 	.word	0x20003e1c

08006b2c <StartGAME_master>:
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE END Header_StartDefaultTask */
void StartGAME_master(void const * argument) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fe fcea 	bl	800550e <osDelay>
		if (HAL_GetTick() - startTimeAntiWindupSystem >= 100) {
 8006b3a:	f7fa f951 	bl	8000de0 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <StartGAME_master+0x114>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b63      	cmp	r3, #99	; 0x63
 8006b48:	d9f4      	bls.n	8006b34 <StartGAME_master+0x8>
			//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			if(current_x - previous_x > 1) x = x + current_x - previous_x;
 8006b4a:	4b3e      	ldr	r3, [pc, #248]	; (8006c44 <StartGAME_master+0x118>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <StartGAME_master+0x11c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	dd09      	ble.n	8006b6c <StartGAME_master+0x40>
 8006b58:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <StartGAME_master+0x120>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <StartGAME_master+0x118>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	441a      	add	r2, r3
 8006b62:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <StartGAME_master+0x11c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	4a38      	ldr	r2, [pc, #224]	; (8006c4c <StartGAME_master+0x120>)
 8006b6a:	6013      	str	r3, [r2, #0]
			if(current_x - previous_x < -1) x = x + current_x - previous_x;
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <StartGAME_master+0x118>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	4b35      	ldr	r3, [pc, #212]	; (8006c48 <StartGAME_master+0x11c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	da09      	bge.n	8006b90 <StartGAME_master+0x64>
 8006b7c:	4b33      	ldr	r3, [pc, #204]	; (8006c4c <StartGAME_master+0x120>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b30      	ldr	r3, [pc, #192]	; (8006c44 <StartGAME_master+0x118>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	441a      	add	r2, r3
 8006b86:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <StartGAME_master+0x11c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <StartGAME_master+0x120>)
 8006b8e:	6013      	str	r3, [r2, #0]

			if(current_y - previous_y > 1) y = y + current_y - previous_y;
 8006b90:	4b2f      	ldr	r3, [pc, #188]	; (8006c50 <StartGAME_master+0x124>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <StartGAME_master+0x128>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	dd09      	ble.n	8006bb2 <StartGAME_master+0x86>
 8006b9e:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <StartGAME_master+0x12c>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <StartGAME_master+0x124>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	441a      	add	r2, r3
 8006ba8:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <StartGAME_master+0x128>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <StartGAME_master+0x12c>)
 8006bb0:	6013      	str	r3, [r2, #0]
			if(current_y - previous_y < -1) y = y + current_y - previous_y;
 8006bb2:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <StartGAME_master+0x124>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <StartGAME_master+0x128>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	da09      	bge.n	8006bd6 <StartGAME_master+0xaa>
 8006bc2:	4b25      	ldr	r3, [pc, #148]	; (8006c58 <StartGAME_master+0x12c>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <StartGAME_master+0x124>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	441a      	add	r2, r3
 8006bcc:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <StartGAME_master+0x128>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <StartGAME_master+0x12c>)
 8006bd4:	6013      	str	r3, [r2, #0]

			if(current_z - previous_z > 1) z = z + current_z - previous_z;
 8006bd6:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <StartGAME_master+0x130>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <StartGAME_master+0x134>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	dd09      	ble.n	8006bf8 <StartGAME_master+0xcc>
 8006be4:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <StartGAME_master+0x138>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <StartGAME_master+0x130>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	441a      	add	r2, r3
 8006bee:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <StartGAME_master+0x134>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	4a1b      	ldr	r2, [pc, #108]	; (8006c64 <StartGAME_master+0x138>)
 8006bf6:	6013      	str	r3, [r2, #0]
			if(current_z - previous_z < -1) z = z + current_z - previous_z;
 8006bf8:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <StartGAME_master+0x130>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <StartGAME_master+0x134>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	da09      	bge.n	8006c1c <StartGAME_master+0xf0>
 8006c08:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <StartGAME_master+0x138>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <StartGAME_master+0x130>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	441a      	add	r2, r3
 8006c12:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <StartGAME_master+0x134>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <StartGAME_master+0x138>)
 8006c1a:	6013      	str	r3, [r2, #0]

			startTimeAntiWindupSystem = HAL_GetTick();
 8006c1c:	f7fa f8e0 	bl	8000de0 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <StartGAME_master+0x114>)
 8006c24:	601a      	str	r2, [r3, #0]
			previous_x = current_x;
 8006c26:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <StartGAME_master+0x118>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <StartGAME_master+0x11c>)
 8006c2c:	6013      	str	r3, [r2, #0]
			previous_y = current_y;
 8006c2e:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <StartGAME_master+0x124>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a08      	ldr	r2, [pc, #32]	; (8006c54 <StartGAME_master+0x128>)
 8006c34:	6013      	str	r3, [r2, #0]
			previous_z = current_z;
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <StartGAME_master+0x130>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <StartGAME_master+0x134>)
 8006c3c:	6013      	str	r3, [r2, #0]
		osDelay(1);
 8006c3e:	e779      	b.n	8006b34 <StartGAME_master+0x8>
 8006c40:	20003f9c 	.word	0x20003f9c
 8006c44:	20003e1c 	.word	0x20003e1c
 8006c48:	20003e28 	.word	0x20003e28
 8006c4c:	20003e10 	.word	0x20003e10
 8006c50:	20003e20 	.word	0x20003e20
 8006c54:	20003e2c 	.word	0x20003e2c
 8006c58:	20003e14 	.word	0x20003e14
 8006c5c:	20003e24 	.word	0x20003e24
 8006c60:	20003e30 	.word	0x20003e30
 8006c64:	20003e18 	.word	0x20003e18

08006c68 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08e      	sub	sp, #56	; 0x38
 8006c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	623b      	str	r3, [r7, #32]
 8006c82:	4a89      	ldr	r2, [pc, #548]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006c84:	4b88      	ldr	r3, [pc, #544]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f043 0304 	orr.w	r3, r3, #4
 8006c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8e:	4b86      	ldr	r3, [pc, #536]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	4a82      	ldr	r2, [pc, #520]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006ca0:	4b81      	ldr	r3, [pc, #516]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	f043 0320 	orr.w	r3, r3, #32
 8006ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8006caa:	4b7f      	ldr	r3, [pc, #508]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	4a7b      	ldr	r2, [pc, #492]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cbc:	4b7a      	ldr	r3, [pc, #488]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc6:	4b78      	ldr	r3, [pc, #480]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	4a74      	ldr	r2, [pc, #464]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cd8:	4b73      	ldr	r3, [pc, #460]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce2:	4b71      	ldr	r3, [pc, #452]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	4a6d      	ldr	r2, [pc, #436]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f043 0302 	orr.w	r3, r3, #2
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfe:	4b6a      	ldr	r3, [pc, #424]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	4a66      	ldr	r2, [pc, #408]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d10:	4b65      	ldr	r3, [pc, #404]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d18:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1a:	4b63      	ldr	r3, [pc, #396]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	4a5f      	ldr	r2, [pc, #380]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d2c:	4b5e      	ldr	r3, [pc, #376]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f043 0310 	orr.w	r3, r3, #16
 8006d34:	6313      	str	r3, [r2, #48]	; 0x30
 8006d36:	4b5c      	ldr	r3, [pc, #368]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	4a58      	ldr	r2, [pc, #352]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d48:	4b57      	ldr	r3, [pc, #348]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f043 0308 	orr.w	r3, r3, #8
 8006d50:	6313      	str	r3, [r2, #48]	; 0x30
 8006d52:	4b55      	ldr	r3, [pc, #340]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2116      	movs	r1, #22
 8006d62:	4852      	ldr	r0, [pc, #328]	; (8006eac <MX_GPIO_Init+0x244>)
 8006d64:	f7fa fe8a 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	4850      	ldr	r0, [pc, #320]	; (8006eb0 <MX_GPIO_Init+0x248>)
 8006d6e:	f7fa fe85 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006d78:	484e      	ldr	r0, [pc, #312]	; (8006eb4 <MX_GPIO_Init+0x24c>)
 8006d7a:	f7fa fe7f 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006d84:	484c      	ldr	r0, [pc, #304]	; (8006eb8 <MX_GPIO_Init+0x250>)
 8006d86:	f7fa fe79 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8006d8a:	2316      	movs	r3, #22
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d96:	2300      	movs	r3, #0
 8006d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4842      	ldr	r0, [pc, #264]	; (8006eac <MX_GPIO_Init+0x244>)
 8006da2:	f7fa fbb5 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8006da6:	f248 0307 	movw	r3, #32775	; 0x8007
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006dac:	4b43      	ldr	r3, [pc, #268]	; (8006ebc <MX_GPIO_Init+0x254>)
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db8:	4619      	mov	r1, r3
 8006dba:	483d      	ldr	r0, [pc, #244]	; (8006eb0 <MX_GPIO_Init+0x248>)
 8006dbc:	f7fa fba8 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4836      	ldr	r0, [pc, #216]	; (8006eb0 <MX_GPIO_Init+0x248>)
 8006dd8:	f7fa fb9a 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8006ddc:	2320      	movs	r3, #32
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006de0:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <MX_GPIO_Init+0x254>)
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8006de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dec:	4619      	mov	r1, r3
 8006dee:	482f      	ldr	r0, [pc, #188]	; (8006eac <MX_GPIO_Init+0x244>)
 8006df0:	f7fa fb8e 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006df4:	2304      	movs	r3, #4
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e04:	4619      	mov	r1, r3
 8006e06:	482e      	ldr	r0, [pc, #184]	; (8006ec0 <MX_GPIO_Init+0x258>)
 8006e08:	f7fa fb82 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006e0c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e12:	2302      	movs	r3, #2
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006e1e:	230c      	movs	r3, #12
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e26:	4619      	mov	r1, r3
 8006e28:	4825      	ldr	r0, [pc, #148]	; (8006ec0 <MX_GPIO_Init+0x258>)
 8006e2a:	f7fa fb71 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e34:	2300      	movs	r3, #0
 8006e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e40:	4619      	mov	r1, r3
 8006e42:	481f      	ldr	r0, [pc, #124]	; (8006ec0 <MX_GPIO_Init+0x258>)
 8006e44:	f7fa fb64 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8006e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4815      	ldr	r0, [pc, #84]	; (8006eb4 <MX_GPIO_Init+0x24c>)
 8006e5e:	f7fa fb57 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8006e62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e70:	2300      	movs	r3, #0
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e78:	4619      	mov	r1, r3
 8006e7a:	480e      	ldr	r0, [pc, #56]	; (8006eb4 <MX_GPIO_Init+0x24c>)
 8006e7c:	f7fa fb48 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8006e80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e86:	2301      	movs	r3, #1
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e96:	4619      	mov	r1, r3
 8006e98:	4807      	ldr	r0, [pc, #28]	; (8006eb8 <MX_GPIO_Init+0x250>)
 8006e9a:	f7fa fb39 	bl	8001510 <HAL_GPIO_Init>

}
 8006e9e:	bf00      	nop
 8006ea0:	3738      	adds	r7, #56	; 0x38
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40020800 	.word	0x40020800
 8006eb0:	40020000 	.word	0x40020000
 8006eb4:	40020c00 	.word	0x40020c00
 8006eb8:	40021800 	.word	0x40021800
 8006ebc:	10120000 	.word	0x10120000
 8006ec0:	40020400 	.word	0x40020400

08006ec4 <writegyro>:
#include "spi.h"
#include "gyro.h"
#include "FreeRTOS.h"
#include "task.h"

void writegyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	f107 0e08 	add.w	lr, r7, #8
 8006ece:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    taskENTER_CRITICAL();
 8006ed2:	f7fe fd0b 	bl	80058ec <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4810      	ldr	r0, [pc, #64]	; (8006f1c <writegyro+0x58>)
 8006edc:	f7fa fdce 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006ee0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006ee4:	2332      	movs	r3, #50	; 0x32
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f107 0008 	add.w	r0, r7, #8
 8006eec:	f7fd f850 	bl	8003f90 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI, &data, 1, 50);
 8006ef0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006ef4:	2332      	movs	r3, #50	; 0x32
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f107 0008 	add.w	r0, r7, #8
 8006efc:	f7fd f848 	bl	8003f90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006f00:	2201      	movs	r2, #1
 8006f02:	2102      	movs	r1, #2
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <writegyro+0x58>)
 8006f06:	f7fa fdb9 	bl	8001a7c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006f0a:	f7fe fd1d 	bl	8005948 <vPortExitCritical>
}
 8006f0e:	bf00      	nop
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f16:	b004      	add	sp, #16
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40020800 	.word	0x40020800

08006f20 <readgyro>:

uint8_t readgyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006f20:	b084      	sub	sp, #16
 8006f22:	b580      	push	{r7, lr}
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	f107 0e08 	add.w	lr, r7, #8
 8006f2a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	address = address | 0x80;
 8006f2e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006f32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    taskENTER_CRITICAL();
 8006f3c:	f7fe fcd6 	bl	80058ec <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006f40:	2200      	movs	r2, #0
 8006f42:	2102      	movs	r1, #2
 8006f44:	4810      	ldr	r0, [pc, #64]	; (8006f88 <readgyro+0x68>)
 8006f46:	f7fa fd99 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006f4a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006f4e:	2332      	movs	r3, #50	; 0x32
 8006f50:	2201      	movs	r2, #1
 8006f52:	f107 0008 	add.w	r0, r7, #8
 8006f56:	f7fd f81b 	bl	8003f90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI, &data, 1, 50);
 8006f5a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006f5e:	2332      	movs	r3, #50	; 0x32
 8006f60:	2201      	movs	r2, #1
 8006f62:	f107 0008 	add.w	r0, r7, #8
 8006f66:	f7fd f945 	bl	80041f4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	4806      	ldr	r0, [pc, #24]	; (8006f88 <readgyro+0x68>)
 8006f70:	f7fa fd84 	bl	8001a7c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006f74:	f7fe fce8 	bl	8005948 <vPortExitCritical>

	return data;
 8006f78:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f84:	b004      	add	sp, #16
 8006f86:	4770      	bx	lr
 8006f88:	40020800 	.word	0x40020800

08006f8c <gyro_init>:

void gyro_init() {
 8006f8c:	b590      	push	{r4, r7, lr}
 8006f8e:	b095      	sub	sp, #84	; 0x54
 8006f90:	af14      	add	r7, sp, #80	; 0x50
	writegyro(hspi5, 0x20, 0x0F);
 8006f92:	4c13      	ldr	r4, [pc, #76]	; (8006fe0 <gyro_init+0x54>)
 8006f94:	230f      	movs	r3, #15
 8006f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f98:	2320      	movs	r3, #32
 8006f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f9c:	4668      	mov	r0, sp
 8006f9e:	f104 0310 	add.w	r3, r4, #16
 8006fa2:	2248      	movs	r2, #72	; 0x48
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f003 fce5 	bl	800a974 <memcpy>
 8006faa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006fae:	f7ff ff89 	bl	8006ec4 <writegyro>
	writegyro(hspi5, 0x23, 0x30);
 8006fb2:	4c0b      	ldr	r4, [pc, #44]	; (8006fe0 <gyro_init+0x54>)
 8006fb4:	2330      	movs	r3, #48	; 0x30
 8006fb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fb8:	2323      	movs	r3, #35	; 0x23
 8006fba:	9312      	str	r3, [sp, #72]	; 0x48
 8006fbc:	4668      	mov	r0, sp
 8006fbe:	f104 0310 	add.w	r3, r4, #16
 8006fc2:	2248      	movs	r2, #72	; 0x48
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f003 fcd5 	bl	800a974 <memcpy>
 8006fca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006fce:	f7ff ff79 	bl	8006ec4 <writegyro>
	HAL_Delay(100);
 8006fd2:	2064      	movs	r0, #100	; 0x64
 8006fd4:	f7f9 ff10 	bl	8000df8 <HAL_Delay>
}
 8006fd8:	bf00      	nop
 8006fda:	3704      	adds	r7, #4
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}
 8006fe0:	20004104 	.word	0x20004104
 8006fe4:	00000000 	.word	0x00000000

08006fe8 <read_gyro>:

void read_gyro(int *gyrox, int *gyroy, int *gyroz) {
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b09d      	sub	sp, #116	; 0x74
 8006fec:	af14      	add	r7, sp, #80	; 0x50
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
	static char datax[2] = { 0 };
	static char datay[2] = { 0 };
	static char dataz[2] = { 0 };
	float xgyro = 0;
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
	float ygyro = 0;
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
	float zgyro = 0;
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
	static float delta[3] = { 0 };
	static float current[3] = { 0 };
	static float time_delay = 10;

	datax[0] = readgyro(hspi5, 0x28, datax[0]);
 8007006:	4bca      	ldr	r3, [pc, #808]	; (8007330 <read_gyro+0x348>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	4cca      	ldr	r4, [pc, #808]	; (8007334 <read_gyro+0x34c>)
 800700c:	9313      	str	r3, [sp, #76]	; 0x4c
 800700e:	2328      	movs	r3, #40	; 0x28
 8007010:	9312      	str	r3, [sp, #72]	; 0x48
 8007012:	4668      	mov	r0, sp
 8007014:	f104 0310 	add.w	r3, r4, #16
 8007018:	2248      	movs	r2, #72	; 0x48
 800701a:	4619      	mov	r1, r3
 800701c:	f003 fcaa 	bl	800a974 <memcpy>
 8007020:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007024:	f7ff ff7c 	bl	8006f20 <readgyro>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	4bc0      	ldr	r3, [pc, #768]	; (8007330 <read_gyro+0x348>)
 800702e:	701a      	strb	r2, [r3, #0]
	datax[1] = readgyro(hspi5, 0x29, datax[1]);
 8007030:	4bbf      	ldr	r3, [pc, #764]	; (8007330 <read_gyro+0x348>)
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	4cbf      	ldr	r4, [pc, #764]	; (8007334 <read_gyro+0x34c>)
 8007036:	9313      	str	r3, [sp, #76]	; 0x4c
 8007038:	2329      	movs	r3, #41	; 0x29
 800703a:	9312      	str	r3, [sp, #72]	; 0x48
 800703c:	4668      	mov	r0, sp
 800703e:	f104 0310 	add.w	r3, r4, #16
 8007042:	2248      	movs	r2, #72	; 0x48
 8007044:	4619      	mov	r1, r3
 8007046:	f003 fc95 	bl	800a974 <memcpy>
 800704a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800704e:	f7ff ff67 	bl	8006f20 <readgyro>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	4bb6      	ldr	r3, [pc, #728]	; (8007330 <read_gyro+0x348>)
 8007058:	705a      	strb	r2, [r3, #1]

	datay[0] = readgyro(hspi5, 0x2A, datay[0]);
 800705a:	4bb7      	ldr	r3, [pc, #732]	; (8007338 <read_gyro+0x350>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4cb5      	ldr	r4, [pc, #724]	; (8007334 <read_gyro+0x34c>)
 8007060:	9313      	str	r3, [sp, #76]	; 0x4c
 8007062:	232a      	movs	r3, #42	; 0x2a
 8007064:	9312      	str	r3, [sp, #72]	; 0x48
 8007066:	4668      	mov	r0, sp
 8007068:	f104 0310 	add.w	r3, r4, #16
 800706c:	2248      	movs	r2, #72	; 0x48
 800706e:	4619      	mov	r1, r3
 8007070:	f003 fc80 	bl	800a974 <memcpy>
 8007074:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007078:	f7ff ff52 	bl	8006f20 <readgyro>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	4bad      	ldr	r3, [pc, #692]	; (8007338 <read_gyro+0x350>)
 8007082:	701a      	strb	r2, [r3, #0]
	datay[1] = readgyro(hspi5, 0x2B, datay[1]);
 8007084:	4bac      	ldr	r3, [pc, #688]	; (8007338 <read_gyro+0x350>)
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	4caa      	ldr	r4, [pc, #680]	; (8007334 <read_gyro+0x34c>)
 800708a:	9313      	str	r3, [sp, #76]	; 0x4c
 800708c:	232b      	movs	r3, #43	; 0x2b
 800708e:	9312      	str	r3, [sp, #72]	; 0x48
 8007090:	4668      	mov	r0, sp
 8007092:	f104 0310 	add.w	r3, r4, #16
 8007096:	2248      	movs	r2, #72	; 0x48
 8007098:	4619      	mov	r1, r3
 800709a:	f003 fc6b 	bl	800a974 <memcpy>
 800709e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070a2:	f7ff ff3d 	bl	8006f20 <readgyro>
 80070a6:	4603      	mov	r3, r0
 80070a8:	461a      	mov	r2, r3
 80070aa:	4ba3      	ldr	r3, [pc, #652]	; (8007338 <read_gyro+0x350>)
 80070ac:	705a      	strb	r2, [r3, #1]

	dataz[0] = readgyro(hspi5, 0x2C, dataz[0]);
 80070ae:	4ba3      	ldr	r3, [pc, #652]	; (800733c <read_gyro+0x354>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	4ca0      	ldr	r4, [pc, #640]	; (8007334 <read_gyro+0x34c>)
 80070b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80070b6:	232c      	movs	r3, #44	; 0x2c
 80070b8:	9312      	str	r3, [sp, #72]	; 0x48
 80070ba:	4668      	mov	r0, sp
 80070bc:	f104 0310 	add.w	r3, r4, #16
 80070c0:	2248      	movs	r2, #72	; 0x48
 80070c2:	4619      	mov	r1, r3
 80070c4:	f003 fc56 	bl	800a974 <memcpy>
 80070c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070cc:	f7ff ff28 	bl	8006f20 <readgyro>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	4b99      	ldr	r3, [pc, #612]	; (800733c <read_gyro+0x354>)
 80070d6:	701a      	strb	r2, [r3, #0]
	dataz[1] = readgyro(hspi5, 0x2D, dataz[1]);
 80070d8:	4b98      	ldr	r3, [pc, #608]	; (800733c <read_gyro+0x354>)
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	4c95      	ldr	r4, [pc, #596]	; (8007334 <read_gyro+0x34c>)
 80070de:	9313      	str	r3, [sp, #76]	; 0x4c
 80070e0:	232d      	movs	r3, #45	; 0x2d
 80070e2:	9312      	str	r3, [sp, #72]	; 0x48
 80070e4:	4668      	mov	r0, sp
 80070e6:	f104 0310 	add.w	r3, r4, #16
 80070ea:	2248      	movs	r2, #72	; 0x48
 80070ec:	4619      	mov	r1, r3
 80070ee:	f003 fc41 	bl	800a974 <memcpy>
 80070f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070f6:	f7ff ff13 	bl	8006f20 <readgyro>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b8f      	ldr	r3, [pc, #572]	; (800733c <read_gyro+0x354>)
 8007100:	705a      	strb	r2, [r3, #1]

	xgyro = datax[1] * 256 + datax[0];
 8007102:	4b8b      	ldr	r3, [pc, #556]	; (8007330 <read_gyro+0x348>)
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	4a89      	ldr	r2, [pc, #548]	; (8007330 <read_gyro+0x348>)
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	4413      	add	r3, r2
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
	if (xgyro > 32767) {
 800711a:	edd7 7a07 	vldr	s15, [r7, #28]
 800711e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8007340 <read_gyro+0x358>
 8007122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	dd07      	ble.n	800713c <read_gyro+0x154>
		xgyro -= 65536;
 800712c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007130:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007344 <read_gyro+0x35c>
 8007134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	ygyro = datay[1] * 256 + datay[0];
 800713c:	4b7e      	ldr	r3, [pc, #504]	; (8007338 <read_gyro+0x350>)
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	4a7d      	ldr	r2, [pc, #500]	; (8007338 <read_gyro+0x350>)
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	4413      	add	r3, r2
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007150:	edc7 7a06 	vstr	s15, [r7, #24]
	if (ygyro > 32767) {
 8007154:	edd7 7a06 	vldr	s15, [r7, #24]
 8007158:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8007340 <read_gyro+0x358>
 800715c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007164:	dd07      	ble.n	8007176 <read_gyro+0x18e>
		ygyro -= 65536;
 8007166:	edd7 7a06 	vldr	s15, [r7, #24]
 800716a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007344 <read_gyro+0x35c>
 800716e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007172:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	zgyro = dataz[1] * 256 + dataz[0];
 8007176:	4b71      	ldr	r3, [pc, #452]	; (800733c <read_gyro+0x354>)
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	4a6f      	ldr	r2, [pc, #444]	; (800733c <read_gyro+0x354>)
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	4413      	add	r3, r2
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (zgyro > 32767) {
 800718e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007192:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007340 <read_gyro+0x358>
 8007196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	dd07      	ble.n	80071b0 <read_gyro+0x1c8>
		zgyro -= 65536;
 80071a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80071a4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007344 <read_gyro+0x35c>
 80071a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071ac:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	xgyro -= 29;
 80071b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80071b4:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80071b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071bc:	edc7 7a07 	vstr	s15, [r7, #28]
	ygyro -= 8;
 80071c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80071c4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80071c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071cc:	edc7 7a06 	vstr	s15, [r7, #24]
	zgyro += 12;
 80071d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80071d4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80071d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071dc:	edc7 7a05 	vstr	s15, [r7, #20]
	xgyro *= 0.07;
 80071e0:	69f8      	ldr	r0, [r7, #28]
 80071e2:	f7f9 f969 	bl	80004b8 <__aeabi_f2d>
 80071e6:	a350      	add	r3, pc, #320	; (adr r3, 8007328 <read_gyro+0x340>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 f9b8 	bl	8000560 <__aeabi_dmul>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4618      	mov	r0, r3
 80071f6:	4621      	mov	r1, r4
 80071f8:	f7f9 fbe4 	bl	80009c4 <__aeabi_d2f>
 80071fc:	4603      	mov	r3, r0
 80071fe:	61fb      	str	r3, [r7, #28]
	ygyro *= 0.07;
 8007200:	69b8      	ldr	r0, [r7, #24]
 8007202:	f7f9 f959 	bl	80004b8 <__aeabi_f2d>
 8007206:	a348      	add	r3, pc, #288	; (adr r3, 8007328 <read_gyro+0x340>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f9a8 	bl	8000560 <__aeabi_dmul>
 8007210:	4603      	mov	r3, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4618      	mov	r0, r3
 8007216:	4621      	mov	r1, r4
 8007218:	f7f9 fbd4 	bl	80009c4 <__aeabi_d2f>
 800721c:	4603      	mov	r3, r0
 800721e:	61bb      	str	r3, [r7, #24]
	zgyro *= 0.07;
 8007220:	6978      	ldr	r0, [r7, #20]
 8007222:	f7f9 f949 	bl	80004b8 <__aeabi_f2d>
 8007226:	a340      	add	r3, pc, #256	; (adr r3, 8007328 <read_gyro+0x340>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 f998 	bl	8000560 <__aeabi_dmul>
 8007230:	4603      	mov	r3, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4618      	mov	r0, r3
 8007236:	4621      	mov	r1, r4
 8007238:	f7f9 fbc4 	bl	80009c4 <__aeabi_d2f>
 800723c:	4603      	mov	r3, r0
 800723e:	617b      	str	r3, [r7, #20]

	delta[0] = xgyro * (time_delay);
 8007240:	4b41      	ldr	r3, [pc, #260]	; (8007348 <read_gyro+0x360>)
 8007242:	ed93 7a00 	vldr	s14, [r3]
 8007246:	edd7 7a07 	vldr	s15, [r7, #28]
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	4b3f      	ldr	r3, [pc, #252]	; (800734c <read_gyro+0x364>)
 8007250:	edc3 7a00 	vstr	s15, [r3]
	current[0] += delta[0];
 8007254:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <read_gyro+0x368>)
 8007256:	ed93 7a00 	vldr	s14, [r3]
 800725a:	4b3c      	ldr	r3, [pc, #240]	; (800734c <read_gyro+0x364>)
 800725c:	edd3 7a00 	vldr	s15, [r3]
 8007260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007264:	4b3a      	ldr	r3, [pc, #232]	; (8007350 <read_gyro+0x368>)
 8007266:	edc3 7a00 	vstr	s15, [r3]

	delta[1] = ygyro * (time_delay);
 800726a:	4b37      	ldr	r3, [pc, #220]	; (8007348 <read_gyro+0x360>)
 800726c:	ed93 7a00 	vldr	s14, [r3]
 8007270:	edd7 7a06 	vldr	s15, [r7, #24]
 8007274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007278:	4b34      	ldr	r3, [pc, #208]	; (800734c <read_gyro+0x364>)
 800727a:	edc3 7a01 	vstr	s15, [r3, #4]
	current[1] += delta[1];
 800727e:	4b34      	ldr	r3, [pc, #208]	; (8007350 <read_gyro+0x368>)
 8007280:	ed93 7a01 	vldr	s14, [r3, #4]
 8007284:	4b31      	ldr	r3, [pc, #196]	; (800734c <read_gyro+0x364>)
 8007286:	edd3 7a01 	vldr	s15, [r3, #4]
 800728a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800728e:	4b30      	ldr	r3, [pc, #192]	; (8007350 <read_gyro+0x368>)
 8007290:	edc3 7a01 	vstr	s15, [r3, #4]

	delta[2] = zgyro * (time_delay);
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <read_gyro+0x360>)
 8007296:	ed93 7a00 	vldr	s14, [r3]
 800729a:	edd7 7a05 	vldr	s15, [r7, #20]
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	4b2a      	ldr	r3, [pc, #168]	; (800734c <read_gyro+0x364>)
 80072a4:	edc3 7a02 	vstr	s15, [r3, #8]
	current[2] += delta[2];
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <read_gyro+0x368>)
 80072aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80072ae:	4b27      	ldr	r3, [pc, #156]	; (800734c <read_gyro+0x364>)
 80072b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80072b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <read_gyro+0x368>)
 80072ba:	edc3 7a02 	vstr	s15, [r3, #8]

	*gyrox = ((int) current[0])/182/6;
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <read_gyro+0x368>)
 80072c0:	edd3 7a00 	vldr	s15, [r3]
 80072c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072c8:	ee17 3a90 	vmov	r3, s15
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <read_gyro+0x36c>)
 80072ce:	fb82 1203 	smull	r1, r2, r2, r3
 80072d2:	441a      	add	r2, r3
 80072d4:	1292      	asrs	r2, r2, #10
 80072d6:	17db      	asrs	r3, r3, #31
 80072d8:	1ad2      	subs	r2, r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]
	*gyroy = ((int) current[1])/182/6;
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <read_gyro+0x368>)
 80072e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80072e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e8:	ee17 3a90 	vmov	r3, s15
 80072ec:	4a19      	ldr	r2, [pc, #100]	; (8007354 <read_gyro+0x36c>)
 80072ee:	fb82 1203 	smull	r1, r2, r2, r3
 80072f2:	441a      	add	r2, r3
 80072f4:	1292      	asrs	r2, r2, #10
 80072f6:	17db      	asrs	r3, r3, #31
 80072f8:	1ad2      	subs	r2, r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	601a      	str	r2, [r3, #0]
	*gyroz = ((int) current[2])/182/6;
 80072fe:	4b14      	ldr	r3, [pc, #80]	; (8007350 <read_gyro+0x368>)
 8007300:	edd3 7a02 	vldr	s15, [r3, #8]
 8007304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007308:	ee17 3a90 	vmov	r3, s15
 800730c:	4a11      	ldr	r2, [pc, #68]	; (8007354 <read_gyro+0x36c>)
 800730e:	fb82 1203 	smull	r1, r2, r2, r3
 8007312:	441a      	add	r2, r3
 8007314:	1292      	asrs	r2, r2, #10
 8007316:	17db      	asrs	r3, r3, #31
 8007318:	1ad2      	subs	r2, r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	1eb851ec 	.word	0x1eb851ec
 800732c:	3fb1eb85 	.word	0x3fb1eb85
 8007330:	20003e38 	.word	0x20003e38
 8007334:	20004104 	.word	0x20004104
 8007338:	20003e3c 	.word	0x20003e3c
 800733c:	20003e40 	.word	0x20003e40
 8007340:	46fffe00 	.word	0x46fffe00
 8007344:	47800000 	.word	0x47800000
 8007348:	20000018 	.word	0x20000018
 800734c:	20003e44 	.word	0x20003e44
 8007350:	20003e50 	.word	0x20003e50
 8007354:	f00f00f1 	.word	0xf00f00f1

08007358 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <MX_I2C3_Init+0x74>)
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <MX_I2C3_Init+0x78>)
 8007360:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <MX_I2C3_Init+0x74>)
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <MX_I2C3_Init+0x7c>)
 8007366:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007368:	4b18      	ldr	r3, [pc, #96]	; (80073cc <MX_I2C3_Init+0x74>)
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <MX_I2C3_Init+0x74>)
 8007370:	2200      	movs	r2, #0
 8007372:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <MX_I2C3_Init+0x74>)
 8007376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800737a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <MX_I2C3_Init+0x74>)
 800737e:	2200      	movs	r2, #0
 8007380:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <MX_I2C3_Init+0x74>)
 8007384:	2200      	movs	r2, #0
 8007386:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007388:	4b10      	ldr	r3, [pc, #64]	; (80073cc <MX_I2C3_Init+0x74>)
 800738a:	2200      	movs	r2, #0
 800738c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <MX_I2C3_Init+0x74>)
 8007390:	2200      	movs	r2, #0
 8007392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007394:	480d      	ldr	r0, [pc, #52]	; (80073cc <MX_I2C3_Init+0x74>)
 8007396:	f7fa fb8b 	bl	8001ab0 <HAL_I2C_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80073a0:	f001 fb00 	bl	80089a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80073a4:	2100      	movs	r1, #0
 80073a6:	4809      	ldr	r0, [pc, #36]	; (80073cc <MX_I2C3_Init+0x74>)
 80073a8:	f7fb fb3d 	bl	8002a26 <HAL_I2CEx_ConfigAnalogFilter>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80073b2:	f001 faf7 	bl	80089a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80073b6:	2100      	movs	r1, #0
 80073b8:	4804      	ldr	r0, [pc, #16]	; (80073cc <MX_I2C3_Init+0x74>)
 80073ba:	f7fb fb70 	bl	8002a9e <HAL_I2CEx_ConfigDigitalFilter>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80073c4:	f001 faee 	bl	80089a4 <Error_Handler>
  }

}
 80073c8:	bf00      	nop
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20003fb0 	.word	0x20003fb0
 80073d0:	40005c00 	.word	0x40005c00
 80073d4:	000186a0 	.word	0x000186a0

080073d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	609a      	str	r2, [r3, #8]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a29      	ldr	r2, [pc, #164]	; (800749c <HAL_I2C_MspInit+0xc4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d14b      	bne.n	8007492 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	6313      	str	r3, [r2, #48]	; 0x30
 800740a:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6313      	str	r3, [r2, #48]	; 0x30
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8007432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007438:	2312      	movs	r3, #18
 800743a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800743c:	2301      	movs	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007440:	2300      	movs	r3, #0
 8007442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007444:	2304      	movs	r3, #4
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8007448:	f107 0314 	add.w	r3, r7, #20
 800744c:	4619      	mov	r1, r3
 800744e:	4815      	ldr	r0, [pc, #84]	; (80074a4 <HAL_I2C_MspInit+0xcc>)
 8007450:	f7fa f85e 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8007454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800745a:	2312      	movs	r3, #18
 800745c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800745e:	2301      	movs	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007466:	2304      	movs	r3, #4
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	4619      	mov	r1, r3
 8007470:	480d      	ldr	r0, [pc, #52]	; (80074a8 <HAL_I2C_MspInit+0xd0>)
 8007472:	f7fa f84d 	bl	8001510 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007484:	6413      	str	r3, [r2, #64]	; 0x40
 8007486:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007492:	bf00      	nop
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40005c00 	.word	0x40005c00
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40020800 	.word	0x40020800
 80074a8:	40020000 	.word	0x40020000

080074ac <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a0b      	ldr	r2, [pc, #44]	; (80074e8 <HAL_I2C_MspDeInit+0x3c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10f      	bne.n	80074de <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80074be:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <HAL_I2C_MspDeInit+0x40>)
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <HAL_I2C_MspDeInit+0x40>)
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074c8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80074ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ce:	4808      	ldr	r0, [pc, #32]	; (80074f0 <HAL_I2C_MspDeInit+0x44>)
 80074d0:	f7fa f9c8 	bl	8001864 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80074d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074d8:	4806      	ldr	r0, [pc, #24]	; (80074f4 <HAL_I2C_MspDeInit+0x48>)
 80074da:	f7fa f9c3 	bl	8001864 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40005c00 	.word	0x40005c00
 80074ec:	40023800 	.word	0x40023800
 80074f0:	40020800 	.word	0x40020800
 80074f4:	40020000 	.word	0x40020000

080074f8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80074fc:	f001 fd1e 	bl	8008f3c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8007500:	20ca      	movs	r0, #202	; 0xca
 8007502:	f000 f95d 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8007506:	20c3      	movs	r0, #195	; 0xc3
 8007508:	f000 f967 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800750c:	2008      	movs	r0, #8
 800750e:	f000 f964 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8007512:	2050      	movs	r0, #80	; 0x50
 8007514:	f000 f961 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8007518:	20cf      	movs	r0, #207	; 0xcf
 800751a:	f000 f951 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800751e:	2000      	movs	r0, #0
 8007520:	f000 f95b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8007524:	20c1      	movs	r0, #193	; 0xc1
 8007526:	f000 f958 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800752a:	2030      	movs	r0, #48	; 0x30
 800752c:	f000 f955 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8007530:	20ed      	movs	r0, #237	; 0xed
 8007532:	f000 f945 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8007536:	2064      	movs	r0, #100	; 0x64
 8007538:	f000 f94f 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800753c:	2003      	movs	r0, #3
 800753e:	f000 f94c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8007542:	2012      	movs	r0, #18
 8007544:	f000 f949 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8007548:	2081      	movs	r0, #129	; 0x81
 800754a:	f000 f946 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800754e:	20e8      	movs	r0, #232	; 0xe8
 8007550:	f000 f936 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8007554:	2085      	movs	r0, #133	; 0x85
 8007556:	f000 f940 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800755a:	2000      	movs	r0, #0
 800755c:	f000 f93d 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007560:	2078      	movs	r0, #120	; 0x78
 8007562:	f000 f93a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8007566:	20cb      	movs	r0, #203	; 0xcb
 8007568:	f000 f92a 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800756c:	2039      	movs	r0, #57	; 0x39
 800756e:	f000 f934 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8007572:	202c      	movs	r0, #44	; 0x2c
 8007574:	f000 f931 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007578:	2000      	movs	r0, #0
 800757a:	f000 f92e 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800757e:	2034      	movs	r0, #52	; 0x34
 8007580:	f000 f92b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8007584:	2002      	movs	r0, #2
 8007586:	f000 f928 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800758a:	20f7      	movs	r0, #247	; 0xf7
 800758c:	f000 f918 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8007590:	2020      	movs	r0, #32
 8007592:	f000 f922 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8007596:	20ea      	movs	r0, #234	; 0xea
 8007598:	f000 f912 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800759c:	2000      	movs	r0, #0
 800759e:	f000 f91c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80075a2:	2000      	movs	r0, #0
 80075a4:	f000 f919 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80075a8:	20b1      	movs	r0, #177	; 0xb1
 80075aa:	f000 f909 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80075ae:	2000      	movs	r0, #0
 80075b0:	f000 f913 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80075b4:	201b      	movs	r0, #27
 80075b6:	f000 f910 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80075ba:	20b6      	movs	r0, #182	; 0xb6
 80075bc:	f000 f900 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80075c0:	200a      	movs	r0, #10
 80075c2:	f000 f90a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80075c6:	20a2      	movs	r0, #162	; 0xa2
 80075c8:	f000 f907 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80075cc:	20c0      	movs	r0, #192	; 0xc0
 80075ce:	f000 f8f7 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80075d2:	2010      	movs	r0, #16
 80075d4:	f000 f901 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80075d8:	20c1      	movs	r0, #193	; 0xc1
 80075da:	f000 f8f1 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80075de:	2010      	movs	r0, #16
 80075e0:	f000 f8fb 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80075e4:	20c5      	movs	r0, #197	; 0xc5
 80075e6:	f000 f8eb 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80075ea:	2045      	movs	r0, #69	; 0x45
 80075ec:	f000 f8f5 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80075f0:	2015      	movs	r0, #21
 80075f2:	f000 f8f2 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80075f6:	20c7      	movs	r0, #199	; 0xc7
 80075f8:	f000 f8e2 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80075fc:	2090      	movs	r0, #144	; 0x90
 80075fe:	f000 f8ec 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8007602:	2036      	movs	r0, #54	; 0x36
 8007604:	f000 f8dc 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8007608:	20c8      	movs	r0, #200	; 0xc8
 800760a:	f000 f8e6 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800760e:	20f2      	movs	r0, #242	; 0xf2
 8007610:	f000 f8d6 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007614:	2000      	movs	r0, #0
 8007616:	f000 f8e0 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800761a:	20b0      	movs	r0, #176	; 0xb0
 800761c:	f000 f8d0 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8007620:	20c2      	movs	r0, #194	; 0xc2
 8007622:	f000 f8da 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8007626:	20b6      	movs	r0, #182	; 0xb6
 8007628:	f000 f8ca 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800762c:	200a      	movs	r0, #10
 800762e:	f000 f8d4 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8007632:	20a7      	movs	r0, #167	; 0xa7
 8007634:	f000 f8d1 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8007638:	2027      	movs	r0, #39	; 0x27
 800763a:	f000 f8ce 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800763e:	2004      	movs	r0, #4
 8007640:	f000 f8cb 	bl	80077da <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8007644:	202a      	movs	r0, #42	; 0x2a
 8007646:	f000 f8bb 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800764a:	2000      	movs	r0, #0
 800764c:	f000 f8c5 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007650:	2000      	movs	r0, #0
 8007652:	f000 f8c2 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007656:	2000      	movs	r0, #0
 8007658:	f000 f8bf 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800765c:	20ef      	movs	r0, #239	; 0xef
 800765e:	f000 f8bc 	bl	80077da <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8007662:	202b      	movs	r0, #43	; 0x2b
 8007664:	f000 f8ac 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007668:	2000      	movs	r0, #0
 800766a:	f000 f8b6 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800766e:	2000      	movs	r0, #0
 8007670:	f000 f8b3 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8007674:	2001      	movs	r0, #1
 8007676:	f000 f8b0 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800767a:	203f      	movs	r0, #63	; 0x3f
 800767c:	f000 f8ad 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8007680:	20f6      	movs	r0, #246	; 0xf6
 8007682:	f000 f89d 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007686:	2001      	movs	r0, #1
 8007688:	f000 f8a7 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800768c:	2000      	movs	r0, #0
 800768e:	f000 f8a4 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8007692:	2006      	movs	r0, #6
 8007694:	f000 f8a1 	bl	80077da <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8007698:	202c      	movs	r0, #44	; 0x2c
 800769a:	f000 f891 	bl	80077c0 <ili9341_WriteReg>
  LCD_Delay(200);
 800769e:	20c8      	movs	r0, #200	; 0xc8
 80076a0:	f001 fd3a 	bl	8009118 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80076a4:	2026      	movs	r0, #38	; 0x26
 80076a6:	f000 f88b 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80076aa:	2001      	movs	r0, #1
 80076ac:	f000 f895 	bl	80077da <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80076b0:	20e0      	movs	r0, #224	; 0xe0
 80076b2:	f000 f885 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80076b6:	200f      	movs	r0, #15
 80076b8:	f000 f88f 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80076bc:	2029      	movs	r0, #41	; 0x29
 80076be:	f000 f88c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80076c2:	2024      	movs	r0, #36	; 0x24
 80076c4:	f000 f889 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80076c8:	200c      	movs	r0, #12
 80076ca:	f000 f886 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80076ce:	200e      	movs	r0, #14
 80076d0:	f000 f883 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80076d4:	2009      	movs	r0, #9
 80076d6:	f000 f880 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80076da:	204e      	movs	r0, #78	; 0x4e
 80076dc:	f000 f87d 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80076e0:	2078      	movs	r0, #120	; 0x78
 80076e2:	f000 f87a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80076e6:	203c      	movs	r0, #60	; 0x3c
 80076e8:	f000 f877 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80076ec:	2009      	movs	r0, #9
 80076ee:	f000 f874 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80076f2:	2013      	movs	r0, #19
 80076f4:	f000 f871 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80076f8:	2005      	movs	r0, #5
 80076fa:	f000 f86e 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80076fe:	2017      	movs	r0, #23
 8007700:	f000 f86b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007704:	2011      	movs	r0, #17
 8007706:	f000 f868 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800770a:	2000      	movs	r0, #0
 800770c:	f000 f865 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8007710:	20e1      	movs	r0, #225	; 0xe1
 8007712:	f000 f855 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007716:	2000      	movs	r0, #0
 8007718:	f000 f85f 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800771c:	2016      	movs	r0, #22
 800771e:	f000 f85c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8007722:	201b      	movs	r0, #27
 8007724:	f000 f859 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8007728:	2004      	movs	r0, #4
 800772a:	f000 f856 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800772e:	2011      	movs	r0, #17
 8007730:	f000 f853 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8007734:	2007      	movs	r0, #7
 8007736:	f000 f850 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800773a:	2031      	movs	r0, #49	; 0x31
 800773c:	f000 f84d 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8007740:	2033      	movs	r0, #51	; 0x33
 8007742:	f000 f84a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8007746:	2042      	movs	r0, #66	; 0x42
 8007748:	f000 f847 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800774c:	2005      	movs	r0, #5
 800774e:	f000 f844 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007752:	200c      	movs	r0, #12
 8007754:	f000 f841 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8007758:	200a      	movs	r0, #10
 800775a:	f000 f83e 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800775e:	2028      	movs	r0, #40	; 0x28
 8007760:	f000 f83b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8007764:	202f      	movs	r0, #47	; 0x2f
 8007766:	f000 f838 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800776a:	200f      	movs	r0, #15
 800776c:	f000 f835 	bl	80077da <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8007770:	2011      	movs	r0, #17
 8007772:	f000 f825 	bl	80077c0 <ili9341_WriteReg>
  LCD_Delay(200);
 8007776:	20c8      	movs	r0, #200	; 0xc8
 8007778:	f001 fcce 	bl	8009118 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800777c:	2029      	movs	r0, #41	; 0x29
 800777e:	f000 f81f 	bl	80077c0 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8007782:	202c      	movs	r0, #44	; 0x2c
 8007784:	f000 f81c 	bl	80077c0 <ili9341_WriteReg>
}
 8007788:	bf00      	nop
 800778a:	bd80      	pop	{r7, pc}

0800778c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8007790:	f001 fbd4 	bl	8008f3c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8007794:	2103      	movs	r1, #3
 8007796:	20d3      	movs	r0, #211	; 0xd3
 8007798:	f000 f82c 	bl	80077f4 <ili9341_ReadData>
 800779c:	4603      	mov	r3, r0
 800779e:	b29b      	uxth	r3, r3
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80077a8:	2029      	movs	r0, #41	; 0x29
 80077aa:	f000 f809 	bl	80077c0 <ili9341_WriteReg>
}
 80077ae:	bf00      	nop
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80077b6:	2028      	movs	r0, #40	; 0x28
 80077b8:	f000 f802 	bl	80077c0 <ili9341_WriteReg>
}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}

080077c0 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fc4f 	bl	8009070 <LCD_IO_WriteReg>
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	4603      	mov	r3, r0
 80077e2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fc20 	bl	800902c <LCD_IO_WriteData>
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	460a      	mov	r2, r1
 80077fe:	80fb      	strh	r3, [r7, #6]
 8007800:	4613      	mov	r3, r2
 8007802:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8007804:	797a      	ldrb	r2, [r7, #5]
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fc52 	bl	80090b4 <LCD_IO_ReadData>
 8007810:	4603      	mov	r3, r0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800781e:	23f0      	movs	r3, #240	; 0xf0
}
 8007820:	4618      	mov	r0, r3
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800782a:	b480      	push	{r7}
 800782c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800782e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8007832:	4618      	mov	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <initMenu>:
 */
uint16_t xpos = 100;
uint16_t ypos = 100;


void initMenu(TS_StateTypeDef* str, globalClass* globalClassHandler) {
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	localstr = str;
 8007846:	4a06      	ldr	r2, [pc, #24]	; (8007860 <initMenu+0x24>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6013      	str	r3, [r2, #0]
	localClassHandler = globalClassHandler;
 800784c:	4a05      	ldr	r2, [pc, #20]	; (8007864 <initMenu+0x28>)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6013      	str	r3, [r2, #0]
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20004004 	.word	0x20004004
 8007864:	20004008 	.word	0x20004008

08007868 <screenRefresh>:

void screenRefresh(void) {
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
	BSP_LCD_SelectLayer(1);
 800786c:	2001      	movs	r0, #1
 800786e:	f001 fd61 	bl	8009334 <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8007872:	4808      	ldr	r0, [pc, #32]	; (8007894 <screenRefresh+0x2c>)
 8007874:	f001 fda0 	bl	80093b8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	f001 fd82 	bl	8009384 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	f001 fe60 	bl	8009548 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font24);
 8007888:	4802      	ldr	r0, [pc, #8]	; (8007894 <screenRefresh+0x2c>)
 800788a:	f001 fd95 	bl	80093b8 <BSP_LCD_SetFont>
}
 800788e:	bf00      	nop
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000010 	.word	0x20000010

08007898 <DrawButton>:

void DrawButton(char* text, uint8_t line_number) {
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80078a4:	4813      	ldr	r0, [pc, #76]	; (80078f4 <DrawButton+0x5c>)
 80078a6:	f001 fd55 	bl	8009354 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(20, line_number, BSP_LCD_GetXSize()-40, 44);
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	b29c      	uxth	r4, r3
 80078ae:	f001 fcc3 	bl	8009238 <BSP_LCD_GetXSize>
 80078b2:	4603      	mov	r3, r0
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b28      	subs	r3, #40	; 0x28
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	232c      	movs	r3, #44	; 0x2c
 80078bc:	4621      	mov	r1, r4
 80078be:	2014      	movs	r0, #20
 80078c0:	f002 f89a 	bl	80099f8 <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 80078c4:	480b      	ldr	r0, [pc, #44]	; (80078f4 <DrawButton+0x5c>)
 80078c6:	f001 fd5d 	bl	8009384 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	f001 fd41 	bl	8009354 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 80078d2:	4809      	ldr	r0, [pc, #36]	; (80078f8 <DrawButton+0x60>)
 80078d4:	f001 fd70 	bl	80093b8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, line_number + 14, (uint8_t*)text,
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	330e      	adds	r3, #14
 80078de:	b299      	uxth	r1, r3
 80078e0:	2301      	movs	r3, #1
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	2000      	movs	r0, #0
 80078e6:	f001 fe9d 	bl	8009624 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd90      	pop	{r4, r7, pc}
 80078f2:	bf00      	nop
 80078f4:	ff000080 	.word	0xff000080
 80078f8:	20000008 	.word	0x20000008

080078fc <Display>:

void Display(void) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
	if (page == 0) Display_Intro();
 8007900:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <Display+0x44>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <Display+0x10>
 8007908:	f000 f83a 	bl	8007980 <Display_Intro>
	if (page == 1) Display_Menu();
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <Display+0x44>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <Display+0x1c>
 8007914:	f000 f956 	bl	8007bc4 <Display_Menu>
	if (page == 2) Display_Start();
 8007918:	4b09      	ldr	r3, [pc, #36]	; (8007940 <Display+0x44>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d101      	bne.n	8007924 <Display+0x28>
 8007920:	f000 f9a0 	bl	8007c64 <Display_Start>
	if (page == 3) Display_Odczyty();
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <Display+0x44>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d101      	bne.n	8007930 <Display+0x34>
 800792c:	f000 f9f2 	bl	8007d14 <Display_Odczyty>
	if (page == 4) Display_Onas();
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <Display+0x44>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d101      	bne.n	800793c <Display+0x40>
 8007938:	f000 fa9e 	bl	8007e78 <Display_Onas>
}
 800793c:	bf00      	nop
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20003e64 	.word	0x20003e64

08007944 <Service>:

void Service(void) {
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
	if (page == 1) menuService();
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <Service+0x38>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <Service+0x10>
 8007950:	f000 fad0 	bl	8007ef4 <menuService>
	if (page == 2) startService();
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <Service+0x38>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d101      	bne.n	8007960 <Service+0x1c>
 800795c:	f000 fcde 	bl	800831c <startService>
	if (page == 3) odczytyService();
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <Service+0x38>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d101      	bne.n	800796c <Service+0x28>
 8007968:	f000 fcf4 	bl	8008354 <odczytyService>
	if (page == 4) onasService();
 800796c:	4b03      	ldr	r3, [pc, #12]	; (800797c <Service+0x38>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d101      	bne.n	8007978 <Service+0x34>
 8007974:	f000 fd16 	bl	80083a4 <onasService>
}
 8007978:	bf00      	nop
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20003e64 	.word	0x20003e64

08007980 <Display_Intro>:

void Display_Intro(void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
	if(switchingINTRO_flag == 0) {
 8007986:	4b89      	ldr	r3, [pc, #548]	; (8007bac <Display_Intro+0x22c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 810a 	bne.w	8007ba4 <Display_Intro+0x224>
		switchingINTRO_flag = 1;
 8007990:	4b86      	ldr	r3, [pc, #536]	; (8007bac <Display_Intro+0x22c>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007996:	f7ff ff67 	bl	8007868 <screenRefresh>
		int waitTime = 500;
 800799a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800799e:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80079a0:	4883      	ldr	r0, [pc, #524]	; (8007bb0 <Display_Intro+0x230>)
 80079a2:	f001 fcd7 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	f001 fceb 	bl	8009384 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"LABIRINTH", CENTER_MODE);
 80079ae:	2301      	movs	r3, #1
 80079b0:	4a80      	ldr	r2, [pc, #512]	; (8007bb4 <Display_Intro+0x234>)
 80079b2:	2150      	movs	r1, #80	; 0x50
 80079b4:	2000      	movs	r0, #0
 80079b6:	f001 fe35 	bl	8009624 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 110, (uint8_t*)"GAME", CENTER_MODE);
 80079ba:	2301      	movs	r3, #1
 80079bc:	4a7e      	ldr	r2, [pc, #504]	; (8007bb8 <Display_Intro+0x238>)
 80079be:	216e      	movs	r1, #110	; 0x6e
 80079c0:	2000      	movs	r0, #0
 80079c2:	f001 fe2f 	bl	8009624 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80079c6:	487a      	ldr	r0, [pc, #488]	; (8007bb0 <Display_Intro+0x230>)
 80079c8:	f001 fcc4 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 80079cc:	2314      	movs	r3, #20
 80079ce:	2214      	movs	r2, #20
 80079d0:	2196      	movs	r1, #150	; 0x96
 80079d2:	2050      	movs	r0, #80	; 0x50
 80079d4:	f002 f810 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 180, 20, 20);
 80079d8:	2314      	movs	r3, #20
 80079da:	2214      	movs	r2, #20
 80079dc:	21b4      	movs	r1, #180	; 0xb4
 80079de:	2050      	movs	r0, #80	; 0x50
 80079e0:	f002 f80a 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 210, 20, 20);
 80079e4:	2314      	movs	r3, #20
 80079e6:	2214      	movs	r2, #20
 80079e8:	21d2      	movs	r1, #210	; 0xd2
 80079ea:	2050      	movs	r0, #80	; 0x50
 80079ec:	f002 f804 	bl	80099f8 <BSP_LCD_FillRect>

		BSP_LCD_FillRect(110, 150, 20, 20);
 80079f0:	2314      	movs	r3, #20
 80079f2:	2214      	movs	r2, #20
 80079f4:	2196      	movs	r1, #150	; 0x96
 80079f6:	206e      	movs	r0, #110	; 0x6e
 80079f8:	f001 fffe 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 180, 20, 20);
 80079fc:	2314      	movs	r3, #20
 80079fe:	2214      	movs	r2, #20
 8007a00:	21b4      	movs	r1, #180	; 0xb4
 8007a02:	206e      	movs	r0, #110	; 0x6e
 8007a04:	f001 fff8 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 210, 20, 20);
 8007a08:	2314      	movs	r3, #20
 8007a0a:	2214      	movs	r2, #20
 8007a0c:	21d2      	movs	r1, #210	; 0xd2
 8007a0e:	206e      	movs	r0, #110	; 0x6e
 8007a10:	f001 fff2 	bl	80099f8 <BSP_LCD_FillRect>

		BSP_LCD_FillRect(140, 150, 20, 20);
 8007a14:	2314      	movs	r3, #20
 8007a16:	2214      	movs	r2, #20
 8007a18:	2196      	movs	r1, #150	; 0x96
 8007a1a:	208c      	movs	r0, #140	; 0x8c
 8007a1c:	f001 ffec 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007a20:	2314      	movs	r3, #20
 8007a22:	2214      	movs	r2, #20
 8007a24:	21b4      	movs	r1, #180	; 0xb4
 8007a26:	208c      	movs	r0, #140	; 0x8c
 8007a28:	f001 ffe6 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007a2c:	2314      	movs	r3, #20
 8007a2e:	2214      	movs	r2, #20
 8007a30:	21d2      	movs	r1, #210	; 0xd2
 8007a32:	208c      	movs	r0, #140	; 0x8c
 8007a34:	f001 ffe0 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8007a38:	485d      	ldr	r0, [pc, #372]	; (8007bb0 <Display_Intro+0x230>)
 8007a3a:	f001 fca3 	bl	8009384 <BSP_LCD_SetBackColor>
		//Loading module
		HAL_Delay(waitTime);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7f9 f9d9 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a46:	485d      	ldr	r0, [pc, #372]	; (8007bbc <Display_Intro+0x23c>)
 8007a48:	f001 fc84 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 8007a4c:	2314      	movs	r3, #20
 8007a4e:	2214      	movs	r2, #20
 8007a50:	2196      	movs	r1, #150	; 0x96
 8007a52:	2050      	movs	r0, #80	; 0x50
 8007a54:	f001 ffd0 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a58:	4858      	ldr	r0, [pc, #352]	; (8007bbc <Display_Intro+0x23c>)
 8007a5a:	f001 fc93 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f9 f9c9 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a66:	4855      	ldr	r0, [pc, #340]	; (8007bbc <Display_Intro+0x23c>)
 8007a68:	f001 fc74 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 180, 20, 20);
 8007a6c:	2314      	movs	r3, #20
 8007a6e:	2214      	movs	r2, #20
 8007a70:	21b4      	movs	r1, #180	; 0xb4
 8007a72:	2050      	movs	r0, #80	; 0x50
 8007a74:	f001 ffc0 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a78:	4850      	ldr	r0, [pc, #320]	; (8007bbc <Display_Intro+0x23c>)
 8007a7a:	f001 fc83 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7f9 f9b9 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a86:	484d      	ldr	r0, [pc, #308]	; (8007bbc <Display_Intro+0x23c>)
 8007a88:	f001 fc64 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 210, 20, 20);
 8007a8c:	2314      	movs	r3, #20
 8007a8e:	2214      	movs	r2, #20
 8007a90:	21d2      	movs	r1, #210	; 0xd2
 8007a92:	2050      	movs	r0, #80	; 0x50
 8007a94:	f001 ffb0 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a98:	4848      	ldr	r0, [pc, #288]	; (8007bbc <Display_Intro+0x23c>)
 8007a9a:	f001 fc73 	bl	8009384 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7f9 f9a9 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007aa6:	4845      	ldr	r0, [pc, #276]	; (8007bbc <Display_Intro+0x23c>)
 8007aa8:	f001 fc54 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 210, 20, 20);
 8007aac:	2314      	movs	r3, #20
 8007aae:	2214      	movs	r2, #20
 8007ab0:	21d2      	movs	r1, #210	; 0xd2
 8007ab2:	206e      	movs	r0, #110	; 0x6e
 8007ab4:	f001 ffa0 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007ab8:	4840      	ldr	r0, [pc, #256]	; (8007bbc <Display_Intro+0x23c>)
 8007aba:	f001 fc63 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7f9 f999 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ac6:	483d      	ldr	r0, [pc, #244]	; (8007bbc <Display_Intro+0x23c>)
 8007ac8:	f001 fc44 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007acc:	2314      	movs	r3, #20
 8007ace:	2214      	movs	r2, #20
 8007ad0:	21d2      	movs	r1, #210	; 0xd2
 8007ad2:	208c      	movs	r0, #140	; 0x8c
 8007ad4:	f001 ff90 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007ad8:	4838      	ldr	r0, [pc, #224]	; (8007bbc <Display_Intro+0x23c>)
 8007ada:	f001 fc53 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 f989 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ae6:	4835      	ldr	r0, [pc, #212]	; (8007bbc <Display_Intro+0x23c>)
 8007ae8:	f001 fc34 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007aec:	2314      	movs	r3, #20
 8007aee:	2214      	movs	r2, #20
 8007af0:	21b4      	movs	r1, #180	; 0xb4
 8007af2:	208c      	movs	r0, #140	; 0x8c
 8007af4:	f001 ff80 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007af8:	4830      	ldr	r0, [pc, #192]	; (8007bbc <Display_Intro+0x23c>)
 8007afa:	f001 fc43 	bl	8009384 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f9 f979 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b06:	482d      	ldr	r0, [pc, #180]	; (8007bbc <Display_Intro+0x23c>)
 8007b08:	f001 fc24 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 150, 20, 20);
 8007b0c:	2314      	movs	r3, #20
 8007b0e:	2214      	movs	r2, #20
 8007b10:	2196      	movs	r1, #150	; 0x96
 8007b12:	208c      	movs	r0, #140	; 0x8c
 8007b14:	f001 ff70 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b18:	4828      	ldr	r0, [pc, #160]	; (8007bbc <Display_Intro+0x23c>)
 8007b1a:	f001 fc33 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7f9 f969 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b26:	4825      	ldr	r0, [pc, #148]	; (8007bbc <Display_Intro+0x23c>)
 8007b28:	f001 fc14 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 150, 20, 20);
 8007b2c:	2314      	movs	r3, #20
 8007b2e:	2214      	movs	r2, #20
 8007b30:	2196      	movs	r1, #150	; 0x96
 8007b32:	206e      	movs	r0, #110	; 0x6e
 8007b34:	f001 ff60 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b38:	4820      	ldr	r0, [pc, #128]	; (8007bbc <Display_Intro+0x23c>)
 8007b3a:	f001 fc23 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f9 f959 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b46:	481d      	ldr	r0, [pc, #116]	; (8007bbc <Display_Intro+0x23c>)
 8007b48:	f001 fc04 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 180, 20, 20);
 8007b4c:	2314      	movs	r3, #20
 8007b4e:	2214      	movs	r2, #20
 8007b50:	21b4      	movs	r1, #180	; 0xb4
 8007b52:	206e      	movs	r0, #110	; 0x6e
 8007b54:	f001 ff50 	bl	80099f8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b58:	4818      	ldr	r0, [pc, #96]	; (8007bbc <Display_Intro+0x23c>)
 8007b5a:	f001 fc13 	bl	8009384 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 f949 	bl	8000df8 <HAL_Delay>

		for(int i=80; i>=20; i--)
 8007b66:	2350      	movs	r3, #80	; 0x50
 8007b68:	607b      	str	r3, [r7, #4]
 8007b6a:	e015      	b.n	8007b98 <Display_Intro+0x218>
		{
			screenRefresh();
 8007b6c:	f7ff fe7c 	bl	8007868 <screenRefresh>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007b70:	480f      	ldr	r0, [pc, #60]	; (8007bb0 <Display_Intro+0x230>)
 8007b72:	f001 fbef 	bl	8009354 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	f001 fc03 	bl	8009384 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, i, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	b299      	uxth	r1, r3
 8007b82:	2301      	movs	r3, #1
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <Display_Intro+0x234>)
 8007b86:	2000      	movs	r0, #0
 8007b88:	f001 fd4c 	bl	8009624 <BSP_LCD_DisplayStringAt>
			HAL_Delay(15);
 8007b8c:	200f      	movs	r0, #15
 8007b8e:	f7f9 f933 	bl	8000df8 <HAL_Delay>
		for(int i=80; i>=20; i--)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b13      	cmp	r3, #19
 8007b9c:	dce6      	bgt.n	8007b6c <Display_Intro+0x1ec>
		}
		page = 1;
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <Display_Intro+0x240>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20003e5c 	.word	0x20003e5c
 8007bb0:	ff000080 	.word	0xff000080
 8007bb4:	0800aacc 	.word	0x0800aacc
 8007bb8:	0800aad8 	.word	0x0800aad8
 8007bbc:	ffff0000 	.word	0xffff0000
 8007bc0:	20003e64 	.word	0x20003e64

08007bc4 <Display_Menu>:

void Display_Menu(void) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
	if(switchingMENU_flag == 1) {
 8007bc8:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <Display_Menu+0x4c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d11d      	bne.n	8007c0c <Display_Menu+0x48>
		switchingMENU_flag = 0;
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <Display_Menu+0x4c>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007bd6:	f7ff fe47 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007bda:	480e      	ldr	r0, [pc, #56]	; (8007c14 <Display_Menu+0x50>)
 8007bdc:	f001 fbba 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	f001 fbce 	bl	8009384 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007be8:	2301      	movs	r3, #1
 8007bea:	4a0b      	ldr	r2, [pc, #44]	; (8007c18 <Display_Menu+0x54>)
 8007bec:	2114      	movs	r1, #20
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f001 fd18 	bl	8009624 <BSP_LCD_DisplayStringAt>
		DrawButton("START",60);
 8007bf4:	213c      	movs	r1, #60	; 0x3c
 8007bf6:	4809      	ldr	r0, [pc, #36]	; (8007c1c <Display_Menu+0x58>)
 8007bf8:	f7ff fe4e 	bl	8007898 <DrawButton>
		DrawButton("ODCZYTY",120);
 8007bfc:	2178      	movs	r1, #120	; 0x78
 8007bfe:	4808      	ldr	r0, [pc, #32]	; (8007c20 <Display_Menu+0x5c>)
 8007c00:	f7ff fe4a 	bl	8007898 <DrawButton>
		DrawButton("O NAS",180);
 8007c04:	21b4      	movs	r1, #180	; 0xb4
 8007c06:	4807      	ldr	r0, [pc, #28]	; (8007c24 <Display_Menu+0x60>)
 8007c08:	f7ff fe46 	bl	8007898 <DrawButton>
	}
}
 8007c0c:	bf00      	nop
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000054 	.word	0x20000054
 8007c14:	ff000080 	.word	0xff000080
 8007c18:	0800aacc 	.word	0x0800aacc
 8007c1c:	0800aae0 	.word	0x0800aae0
 8007c20:	0800aae8 	.word	0x0800aae8
 8007c24:	0800aaf0 	.word	0x0800aaf0

08007c28 <drawWall>:

void drawWall(uint32_t x_value, uint32_t y_value, uint32_t width_value, uint32_t height_value) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007c36:	480a      	ldr	r0, [pc, #40]	; (8007c60 <drawWall+0x38>)
 8007c38:	f001 fb8c 	bl	8009354 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x_value, y_value, width_value, height_value);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	b298      	uxth	r0, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	b299      	uxth	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f001 fed4 	bl	80099f8 <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8007c50:	4803      	ldr	r0, [pc, #12]	; (8007c60 <drawWall+0x38>)
 8007c52:	f001 fb97 	bl	8009384 <BSP_LCD_SetBackColor>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	ff000080 	.word	0xff000080

08007c64 <Display_Start>:

void Display_Start(void) {
 8007c64:	b598      	push	{r3, r4, r7, lr}
 8007c66:	af00      	add	r7, sp, #0
	if(switchingSTART_flag == 1) {
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <Display_Start+0x9c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d145      	bne.n	8007cfc <Display_Start+0x98>
		switchingSTART_flag = 0;
 8007c70:	4b23      	ldr	r3, [pc, #140]	; (8007d00 <Display_Start+0x9c>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007c76:	f7ff fdf7 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007c7a:	4822      	ldr	r0, [pc, #136]	; (8007d04 <Display_Start+0xa0>)
 8007c7c:	f001 fb6a 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	f001 fb7e 	bl	8009384 <BSP_LCD_SetBackColor>

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007c88:	481f      	ldr	r0, [pc, #124]	; (8007d08 <Display_Start+0xa4>)
 8007c8a:	f001 fb63 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(xpos, ypos, 10);
 8007c8e:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <Display_Start+0xa8>)
 8007c90:	8818      	ldrh	r0, [r3, #0]
 8007c92:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <Display_Start+0xac>)
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	220a      	movs	r2, #10
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f001 ff07 	bl	8009aac <BSP_LCD_FillCircle>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007c9e:	481a      	ldr	r0, [pc, #104]	; (8007d08 <Display_Start+0xa4>)
 8007ca0:	f001 fb70 	bl	8009384 <BSP_LCD_SetBackColor>

		drawWall(0,0,10,BSP_LCD_GetYSize()-50);
 8007ca4:	f001 fad4 	bl	8009250 <BSP_LCD_GetYSize>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	3b32      	subs	r3, #50	; 0x32
 8007cac:	220a      	movs	r2, #10
 8007cae:	2100      	movs	r1, #0
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f7ff ffb9 	bl	8007c28 <drawWall>
		drawWall(BSP_LCD_GetXSize()-10,0,10,BSP_LCD_GetYSize()-50);
 8007cb6:	f001 fabf 	bl	8009238 <BSP_LCD_GetXSize>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f1a3 040a 	sub.w	r4, r3, #10
 8007cc0:	f001 fac6 	bl	8009250 <BSP_LCD_GetYSize>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	3b32      	subs	r3, #50	; 0x32
 8007cc8:	220a      	movs	r2, #10
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f7ff ffab 	bl	8007c28 <drawWall>
		drawWall(0,0,BSP_LCD_GetXSize(),10);
 8007cd2:	f001 fab1 	bl	8009238 <BSP_LCD_GetXSize>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	230a      	movs	r3, #10
 8007cda:	2100      	movs	r1, #0
 8007cdc:	2000      	movs	r0, #0
 8007cde:	f7ff ffa3 	bl	8007c28 <drawWall>
		drawWall(0,BSP_LCD_GetYSize()-50,BSP_LCD_GetXSize(),10);
 8007ce2:	f001 fab5 	bl	8009250 <BSP_LCD_GetYSize>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 8007cec:	f001 faa4 	bl	8009238 <BSP_LCD_GetXSize>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	230a      	movs	r3, #10
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f7ff ff96 	bl	8007c28 <drawWall>
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	bd98      	pop	{r3, r4, r7, pc}
 8007d00:	20000058 	.word	0x20000058
 8007d04:	ff000080 	.word	0xff000080
 8007d08:	ffff0000 	.word	0xffff0000
 8007d0c:	2000006c 	.word	0x2000006c
 8007d10:	2000006e 	.word	0x2000006e

08007d14 <Display_Odczyty>:

void Display_Odczyty(void) {
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b091      	sub	sp, #68	; 0x44
 8007d18:	af00      	add	r7, sp, #0
	if(switchingODCZYTY_flag == 1) {
 8007d1a:	4b4b      	ldr	r3, [pc, #300]	; (8007e48 <Display_Odczyty+0x134>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d11a      	bne.n	8007d58 <Display_Odczyty+0x44>
		screenRefresh();
 8007d22:	f7ff fda1 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007d26:	4849      	ldr	r0, [pc, #292]	; (8007e4c <Display_Odczyty+0x138>)
 8007d28:	f001 fb14 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	f001 fb28 	bl	8009384 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"ODCZYTY MPU", CENTER_MODE);
 8007d34:	2301      	movs	r3, #1
 8007d36:	4a46      	ldr	r2, [pc, #280]	; (8007e50 <Display_Odczyty+0x13c>)
 8007d38:	2114      	movs	r1, #20
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f001 fc72 	bl	8009624 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007d40:	21fa      	movs	r1, #250	; 0xfa
 8007d42:	4844      	ldr	r0, [pc, #272]	; (8007e54 <Display_Odczyty+0x140>)
 8007d44:	f7ff fda8 	bl	8007898 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007d48:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d4c:	f001 fb02 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	f001 fb16 	bl	8009384 <BSP_LCD_SetBackColor>
	}
	if(refreshODCZYTY_flag == 1 || switchingODCZYTY_flag == 1) {
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <Display_Odczyty+0x144>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d003      	beq.n	8007d68 <Display_Odczyty+0x54>
 8007d60:	4b39      	ldr	r3, [pc, #228]	; (8007e48 <Display_Odczyty+0x134>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d16b      	bne.n	8007e40 <Display_Odczyty+0x12c>
		switchingODCZYTY_flag = 0;
 8007d68:	4b37      	ldr	r3, [pc, #220]	; (8007e48 <Display_Odczyty+0x134>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
		uint8_t refreshLine[14] = "              ";
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <Display_Odczyty+0x148>)
 8007d70:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d76:	c407      	stmia	r4!, {r0, r1, r2}
 8007d78:	8023      	strh	r3, [r4, #0]
		uint8_t xaxis[14] = "X ASIX: ";
 8007d7a:	4a39      	ldr	r2, [pc, #228]	; (8007e60 <Display_Odczyty+0x14c>)
 8007d7c:	f107 0320 	add.w	r3, r7, #32
 8007d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d82:	c303      	stmia	r3!, {r0, r1}
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	711a      	strb	r2, [r3, #4]
		uint8_t yaxis[14] = "Y ASIX: ";
 8007d90:	4a34      	ldr	r2, [pc, #208]	; (8007e64 <Display_Odczyty+0x150>)
 8007d92:	f107 0310 	add.w	r3, r7, #16
 8007d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d98:	c303      	stmia	r3!, {r0, r1}
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	f107 0319 	add.w	r3, r7, #25
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	711a      	strb	r2, [r3, #4]
		uint8_t zaxis[14] = "Z ASIX: ";
 8007da6:	4a30      	ldr	r2, [pc, #192]	; (8007e68 <Display_Odczyty+0x154>)
 8007da8:	463b      	mov	r3, r7
 8007daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dac:	c303      	stmia	r3!, {r0, r1}
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	f107 0309 	add.w	r3, r7, #9
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	711a      	strb	r2, [r3, #4]
		itoa(x, &xaxis[8], 10);
 8007dba:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <Display_Odczyty+0x158>)
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	f107 0320 	add.w	r3, r7, #32
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	f002 fdd2 	bl	800a970 <itoa>
		itoa(y, &yaxis[8], 10);
 8007dcc:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <Display_Odczyty+0x15c>)
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	f107 0310 	add.w	r3, r7, #16
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f002 fdc9 	bl	800a970 <itoa>
		itoa(z, &zaxis[8], 10);
 8007dde:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <Display_Odczyty+0x160>)
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	463b      	mov	r3, r7
 8007de4:	3308      	adds	r3, #8
 8007de6:	220a      	movs	r2, #10
 8007de8:	4619      	mov	r1, r3
 8007dea:	f002 fdc1 	bl	800a970 <itoa>
		BSP_LCD_DisplayStringAt(0, 60, refreshLine, CENTER_MODE);
 8007dee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007df2:	2301      	movs	r3, #1
 8007df4:	213c      	movs	r1, #60	; 0x3c
 8007df6:	2000      	movs	r0, #0
 8007df8:	f001 fc14 	bl	8009624 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 60, xaxis, CENTER_MODE);
 8007dfc:	f107 0220 	add.w	r2, r7, #32
 8007e00:	2301      	movs	r3, #1
 8007e02:	213c      	movs	r1, #60	; 0x3c
 8007e04:	2000      	movs	r0, #0
 8007e06:	f001 fc0d 	bl	8009624 <BSP_LCD_DisplayStringAt>

		BSP_LCD_DisplayStringAt(0, 100, refreshLine, CENTER_MODE);
 8007e0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e0e:	2301      	movs	r3, #1
 8007e10:	2164      	movs	r1, #100	; 0x64
 8007e12:	2000      	movs	r0, #0
 8007e14:	f001 fc06 	bl	8009624 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 100, yaxis, CENTER_MODE);
 8007e18:	f107 0210 	add.w	r2, r7, #16
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	2164      	movs	r1, #100	; 0x64
 8007e20:	2000      	movs	r0, #0
 8007e22:	f001 fbff 	bl	8009624 <BSP_LCD_DisplayStringAt>

		BSP_LCD_DisplayStringAt(0, 140, refreshLine, CENTER_MODE);
 8007e26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	218c      	movs	r1, #140	; 0x8c
 8007e2e:	2000      	movs	r0, #0
 8007e30:	f001 fbf8 	bl	8009624 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 140, zaxis, CENTER_MODE);
 8007e34:	463a      	mov	r2, r7
 8007e36:	2301      	movs	r3, #1
 8007e38:	218c      	movs	r1, #140	; 0x8c
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f001 fbf2 	bl	8009624 <BSP_LCD_DisplayStringAt>
		}
}
 8007e40:	bf00      	nop
 8007e42:	3744      	adds	r7, #68	; 0x44
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	2000005c 	.word	0x2000005c
 8007e4c:	ff000080 	.word	0xff000080
 8007e50:	0800aaf8 	.word	0x0800aaf8
 8007e54:	0800ab04 	.word	0x0800ab04
 8007e58:	20003e60 	.word	0x20003e60
 8007e5c:	0800ab0c 	.word	0x0800ab0c
 8007e60:	0800ab1c 	.word	0x0800ab1c
 8007e64:	0800ab2c 	.word	0x0800ab2c
 8007e68:	0800ab3c 	.word	0x0800ab3c
 8007e6c:	20003e10 	.word	0x20003e10
 8007e70:	20003e14 	.word	0x20003e14
 8007e74:	20003e18 	.word	0x20003e18

08007e78 <Display_Onas>:


void Display_Onas(void) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
	if(switchingONAS_flag == 1) {
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <Display_Onas+0x64>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d129      	bne.n	8007ed8 <Display_Onas+0x60>
		switchingONAS_flag = 0;
 8007e84:	4b15      	ldr	r3, [pc, #84]	; (8007edc <Display_Onas+0x64>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007e8a:	f7ff fced 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007e8e:	4814      	ldr	r0, [pc, #80]	; (8007ee0 <Display_Onas+0x68>)
 8007e90:	f001 fa60 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	f001 fa74 	bl	8009384 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"Autorzy", CENTER_MODE);
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4a11      	ldr	r2, [pc, #68]	; (8007ee4 <Display_Onas+0x6c>)
 8007ea0:	2114      	movs	r1, #20
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f001 fbbe 	bl	8009624 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007ea8:	21fa      	movs	r1, #250	; 0xfa
 8007eaa:	480f      	ldr	r0, [pc, #60]	; (8007ee8 <Display_Onas+0x70>)
 8007eac:	f7ff fcf4 	bl	8007898 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007eb0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007eb4:	f001 fa4e 	bl	8009354 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	f001 fa62 	bl	8009384 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"Adam Krzykala", CENTER_MODE);
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <Display_Onas+0x74>)
 8007ec4:	213c      	movs	r1, #60	; 0x3c
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f001 fbac 	bl	8009624 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Szymon Rajca", CENTER_MODE);
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4a08      	ldr	r2, [pc, #32]	; (8007ef0 <Display_Onas+0x78>)
 8007ed0:	2150      	movs	r1, #80	; 0x50
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	f001 fba6 	bl	8009624 <BSP_LCD_DisplayStringAt>

	}
}
 8007ed8:	bf00      	nop
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000060 	.word	0x20000060
 8007ee0:	ff000080 	.word	0xff000080
 8007ee4:	0800ab4c 	.word	0x0800ab4c
 8007ee8:	0800ab04 	.word	0x0800ab04
 8007eec:	0800ab54 	.word	0x0800ab54
 8007ef0:	0800ab64 	.word	0x0800ab64

08007ef4 <menuService>:


void menuService(void) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8007ef8:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <menuService+0x8c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d03b      	beq.n	8007f7a <menuService+0x86>
		if (localstr->Y >= 60 && localstr->Y <= 104)
 8007f02:	4b1f      	ldr	r3, [pc, #124]	; (8007f80 <menuService+0x8c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	889b      	ldrh	r3, [r3, #4]
 8007f08:	2b3b      	cmp	r3, #59	; 0x3b
 8007f0a:	d90d      	bls.n	8007f28 <menuService+0x34>
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <menuService+0x8c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	889b      	ldrh	r3, [r3, #4]
 8007f12:	2b68      	cmp	r3, #104	; 0x68
 8007f14:	d808      	bhi.n	8007f28 <menuService+0x34>
				{

			page = 2;
 8007f16:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <menuService+0x90>)
 8007f18:	2202      	movs	r2, #2
 8007f1a:	601a      	str	r2, [r3, #0]
			switchingSTART_flag = 1;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <menuService+0x94>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007f22:	2032      	movs	r0, #50	; 0x32
 8007f24:	f7f8 ff68 	bl	8000df8 <HAL_Delay>
		}
		if (localstr->Y >= 120 && localstr->Y <= 164)
 8007f28:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <menuService+0x8c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	889b      	ldrh	r3, [r3, #4]
 8007f2e:	2b77      	cmp	r3, #119	; 0x77
 8007f30:	d910      	bls.n	8007f54 <menuService+0x60>
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <menuService+0x8c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	889b      	ldrh	r3, [r3, #4]
 8007f38:	2ba4      	cmp	r3, #164	; 0xa4
 8007f3a:	d80b      	bhi.n	8007f54 <menuService+0x60>
						{

			page = 3;
 8007f3c:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <menuService+0x90>)
 8007f3e:	2203      	movs	r2, #3
 8007f40:	601a      	str	r2, [r3, #0]
			switchingODCZYTY_flag = 1;
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <menuService+0x98>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
			refreshODCZYTY_flag = 1;
 8007f48:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <menuService+0x9c>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007f4e:	2032      	movs	r0, #50	; 0x32
 8007f50:	f7f8 ff52 	bl	8000df8 <HAL_Delay>
				}
		if (localstr->Y >= 180 && localstr->Y <= 224)
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <menuService+0x8c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	2bb3      	cmp	r3, #179	; 0xb3
 8007f5c:	d90d      	bls.n	8007f7a <menuService+0x86>
 8007f5e:	4b08      	ldr	r3, [pc, #32]	; (8007f80 <menuService+0x8c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	889b      	ldrh	r3, [r3, #4]
 8007f64:	2be0      	cmp	r3, #224	; 0xe0
 8007f66:	d808      	bhi.n	8007f7a <menuService+0x86>
						{

			page = 4;
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <menuService+0x90>)
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	601a      	str	r2, [r3, #0]
			switchingONAS_flag = 1;
 8007f6e:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <menuService+0xa0>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007f74:	2032      	movs	r0, #50	; 0x32
 8007f76:	f7f8 ff3f 	bl	8000df8 <HAL_Delay>
				}
	}
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20004004 	.word	0x20004004
 8007f84:	20003e64 	.word	0x20003e64
 8007f88:	20000058 	.word	0x20000058
 8007f8c:	2000005c 	.word	0x2000005c
 8007f90:	20003e60 	.word	0x20003e60
 8007f94:	20000060 	.word	0x20000060

08007f98 <collisionDetection>:

void collisionDetection() {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
	//Creating 4 corners
	//First corner
	if(BSP_LCD_ReadPixel(xpos-18,ypos-18) == bluePixel
 8007f9c:	4b52      	ldr	r3, [pc, #328]	; (80080e8 <collisionDetection+0x150>)
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	3b12      	subs	r3, #18
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	4b51      	ldr	r3, [pc, #324]	; (80080ec <collisionDetection+0x154>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	3b12      	subs	r3, #18
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4619      	mov	r1, r3
 8007fae:	4610      	mov	r0, r2
 8007fb0:	f001 fa1c 	bl	80093ec <BSP_LCD_ReadPixel>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4b4e      	ldr	r3, [pc, #312]	; (80080f0 <collisionDetection+0x158>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d114      	bne.n	8007fe8 <collisionDetection+0x50>
			&& BSP_LCD_ReadPixel(xpos+18,ypos-18) == bluePixel) upDirection = 0;
 8007fbe:	4b4a      	ldr	r3, [pc, #296]	; (80080e8 <collisionDetection+0x150>)
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	3312      	adds	r3, #18
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	4b49      	ldr	r3, [pc, #292]	; (80080ec <collisionDetection+0x154>)
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	3b12      	subs	r3, #18
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f001 fa0b 	bl	80093ec <BSP_LCD_ReadPixel>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b45      	ldr	r3, [pc, #276]	; (80080f0 <collisionDetection+0x158>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d103      	bne.n	8007fe8 <collisionDetection+0x50>
 8007fe0:	4b44      	ldr	r3, [pc, #272]	; (80080f4 <collisionDetection+0x15c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <collisionDetection+0x56>
	else upDirection = 1;
 8007fe8:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <collisionDetection+0x15c>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
	if(BSP_LCD_ReadPixel(xpos-18,ypos+18) == bluePixel
 8007fee:	4b3e      	ldr	r3, [pc, #248]	; (80080e8 <collisionDetection+0x150>)
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	3b12      	subs	r3, #18
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	4b3d      	ldr	r3, [pc, #244]	; (80080ec <collisionDetection+0x154>)
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	3312      	adds	r3, #18
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f001 f9f3 	bl	80093ec <BSP_LCD_ReadPixel>
 8008006:	4602      	mov	r2, r0
 8008008:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <collisionDetection+0x158>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d114      	bne.n	800803a <collisionDetection+0xa2>
				&& BSP_LCD_ReadPixel(xpos-18,ypos-18) == bluePixel) leftDirection = 0;
 8008010:	4b35      	ldr	r3, [pc, #212]	; (80080e8 <collisionDetection+0x150>)
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	3b12      	subs	r3, #18
 8008016:	b29a      	uxth	r2, r3
 8008018:	4b34      	ldr	r3, [pc, #208]	; (80080ec <collisionDetection+0x154>)
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	3b12      	subs	r3, #18
 800801e:	b29b      	uxth	r3, r3
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f001 f9e2 	bl	80093ec <BSP_LCD_ReadPixel>
 8008028:	4602      	mov	r2, r0
 800802a:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <collisionDetection+0x158>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d103      	bne.n	800803a <collisionDetection+0xa2>
 8008032:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <collisionDetection+0x160>)
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	e002      	b.n	8008040 <collisionDetection+0xa8>
	else leftDirection = 1;
 800803a:	4b2f      	ldr	r3, [pc, #188]	; (80080f8 <collisionDetection+0x160>)
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
	if(BSP_LCD_ReadPixel(xpos-18,ypos+18) == bluePixel
 8008040:	4b29      	ldr	r3, [pc, #164]	; (80080e8 <collisionDetection+0x150>)
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	3b12      	subs	r3, #18
 8008046:	b29a      	uxth	r2, r3
 8008048:	4b28      	ldr	r3, [pc, #160]	; (80080ec <collisionDetection+0x154>)
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	3312      	adds	r3, #18
 800804e:	b29b      	uxth	r3, r3
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f001 f9ca 	bl	80093ec <BSP_LCD_ReadPixel>
 8008058:	4602      	mov	r2, r0
 800805a:	4b25      	ldr	r3, [pc, #148]	; (80080f0 <collisionDetection+0x158>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d114      	bne.n	800808c <collisionDetection+0xf4>
				&& BSP_LCD_ReadPixel(xpos+18,ypos+18) == bluePixel) downDirection = 0;
 8008062:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <collisionDetection+0x150>)
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	3312      	adds	r3, #18
 8008068:	b29a      	uxth	r2, r3
 800806a:	4b20      	ldr	r3, [pc, #128]	; (80080ec <collisionDetection+0x154>)
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	3312      	adds	r3, #18
 8008070:	b29b      	uxth	r3, r3
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f001 f9b9 	bl	80093ec <BSP_LCD_ReadPixel>
 800807a:	4602      	mov	r2, r0
 800807c:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <collisionDetection+0x158>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d103      	bne.n	800808c <collisionDetection+0xf4>
 8008084:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <collisionDetection+0x164>)
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e002      	b.n	8008092 <collisionDetection+0xfa>
	else downDirection = 1;
 800808c:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <collisionDetection+0x164>)
 800808e:	2201      	movs	r2, #1
 8008090:	701a      	strb	r2, [r3, #0]
	if(BSP_LCD_ReadPixel(xpos+18,ypos-18) == bluePixel
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <collisionDetection+0x150>)
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	3312      	adds	r3, #18
 8008098:	b29a      	uxth	r2, r3
 800809a:	4b14      	ldr	r3, [pc, #80]	; (80080ec <collisionDetection+0x154>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	3b12      	subs	r3, #18
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f001 f9a1 	bl	80093ec <BSP_LCD_ReadPixel>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <collisionDetection+0x158>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d114      	bne.n	80080de <collisionDetection+0x146>
				&& BSP_LCD_ReadPixel(xpos+18,ypos+18) == bluePixel) rightDirection = 0;
 80080b4:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <collisionDetection+0x150>)
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	3312      	adds	r3, #18
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <collisionDetection+0x154>)
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	3312      	adds	r3, #18
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f001 f990 	bl	80093ec <BSP_LCD_ReadPixel>
 80080cc:	4602      	mov	r2, r0
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <collisionDetection+0x158>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d103      	bne.n	80080de <collisionDetection+0x146>
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <collisionDetection+0x168>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e002      	b.n	80080e4 <collisionDetection+0x14c>
	else rightDirection = 1;
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <collisionDetection+0x168>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	701a      	strb	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	2000006c 	.word	0x2000006c
 80080ec:	2000006e 	.word	0x2000006e
 80080f0:	20000068 	.word	0x20000068
 80080f4:	20000066 	.word	0x20000066
 80080f8:	20000064 	.word	0x20000064
 80080fc:	20000067 	.word	0x20000067
 8008100:	20000065 	.word	0x20000065

08008104 <changeBallPosition>:


void changeBallPosition() {
 8008104:	b5b0      	push	{r4, r5, r7, lr}
 8008106:	af00      	add	r7, sp, #0
	collisionDetection();
 8008108:	f7ff ff46 	bl	8007f98 <collisionDetection>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	f001 f920 	bl	8009354 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(xpos, ypos, 11);
 8008114:	4b75      	ldr	r3, [pc, #468]	; (80082ec <changeBallPosition+0x1e8>)
 8008116:	8818      	ldrh	r0, [r3, #0]
 8008118:	4b75      	ldr	r3, [pc, #468]	; (80082f0 <changeBallPosition+0x1ec>)
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	220b      	movs	r2, #11
 800811e:	4619      	mov	r1, r3
 8008120:	f001 fcc4 	bl	8009aac <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	f001 f92c 	bl	8009384 <BSP_LCD_SetBackColor>
	if(y > 10) lastY = 10;
 800812c:	4b71      	ldr	r3, [pc, #452]	; (80082f4 <changeBallPosition+0x1f0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b0a      	cmp	r3, #10
 8008132:	dd03      	ble.n	800813c <changeBallPosition+0x38>
 8008134:	4b70      	ldr	r3, [pc, #448]	; (80082f8 <changeBallPosition+0x1f4>)
 8008136:	220a      	movs	r2, #10
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e00d      	b.n	8008158 <changeBallPosition+0x54>
	else {
		if(y < -10) lastY = -10;
 800813c:	4b6d      	ldr	r3, [pc, #436]	; (80082f4 <changeBallPosition+0x1f0>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f113 0f0a 	cmn.w	r3, #10
 8008144:	da04      	bge.n	8008150 <changeBallPosition+0x4c>
 8008146:	4b6c      	ldr	r3, [pc, #432]	; (80082f8 <changeBallPosition+0x1f4>)
 8008148:	f06f 0209 	mvn.w	r2, #9
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e003      	b.n	8008158 <changeBallPosition+0x54>
		else lastY = y;
 8008150:	4b68      	ldr	r3, [pc, #416]	; (80082f4 <changeBallPosition+0x1f0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a68      	ldr	r2, [pc, #416]	; (80082f8 <changeBallPosition+0x1f4>)
 8008156:	6013      	str	r3, [r2, #0]
	}

	if(x > 10) lastX = 10;
 8008158:	4b68      	ldr	r3, [pc, #416]	; (80082fc <changeBallPosition+0x1f8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b0a      	cmp	r3, #10
 800815e:	dd03      	ble.n	8008168 <changeBallPosition+0x64>
 8008160:	4b67      	ldr	r3, [pc, #412]	; (8008300 <changeBallPosition+0x1fc>)
 8008162:	220a      	movs	r2, #10
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	e00d      	b.n	8008184 <changeBallPosition+0x80>
		else {
			if(x < -10) lastX = -10;
 8008168:	4b64      	ldr	r3, [pc, #400]	; (80082fc <changeBallPosition+0x1f8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f113 0f0a 	cmn.w	r3, #10
 8008170:	da04      	bge.n	800817c <changeBallPosition+0x78>
 8008172:	4b63      	ldr	r3, [pc, #396]	; (8008300 <changeBallPosition+0x1fc>)
 8008174:	f06f 0209 	mvn.w	r2, #9
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	e003      	b.n	8008184 <changeBallPosition+0x80>
			else lastX = x;
 800817c:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <changeBallPosition+0x1f8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a5f      	ldr	r2, [pc, #380]	; (8008300 <changeBallPosition+0x1fc>)
 8008182:	6013      	str	r3, [r2, #0]
		}

	if(y < 1 && leftDirection == 1) xpos += 0.5*lastY;
 8008184:	4b5b      	ldr	r3, [pc, #364]	; (80082f4 <changeBallPosition+0x1f0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	dc24      	bgt.n	80081d6 <changeBallPosition+0xd2>
 800818c:	4b5d      	ldr	r3, [pc, #372]	; (8008304 <changeBallPosition+0x200>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d120      	bne.n	80081d6 <changeBallPosition+0xd2>
 8008194:	4b55      	ldr	r3, [pc, #340]	; (80082ec <changeBallPosition+0x1e8>)
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f7f8 f97b 	bl	8000494 <__aeabi_i2d>
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	4b55      	ldr	r3, [pc, #340]	; (80082f8 <changeBallPosition+0x1f4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f8 f974 	bl	8000494 <__aeabi_i2d>
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	4b55      	ldr	r3, [pc, #340]	; (8008308 <changeBallPosition+0x204>)
 80081b2:	f7f8 f9d5 	bl	8000560 <__aeabi_dmul>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4620      	mov	r0, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	f7f8 f81d 	bl	80001fc <__adddf3>
 80081c2:	4603      	mov	r3, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	4618      	mov	r0, r3
 80081c8:	4621      	mov	r1, r4
 80081ca:	f7f8 fbdb 	bl	8000984 <__aeabi_d2uiz>
 80081ce:	4603      	mov	r3, r0
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	4b46      	ldr	r3, [pc, #280]	; (80082ec <changeBallPosition+0x1e8>)
 80081d4:	801a      	strh	r2, [r3, #0]
	if(y > 1 && rightDirection == 1) xpos += 0.5*lastY;
 80081d6:	4b47      	ldr	r3, [pc, #284]	; (80082f4 <changeBallPosition+0x1f0>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	dd24      	ble.n	8008228 <changeBallPosition+0x124>
 80081de:	4b4b      	ldr	r3, [pc, #300]	; (800830c <changeBallPosition+0x208>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d120      	bne.n	8008228 <changeBallPosition+0x124>
 80081e6:	4b41      	ldr	r3, [pc, #260]	; (80082ec <changeBallPosition+0x1e8>)
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7f8 f952 	bl	8000494 <__aeabi_i2d>
 80081f0:	4604      	mov	r4, r0
 80081f2:	460d      	mov	r5, r1
 80081f4:	4b40      	ldr	r3, [pc, #256]	; (80082f8 <changeBallPosition+0x1f4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7f8 f94b 	bl	8000494 <__aeabi_i2d>
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	4b41      	ldr	r3, [pc, #260]	; (8008308 <changeBallPosition+0x204>)
 8008204:	f7f8 f9ac 	bl	8000560 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4620      	mov	r0, r4
 800820e:	4629      	mov	r1, r5
 8008210:	f7f7 fff4 	bl	80001fc <__adddf3>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	4618      	mov	r0, r3
 800821a:	4621      	mov	r1, r4
 800821c:	f7f8 fbb2 	bl	8000984 <__aeabi_d2uiz>
 8008220:	4603      	mov	r3, r0
 8008222:	b29a      	uxth	r2, r3
 8008224:	4b31      	ldr	r3, [pc, #196]	; (80082ec <changeBallPosition+0x1e8>)
 8008226:	801a      	strh	r2, [r3, #0]

	if(x < 1 && upDirection == 1) ypos += 0.5*lastX;
 8008228:	4b34      	ldr	r3, [pc, #208]	; (80082fc <changeBallPosition+0x1f8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dc24      	bgt.n	800827a <changeBallPosition+0x176>
 8008230:	4b37      	ldr	r3, [pc, #220]	; (8008310 <changeBallPosition+0x20c>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d120      	bne.n	800827a <changeBallPosition+0x176>
 8008238:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <changeBallPosition+0x1ec>)
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f7f8 f929 	bl	8000494 <__aeabi_i2d>
 8008242:	4604      	mov	r4, r0
 8008244:	460d      	mov	r5, r1
 8008246:	4b2e      	ldr	r3, [pc, #184]	; (8008300 <changeBallPosition+0x1fc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f7f8 f922 	bl	8000494 <__aeabi_i2d>
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	4b2c      	ldr	r3, [pc, #176]	; (8008308 <changeBallPosition+0x204>)
 8008256:	f7f8 f983 	bl	8000560 <__aeabi_dmul>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f7 ffcb 	bl	80001fc <__adddf3>
 8008266:	4603      	mov	r3, r0
 8008268:	460c      	mov	r4, r1
 800826a:	4618      	mov	r0, r3
 800826c:	4621      	mov	r1, r4
 800826e:	f7f8 fb89 	bl	8000984 <__aeabi_d2uiz>
 8008272:	4603      	mov	r3, r0
 8008274:	b29a      	uxth	r2, r3
 8008276:	4b1e      	ldr	r3, [pc, #120]	; (80082f0 <changeBallPosition+0x1ec>)
 8008278:	801a      	strh	r2, [r3, #0]
	if(x > 1 && downDirection == 1) ypos += 0.5*lastX;
 800827a:	4b20      	ldr	r3, [pc, #128]	; (80082fc <changeBallPosition+0x1f8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b01      	cmp	r3, #1
 8008280:	dd24      	ble.n	80082cc <changeBallPosition+0x1c8>
 8008282:	4b24      	ldr	r3, [pc, #144]	; (8008314 <changeBallPosition+0x210>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d120      	bne.n	80082cc <changeBallPosition+0x1c8>
 800828a:	4b19      	ldr	r3, [pc, #100]	; (80082f0 <changeBallPosition+0x1ec>)
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7f8 f900 	bl	8000494 <__aeabi_i2d>
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	4b19      	ldr	r3, [pc, #100]	; (8008300 <changeBallPosition+0x1fc>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f7f8 f8f9 	bl	8000494 <__aeabi_i2d>
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	4b18      	ldr	r3, [pc, #96]	; (8008308 <changeBallPosition+0x204>)
 80082a8:	f7f8 f95a 	bl	8000560 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f7 ffa2 	bl	80001fc <__adddf3>
 80082b8:	4603      	mov	r3, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4618      	mov	r0, r3
 80082be:	4621      	mov	r1, r4
 80082c0:	f7f8 fb60 	bl	8000984 <__aeabi_d2uiz>
 80082c4:	4603      	mov	r3, r0
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <changeBallPosition+0x1ec>)
 80082ca:	801a      	strh	r2, [r3, #0]

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80082cc:	4812      	ldr	r0, [pc, #72]	; (8008318 <changeBallPosition+0x214>)
 80082ce:	f001 f841 	bl	8009354 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(xpos, ypos, 10);
 80082d2:	4b06      	ldr	r3, [pc, #24]	; (80082ec <changeBallPosition+0x1e8>)
 80082d4:	8818      	ldrh	r0, [r3, #0]
 80082d6:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <changeBallPosition+0x1ec>)
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	220a      	movs	r2, #10
 80082dc:	4619      	mov	r1, r3
 80082de:	f001 fbe5 	bl	8009aac <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80082e2:	480d      	ldr	r0, [pc, #52]	; (8008318 <changeBallPosition+0x214>)
 80082e4:	f001 f84e 	bl	8009384 <BSP_LCD_SetBackColor>

}
 80082e8:	bf00      	nop
 80082ea:	bdb0      	pop	{r4, r5, r7, pc}
 80082ec:	2000006c 	.word	0x2000006c
 80082f0:	2000006e 	.word	0x2000006e
 80082f4:	20003e14 	.word	0x20003e14
 80082f8:	20004010 	.word	0x20004010
 80082fc:	20003e10 	.word	0x20003e10
 8008300:	2000400c 	.word	0x2000400c
 8008304:	20000064 	.word	0x20000064
 8008308:	3fe00000 	.word	0x3fe00000
 800830c:	20000065 	.word	0x20000065
 8008310:	20000066 	.word	0x20000066
 8008314:	20000067 	.word	0x20000067
 8008318:	ffff0000 	.word	0xffff0000

0800831c <startService>:

void startService(void) {
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8008320:	4b08      	ldr	r3, [pc, #32]	; (8008344 <startService+0x28>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <startService+0x20>
		x = 0;
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <startService+0x2c>)
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
		y = 0;
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <startService+0x30>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
		z = 0;
 8008336:	4b06      	ldr	r3, [pc, #24]	; (8008350 <startService+0x34>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
	}
	changeBallPosition();
 800833c:	f7ff fee2 	bl	8008104 <changeBallPosition>
}
 8008340:	bf00      	nop
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20004004 	.word	0x20004004
 8008348:	20003e10 	.word	0x20003e10
 800834c:	20003e14 	.word	0x20003e14
 8008350:	20003e18 	.word	0x20003e18

08008354 <odczytyService>:

void odczytyService(void) {
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8008358:	4b0e      	ldr	r3, [pc, #56]	; (8008394 <odczytyService+0x40>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d016      	beq.n	8008390 <odczytyService+0x3c>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <odczytyService+0x40>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	889b      	ldrh	r3, [r3, #4]
 8008368:	2bf9      	cmp	r3, #249	; 0xf9
 800836a:	d911      	bls.n	8008390 <odczytyService+0x3c>
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <odczytyService+0x40>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	889b      	ldrh	r3, [r3, #4]
 8008372:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8008376:	d80b      	bhi.n	8008390 <odczytyService+0x3c>
				{
			refreshODCZYTY_flag = 0;
 8008378:	4b07      	ldr	r3, [pc, #28]	; (8008398 <odczytyService+0x44>)
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
			page = 1;
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <odczytyService+0x48>)
 8008380:	2201      	movs	r2, #1
 8008382:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <odczytyService+0x4c>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 800838a:	2032      	movs	r0, #50	; 0x32
 800838c:	f7f8 fd34 	bl	8000df8 <HAL_Delay>
		}
	}

}
 8008390:	bf00      	nop
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20004004 	.word	0x20004004
 8008398:	20003e60 	.word	0x20003e60
 800839c:	20003e64 	.word	0x20003e64
 80083a0:	20000054 	.word	0x20000054

080083a4 <onasService>:

void onasService(void) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 80083a8:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <onasService+0x3c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d013      	beq.n	80083da <onasService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <onasService+0x3c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	889b      	ldrh	r3, [r3, #4]
 80083b8:	2bf9      	cmp	r3, #249	; 0xf9
 80083ba:	d90e      	bls.n	80083da <onasService+0x36>
 80083bc:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <onasService+0x3c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80083c6:	d808      	bhi.n	80083da <onasService+0x36>
				{
			page = 1;
 80083c8:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <onasService+0x40>)
 80083ca:	2201      	movs	r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <onasService+0x44>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80083d4:	2032      	movs	r0, #50	; 0x32
 80083d6:	f7f8 fd0f 	bl	8000df8 <HAL_Delay>
		}
	}
}
 80083da:	bf00      	nop
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20004004 	.word	0x20004004
 80083e4:	20003e64 	.word	0x20003e64
 80083e8:	20000054 	.word	0x20000054

080083ec <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b09a      	sub	sp, #104	; 0x68
 80083f0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80083f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083f6:	2234      	movs	r2, #52	; 0x34
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 fac5 	bl	800a98a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8008400:	463b      	mov	r3, r7
 8008402:	2234      	movs	r2, #52	; 0x34
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fabf 	bl	800a98a <memset>

  hltdc.Instance = LTDC;
 800840c:	4b4e      	ldr	r3, [pc, #312]	; (8008548 <MX_LTDC_Init+0x15c>)
 800840e:	4a4f      	ldr	r2, [pc, #316]	; (800854c <MX_LTDC_Init+0x160>)
 8008410:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008412:	4b4d      	ldr	r3, [pc, #308]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008418:	4b4b      	ldr	r3, [pc, #300]	; (8008548 <MX_LTDC_Init+0x15c>)
 800841a:	2200      	movs	r2, #0
 800841c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800841e:	4b4a      	ldr	r3, [pc, #296]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008420:	2200      	movs	r2, #0
 8008422:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008424:	4b48      	ldr	r3, [pc, #288]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008426:	2200      	movs	r2, #0
 8008428:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800842a:	4b47      	ldr	r3, [pc, #284]	; (8008548 <MX_LTDC_Init+0x15c>)
 800842c:	2207      	movs	r2, #7
 800842e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8008430:	4b45      	ldr	r3, [pc, #276]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008432:	2203      	movs	r2, #3
 8008434:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8008436:	4b44      	ldr	r3, [pc, #272]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008438:	220e      	movs	r2, #14
 800843a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800843c:	4b42      	ldr	r3, [pc, #264]	; (8008548 <MX_LTDC_Init+0x15c>)
 800843e:	2205      	movs	r2, #5
 8008440:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 8008442:	4b41      	ldr	r3, [pc, #260]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008444:	f240 1225 	movw	r2, #293	; 0x125
 8008448:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 800844a:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <MX_LTDC_Init+0x15c>)
 800844c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008450:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 8008452:	4b3d      	ldr	r3, [pc, #244]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008454:	f240 122b 	movw	r2, #299	; 0x12b
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 800845a:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <MX_LTDC_Init+0x15c>)
 800845c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8008462:	4b39      	ldr	r3, [pc, #228]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800846a:	4b37      	ldr	r3, [pc, #220]	; (8008548 <MX_LTDC_Init+0x15c>)
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8008472:	4b35      	ldr	r3, [pc, #212]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800847a:	4833      	ldr	r0, [pc, #204]	; (8008548 <MX_LTDC_Init+0x15c>)
 800847c:	f7fa fb4e 	bl	8002b1c <HAL_LTDC_Init>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8008486:	f000 fa8d 	bl	80089a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800849a:	2300      	movs	r3, #0
 800849c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80084a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084aa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80084ac:	2305      	movs	r3, #5
 80084ae:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80084ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80084d2:	2200      	movs	r2, #0
 80084d4:	4619      	mov	r1, r3
 80084d6:	481c      	ldr	r0, [pc, #112]	; (8008548 <MX_LTDC_Init+0x15c>)
 80084d8:	f7fa fbf0 	bl	8002cbc <HAL_LTDC_ConfigLayer>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80084e2:	f000 fa5f 	bl	80089a4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80084f6:	2300      	movs	r3, #0
 80084f8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008506:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8008508:	2305      	movs	r3, #5
 800850a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800852a:	463b      	mov	r3, r7
 800852c:	2201      	movs	r2, #1
 800852e:	4619      	mov	r1, r3
 8008530:	4805      	ldr	r0, [pc, #20]	; (8008548 <MX_LTDC_Init+0x15c>)
 8008532:	f7fa fbc3 	bl	8002cbc <HAL_LTDC_ConfigLayer>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800853c:	f000 fa32 	bl	80089a4 <Error_Handler>
  }

}
 8008540:	bf00      	nop
 8008542:	3768      	adds	r7, #104	; 0x68
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20004014 	.word	0x20004014
 800854c:	40016800 	.word	0x40016800

08008550 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08e      	sub	sp, #56	; 0x38
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	605a      	str	r2, [r3, #4]
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	60da      	str	r2, [r3, #12]
 8008566:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a77      	ldr	r2, [pc, #476]	; (800874c <HAL_LTDC_MspInit+0x1fc>)
 800856e:	4293      	cmp	r3, r2
 8008570:	f040 80e8 	bne.w	8008744 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008574:	2300      	movs	r3, #0
 8008576:	623b      	str	r3, [r7, #32]
 8008578:	4a75      	ldr	r2, [pc, #468]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 800857a:	4b75      	ldr	r3, [pc, #468]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008582:	6453      	str	r3, [r2, #68]	; 0x44
 8008584:	4b72      	ldr	r3, [pc, #456]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800858c:	623b      	str	r3, [r7, #32]
 800858e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	4a6e      	ldr	r2, [pc, #440]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008596:	4b6e      	ldr	r3, [pc, #440]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f043 0320 	orr.w	r3, r3, #32
 800859e:	6313      	str	r3, [r2, #48]	; 0x30
 80085a0:	4b6b      	ldr	r3, [pc, #428]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ac:	2300      	movs	r3, #0
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	4a67      	ldr	r2, [pc, #412]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085b2:	4b67      	ldr	r3, [pc, #412]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	f043 0301 	orr.w	r3, r3, #1
 80085ba:	6313      	str	r3, [r2, #48]	; 0x30
 80085bc:	4b64      	ldr	r3, [pc, #400]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	4a60      	ldr	r2, [pc, #384]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085ce:	4b60      	ldr	r3, [pc, #384]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	f043 0302 	orr.w	r3, r3, #2
 80085d6:	6313      	str	r3, [r2, #48]	; 0x30
 80085d8:	4b5d      	ldr	r3, [pc, #372]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80085e4:	2300      	movs	r3, #0
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	4a59      	ldr	r2, [pc, #356]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085ea:	4b59      	ldr	r3, [pc, #356]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f2:	6313      	str	r3, [r2, #48]	; 0x30
 80085f4:	4b56      	ldr	r3, [pc, #344]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	4a52      	ldr	r2, [pc, #328]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008606:	4b52      	ldr	r3, [pc, #328]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	f043 0304 	orr.w	r3, r3, #4
 800860e:	6313      	str	r3, [r2, #48]	; 0x30
 8008610:	4b4f      	ldr	r3, [pc, #316]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800861c:	2300      	movs	r3, #0
 800861e:	60bb      	str	r3, [r7, #8]
 8008620:	4a4b      	ldr	r2, [pc, #300]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008622:	4b4b      	ldr	r3, [pc, #300]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	f043 0308 	orr.w	r3, r3, #8
 800862a:	6313      	str	r3, [r2, #48]	; 0x30
 800862c:	4b48      	ldr	r3, [pc, #288]	; (8008750 <HAL_LTDC_MspInit+0x200>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8008638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800863e:	2302      	movs	r3, #2
 8008640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008642:	2300      	movs	r3, #0
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008646:	2300      	movs	r3, #0
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800864a:	230e      	movs	r3, #14
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800864e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008652:	4619      	mov	r1, r3
 8008654:	483f      	ldr	r0, [pc, #252]	; (8008754 <HAL_LTDC_MspInit+0x204>)
 8008656:	f7f8 ff5b 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800865a:	f641 0358 	movw	r3, #6232	; 0x1858
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008660:	2302      	movs	r3, #2
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008664:	2300      	movs	r3, #0
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008668:	2300      	movs	r3, #0
 800866a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800866c:	230e      	movs	r3, #14
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008674:	4619      	mov	r1, r3
 8008676:	4838      	ldr	r0, [pc, #224]	; (8008758 <HAL_LTDC_MspInit+0x208>)
 8008678:	f7f8 ff4a 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800867c:	2303      	movs	r3, #3
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008680:	2302      	movs	r3, #2
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008684:	2300      	movs	r3, #0
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008688:	2300      	movs	r3, #0
 800868a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800868c:	2309      	movs	r3, #9
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008694:	4619      	mov	r1, r3
 8008696:	4831      	ldr	r0, [pc, #196]	; (800875c <HAL_LTDC_MspInit+0x20c>)
 8008698:	f7f8 ff3a 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800869c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a2:	2302      	movs	r3, #2
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086aa:	2300      	movs	r3, #0
 80086ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80086ae:	230e      	movs	r3, #14
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b6:	4619      	mov	r1, r3
 80086b8:	4828      	ldr	r0, [pc, #160]	; (800875c <HAL_LTDC_MspInit+0x20c>)
 80086ba:	f7f8 ff29 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80086be:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c4:	2302      	movs	r3, #2
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086cc:	2300      	movs	r3, #0
 80086ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80086d0:	230e      	movs	r3, #14
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80086d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d8:	4619      	mov	r1, r3
 80086da:	4821      	ldr	r0, [pc, #132]	; (8008760 <HAL_LTDC_MspInit+0x210>)
 80086dc:	f7f8 ff18 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80086e0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e6:	2302      	movs	r3, #2
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ee:	2300      	movs	r3, #0
 80086f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80086f2:	230e      	movs	r3, #14
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086fa:	4619      	mov	r1, r3
 80086fc:	4819      	ldr	r0, [pc, #100]	; (8008764 <HAL_LTDC_MspInit+0x214>)
 80086fe:	f7f8 ff07 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8008702:	2348      	movs	r3, #72	; 0x48
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008706:	2302      	movs	r3, #2
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870a:	2300      	movs	r3, #0
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800870e:	2300      	movs	r3, #0
 8008710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008712:	230e      	movs	r3, #14
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800871a:	4619      	mov	r1, r3
 800871c:	4812      	ldr	r0, [pc, #72]	; (8008768 <HAL_LTDC_MspInit+0x218>)
 800871e:	f7f8 fef7 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8008722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008728:	2302      	movs	r3, #2
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872c:	2300      	movs	r3, #0
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008730:	2300      	movs	r3, #0
 8008732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008734:	2309      	movs	r3, #9
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800873c:	4619      	mov	r1, r3
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <HAL_LTDC_MspInit+0x210>)
 8008740:	f7f8 fee6 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8008744:	bf00      	nop
 8008746:	3738      	adds	r7, #56	; 0x38
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40016800 	.word	0x40016800
 8008750:	40023800 	.word	0x40023800
 8008754:	40021400 	.word	0x40021400
 8008758:	40020000 	.word	0x40020000
 800875c:	40020400 	.word	0x40020400
 8008760:	40021800 	.word	0x40021800
 8008764:	40020800 	.word	0x40020800
 8008768:	40020c00 	.word	0x40020c00

0800876c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008770:	f7f8 fb00 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008774:	f000 f822 	bl	80087bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initPointers(&hdma2d, &hltdc, &hsdram1);
 8008778:	4a0d      	ldr	r2, [pc, #52]	; (80087b0 <main+0x44>)
 800877a:	490e      	ldr	r1, [pc, #56]	; (80087b4 <main+0x48>)
 800877c:	480e      	ldr	r0, [pc, #56]	; (80087b8 <main+0x4c>)
 800877e:	f000 f8a7 	bl	80088d0 <initPointers>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008782:	f7fe fa71 	bl	8006c68 <MX_GPIO_Init>
  MX_LTDC_Init();
 8008786:	f7ff fe31 	bl	80083ec <MX_LTDC_Init>
  MX_FMC_Init();
 800878a:	f7fe f825 	bl	80067d8 <MX_FMC_Init>
  MX_DMA2D_Init();
 800878e:	f7fd ffe3 	bl	8006758 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8008792:	f7fe fde1 	bl	8007358 <MX_I2C3_Init>
  MX_SPI5_Init();
 8008796:	f000 f90d 	bl	80089b4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800879a:	f002 f811 	bl	800a7c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  gyro_init();
 800879e:	f7fe fbf5 	bl	8006f8c <gyro_init>
  ltdc_finishConfig();
 80087a2:	f000 f8bd 	bl	8008920 <ltdc_finishConfig>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80087a6:	f7fe f8f3 	bl	8006990 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80087aa:	f7fc fe82 	bl	80054b2 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80087ae:	e7fe      	b.n	80087ae <main+0x42>
 80087b0:	20003f50 	.word	0x20003f50
 80087b4:	20004014 	.word	0x20004014
 80087b8:	20003f10 	.word	0x20003f10

080087bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b0a0      	sub	sp, #128	; 0x80
 80087c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80087c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087c6:	2230      	movs	r2, #48	; 0x30
 80087c8:	2100      	movs	r1, #0
 80087ca:	4618      	mov	r0, r3
 80087cc:	f002 f8dd 	bl	800a98a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80087d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	609a      	str	r2, [r3, #8]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087e0:	f107 030c 	add.w	r3, r7, #12
 80087e4:	2230      	movs	r2, #48	; 0x30
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 f8ce 	bl	800a98a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80087ee:	2300      	movs	r3, #0
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	4a35      	ldr	r2, [pc, #212]	; (80088c8 <SystemClock_Config+0x10c>)
 80087f4:	4b34      	ldr	r3, [pc, #208]	; (80088c8 <SystemClock_Config+0x10c>)
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087fc:	6413      	str	r3, [r2, #64]	; 0x40
 80087fe:	4b32      	ldr	r3, [pc, #200]	; (80088c8 <SystemClock_Config+0x10c>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800880a:	2300      	movs	r3, #0
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	4a2f      	ldr	r2, [pc, #188]	; (80088cc <SystemClock_Config+0x110>)
 8008810:	4b2e      	ldr	r3, [pc, #184]	; (80088cc <SystemClock_Config+0x110>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	4b2c      	ldr	r3, [pc, #176]	; (80088cc <SystemClock_Config+0x110>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008822:	607b      	str	r3, [r7, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008826:	2301      	movs	r3, #1
 8008828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800882a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800882e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008830:	2302      	movs	r3, #2
 8008832:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008834:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008838:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800883a:	2304      	movs	r3, #4
 800883c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800883e:	23b4      	movs	r3, #180	; 0xb4
 8008840:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008842:	2302      	movs	r3, #2
 8008844:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008846:	2307      	movs	r3, #7
 8008848:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800884a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800884e:	4618      	mov	r0, r3
 8008850:	f7fa fc8e 	bl	8003170 <HAL_RCC_OscConfig>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800885a:	f000 f8a3 	bl	80089a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800885e:	f7fa fc37 	bl	80030d0 <HAL_PWREx_EnableOverDrive>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8008868:	f000 f89c 	bl	80089a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800886c:	230f      	movs	r3, #15
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008870:	2302      	movs	r3, #2
 8008872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008874:	2300      	movs	r3, #0
 8008876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800887c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800887e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008882:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008884:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008888:	2105      	movs	r1, #5
 800888a:	4618      	mov	r0, r3
 800888c:	f7fa feb2 	bl	80035f4 <HAL_RCC_ClockConfig>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8008896:	f000 f885 	bl	80089a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800889a:	2308      	movs	r3, #8
 800889c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800889e:	23c0      	movs	r3, #192	; 0xc0
 80088a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80088a2:	2304      	movs	r3, #4
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80088a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088ac:	f107 030c 	add.w	r3, r7, #12
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fb f8bf 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80088bc:	f000 f872 	bl	80089a4 <Error_Handler>
  }
}
 80088c0:	bf00      	nop
 80088c2:	3780      	adds	r7, #128	; 0x80
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	40023800 	.word	0x40023800
 80088cc:	40007000 	.word	0x40007000

080088d0 <initPointers>:

uint8_t tickBuffer[50];
uint8_t tickSize;

void initPointers(DMA2D_HandleTypeDef* arg_hdma2d,
		LTDC_HandleTypeDef* arg_hltdc, SDRAM_HandleTypeDef* arg_hsdram1) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
	p_hdma2d = arg_hdma2d;
 80088dc:	4a0d      	ldr	r2, [pc, #52]	; (8008914 <initPointers+0x44>)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6013      	str	r3, [r2, #0]
	p_hltdc = arg_hltdc;
 80088e2:	4a0d      	ldr	r2, [pc, #52]	; (8008918 <initPointers+0x48>)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6013      	str	r3, [r2, #0]
	p_hsdram1 = arg_hsdram1;
 80088e8:	4a0c      	ldr	r2, [pc, #48]	; (800891c <initPointers+0x4c>)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6013      	str	r3, [r2, #0]

	LTDCSetup(p_hltdc);
 80088ee:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <initPointers+0x48>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fc70 	bl	80091d8 <LTDCSetup>
	RAMSetup(p_hsdram1);
 80088f8:	4b08      	ldr	r3, [pc, #32]	; (800891c <initPointers+0x4c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fa95 	bl	8009e2c <RAMSetup>
	DMASetup(p_hdma2d);
 8008902:	4b04      	ldr	r3, [pc, #16]	; (8008914 <initPointers+0x44>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fc76 	bl	80091f8 <DMASetup>
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	200040fc 	.word	0x200040fc
 8008918:	20004100 	.word	0x20004100
 800891c:	200040c0 	.word	0x200040c0

08008920 <ltdc_finishConfig>:

void fmc_finishConfig() {
	p_hsdram1->Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
}

void ltdc_finishConfig() {
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
	initILI9341();
 8008924:	f000 fc78 	bl	8009218 <initILI9341>
	RAMSetup(p_hsdram1);
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <ltdc_finishConfig+0x34>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fa7d 	bl	8009e2c <RAMSetup>
	/* Initialize the SDRAM */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008932:	f240 506a 	movw	r0, #1386	; 0x56a
 8008936:	f001 fa89 	bl	8009e4c <BSP_SDRAM_Initialization_sequence>
	/* Set the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800893a:	4807      	ldr	r0, [pc, #28]	; (8008958 <ltdc_finishConfig+0x38>)
 800893c:	f000 fd3c 	bl	80093b8 <BSP_LCD_SetFont>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8008940:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008944:	2001      	movs	r0, #1
 8008946:	f000 fc8f 	bl	8009268 <BSP_LCD_LayerDefaultInit>
	HAL_Delay(100);
 800894a:	2064      	movs	r0, #100	; 0x64
 800894c:	f7f8 fa54 	bl	8000df8 <HAL_Delay>
}
 8008950:	bf00      	nop
 8008952:	bd80      	pop	{r7, pc}
 8008954:	200040c0 	.word	0x200040c0
 8008958:	20000010 	.word	0x20000010

0800895c <ts_init>:
void ts_init(TS_StateTypeDef* struktura) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	BSP_TS_Init(1000, 1000);
 8008964:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800896c:	f001 fad8 	bl	8009f20 <BSP_TS_Init>
	BSP_TS_GetState(struktura);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fb0f 	bl	8009f94 <BSP_TS_GetState>

}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d101      	bne.n	8008996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008992:	f7f8 fa11 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40001000 	.word	0x40001000

080089a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80089a8:	bf00      	nop
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80089b8:	4b17      	ldr	r3, [pc, #92]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089ba:	4a18      	ldr	r2, [pc, #96]	; (8008a1c <MX_SPI5_Init+0x68>)
 80089bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80089be:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80089c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80089cc:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80089d2:	4b11      	ldr	r3, [pc, #68]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089da:	2200      	movs	r2, #0
 80089dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80089de:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089e8:	2218      	movs	r2, #24
 80089ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089f8:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <MX_SPI5_Init+0x64>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <MX_SPI5_Init+0x64>)
 8008a00:	220a      	movs	r2, #10
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008a04:	4804      	ldr	r0, [pc, #16]	; (8008a18 <MX_SPI5_Init+0x64>)
 8008a06:	f7fb fa38 	bl	8003e7a <HAL_SPI_Init>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008a10:	f7ff ffc8 	bl	80089a4 <Error_Handler>
  }

}
 8008a14:	bf00      	nop
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20004104 	.word	0x20004104
 8008a1c:	40015000 	.word	0x40015000

08008a20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	; 0x28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	605a      	str	r2, [r3, #4]
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a19      	ldr	r2, [pc, #100]	; (8008aa4 <HAL_SPI_MspInit+0x84>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d12c      	bne.n	8008a9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <HAL_SPI_MspInit+0x88>)
 8008a48:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <HAL_SPI_MspInit+0x88>)
 8008a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a50:	6453      	str	r3, [r2, #68]	; 0x44
 8008a52:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <HAL_SPI_MspInit+0x88>)
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	4a11      	ldr	r2, [pc, #68]	; (8008aa8 <HAL_SPI_MspInit+0x88>)
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <HAL_SPI_MspInit+0x88>)
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	f043 0320 	orr.w	r3, r3, #32
 8008a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <HAL_SPI_MspInit+0x88>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8008a7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a80:	2302      	movs	r3, #2
 8008a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008a8c:	2305      	movs	r3, #5
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008a90:	f107 0314 	add.w	r3, r7, #20
 8008a94:	4619      	mov	r1, r3
 8008a96:	4805      	ldr	r0, [pc, #20]	; (8008aac <HAL_SPI_MspInit+0x8c>)
 8008a98:	f7f8 fd3a 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3728      	adds	r7, #40	; 0x28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40015000 	.word	0x40015000
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	40021400 	.word	0x40021400

08008ab0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <HAL_SPI_MspDeInit+0x30>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8008ac2:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <HAL_SPI_MspDeInit+0x34>)
 8008ac4:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <HAL_SPI_MspDeInit+0x34>)
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008acc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8008ace:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008ad2:	4805      	ldr	r0, [pc, #20]	; (8008ae8 <HAL_SPI_MspDeInit+0x38>)
 8008ad4:	f7f8 fec6 	bl	8001864 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40015000 	.word	0x40015000
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	40021400 	.word	0x40021400

08008aec <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a33      	ldr	r2, [pc, #204]	; (8008bc8 <I2Cx_MspInit+0xdc>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d15f      	bne.n	8008bbe <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	4a32      	ldr	r2, [pc, #200]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b04:	4b31      	ldr	r3, [pc, #196]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	f043 0304 	orr.w	r3, r3, #4
 8008b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b0e:	4b2f      	ldr	r3, [pc, #188]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	4a2b      	ldr	r2, [pc, #172]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b20:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	6313      	str	r3, [r2, #48]	; 0x30
 8008b2a:	4b28      	ldr	r3, [pc, #160]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8008b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8008b3c:	2312      	movs	r3, #18
 8008b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8008b44:	2302      	movs	r3, #2
 8008b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008b48:	2304      	movs	r3, #4
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	4619      	mov	r1, r3
 8008b52:	481f      	ldr	r0, [pc, #124]	; (8008bd0 <I2Cx_MspInit+0xe4>)
 8008b54:	f7f8 fcdc 	bl	8001510 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8008b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b5c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8008b5e:	f107 0314 	add.w	r3, r7, #20
 8008b62:	4619      	mov	r1, r3
 8008b64:	481b      	ldr	r0, [pc, #108]	; (8008bd4 <I2Cx_MspInit+0xe8>)
 8008b66:	f7f8 fcd3 	bl	8001510 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	4a17      	ldr	r2, [pc, #92]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b78:	6413      	str	r3, [r2, #64]	; 0x40
 8008b7a:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b82:	60bb      	str	r3, [r7, #8]
 8008b84:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8008b86:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b88:	4b10      	ldr	r3, [pc, #64]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b90:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8008b92:	4a0e      	ldr	r2, [pc, #56]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <I2Cx_MspInit+0xe0>)
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b9c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	210f      	movs	r1, #15
 8008ba2:	2048      	movs	r0, #72	; 0x48
 8008ba4:	f7f8 fa00 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008ba8:	2048      	movs	r0, #72	; 0x48
 8008baa:	f7f8 fa19 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	210f      	movs	r1, #15
 8008bb2:	2049      	movs	r0, #73	; 0x49
 8008bb4:	f7f8 f9f8 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8008bb8:	2049      	movs	r0, #73	; 0x49
 8008bba:	f7f8 fa11 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	3728      	adds	r7, #40	; 0x28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40005c00 	.word	0x40005c00
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	40020000 	.word	0x40020000
 8008bd4:	40020800 	.word	0x40020800

08008bd8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8008bdc:	4814      	ldr	r0, [pc, #80]	; (8008c30 <I2Cx_Init+0x58>)
 8008bde:	f7f9 fbdf 	bl	80023a0 <HAL_I2C_GetState>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d121      	bne.n	8008c2c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8008be8:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <I2Cx_Init+0x58>)
 8008bea:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <I2Cx_Init+0x5c>)
 8008bec:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8008bee:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <I2Cx_Init+0x58>)
 8008bf0:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <I2Cx_Init+0x60>)
 8008bf2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8008bf4:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <I2Cx_Init+0x58>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8008bfa:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <I2Cx_Init+0x58>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <I2Cx_Init+0x58>)
 8008c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c06:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8008c08:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <I2Cx_Init+0x58>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <I2Cx_Init+0x58>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <I2Cx_Init+0x58>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8008c1a:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <I2Cx_Init+0x58>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8008c20:	4803      	ldr	r0, [pc, #12]	; (8008c30 <I2Cx_Init+0x58>)
 8008c22:	f7ff ff63 	bl	8008aec <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8008c26:	4802      	ldr	r0, [pc, #8]	; (8008c30 <I2Cx_Init+0x58>)
 8008c28:	f7f8 ff42 	bl	8001ab0 <HAL_I2C_Init>
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	2000415c 	.word	0x2000415c
 8008c34:	40005c00 	.word	0x40005c00
 8008c38:	000186a0 	.word	0x000186a0

08008c3c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8008c42:	2300      	movs	r3, #0
 8008c44:	603b      	str	r3, [r7, #0]
 8008c46:	4a13      	ldr	r2, [pc, #76]	; (8008c94 <I2Cx_ITConfig+0x58>)
 8008c48:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <I2Cx_ITConfig+0x58>)
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	6313      	str	r3, [r2, #48]	; 0x30
 8008c52:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <I2Cx_ITConfig+0x58>)
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8008c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8008c64:	2301      	movs	r3, #1
 8008c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <I2Cx_ITConfig+0x5c>)
 8008c6e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	4619      	mov	r1, r3
 8008c74:	4809      	ldr	r0, [pc, #36]	; (8008c9c <I2Cx_ITConfig+0x60>)
 8008c76:	f7f8 fc4b 	bl	8001510 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	210f      	movs	r1, #15
 8008c7e:	2028      	movs	r0, #40	; 0x28
 8008c80:	f7f8 f992 	bl	8000fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8008c84:	2028      	movs	r0, #40	; 0x28
 8008c86:	f7f8 f9ab 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
}
 8008c8a:	bf00      	nop
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40023800 	.word	0x40023800
 8008c98:	10210000 	.word	0x10210000
 8008c9c:	40020000 	.word	0x40020000

08008ca0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af04      	add	r7, sp, #16
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71fb      	strb	r3, [r7, #7]
 8008caa:	460b      	mov	r3, r1
 8008cac:	71bb      	strb	r3, [r7, #6]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	b299      	uxth	r1, r3
 8008cba:	79bb      	ldrb	r3, [r7, #6]
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <I2Cx_WriteData+0x4c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9302      	str	r3, [sp, #8]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	1d7b      	adds	r3, r7, #5
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4808      	ldr	r0, [pc, #32]	; (8008cf0 <I2Cx_WriteData+0x50>)
 8008cd0:	f7f9 f846 	bl	8001d60 <HAL_I2C_Mem_Write>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008cde:	f000 f863 	bl	8008da8 <I2Cx_Error>
  }        
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000070 	.word	0x20000070
 8008cf0:	2000415c 	.word	0x2000415c

08008cf4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af04      	add	r7, sp, #16
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	71fb      	strb	r3, [r7, #7]
 8008d00:	4613      	mov	r3, r2
 8008d02:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	b299      	uxth	r1, r3
 8008d10:	79bb      	ldrb	r3, [r7, #6]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <I2Cx_ReadData+0x50>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	f107 030e 	add.w	r3, r7, #14
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2301      	movs	r3, #1
 8008d26:	4808      	ldr	r0, [pc, #32]	; (8008d48 <I2Cx_ReadData+0x54>)
 8008d28:	f7f9 f914 	bl	8001f54 <HAL_I2C_Mem_Read>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008d36:	f000 f837 	bl	8008da8 <I2Cx_Error>
  
  }
  return value;
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20000070 	.word	0x20000070
 8008d48:	2000415c 	.word	0x2000415c

08008d4c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af04      	add	r7, sp, #16
 8008d52:	603a      	str	r2, [r7, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	71fb      	strb	r3, [r7, #7]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	71bb      	strb	r3, [r7, #6]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	b299      	uxth	r1, r3
 8008d6a:	79bb      	ldrb	r3, [r7, #6]
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <I2Cx_ReadBuffer+0x54>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	9302      	str	r3, [sp, #8]
 8008d74:	88bb      	ldrh	r3, [r7, #4]
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4809      	ldr	r0, [pc, #36]	; (8008da4 <I2Cx_ReadBuffer+0x58>)
 8008d80:	f7f9 f8e8 	bl	8001f54 <HAL_I2C_Mem_Read>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e002      	b.n	8008d98 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008d92:	f000 f809 	bl	8008da8 <I2Cx_Error>

    return 1;
 8008d96:	2301      	movs	r3, #1
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20000070 	.word	0x20000070
 8008da4:	2000415c 	.word	0x2000415c

08008da8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8008dac:	4803      	ldr	r0, [pc, #12]	; (8008dbc <I2Cx_Error+0x14>)
 8008dae:	f7f8 ffa7 	bl	8001d00 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8008db2:	f7ff ff11 	bl	8008bd8 <I2Cx_Init>
}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	2000415c 	.word	0x2000415c

08008dc0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8008dc4:	4819      	ldr	r0, [pc, #100]	; (8008e2c <SPIx_Init+0x6c>)
 8008dc6:	f7fb fcbb 	bl	8004740 <HAL_SPI_GetState>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d12b      	bne.n	8008e28 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8008dd0:	4b16      	ldr	r3, [pc, #88]	; (8008e2c <SPIx_Init+0x6c>)
 8008dd2:	4a17      	ldr	r2, [pc, #92]	; (8008e30 <SPIx_Init+0x70>)
 8008dd4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008dd6:	4b15      	ldr	r3, [pc, #84]	; (8008e2c <SPIx_Init+0x6c>)
 8008dd8:	2218      	movs	r2, #24
 8008dda:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8008ddc:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <SPIx_Init+0x6c>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <SPIx_Init+0x6c>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8008de8:	4b10      	ldr	r3, [pc, #64]	; (8008e2c <SPIx_Init+0x6c>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8008dee:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <SPIx_Init+0x6c>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8008df4:	4b0d      	ldr	r3, [pc, #52]	; (8008e2c <SPIx_Init+0x6c>)
 8008df6:	2207      	movs	r2, #7
 8008df8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <SPIx_Init+0x6c>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8008e00:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <SPIx_Init+0x6c>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <SPIx_Init+0x6c>)
 8008e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e0c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <SPIx_Init+0x6c>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <SPIx_Init+0x6c>)
 8008e16:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e1a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8008e1c:	4803      	ldr	r0, [pc, #12]	; (8008e2c <SPIx_Init+0x6c>)
 8008e1e:	f000 f853 	bl	8008ec8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8008e22:	4802      	ldr	r0, [pc, #8]	; (8008e2c <SPIx_Init+0x6c>)
 8008e24:	f7fb f829 	bl	8003e7a <HAL_SPI_Init>
  }
}
 8008e28:	bf00      	nop
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20003e68 	.word	0x20003e68
 8008e30:	40015000 	.word	0x40015000

08008e34 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <SPIx_Read+0x38>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f107 0108 	add.w	r1, r7, #8
 8008e4e:	4808      	ldr	r0, [pc, #32]	; (8008e70 <SPIx_Read+0x3c>)
 8008e50:	f7fb f9d0 	bl	80041f4 <HAL_SPI_Receive>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008e5e:	f000 f827 	bl	8008eb0 <SPIx_Error>
  }
  
  return readvalue;
 8008e62:	68bb      	ldr	r3, [r7, #8]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000074 	.word	0x20000074
 8008e70:	20003e68 	.word	0x20003e68

08008e74 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8008e82:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <SPIx_Write+0x34>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	1db9      	adds	r1, r7, #6
 8008e88:	2201      	movs	r2, #1
 8008e8a:	4808      	ldr	r0, [pc, #32]	; (8008eac <SPIx_Write+0x38>)
 8008e8c:	f7fb f880 	bl	8003f90 <HAL_SPI_Transmit>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008e9a:	f000 f809 	bl	8008eb0 <SPIx_Error>
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000074 	.word	0x20000074
 8008eac:	20003e68 	.word	0x20003e68

08008eb0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8008eb4:	4803      	ldr	r0, [pc, #12]	; (8008ec4 <SPIx_Error+0x14>)
 8008eb6:	f7fb f843 	bl	8003f40 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8008eba:	f7ff ff81 	bl	8008dc0 <SPIx_Init>
}
 8008ebe:	bf00      	nop
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20003e68 	.word	0x20003e68

08008ec8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08a      	sub	sp, #40	; 0x28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	613b      	str	r3, [r7, #16]
 8008ed4:	4a17      	ldr	r2, [pc, #92]	; (8008f34 <SPIx_MspInit+0x6c>)
 8008ed6:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <SPIx_MspInit+0x6c>)
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ede:	6453      	str	r3, [r2, #68]	; 0x44
 8008ee0:	4b14      	ldr	r3, [pc, #80]	; (8008f34 <SPIx_MspInit+0x6c>)
 8008ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <SPIx_MspInit+0x6c>)
 8008ef2:	4b10      	ldr	r3, [pc, #64]	; (8008f34 <SPIx_MspInit+0x6c>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	f043 0320 	orr.w	r3, r3, #32
 8008efa:	6313      	str	r3, [r2, #48]	; 0x30
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <SPIx_MspInit+0x6c>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8008f08:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8008f12:	2302      	movs	r3, #2
 8008f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8008f16:	2301      	movs	r3, #1
 8008f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8008f1a:	2305      	movs	r3, #5
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8008f1e:	f107 0314 	add.w	r3, r7, #20
 8008f22:	4619      	mov	r1, r3
 8008f24:	4804      	ldr	r0, [pc, #16]	; (8008f38 <SPIx_MspInit+0x70>)
 8008f26:	f7f8 faf3 	bl	8001510 <HAL_GPIO_Init>
}
 8008f2a:	bf00      	nop
 8008f2c:	3728      	adds	r7, #40	; 0x28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40023800 	.word	0x40023800
 8008f38:	40021400 	.word	0x40021400

08008f3c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8008f42:	4b36      	ldr	r3, [pc, #216]	; (800901c <LCD_IO_Init+0xe0>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d164      	bne.n	8009014 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8008f4a:	4b34      	ldr	r3, [pc, #208]	; (800901c <LCD_IO_Init+0xe0>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8008f50:	2300      	movs	r3, #0
 8008f52:	60bb      	str	r3, [r7, #8]
 8008f54:	4a32      	ldr	r2, [pc, #200]	; (8009020 <LCD_IO_Init+0xe4>)
 8008f56:	4b32      	ldr	r3, [pc, #200]	; (8009020 <LCD_IO_Init+0xe4>)
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	f043 0308 	orr.w	r3, r3, #8
 8008f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8008f60:	4b2f      	ldr	r3, [pc, #188]	; (8009020 <LCD_IO_Init+0xe4>)
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	60bb      	str	r3, [r7, #8]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8008f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008f72:	2301      	movs	r3, #1
 8008f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4619      	mov	r1, r3
 8008f84:	4827      	ldr	r0, [pc, #156]	; (8009024 <LCD_IO_Init+0xe8>)
 8008f86:	f7f8 fac3 	bl	8001510 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	4a24      	ldr	r2, [pc, #144]	; (8009020 <LCD_IO_Init+0xe4>)
 8008f90:	4b23      	ldr	r3, [pc, #140]	; (8009020 <LCD_IO_Init+0xe4>)
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	f043 0308 	orr.w	r3, r3, #8
 8008f98:	6313      	str	r3, [r2, #48]	; 0x30
 8008f9a:	4b21      	ldr	r3, [pc, #132]	; (8009020 <LCD_IO_Init+0xe4>)
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	607b      	str	r3, [r7, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8008fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008fac:	2301      	movs	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8008fb8:	f107 030c 	add.w	r3, r7, #12
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4819      	ldr	r0, [pc, #100]	; (8009024 <LCD_IO_Init+0xe8>)
 8008fc0:	f7f8 faa6 	bl	8001510 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4a15      	ldr	r2, [pc, #84]	; (8009020 <LCD_IO_Init+0xe4>)
 8008fca:	4b15      	ldr	r3, [pc, #84]	; (8009020 <LCD_IO_Init+0xe4>)
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	f043 0304 	orr.w	r3, r3, #4
 8008fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd4:	4b12      	ldr	r3, [pc, #72]	; (8009020 <LCD_IO_Init+0xe4>)
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	603b      	str	r3, [r7, #0]
 8008fde:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8008fe0:	2304      	movs	r3, #4
 8008fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008fec:	2302      	movs	r3, #2
 8008fee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	480c      	ldr	r0, [pc, #48]	; (8009028 <LCD_IO_Init+0xec>)
 8008ff8:	f7f8 fa8a 	bl	8001510 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2104      	movs	r1, #4
 8009000:	4809      	ldr	r0, [pc, #36]	; (8009028 <LCD_IO_Init+0xec>)
 8009002:	f7f8 fd3b 	bl	8001a7c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8009006:	2201      	movs	r2, #1
 8009008:	2104      	movs	r1, #4
 800900a:	4807      	ldr	r0, [pc, #28]	; (8009028 <LCD_IO_Init+0xec>)
 800900c:	f7f8 fd36 	bl	8001a7c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8009010:	f7ff fed6 	bl	8008dc0 <SPIx_Init>
  }
}
 8009014:	bf00      	nop
 8009016:	3720      	adds	r7, #32
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20003ec0 	.word	0x20003ec0
 8009020:	40023800 	.word	0x40023800
 8009024:	40020c00 	.word	0x40020c00
 8009028:	40020800 	.word	0x40020800

0800902c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009036:	2201      	movs	r2, #1
 8009038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800903c:	480a      	ldr	r0, [pc, #40]	; (8009068 <LCD_IO_WriteData+0x3c>)
 800903e:	f7f8 fd1d 	bl	8001a7c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8009042:	2200      	movs	r2, #0
 8009044:	2104      	movs	r1, #4
 8009046:	4809      	ldr	r0, [pc, #36]	; (800906c <LCD_IO_WriteData+0x40>)
 8009048:	f7f8 fd18 	bl	8001a7c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800904c:	88fb      	ldrh	r3, [r7, #6]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff ff10 	bl	8008e74 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009054:	2201      	movs	r2, #1
 8009056:	2104      	movs	r1, #4
 8009058:	4804      	ldr	r0, [pc, #16]	; (800906c <LCD_IO_WriteData+0x40>)
 800905a:	f7f8 fd0f 	bl	8001a7c <HAL_GPIO_WritePin>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40020c00 	.word	0x40020c00
 800906c:	40020800 	.word	0x40020800

08009070 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800907a:	2200      	movs	r2, #0
 800907c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009080:	480a      	ldr	r0, [pc, #40]	; (80090ac <LCD_IO_WriteReg+0x3c>)
 8009082:	f7f8 fcfb 	bl	8001a7c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8009086:	2200      	movs	r2, #0
 8009088:	2104      	movs	r1, #4
 800908a:	4809      	ldr	r0, [pc, #36]	; (80090b0 <LCD_IO_WriteReg+0x40>)
 800908c:	f7f8 fcf6 	bl	8001a7c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	b29b      	uxth	r3, r3
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff feed 	bl	8008e74 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800909a:	2201      	movs	r2, #1
 800909c:	2104      	movs	r1, #4
 800909e:	4804      	ldr	r0, [pc, #16]	; (80090b0 <LCD_IO_WriteReg+0x40>)
 80090a0:	f7f8 fcec 	bl	8001a7c <HAL_GPIO_WritePin>
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40020c00 	.word	0x40020c00
 80090b0:	40020800 	.word	0x40020800

080090b4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	460a      	mov	r2, r1
 80090be:	80fb      	strh	r3, [r7, #6]
 80090c0:	4613      	mov	r3, r2
 80090c2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80090c8:	2200      	movs	r2, #0
 80090ca:	2104      	movs	r1, #4
 80090cc:	4810      	ldr	r0, [pc, #64]	; (8009110 <LCD_IO_ReadData+0x5c>)
 80090ce:	f7f8 fcd5 	bl	8001a7c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80090d2:	2200      	movs	r2, #0
 80090d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80090d8:	480e      	ldr	r0, [pc, #56]	; (8009114 <LCD_IO_ReadData+0x60>)
 80090da:	f7f8 fccf 	bl	8001a7c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80090de:	88fb      	ldrh	r3, [r7, #6]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fec7 	bl	8008e74 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80090e6:	797b      	ldrb	r3, [r7, #5]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fea3 	bl	8008e34 <SPIx_Read>
 80090ee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80090f0:	2201      	movs	r2, #1
 80090f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80090f6:	4807      	ldr	r0, [pc, #28]	; (8009114 <LCD_IO_ReadData+0x60>)
 80090f8:	f7f8 fcc0 	bl	8001a7c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80090fc:	2201      	movs	r2, #1
 80090fe:	2104      	movs	r1, #4
 8009100:	4803      	ldr	r0, [pc, #12]	; (8009110 <LCD_IO_ReadData+0x5c>)
 8009102:	f7f8 fcbb 	bl	8001a7c <HAL_GPIO_WritePin>
  
  return readvalue;
 8009106:	68fb      	ldr	r3, [r7, #12]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	40020800 	.word	0x40020800
 8009114:	40020c00 	.word	0x40020c00

08009118 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7f7 fe69 	bl	8000df8 <HAL_Delay>
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800912e:	b580      	push	{r7, lr}
 8009130:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8009132:	f7ff fd51 	bl	8008bd8 <I2Cx_Init>
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}

0800913a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800913e:	f7ff fd7d 	bl	8008c3c <I2Cx_ITConfig>
}
 8009142:	bf00      	nop
 8009144:	bd80      	pop	{r7, pc}

08009146 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	4603      	mov	r3, r0
 800914e:	71fb      	strb	r3, [r7, #7]
 8009150:	460b      	mov	r3, r1
 8009152:	71bb      	strb	r3, [r7, #6]
 8009154:	4613      	mov	r3, r2
 8009156:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8009158:	797a      	ldrb	r2, [r7, #5]
 800915a:	79b9      	ldrb	r1, [r7, #6]
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fd9e 	bl	8008ca0 <I2Cx_WriteData>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	460a      	mov	r2, r1
 8009176:	71fb      	strb	r3, [r7, #7]
 8009178:	4613      	mov	r3, r2
 800917a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800917c:	79ba      	ldrb	r2, [r7, #6]
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fdb6 	bl	8008cf4 <I2Cx_ReadData>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	603a      	str	r2, [r7, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	4603      	mov	r3, r0
 800919e:	71fb      	strb	r3, [r7, #7]
 80091a0:	460b      	mov	r3, r1
 80091a2:	71bb      	strb	r3, [r7, #6]
 80091a4:	4613      	mov	r3, r2
 80091a6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80091a8:	88bb      	ldrh	r3, [r7, #4]
 80091aa:	79b9      	ldrb	r1, [r7, #6]
 80091ac:	79f8      	ldrb	r0, [r7, #7]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	f7ff fdcc 	bl	8008d4c <I2Cx_ReadBuffer>
 80091b4:	4603      	mov	r3, r0
 80091b6:	b29b      	uxth	r3, r3
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7f7 fe15 	bl	8000df8 <HAL_Delay>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <LTDCSetup>:
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c);
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex);
static void ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize,
		uint32_t ColorMode);
void LTDCSetup(LTDC_HandleTypeDef* arg_wsk) {
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	LtdcHandler = arg_wsk;
 80091e0:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <LTDCSetup+0x1c>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6013      	str	r3, [r2, #0]
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	200041b0 	.word	0x200041b0

080091f8 <DMASetup>:
void DMASetup(DMA2D_HandleTypeDef* arg_wsk) {
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	Dma2dHandler = arg_wsk;
 8009200:	4a04      	ldr	r2, [pc, #16]	; (8009214 <DMASetup+0x1c>)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6013      	str	r3, [r2, #0]
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20003ec4 	.word	0x20003ec4

08009218 <initILI9341>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */

void initILI9341() {
 8009218:	b580      	push	{r7, lr}
 800921a:	af00      	add	r7, sp, #0
	/* Select the device */
	LcdDrv = &ili9341_drv;
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <initILI9341+0x18>)
 800921e:	4a05      	ldr	r2, [pc, #20]	; (8009234 <initILI9341+0x1c>)
 8009220:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8009222:	4b03      	ldr	r3, [pc, #12]	; (8009230 <initILI9341+0x18>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4798      	blx	r3
}
 800922a:	bf00      	nop
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	200041b4 	.word	0x200041b4
 8009234:	2000001c 	.word	0x2000001c

08009238 <BSP_LCD_GetXSize>:

/**
 * @brief  Gets the LCD X size.
 * @retval The used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void) {
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelWidth();
 800923c:	4b03      	ldr	r3, [pc, #12]	; (800924c <BSP_LCD_GetXSize+0x14>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	4798      	blx	r3
 8009244:	4603      	mov	r3, r0
}
 8009246:	4618      	mov	r0, r3
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	200041b4 	.word	0x200041b4

08009250 <BSP_LCD_GetYSize>:

/**
 * @brief  Gets the LCD Y size.
 * @retval The used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void) {
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelHeight();
 8009254:	4b03      	ldr	r3, [pc, #12]	; (8009264 <BSP_LCD_GetYSize+0x14>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
}
 800925e:	4618      	mov	r0, r3
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200041b4 	.word	0x200041b4

08009268 <BSP_LCD_LayerDefaultInit>:
/**
 * @brief  Initializes the LCD layers.
 * @param  LayerIndex: the layer foreground or background.
 * @param  FB_Address: the layer frame buffer.
 */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address) {
 8009268:	b580      	push	{r7, lr}
 800926a:	b090      	sub	sp, #64	; 0x40
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	80fb      	strh	r3, [r7, #6]
	LCD_LayerCfgTypeDef Layercfg;

	/* Layer Init */
	Layercfg.WindowX0 = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
	Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8009278:	f7ff ffde 	bl	8009238 <BSP_LCD_GetXSize>
 800927c:	4603      	mov	r3, r0
 800927e:	613b      	str	r3, [r7, #16]
	Layercfg.WindowY0 = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	617b      	str	r3, [r7, #20]
	Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8009284:	f7ff ffe4 	bl	8009250 <BSP_LCD_GetYSize>
 8009288:	4603      	mov	r3, r0
 800928a:	61bb      	str	r3, [r7, #24]
	Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800928c:	2300      	movs	r3, #0
 800928e:	61fb      	str	r3, [r7, #28]
	Layercfg.FBStartAdress = FB_Address;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	633b      	str	r3, [r7, #48]	; 0x30
	Layercfg.Alpha = 255;
 8009294:	23ff      	movs	r3, #255	; 0xff
 8009296:	623b      	str	r3, [r7, #32]
	Layercfg.Alpha0 = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	627b      	str	r3, [r7, #36]	; 0x24
	Layercfg.Backcolor.Blue = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Layercfg.Backcolor.Green = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	Layercfg.Backcolor.Red = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80092ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80092b2:	62bb      	str	r3, [r7, #40]	; 0x28
	Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80092b4:	2307      	movs	r3, #7
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80092b8:	f7ff ffbe 	bl	8009238 <BSP_LCD_GetXSize>
 80092bc:	4603      	mov	r3, r0
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
	Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80092c0:	f7ff ffc6 	bl	8009250 <BSP_LCD_GetYSize>
 80092c4:	4603      	mov	r3, r0
 80092c6:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_LTDC_ConfigLayer(LtdcHandler, &Layercfg, LayerIndex);
 80092c8:	4b17      	ldr	r3, [pc, #92]	; (8009328 <BSP_LCD_LayerDefaultInit+0xc0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	f107 010c 	add.w	r1, r7, #12
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f9 fcf2 	bl	8002cbc <HAL_LTDC_ConfigLayer>

	DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80092d8:	88fa      	ldrh	r2, [r7, #6]
 80092da:	4914      	ldr	r1, [pc, #80]	; (800932c <BSP_LCD_LayerDefaultInit+0xc4>)
 80092dc:	4613      	mov	r3, r2
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	3304      	adds	r3, #4
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].pFont = &Font24;
 80092ee:	88fa      	ldrh	r2, [r7, #6]
 80092f0:	490e      	ldr	r1, [pc, #56]	; (800932c <BSP_LCD_LayerDefaultInit+0xc4>)
 80092f2:	4613      	mov	r3, r2
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	3308      	adds	r3, #8
 80092fe:	4a0c      	ldr	r2, [pc, #48]	; (8009330 <BSP_LCD_LayerDefaultInit+0xc8>)
 8009300:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	4909      	ldr	r1, [pc, #36]	; (800932c <BSP_LCD_LayerDefaultInit+0xc4>)
 8009306:	4613      	mov	r3, r2
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	440b      	add	r3, r1
 8009310:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009314:	601a      	str	r2, [r3, #0]

	/* Dithering activation */
	HAL_LTDC_EnableDither(LtdcHandler);
 8009316:	4b04      	ldr	r3, [pc, #16]	; (8009328 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f7f9 fd0c 	bl	8002d38 <HAL_LTDC_EnableDither>
}
 8009320:	bf00      	nop
 8009322:	3740      	adds	r7, #64	; 0x40
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	200041b0 	.word	0x200041b0
 800932c:	20003ecc 	.word	0x20003ecc
 8009330:	20000010 	.word	0x20000010

08009334 <BSP_LCD_SelectLayer>:

/**
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: the Layer foreground or background.
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex) {
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 800933c:	4a04      	ldr	r2, [pc, #16]	; (8009350 <BSP_LCD_SelectLayer+0x1c>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20003ec8 	.word	0x20003ec8

08009354 <BSP_LCD_SetTextColor>:

/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetTextColor(uint32_t Color) {
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 800935c:	4b07      	ldr	r3, [pc, #28]	; (800937c <BSP_LCD_SetTextColor+0x28>)
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	4907      	ldr	r1, [pc, #28]	; (8009380 <BSP_LCD_SetTextColor+0x2c>)
 8009362:	4613      	mov	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	440b      	add	r3, r1
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	20003ec8 	.word	0x20003ec8
 8009380:	20003ecc 	.word	0x20003ecc

08009384 <BSP_LCD_SetBackColor>:

/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetBackColor(uint32_t Color) {
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 800938c:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <BSP_LCD_SetBackColor+0x2c>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4908      	ldr	r1, [pc, #32]	; (80093b4 <BSP_LCD_SetBackColor+0x30>)
 8009392:	4613      	mov	r3, r2
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	3304      	adds	r3, #4
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	20003ec8 	.word	0x20003ec8
 80093b4:	20003ecc 	.word	0x20003ecc

080093b8 <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <BSP_LCD_SetFont+0x2c>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	4908      	ldr	r1, [pc, #32]	; (80093e8 <BSP_LCD_SetFont+0x30>)
 80093c6:	4613      	mov	r3, r2
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	3308      	adds	r3, #8
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	601a      	str	r2, [r3, #0]
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20003ec8 	.word	0x20003ec8
 80093e8:	20003ecc 	.word	0x20003ecc

080093ec <BSP_LCD_ReadPixel>:
 * @brief  Reads Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @retval RGB pixel color
 */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos) {
 80093ec:	b5b0      	push	{r4, r5, r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	460a      	mov	r2, r1
 80093f6:	80fb      	strh	r3, [r7, #6]
 80093f8:	4613      	mov	r3, r2
 80093fa:	80bb      	strh	r3, [r7, #4]
	uint32_t ret = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]

	if (LtdcHandler->LayerCfg[ActiveLayer].PixelFormat
 8009400:	4b4f      	ldr	r3, [pc, #316]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	4b4f      	ldr	r3, [pc, #316]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2134      	movs	r1, #52	; 0x34
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	4413      	add	r3, r2
 8009410:	3348      	adds	r3, #72	; 0x48
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d116      	bne.n	8009446 <BSP_LCD_ReadPixel+0x5a>
			== LTDC_PIXEL_FORMAT_ARGB8888) {
		/* Read data value from SDRAM memory */
		ret =
				*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009418:	4b49      	ldr	r3, [pc, #292]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	4b49      	ldr	r3, [pc, #292]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2134      	movs	r1, #52	; 0x34
 8009422:	fb01 f303 	mul.w	r3, r1, r3
 8009426:	4413      	add	r3, r2
 8009428:	335c      	adds	r3, #92	; 0x5c
 800942a:	681c      	ldr	r4, [r3, #0]
						+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos)));
 800942c:	88bd      	ldrh	r5, [r7, #4]
 800942e:	f7ff ff03 	bl	8009238 <BSP_LCD_GetXSize>
 8009432:	4603      	mov	r3, r0
 8009434:	fb03 f205 	mul.w	r2, r3, r5
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4423      	add	r3, r4
		ret =
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e077      	b.n	8009536 <BSP_LCD_ReadPixel+0x14a>
	} else if (LtdcHandler->LayerCfg[ActiveLayer].PixelFormat
 8009446:	4b3e      	ldr	r3, [pc, #248]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b3e      	ldr	r3, [pc, #248]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2134      	movs	r1, #52	; 0x34
 8009450:	fb01 f303 	mul.w	r3, r1, r3
 8009454:	4413      	add	r3, r2
 8009456:	3348      	adds	r3, #72	; 0x48
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d118      	bne.n	8009490 <BSP_LCD_ReadPixel+0xa4>
			== LTDC_PIXEL_FORMAT_RGB888) {
		/* Read data value from SDRAM memory */
		ret =
				(*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 800945e:	4b38      	ldr	r3, [pc, #224]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b38      	ldr	r3, [pc, #224]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2134      	movs	r1, #52	; 0x34
 8009468:	fb01 f303 	mul.w	r3, r1, r3
 800946c:	4413      	add	r3, r2
 800946e:	335c      	adds	r3, #92	; 0x5c
 8009470:	681c      	ldr	r4, [r3, #0]
						+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 8009472:	88bd      	ldrh	r5, [r7, #4]
 8009474:	f7ff fee0 	bl	8009238 <BSP_LCD_GetXSize>
 8009478:	4603      	mov	r3, r0
 800947a:	fb03 f205 	mul.w	r2, r3, r5
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4423      	add	r3, r4
				(*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009486:	681b      	ldr	r3, [r3, #0]
		ret =
 8009488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e052      	b.n	8009536 <BSP_LCD_ReadPixel+0x14a>
	} else if ((LtdcHandler->LayerCfg[ActiveLayer].PixelFormat
 8009490:	4b2b      	ldr	r3, [pc, #172]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	4b2b      	ldr	r3, [pc, #172]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2134      	movs	r1, #52	; 0x34
 800949a:	fb01 f303 	mul.w	r3, r1, r3
 800949e:	4413      	add	r3, r2
 80094a0:	3348      	adds	r3, #72	; 0x48
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d017      	beq.n	80094d8 <BSP_LCD_ReadPixel+0xec>
			== LTDC_PIXEL_FORMAT_RGB565)
			|| (LtdcHandler->LayerCfg[ActiveLayer].PixelFormat
 80094a8:	4b25      	ldr	r3, [pc, #148]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	4b25      	ldr	r3, [pc, #148]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2134      	movs	r1, #52	; 0x34
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	3348      	adds	r3, #72	; 0x48
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d00b      	beq.n	80094d8 <BSP_LCD_ReadPixel+0xec>
					== LTDC_PIXEL_FORMAT_ARGB4444)
			|| (LtdcHandler->LayerCfg[ActiveLayer].PixelFormat
 80094c0:	4b1f      	ldr	r3, [pc, #124]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	4b1f      	ldr	r3, [pc, #124]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2134      	movs	r1, #52	; 0x34
 80094ca:	fb01 f303 	mul.w	r3, r1, r3
 80094ce:	4413      	add	r3, r2
 80094d0:	3348      	adds	r3, #72	; 0x48
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b07      	cmp	r3, #7
 80094d6:	d117      	bne.n	8009508 <BSP_LCD_ReadPixel+0x11c>
					== LTDC_PIXEL_FORMAT_AL88)) {
		/* Read data value from SDRAM memory */
		ret =
				*(__IO uint16_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 80094d8:	4b19      	ldr	r3, [pc, #100]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4b19      	ldr	r3, [pc, #100]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2134      	movs	r1, #52	; 0x34
 80094e2:	fb01 f303 	mul.w	r3, r1, r3
 80094e6:	4413      	add	r3, r2
 80094e8:	335c      	adds	r3, #92	; 0x5c
 80094ea:	681c      	ldr	r4, [r3, #0]
						+ (2 * (Ypos * BSP_LCD_GetXSize() + Xpos)));
 80094ec:	88bd      	ldrh	r5, [r7, #4]
 80094ee:	f7ff fea3 	bl	8009238 <BSP_LCD_GetXSize>
 80094f2:	4603      	mov	r3, r0
 80094f4:	fb03 f205 	mul.w	r2, r3, r5
 80094f8:	88fb      	ldrh	r3, [r7, #6]
 80094fa:	4413      	add	r3, r2
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	4423      	add	r3, r4
				*(__IO uint16_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
		ret =
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e016      	b.n	8009536 <BSP_LCD_ReadPixel+0x14a>
	} else {
		/* Read data value from SDRAM memory */
		ret = *(__IO uint8_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <BSP_LCD_ReadPixel+0x154>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <BSP_LCD_ReadPixel+0x158>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2134      	movs	r1, #52	; 0x34
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	4413      	add	r3, r2
 8009518:	335c      	adds	r3, #92	; 0x5c
 800951a:	681c      	ldr	r4, [r3, #0]
				+ (2 * (Ypos * BSP_LCD_GetXSize() + Xpos)));
 800951c:	88bd      	ldrh	r5, [r7, #4]
 800951e:	f7ff fe8b 	bl	8009238 <BSP_LCD_GetXSize>
 8009522:	4603      	mov	r3, r0
 8009524:	fb03 f205 	mul.w	r2, r3, r5
 8009528:	88fb      	ldrh	r3, [r7, #6]
 800952a:	4413      	add	r3, r2
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	4423      	add	r3, r4
		ret = *(__IO uint8_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8009536:	68fb      	ldr	r3, [r7, #12]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bdb0      	pop	{r4, r5, r7, pc}
 8009540:	200041b0 	.word	0x200041b0
 8009544:	20003ec8 	.word	0x20003ec8

08009548 <BSP_LCD_Clear>:

/**
 * @brief  Clears the hole LCD.
 * @param  Color: the color of the background
 */
void BSP_LCD_Clear(uint32_t Color) {
 8009548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954a:	b085      	sub	sp, #20
 800954c:	af02      	add	r7, sp, #8
 800954e:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	FillBuffer(ActiveLayer,
 8009550:	4b10      	ldr	r3, [pc, #64]	; (8009594 <BSP_LCD_Clear+0x4c>)
 8009552:	681c      	ldr	r4, [r3, #0]
			(uint32_t *) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress),
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <BSP_LCD_Clear+0x50>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <BSP_LCD_Clear+0x4c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2134      	movs	r1, #52	; 0x34
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	4413      	add	r3, r2
 8009564:	335c      	adds	r3, #92	; 0x5c
 8009566:	681b      	ldr	r3, [r3, #0]
	FillBuffer(ActiveLayer,
 8009568:	461d      	mov	r5, r3
 800956a:	f7ff fe65 	bl	8009238 <BSP_LCD_GetXSize>
 800956e:	4606      	mov	r6, r0
 8009570:	f7ff fe6e 	bl	8009250 <BSP_LCD_GetYSize>
 8009574:	4602      	mov	r2, r0
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	2300      	movs	r3, #0
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	4613      	mov	r3, r2
 8009580:	4632      	mov	r2, r6
 8009582:	4629      	mov	r1, r5
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fc13 	bl	8009db0 <FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009592:	bf00      	nop
 8009594:	20003ec8 	.word	0x20003ec8
 8009598:	200041b0 	.word	0x200041b0

0800959c <BSP_LCD_DisplayChar>:
 * @brief  Displays one character.
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 800959c:	b590      	push	{r4, r7, lr}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	80fb      	strh	r3, [r7, #6]
 80095a6:	460b      	mov	r3, r1
 80095a8:	80bb      	strh	r3, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos,
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 80095ae:	4b1b      	ldr	r3, [pc, #108]	; (800961c <BSP_LCD_DisplayChar+0x80>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	491b      	ldr	r1, [pc, #108]	; (8009620 <BSP_LCD_DisplayChar+0x84>)
 80095b4:	4613      	mov	r3, r2
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	3308      	adds	r3, #8
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	f1a3 0020 	sub.w	r0, r3, #32
					*\
 DrawProp[ActiveLayer].pFont->Height
 80095ca:	4b14      	ldr	r3, [pc, #80]	; (800961c <BSP_LCD_DisplayChar+0x80>)
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4c14      	ldr	r4, [pc, #80]	; (8009620 <BSP_LCD_DisplayChar+0x84>)
 80095d0:	4613      	mov	r3, r2
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4423      	add	r3, r4
 80095da:	3308      	adds	r3, #8
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
					*\
 80095e0:	fb03 f000 	mul.w	r0, r3, r0
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80095e4:	4b0d      	ldr	r3, [pc, #52]	; (800961c <BSP_LCD_DisplayChar+0x80>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4c0d      	ldr	r4, [pc, #52]	; (8009620 <BSP_LCD_DisplayChar+0x84>)
 80095ea:	4613      	mov	r3, r2
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4423      	add	r3, r4
 80095f4:	3308      	adds	r3, #8
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	889b      	ldrh	r3, [r3, #4]
 80095fa:	3307      	adds	r3, #7
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da00      	bge.n	8009602 <BSP_LCD_DisplayChar+0x66>
 8009600:	3307      	adds	r3, #7
 8009602:	10db      	asrs	r3, r3, #3
 8009604:	fb03 f300 	mul.w	r3, r3, r0
	DrawChar(Xpos, Ypos,
 8009608:	18ca      	adds	r2, r1, r3
 800960a:	88b9      	ldrh	r1, [r7, #4]
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fb14 	bl	8009c3c <DrawChar>
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	bd90      	pop	{r4, r7, pc}
 800961c:	20003ec8 	.word	0x20003ec8
 8009620:	20003ecc 	.word	0x20003ecc

08009624 <BSP_LCD_DisplayStringAt>:
 *                @arg CENTER_MODE
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 8009624:	b5b0      	push	{r4, r5, r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	60ba      	str	r2, [r7, #8]
 800962c:	461a      	mov	r2, r3
 800962e:	4603      	mov	r3, r0
 8009630:	81fb      	strh	r3, [r7, #14]
 8009632:	460b      	mov	r3, r1
 8009634:	81bb      	strh	r3, [r7, #12]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
	uint16_t refcolumn = 1, i = 0;
 800963a:	2301      	movs	r3, #1
 800963c:	83fb      	strh	r3, [r7, #30]
 800963e:	2300      	movs	r3, #0
 8009640:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	2300      	movs	r3, #0
 8009648:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 800964e:	e002      	b.n	8009656 <BSP_LCD_DisplayStringAt+0x32>
		size++;
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	3301      	adds	r3, #1
 8009654:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	617a      	str	r2, [r7, #20]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1f6      	bne.n	8009650 <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8009662:	f7ff fde9 	bl	8009238 <BSP_LCD_GetXSize>
 8009666:	4b4a      	ldr	r3, [pc, #296]	; (8009790 <BSP_LCD_DisplayStringAt+0x16c>)
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	494a      	ldr	r1, [pc, #296]	; (8009794 <BSP_LCD_DisplayStringAt+0x170>)
 800966c:	4613      	mov	r3, r2
 800966e:	005b      	lsls	r3, r3, #1
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	3308      	adds	r3, #8
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	889b      	ldrh	r3, [r3, #4]
 800967c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009680:	613b      	str	r3, [r7, #16]

	switch (mode) {
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d01c      	beq.n	80096c2 <BSP_LCD_DisplayStringAt+0x9e>
 8009688:	2b03      	cmp	r3, #3
 800968a:	d017      	beq.n	80096bc <BSP_LCD_DisplayStringAt+0x98>
 800968c:	2b01      	cmp	r3, #1
 800968e:	d12e      	bne.n	80096ee <BSP_LCD_DisplayStringAt+0xca>
	case CENTER_MODE: {
		refcolumn = X
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	1ad1      	subs	r1, r2, r3
 8009696:	4b3e      	ldr	r3, [pc, #248]	; (8009790 <BSP_LCD_DisplayStringAt+0x16c>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	483e      	ldr	r0, [pc, #248]	; (8009794 <BSP_LCD_DisplayStringAt+0x170>)
 800969c:	4613      	mov	r3, r2
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	4413      	add	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4403      	add	r3, r0
 80096a6:	3308      	adds	r3, #8
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	889b      	ldrh	r3, [r3, #4]
 80096ac:	fb03 f301 	mul.w	r3, r3, r1
 80096b0:	085b      	lsrs	r3, r3, #1
 80096b2:	b29a      	uxth	r2, r3
		refcolumn = X
 80096b4:	89fb      	ldrh	r3, [r7, #14]
 80096b6:	4413      	add	r3, r2
 80096b8:	83fb      	strh	r3, [r7, #30]
		break;
 80096ba:	e01b      	b.n	80096f4 <BSP_LCD_DisplayStringAt+0xd0>
	}
	case LEFT_MODE: {
		refcolumn = X;
 80096bc:	89fb      	ldrh	r3, [r7, #14]
 80096be:	83fb      	strh	r3, [r7, #30]
		break;
 80096c0:	e018      	b.n	80096f4 <BSP_LCD_DisplayStringAt+0xd0>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	b299      	uxth	r1, r3
 80096ca:	4b31      	ldr	r3, [pc, #196]	; (8009790 <BSP_LCD_DisplayStringAt+0x16c>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4831      	ldr	r0, [pc, #196]	; (8009794 <BSP_LCD_DisplayStringAt+0x170>)
 80096d0:	4613      	mov	r3, r2
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4403      	add	r3, r0
 80096da:	3308      	adds	r3, #8
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	889b      	ldrh	r3, [r3, #4]
 80096e0:	fb11 f303 	smulbb	r3, r1, r3
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	89fb      	ldrh	r3, [r7, #14]
 80096e8:	4413      	add	r3, r2
 80096ea:	83fb      	strh	r3, [r7, #30]
		break;
 80096ec:	e002      	b.n	80096f4 <BSP_LCD_DisplayStringAt+0xd0>
	}
	default: {
		refcolumn = X;
 80096ee:	89fb      	ldrh	r3, [r7, #14]
 80096f0:	83fb      	strh	r3, [r7, #30]
		break;
 80096f2:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 80096f4:	e01a      	b.n	800972c <BSP_LCD_DisplayStringAt+0x108>
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	89b9      	ldrh	r1, [r7, #12]
 80096fc:	8bfb      	ldrh	r3, [r7, #30]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff ff4c 	bl	800959c <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8009704:	4b22      	ldr	r3, [pc, #136]	; (8009790 <BSP_LCD_DisplayStringAt+0x16c>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4922      	ldr	r1, [pc, #136]	; (8009794 <BSP_LCD_DisplayStringAt+0x170>)
 800970a:	4613      	mov	r3, r2
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	3308      	adds	r3, #8
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	889a      	ldrh	r2, [r3, #4]
 800971a:	8bfb      	ldrh	r3, [r7, #30]
 800971c:	4413      	add	r3, r2
 800971e:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3301      	adds	r3, #1
 8009724:	60bb      	str	r3, [r7, #8]
		i++;
 8009726:	8bbb      	ldrh	r3, [r7, #28]
 8009728:	3301      	adds	r3, #1
 800972a:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	781b      	ldrb	r3, [r3, #0]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8009730:	2b00      	cmp	r3, #0
 8009732:	bf14      	ite	ne
 8009734:	2301      	movne	r3, #1
 8009736:	2300      	moveq	r3, #0
 8009738:	b2dc      	uxtb	r4, r3
 800973a:	f7ff fd7d 	bl	8009238 <BSP_LCD_GetXSize>
 800973e:	4605      	mov	r5, r0
 8009740:	8bb9      	ldrh	r1, [r7, #28]
 8009742:	4b13      	ldr	r3, [pc, #76]	; (8009790 <BSP_LCD_DisplayStringAt+0x16c>)
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4813      	ldr	r0, [pc, #76]	; (8009794 <BSP_LCD_DisplayStringAt+0x170>)
 8009748:	4613      	mov	r3, r2
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4403      	add	r3, r0
 8009752:	3308      	adds	r3, #8
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	889b      	ldrh	r3, [r3, #4]
 8009758:	fb03 f301 	mul.w	r3, r3, r1
 800975c:	1aeb      	subs	r3, r5, r3
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 800975e:	b299      	uxth	r1, r3
 8009760:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <BSP_LCD_DisplayStringAt+0x16c>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	480b      	ldr	r0, [pc, #44]	; (8009794 <BSP_LCD_DisplayStringAt+0x170>)
 8009766:	4613      	mov	r3, r2
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4403      	add	r3, r0
 8009770:	3308      	adds	r3, #8
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	889b      	ldrh	r3, [r3, #4]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8009776:	4299      	cmp	r1, r3
 8009778:	bf2c      	ite	cs
 800977a:	2301      	movcs	r3, #1
 800977c:	2300      	movcc	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	4023      	ands	r3, r4
 8009782:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1b6      	bne.n	80096f6 <BSP_LCD_DisplayStringAt+0xd2>
	}
}
 8009788:	bf00      	nop
 800978a:	3720      	adds	r7, #32
 800978c:	46bd      	mov	sp, r7
 800978e:	bdb0      	pop	{r4, r5, r7, pc}
 8009790:	20003ec8 	.word	0x20003ec8
 8009794:	20003ecc 	.word	0x20003ecc

08009798 <BSP_LCD_DrawHLine>:
 * @brief  Displays an horizontal line.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Length: line length
 */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length) {
 8009798:	b5b0      	push	{r4, r5, r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af02      	add	r7, sp, #8
 800979e:	4603      	mov	r3, r0
 80097a0:	80fb      	strh	r3, [r7, #6]
 80097a2:	460b      	mov	r3, r1
 80097a4:	80bb      	strh	r3, [r7, #4]
 80097a6:	4613      	mov	r3, r2
 80097a8:	807b      	strh	r3, [r7, #2]
	uint32_t xaddress = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]

	/* Get the line address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 80097ae:	4b17      	ldr	r3, [pc, #92]	; (800980c <BSP_LCD_DrawHLine+0x74>)
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	4b17      	ldr	r3, [pc, #92]	; (8009810 <BSP_LCD_DrawHLine+0x78>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2134      	movs	r1, #52	; 0x34
 80097b8:	fb01 f303 	mul.w	r3, r1, r3
 80097bc:	4413      	add	r3, r2
 80097be:	335c      	adds	r3, #92	; 0x5c
 80097c0:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80097c2:	f7ff fd39 	bl	8009238 <BSP_LCD_GetXSize>
 80097c6:	4602      	mov	r2, r0
 80097c8:	88bb      	ldrh	r3, [r7, #4]
 80097ca:	fb03 f202 	mul.w	r2, r3, r2
 80097ce:	88fb      	ldrh	r3, [r7, #6]
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 80097d4:	4423      	add	r3, r4
 80097d6:	60fb      	str	r3, [r7, #12]

	/* Write line */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Length, 1, 0,
 80097d8:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <BSP_LCD_DrawHLine+0x78>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	68fc      	ldr	r4, [r7, #12]
 80097de:	887d      	ldrh	r5, [r7, #2]
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <BSP_LCD_DrawHLine+0x78>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	490b      	ldr	r1, [pc, #44]	; (8009814 <BSP_LCD_DrawHLine+0x7c>)
 80097e6:	4613      	mov	r3, r2
 80097e8:	005b      	lsls	r3, r3, #1
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	2301      	movs	r3, #1
 80097fa:	462a      	mov	r2, r5
 80097fc:	4621      	mov	r1, r4
 80097fe:	f000 fad7 	bl	8009db0 <FillBuffer>
			DrawProp[ActiveLayer].TextColor);
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bdb0      	pop	{r4, r5, r7, pc}
 800980a:	bf00      	nop
 800980c:	200041b0 	.word	0x200041b0
 8009810:	20003ec8 	.word	0x20003ec8
 8009814:	20003ecc 	.word	0x20003ecc

08009818 <BSP_LCD_DrawCircle>:
 * @brief  Displays a circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	80fb      	strh	r3, [r7, #6]
 8009822:	460b      	mov	r3, r1
 8009824:	80bb      	strh	r3, [r7, #4]
 8009826:	4613      	mov	r3, r2
 8009828:	807b      	strh	r3, [r7, #2]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 800982a:	887b      	ldrh	r3, [r7, #2]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	f1c3 0303 	rsb	r3, r3, #3
 8009832:	617b      	str	r3, [r7, #20]
	curx = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	613b      	str	r3, [r7, #16]
	cury = Radius;
 8009838:	887b      	ldrh	r3, [r7, #2]
 800983a:	60fb      	str	r3, [r7, #12]

	while (curx <= cury) {
 800983c:	e0cf      	b.n	80099de <BSP_LCD_DrawCircle+0x1c6>
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury),
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	b29a      	uxth	r2, r3
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	4413      	add	r3, r2
 8009846:	b298      	uxth	r0, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	b29b      	uxth	r3, r3
 800984c:	88ba      	ldrh	r2, [r7, #4]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	b29c      	uxth	r4, r3
 8009852:	4b67      	ldr	r3, [pc, #412]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	4967      	ldr	r1, [pc, #412]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 8009858:	4613      	mov	r3, r2
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	440b      	add	r3, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	4621      	mov	r1, r4
 8009868:	f000 f9c0 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury),
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	b29b      	uxth	r3, r3
 8009870:	88fa      	ldrh	r2, [r7, #6]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	b298      	uxth	r0, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	b29b      	uxth	r3, r3
 800987a:	88ba      	ldrh	r2, [r7, #4]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	b29c      	uxth	r4, r3
 8009880:	4b5b      	ldr	r3, [pc, #364]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	495b      	ldr	r1, [pc, #364]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 8009886:	4613      	mov	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	4621      	mov	r1, r4
 8009896:	f000 f9a9 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx),
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	b29a      	uxth	r2, r3
 800989e:	88fb      	ldrh	r3, [r7, #6]
 80098a0:	4413      	add	r3, r2
 80098a2:	b298      	uxth	r0, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	88ba      	ldrh	r2, [r7, #4]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	b29c      	uxth	r4, r3
 80098ae:	4b50      	ldr	r3, [pc, #320]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4950      	ldr	r1, [pc, #320]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 80098b4:	4613      	mov	r3, r2
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	440b      	add	r3, r1
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	4621      	mov	r1, r4
 80098c4:	f000 f992 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx),
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	88fa      	ldrh	r2, [r7, #6]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	b298      	uxth	r0, r3
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	88ba      	ldrh	r2, [r7, #4]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	b29c      	uxth	r4, r3
 80098dc:	4b44      	ldr	r3, [pc, #272]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4944      	ldr	r1, [pc, #272]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 80098e2:	4613      	mov	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	4621      	mov	r1, r4
 80098f2:	f000 f97b 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury),
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	4413      	add	r3, r2
 80098fe:	b298      	uxth	r0, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	b29a      	uxth	r2, r3
 8009904:	88bb      	ldrh	r3, [r7, #4]
 8009906:	4413      	add	r3, r2
 8009908:	b29c      	uxth	r4, r3
 800990a:	4b39      	ldr	r3, [pc, #228]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	4939      	ldr	r1, [pc, #228]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 8009910:	4613      	mov	r3, r2
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	4621      	mov	r1, r4
 8009920:	f000 f964 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury),
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	b29b      	uxth	r3, r3
 8009928:	88fa      	ldrh	r2, [r7, #6]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	b298      	uxth	r0, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	b29a      	uxth	r2, r3
 8009932:	88bb      	ldrh	r3, [r7, #4]
 8009934:	4413      	add	r3, r2
 8009936:	b29c      	uxth	r4, r3
 8009938:	4b2d      	ldr	r3, [pc, #180]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	492d      	ldr	r1, [pc, #180]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 800993e:	4613      	mov	r3, r2
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	4621      	mov	r1, r4
 800994e:	f000 f94d 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx),
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	b29a      	uxth	r2, r3
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	4413      	add	r3, r2
 800995a:	b298      	uxth	r0, r3
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	b29a      	uxth	r2, r3
 8009960:	88bb      	ldrh	r3, [r7, #4]
 8009962:	4413      	add	r3, r2
 8009964:	b29c      	uxth	r4, r3
 8009966:	4b22      	ldr	r3, [pc, #136]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4922      	ldr	r1, [pc, #136]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 800996c:	4613      	mov	r3, r2
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	4621      	mov	r1, r4
 800997c:	f000 f936 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx),
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	b29b      	uxth	r3, r3
 8009984:	88fa      	ldrh	r2, [r7, #6]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	b298      	uxth	r0, r3
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	b29a      	uxth	r2, r3
 800998e:	88bb      	ldrh	r3, [r7, #4]
 8009990:	4413      	add	r3, r2
 8009992:	b29c      	uxth	r4, r3
 8009994:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <BSP_LCD_DrawCircle+0x1d8>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	4916      	ldr	r1, [pc, #88]	; (80099f4 <BSP_LCD_DrawCircle+0x1dc>)
 800999a:	4613      	mov	r3, r2
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	4621      	mov	r1, r4
 80099aa:	f000 f91f 	bl	8009bec <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);

		if (d < 0) {
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	da06      	bge.n	80099c2 <BSP_LCD_DrawCircle+0x1aa>
			d += (curx << 2) + 6;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	009a      	lsls	r2, r3, #2
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4413      	add	r3, r2
 80099bc:	3306      	adds	r3, #6
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e00a      	b.n	80099d8 <BSP_LCD_DrawCircle+0x1c0>
		} else {
			d += ((curx - cury) << 2) + 10;
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	009a      	lsls	r2, r3, #2
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	4413      	add	r3, r2
 80099ce:	330a      	adds	r3, #10
 80099d0:	617b      	str	r3, [r7, #20]
			cury--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	f67f af2b 	bls.w	800983e <BSP_LCD_DrawCircle+0x26>
	}
}
 80099e8:	bf00      	nop
 80099ea:	371c      	adds	r7, #28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd90      	pop	{r4, r7, pc}
 80099f0:	20003ec8 	.word	0x20003ec8
 80099f4:	20003ecc 	.word	0x20003ecc

080099f8 <BSP_LCD_FillRect>:
 * @param  Ypos: the Y position
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height) {
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	b086      	sub	sp, #24
 80099fe:	af02      	add	r7, sp, #8
 8009a00:	4604      	mov	r4, r0
 8009a02:	4608      	mov	r0, r1
 8009a04:	4611      	mov	r1, r2
 8009a06:	461a      	mov	r2, r3
 8009a08:	4623      	mov	r3, r4
 8009a0a:	80fb      	strh	r3, [r7, #6]
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	80bb      	strh	r3, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	807b      	strh	r3, [r7, #2]
 8009a14:	4613      	mov	r3, r2
 8009a16:	803b      	strh	r3, [r7, #0]
	uint32_t xaddress = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009a1c:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <BSP_LCD_FillRect+0xa8>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4920      	ldr	r1, [pc, #128]	; (8009aa4 <BSP_LCD_FillRect+0xac>)
 8009a22:	4613      	mov	r3, r2
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff fc90 	bl	8009354 <BSP_LCD_SetTextColor>

	/* Get the rectangle start address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009a34:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <BSP_LCD_FillRect+0xb0>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <BSP_LCD_FillRect+0xa8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2134      	movs	r1, #52	; 0x34
 8009a3e:	fb01 f303 	mul.w	r3, r1, r3
 8009a42:	4413      	add	r3, r2
 8009a44:	335c      	adds	r3, #92	; 0x5c
 8009a46:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8009a48:	f7ff fbf6 	bl	8009238 <BSP_LCD_GetXSize>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	88bb      	ldrh	r3, [r7, #4]
 8009a50:	fb03 f202 	mul.w	r2, r3, r2
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009a5a:	4423      	add	r3, r4
 8009a5c:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009a5e:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <BSP_LCD_FillRect+0xa8>)
 8009a60:	681c      	ldr	r4, [r3, #0]
 8009a62:	68fd      	ldr	r5, [r7, #12]
 8009a64:	887e      	ldrh	r6, [r7, #2]
 8009a66:	f8b7 8000 	ldrh.w	r8, [r7]
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8009a6a:	f7ff fbe5 	bl	8009238 <BSP_LCD_GetXSize>
 8009a6e:	4602      	mov	r2, r0
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009a70:	887b      	ldrh	r3, [r7, #2]
 8009a72:	1ad1      	subs	r1, r2, r3
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <BSP_LCD_FillRect+0xa8>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	480a      	ldr	r0, [pc, #40]	; (8009aa4 <BSP_LCD_FillRect+0xac>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4403      	add	r3, r0
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	9100      	str	r1, [sp, #0]
 8009a8a:	4643      	mov	r3, r8
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4629      	mov	r1, r5
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 f98d 	bl	8009db0 <FillBuffer>
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	20003ec8 	.word	0x20003ec8
 8009aa4:	20003ecc 	.word	0x20003ecc
 8009aa8:	200041b0 	.word	0x200041b0

08009aac <BSP_LCD_FillCircle>:
 * @brief  Displays a full circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	80fb      	strh	r3, [r7, #6]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	80bb      	strh	r3, [r7, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	807b      	strh	r3, [r7, #2]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8009abe:	887b      	ldrh	r3, [r7, #2]
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	f1c3 0303 	rsb	r3, r3, #3
 8009ac6:	617b      	str	r3, [r7, #20]

	curx = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	613b      	str	r3, [r7, #16]
	cury = Radius;
 8009acc:	887b      	ldrh	r3, [r7, #2]
 8009ace:	60fb      	str	r3, [r7, #12]

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009ad0:	4b44      	ldr	r3, [pc, #272]	; (8009be4 <BSP_LCD_FillCircle+0x138>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	4944      	ldr	r1, [pc, #272]	; (8009be8 <BSP_LCD_FillCircle+0x13c>)
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fc36 	bl	8009354 <BSP_LCD_SetTextColor>

	while (curx <= cury) {
 8009ae8:	e061      	b.n	8009bae <BSP_LCD_FillCircle+0x102>
		if (cury > 0) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d021      	beq.n	8009b34 <BSP_LCD_FillCircle+0x88>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	88fa      	ldrh	r2, [r7, #6]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	b298      	uxth	r0, r3
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	88bb      	ldrh	r3, [r7, #4]
 8009b00:	4413      	add	r3, r2
 8009b02:	b299      	uxth	r1, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	f7ff fe43 	bl	8009798 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	88fa      	ldrh	r2, [r7, #6]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	b298      	uxth	r0, r3
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	88ba      	ldrh	r2, [r7, #4]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	b299      	uxth	r1, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7ff fe32 	bl	8009798 <BSP_LCD_DrawHLine>
		}

		if (curx > 0) {
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d021      	beq.n	8009b7e <BSP_LCD_FillCircle+0xd2>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	88fa      	ldrh	r2, [r7, #6]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	b298      	uxth	r0, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	88ba      	ldrh	r2, [r7, #4]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	b299      	uxth	r1, r3
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7ff fe1e 	bl	8009798 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	88fa      	ldrh	r2, [r7, #6]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	b298      	uxth	r0, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	88bb      	ldrh	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	b299      	uxth	r1, r3
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f7ff fe0d 	bl	8009798 <BSP_LCD_DrawHLine>
		}
		if (d < 0) {
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da06      	bge.n	8009b92 <BSP_LCD_FillCircle+0xe6>
			d += (curx << 2) + 6;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	009a      	lsls	r2, r3, #2
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3306      	adds	r3, #6
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e00a      	b.n	8009ba8 <BSP_LCD_FillCircle+0xfc>
		} else {
			d += ((curx - cury) << 2) + 10;
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	009a      	lsls	r2, r3, #2
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	330a      	adds	r3, #10
 8009ba0:	617b      	str	r3, [r7, #20]
			cury--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	3301      	adds	r3, #1
 8009bac:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d999      	bls.n	8009aea <BSP_LCD_FillCircle+0x3e>
	}

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <BSP_LCD_FillCircle+0x138>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	490b      	ldr	r1, [pc, #44]	; (8009be8 <BSP_LCD_FillCircle+0x13c>)
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff fbc3 	bl	8009354 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8009bce:	887a      	ldrh	r2, [r7, #2]
 8009bd0:	88b9      	ldrh	r1, [r7, #4]
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff fe1f 	bl	8009818 <BSP_LCD_DrawCircle>
}
 8009bda:	bf00      	nop
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20003ec8 	.word	0x20003ec8
 8009be8:	20003ecc 	.word	0x20003ecc

08009bec <BSP_LCD_DrawPixel>:
 * @brief  Writes Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8009bec:	b5b0      	push	{r4, r5, r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	603a      	str	r2, [r7, #0]
 8009bf6:	80fb      	strh	r3, [r7, #6]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	80bb      	strh	r3, [r7, #4]
	/* Write data value to all SDRAM memory */
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009bfc:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <BSP_LCD_DrawPixel+0x48>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <BSP_LCD_DrawPixel+0x4c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2134      	movs	r1, #52	; 0x34
 8009c06:	fb01 f303 	mul.w	r3, r1, r3
 8009c0a:	4413      	add	r3, r2
 8009c0c:	335c      	adds	r3, #92	; 0x5c
 8009c0e:	681c      	ldr	r4, [r3, #0]
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8009c10:	88bd      	ldrh	r5, [r7, #4]
 8009c12:	f7ff fb11 	bl	8009238 <BSP_LCD_GetXSize>
 8009c16:	4603      	mov	r3, r0
 8009c18:	fb03 f205 	mul.w	r2, r3, r5
 8009c1c:	88fb      	ldrh	r3, [r7, #6]
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4423      	add	r3, r4
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009c24:	461a      	mov	r2, r3
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	6013      	str	r3, [r2, #0]
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bdb0      	pop	{r4, r5, r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200041b0 	.word	0x200041b0
 8009c38:	20003ec8 	.word	0x20003ec8

08009c3c <DrawChar>:
 * @brief  Draws a character on LCD.
 * @param  Xpos: the Line where to display the character shape
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	603a      	str	r2, [r7, #0]
 8009c46:	80fb      	strh	r3, [r7, #6]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61fb      	str	r3, [r7, #28]
 8009c50:	2300      	movs	r3, #0
 8009c52:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]

	height = DrawProp[ActiveLayer].pFont->Height;
 8009c58:	4b53      	ldr	r3, [pc, #332]	; (8009da8 <DrawChar+0x16c>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4953      	ldr	r1, [pc, #332]	; (8009dac <DrawChar+0x170>)
 8009c5e:	4613      	mov	r3, r2
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	3308      	adds	r3, #8
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	88db      	ldrh	r3, [r3, #6]
 8009c6e:	827b      	strh	r3, [r7, #18]
	width = DrawProp[ActiveLayer].pFont->Width;
 8009c70:	4b4d      	ldr	r3, [pc, #308]	; (8009da8 <DrawChar+0x16c>)
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	494d      	ldr	r1, [pc, #308]	; (8009dac <DrawChar+0x170>)
 8009c76:	4613      	mov	r3, r2
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3308      	adds	r3, #8
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	889b      	ldrh	r3, [r3, #4]
 8009c86:	823b      	strh	r3, [r7, #16]

	offset = 8 * ((width + 7) / 8) - width;
 8009c88:	8a3b      	ldrh	r3, [r7, #16]
 8009c8a:	3307      	adds	r3, #7
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	da00      	bge.n	8009c92 <DrawChar+0x56>
 8009c90:	3307      	adds	r3, #7
 8009c92:	10db      	asrs	r3, r3, #3
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	8a3b      	ldrh	r3, [r7, #16]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < height; i++) {
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
 8009ca6:	e076      	b.n	8009d96 <DrawChar+0x15a>
		pchar = ((uint8_t *) c + (width + 7) / 8 * i);
 8009ca8:	8a3b      	ldrh	r3, [r7, #16]
 8009caa:	3307      	adds	r3, #7
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da00      	bge.n	8009cb2 <DrawChar+0x76>
 8009cb0:	3307      	adds	r3, #7
 8009cb2:	10db      	asrs	r3, r3, #3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	fb03 f302 	mul.w	r3, r3, r2
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	60bb      	str	r3, [r7, #8]

		switch (((width + 7) / 8)) {
 8009cc2:	8a3b      	ldrh	r3, [r7, #16]
 8009cc4:	3307      	adds	r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da00      	bge.n	8009ccc <DrawChar+0x90>
 8009cca:	3307      	adds	r3, #7
 8009ccc:	10db      	asrs	r3, r3, #3
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d002      	beq.n	8009cd8 <DrawChar+0x9c>
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d004      	beq.n	8009ce0 <DrawChar+0xa4>
 8009cd6:	e00c      	b.n	8009cf2 <DrawChar+0xb6>
		case 1:
			line = pchar[0];
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	617b      	str	r3, [r7, #20]
			break;
 8009cde:	e016      	b.n	8009d0e <DrawChar+0xd2>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	021b      	lsls	r3, r3, #8
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	3201      	adds	r2, #1
 8009cea:	7812      	ldrb	r2, [r2, #0]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]
			break;
 8009cf0:	e00d      	b.n	8009d0e <DrawChar+0xd2>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	041a      	lsls	r2, r3, #16
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	021b      	lsls	r3, r3, #8
 8009d00:	4313      	orrs	r3, r2
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	3202      	adds	r2, #2
 8009d06:	7812      	ldrb	r2, [r2, #0]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]
			break;
 8009d0c:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
 8009d12:	e036      	b.n	8009d82 <DrawChar+0x146>
			if (line & (1 << (width - j + offset - 1))) {
 8009d14:	8a3a      	ldrh	r2, [r7, #16]
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	1ad2      	subs	r2, r2, r3
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	2201      	movs	r2, #1
 8009d22:	fa02 f303 	lsl.w	r3, r2, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d012      	beq.n	8009d56 <DrawChar+0x11a>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	4413      	add	r3, r2
 8009d38:	b298      	uxth	r0, r3
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <DrawChar+0x16c>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	491b      	ldr	r1, [pc, #108]	; (8009dac <DrawChar+0x170>)
 8009d40:	4613      	mov	r3, r2
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	88bb      	ldrh	r3, [r7, #4]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	f7ff ff4c 	bl	8009bec <BSP_LCD_DrawPixel>
 8009d54:	e012      	b.n	8009d7c <DrawChar+0x140>
						DrawProp[ActiveLayer].TextColor);
			} else {
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	b298      	uxth	r0, r3
 8009d60:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <DrawChar+0x16c>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4911      	ldr	r1, [pc, #68]	; (8009dac <DrawChar+0x170>)
 8009d66:	4613      	mov	r3, r2
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	440b      	add	r3, r1
 8009d70:	3304      	adds	r3, #4
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	88bb      	ldrh	r3, [r7, #4]
 8009d76:	4619      	mov	r1, r3
 8009d78:	f7ff ff38 	bl	8009bec <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	61bb      	str	r3, [r7, #24]
 8009d82:	8a3a      	ldrh	r2, [r7, #16]
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d8c4      	bhi.n	8009d14 <DrawChar+0xd8>
						DrawProp[ActiveLayer].BackColor);
			}
		}
		Ypos++;
 8009d8a:	88bb      	ldrh	r3, [r7, #4]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < height; i++) {
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	3301      	adds	r3, #1
 8009d94:	61fb      	str	r3, [r7, #28]
 8009d96:	8a7a      	ldrh	r2, [r7, #18]
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d884      	bhi.n	8009ca8 <DrawChar+0x6c>
	}
}
 8009d9e:	bf00      	nop
 8009da0:	3720      	adds	r7, #32
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20003ec8 	.word	0x20003ec8
 8009dac:	20003ecc 	.word	0x20003ecc

08009db0 <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]

	/* Register to memory mode with ARGB8888 as color Mode */

	Dma2dHandler->Init.Mode = DMA2D_R2M;
 8009dbe:	4b1a      	ldr	r3, [pc, #104]	; (8009e28 <FillBuffer+0x78>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009dc6:	605a      	str	r2, [r3, #4]
	Dma2dHandler->Init.ColorMode = DMA2D_ARGB8888;
 8009dc8:	4b17      	ldr	r3, [pc, #92]	; (8009e28 <FillBuffer+0x78>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	609a      	str	r2, [r3, #8]
	Dma2dHandler->Init.OutputOffset = OffLine;
 8009dd0:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <FillBuffer+0x78>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	60da      	str	r2, [r3, #12]

	//Dma2dHandler->Instance = DMA2D;

	/* DMA2D Initialization */

	if (HAL_DMA2D_Init(Dma2dHandler) == HAL_OK) {
 8009dd8:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <FillBuffer+0x78>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7f7 f90d 	bl	8000ffc <HAL_DMA2D_Init>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d11a      	bne.n	8009e1e <FillBuffer+0x6e>
		if (HAL_DMA2D_ConfigLayer(Dma2dHandler, LayerIndex) == HAL_OK) {
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <FillBuffer+0x78>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f7 fa62 	bl	80012b8 <HAL_DMA2D_ConfigLayer>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d111      	bne.n	8009e1e <FillBuffer+0x6e>
			if (HAL_DMA2D_Start(Dma2dHandler, ColorIndex, (uint32_t) pDst,
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <FillBuffer+0x78>)
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	69f9      	ldr	r1, [r7, #28]
 8009e08:	f7f7 f941 	bl	800108e <HAL_DMA2D_Start>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <FillBuffer+0x6e>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(Dma2dHandler, 10);
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <FillBuffer+0x78>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	210a      	movs	r1, #10
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f7 f963 	bl	80010e4 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8009e1e:	bf00      	nop
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20003ec4 	.word	0x20003ec4

08009e2c <RAMSetup>:

/**
 * @brief  Initializes the SDRAM device.
 */

void RAMSetup(SDRAM_HandleTypeDef* arg_wsk) {
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	SdramHandle = arg_wsk;
 8009e34:	4a04      	ldr	r2, [pc, #16]	; (8009e48 <RAMSetup+0x1c>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6013      	str	r3, [r2, #0]
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20003ee4 	.word	0x20003ee4

08009e4c <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8009e58:	4b2f      	ldr	r3, [pc, #188]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009e5e:	4b2e      	ldr	r3, [pc, #184]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e60:	2208      	movs	r2, #8
 8009e62:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009e64:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e66:	2201      	movs	r2, #1
 8009e68:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009e6a:	4b2b      	ldr	r3, [pc, #172]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009e70:	4b2a      	ldr	r3, [pc, #168]	; (8009f1c <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e78:	4927      	ldr	r1, [pc, #156]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f9 ffb2 	bl	8003de4 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8009e80:	2001      	movs	r0, #1
 8009e82:	f7f6 ffb9 	bl	8000df8 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8009e86:	4b24      	ldr	r3, [pc, #144]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e88:	2202      	movs	r2, #2
 8009e8a:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009e8c:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e8e:	2208      	movs	r2, #8
 8009e90:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009e92:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e94:	2201      	movs	r2, #1
 8009e96:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009e98:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009e9e:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ea6:	491c      	ldr	r1, [pc, #112]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7f9 ff9b 	bl	8003de4 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009eae:	4b1a      	ldr	r3, [pc, #104]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009eb4:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009eb6:	2208      	movs	r2, #8
 8009eb8:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 8009eba:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009ec0:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ece:	4912      	ldr	r1, [pc, #72]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f9 ff87 	bl	8003de4 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8009ed6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8009eda:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8009edc:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ede:	2204      	movs	r2, #4
 8009ee0:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009ef2:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009efc:	4906      	ldr	r1, [pc, #24]	; (8009f18 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f9 ff70 	bl	8003de4 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(SdramHandle, RefreshCount);
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f9 ff95 	bl	8003e3a <HAL_SDRAM_ProgramRefreshRate>
}
 8009f10:	bf00      	nop
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20003ee8 	.word	0x20003ee8
 8009f1c:	20003ee4 	.word	0x20003ee4

08009f20 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	460a      	mov	r2, r1
 8009f2a:	80fb      	strh	r3, [r7, #6]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8009f34:	4a13      	ldr	r2, [pc, #76]	; (8009f84 <BSP_TS_Init+0x64>)
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8009f3a:	4a13      	ldr	r2, [pc, #76]	; (8009f88 <BSP_TS_Init+0x68>)
 8009f3c:	88bb      	ldrh	r3, [r7, #4]
 8009f3e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8009f40:	4b12      	ldr	r3, [pc, #72]	; (8009f8c <BSP_TS_Init+0x6c>)
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	2082      	movs	r0, #130	; 0x82
 8009f46:	4798      	blx	r3
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f640 0311 	movw	r3, #2065	; 0x811
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d104      	bne.n	8009f5e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8009f54:	4b0e      	ldr	r3, [pc, #56]	; (8009f90 <BSP_TS_Init+0x70>)
 8009f56:	4a0d      	ldr	r2, [pc, #52]	; (8009f8c <BSP_TS_Init+0x6c>)
 8009f58:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d109      	bne.n	8009f78 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <BSP_TS_Init+0x70>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2082      	movs	r0, #130	; 0x82
 8009f6c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8009f6e:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <BSP_TS_Init+0x70>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2082      	movs	r0, #130	; 0x82
 8009f76:	4798      	blx	r3
  }

  return ret;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20003efc 	.word	0x20003efc
 8009f88:	20003efe 	.word	0x20003efe
 8009f8c:	20000078 	.word	0x20000078
 8009f90:	20003ef8 	.word	0x20003ef8

08009f94 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8009f9c:	4b4f      	ldr	r3, [pc, #316]	; (800a0dc <BSP_TS_GetState+0x148>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2082      	movs	r0, #130	; 0x82
 8009fa4:	4798      	blx	r3
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 808d 	beq.w	800a0d2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8009fb8:	4b48      	ldr	r3, [pc, #288]	; (800a0dc <BSP_TS_GetState+0x148>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f107 020c 	add.w	r2, r7, #12
 8009fc2:	f107 010e 	add.w	r1, r7, #14
 8009fc6:	2082      	movs	r0, #130	; 0x82
 8009fc8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8009fca:	89bb      	ldrh	r3, [r7, #12]
 8009fcc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8009fd4:	89bb      	ldrh	r3, [r7, #12]
 8009fd6:	4a42      	ldr	r2, [pc, #264]	; (800a0e0 <BSP_TS_GetState+0x14c>)
 8009fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fdc:	08db      	lsrs	r3, r3, #3
 8009fde:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8009fe0:	8abb      	ldrh	r3, [r7, #20]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d102      	bne.n	8009fec <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	82bb      	strh	r3, [r7, #20]
 8009fea:	e008      	b.n	8009ffe <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8009fec:	4b3d      	ldr	r3, [pc, #244]	; (800a0e4 <BSP_TS_GetState+0x150>)
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	8aba      	ldrh	r2, [r7, #20]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d903      	bls.n	8009ffe <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8009ff6:	4b3b      	ldr	r3, [pc, #236]	; (800a0e4 <BSP_TS_GetState+0x150>)
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8009ffe:	8abb      	ldrh	r3, [r7, #20]
 800a000:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800a002:	89fb      	ldrh	r3, [r7, #14]
 800a004:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a008:	4293      	cmp	r3, r2
 800a00a:	d806      	bhi.n	800a01a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800a00c:	89fb      	ldrh	r3, [r7, #14]
 800a00e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800a012:	330e      	adds	r3, #14
 800a014:	b29b      	uxth	r3, r3
 800a016:	81fb      	strh	r3, [r7, #14]
 800a018:	e005      	b.n	800a026 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800a01a:	89fb      	ldrh	r3, [r7, #14]
 800a01c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800a020:	3308      	adds	r3, #8
 800a022:	b29b      	uxth	r3, r3
 800a024:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800a026:	89fb      	ldrh	r3, [r7, #14]
 800a028:	4a2f      	ldr	r2, [pc, #188]	; (800a0e8 <BSP_TS_GetState+0x154>)
 800a02a:	fba2 2303 	umull	r2, r3, r2, r3
 800a02e:	08db      	lsrs	r3, r3, #3
 800a030:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800a032:	8afb      	ldrh	r3, [r7, #22]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	82fb      	strh	r3, [r7, #22]
 800a03c:	e008      	b.n	800a050 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800a03e:	4b2b      	ldr	r3, [pc, #172]	; (800a0ec <BSP_TS_GetState+0x158>)
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	8afa      	ldrh	r2, [r7, #22]
 800a044:	429a      	cmp	r2, r3
 800a046:	d903      	bls.n	800a050 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800a048:	4b28      	ldr	r3, [pc, #160]	; (800a0ec <BSP_TS_GetState+0x158>)
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800a050:	8afb      	ldrh	r3, [r7, #22]
 800a052:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800a054:	89fb      	ldrh	r3, [r7, #14]
 800a056:	461a      	mov	r2, r3
 800a058:	4b25      	ldr	r3, [pc, #148]	; (800a0f0 <BSP_TS_GetState+0x15c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d906      	bls.n	800a06e <BSP_TS_GetState+0xda>
 800a060:	89fa      	ldrh	r2, [r7, #14]
 800a062:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <BSP_TS_GetState+0x15c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	e005      	b.n	800a07a <BSP_TS_GetState+0xe6>
 800a06e:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <BSP_TS_GetState+0x15c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	b29a      	uxth	r2, r3
 800a074:	89fb      	ldrh	r3, [r7, #14]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	b29b      	uxth	r3, r3
 800a07a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800a07c:	89bb      	ldrh	r3, [r7, #12]
 800a07e:	461a      	mov	r2, r3
 800a080:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <BSP_TS_GetState+0x160>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d906      	bls.n	800a096 <BSP_TS_GetState+0x102>
 800a088:	89ba      	ldrh	r2, [r7, #12]
 800a08a:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <BSP_TS_GetState+0x160>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	b29b      	uxth	r3, r3
 800a094:	e005      	b.n	800a0a2 <BSP_TS_GetState+0x10e>
 800a096:	4b17      	ldr	r3, [pc, #92]	; (800a0f4 <BSP_TS_GetState+0x160>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	89bb      	ldrh	r3, [r7, #12]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800a0a4:	8a7a      	ldrh	r2, [r7, #18]
 800a0a6:	8a3b      	ldrh	r3, [r7, #16]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	2b05      	cmp	r3, #5
 800a0ac:	dd07      	ble.n	800a0be <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800a0ae:	89fb      	ldrh	r3, [r7, #14]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <BSP_TS_GetState+0x15c>)
 800a0b4:	601a      	str	r2, [r3, #0]
      _y = y; 
 800a0b6:	89bb      	ldrh	r3, [r7, #12]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <BSP_TS_GetState+0x160>)
 800a0bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <BSP_TS_GetState+0x15c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <BSP_TS_GetState+0x160>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	809a      	strh	r2, [r3, #4]
  }
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20003ef8 	.word	0x20003ef8
 800a0e0:	ba2e8ba3 	.word	0xba2e8ba3
 800a0e4:	20003efe 	.word	0x20003efe
 800a0e8:	88888889 	.word	0x88888889
 800a0ec:	20003efc 	.word	0x20003efc
 800a0f0:	20003f00 	.word	0x20003f00
 800a0f4:	20003f04 	.word	0x20003f04

0800a0f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0fe:	2300      	movs	r3, #0
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	4a12      	ldr	r2, [pc, #72]	; (800a14c <HAL_MspInit+0x54>)
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <HAL_MspInit+0x54>)
 800a106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a10c:	6453      	str	r3, [r2, #68]	; 0x44
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <HAL_MspInit+0x54>)
 800a110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a116:	607b      	str	r3, [r7, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a11a:	2300      	movs	r3, #0
 800a11c:	603b      	str	r3, [r7, #0]
 800a11e:	4a0b      	ldr	r2, [pc, #44]	; (800a14c <HAL_MspInit+0x54>)
 800a120:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <HAL_MspInit+0x54>)
 800a122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a128:	6413      	str	r3, [r2, #64]	; 0x40
 800a12a:	4b08      	ldr	r3, [pc, #32]	; (800a14c <HAL_MspInit+0x54>)
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a136:	2200      	movs	r2, #0
 800a138:	210f      	movs	r1, #15
 800a13a:	f06f 0001 	mvn.w	r0, #1
 800a13e:	f7f6 ff33 	bl	8000fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	40023800 	.word	0x40023800

0800a150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08c      	sub	sp, #48	; 0x30
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800a160:	2200      	movs	r2, #0
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	2036      	movs	r0, #54	; 0x36
 800a166:	f7f6 ff1f 	bl	8000fa8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800a16a:	2036      	movs	r0, #54	; 0x36
 800a16c:	f7f6 ff38 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	4a1f      	ldr	r2, [pc, #124]	; (800a1f4 <HAL_InitTick+0xa4>)
 800a176:	4b1f      	ldr	r3, [pc, #124]	; (800a1f4 <HAL_InitTick+0xa4>)
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	f043 0310 	orr.w	r3, r3, #16
 800a17e:	6413      	str	r3, [r2, #64]	; 0x40
 800a180:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <HAL_InitTick+0xa4>)
 800a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a184:	f003 0310 	and.w	r3, r3, #16
 800a188:	60fb      	str	r3, [r7, #12]
 800a18a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a18c:	f107 0210 	add.w	r2, r7, #16
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	4611      	mov	r1, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f7f9 fc1a 	bl	80039d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a19c:	f7f9 fbf0 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	4a13      	ldr	r2, [pc, #76]	; (800a1f8 <HAL_InitTick+0xa8>)
 800a1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ae:	0c9b      	lsrs	r3, r3, #18
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <HAL_InitTick+0xac>)
 800a1b6:	4a12      	ldr	r2, [pc, #72]	; (800a200 <HAL_InitTick+0xb0>)
 800a1b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800a1ba:	4b10      	ldr	r3, [pc, #64]	; (800a1fc <HAL_InitTick+0xac>)
 800a1bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a1c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a1c2:	4a0e      	ldr	r2, [pc, #56]	; (800a1fc <HAL_InitTick+0xac>)
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <HAL_InitTick+0xac>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <HAL_InitTick+0xac>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a1d4:	4809      	ldr	r0, [pc, #36]	; (800a1fc <HAL_InitTick+0xac>)
 800a1d6:	f7fa fb7e 	bl	80048d6 <HAL_TIM_Base_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d104      	bne.n	800a1ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a1e0:	4806      	ldr	r0, [pc, #24]	; (800a1fc <HAL_InitTick+0xac>)
 800a1e2:	f7fa fbad 	bl	8004940 <HAL_TIM_Base_Start_IT>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	e000      	b.n	800a1ec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3730      	adds	r7, #48	; 0x30
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	40023800 	.word	0x40023800
 800a1f8:	431bde83 	.word	0x431bde83
 800a1fc:	200041b8 	.word	0x200041b8
 800a200:	40001000 	.word	0x40001000

0800a204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a208:	bf00      	nop
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a212:	b480      	push	{r7}
 800a214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a216:	e7fe      	b.n	800a216 <HardFault_Handler+0x4>

0800a218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a21c:	e7fe      	b.n	800a21c <MemManage_Handler+0x4>

0800a21e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a21e:	b480      	push	{r7}
 800a220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a222:	e7fe      	b.n	800a222 <BusFault_Handler+0x4>

0800a224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a228:	e7fe      	b.n	800a228 <UsageFault_Handler+0x4>

0800a22a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a22a:	b480      	push	{r7}
 800a22c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a22e:	bf00      	nop
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a23c:	4802      	ldr	r0, [pc, #8]	; (800a248 <TIM6_DAC_IRQHandler+0x10>)
 800a23e:	f7fa fba3 	bl	8004988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a242:	bf00      	nop
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	200041b8 	.word	0x200041b8

0800a24c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	4603      	mov	r3, r0
 800a254:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fa59 	bl	800a710 <stmpe811_GetInstance>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	2bff      	cmp	r3, #255	; 0xff
 800a266:	d112      	bne.n	800a28e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800a268:	2000      	movs	r0, #0
 800a26a:	f000 fa51 	bl	800a710 <stmpe811_GetInstance>
 800a26e:	4603      	mov	r3, r0
 800a270:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d80a      	bhi.n	800a28e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	88fa      	ldrh	r2, [r7, #6]
 800a27c:	b2d1      	uxtb	r1, r2
 800a27e:	4a06      	ldr	r2, [pc, #24]	; (800a298 <stmpe811_Init+0x4c>)
 800a280:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800a282:	f7fe ff54 	bl	800912e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 f807 	bl	800a29c <stmpe811_Reset>
    }
  }
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20003f08 	.word	0x20003f08

0800a29c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	2103      	movs	r1, #3
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe ff49 	bl	8009146 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800a2b4:	200a      	movs	r0, #10
 800a2b6:	f7fe ff83 	bl	80091c0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2103      	movs	r1, #3
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe ff3f 	bl	8009146 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800a2c8:	2002      	movs	r0, #2
 800a2ca:	f7fe ff79 	bl	80091c0 <IOE_Delay>
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800a2d6:	b590      	push	{r4, r7, lr}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	4603      	mov	r3, r0
 800a2de:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800a2e0:	f7fe ff25 	bl	800912e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800a2e4:	88fb      	ldrh	r3, [r7, #6]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe ff3e 	bl	800916c <IOE_Read>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe ff35 	bl	800916c <IOE_Read>
 800a302:	4603      	mov	r3, r0
 800a304:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800a306:	4323      	orrs	r3, r4
 800a308:	b21b      	sxth	r3, r3
 800a30a:	b29b      	uxth	r3, r3
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	bd90      	pop	{r4, r7, pc}

0800a314 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2109      	movs	r1, #9
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe ff1f 	bl	800916c <IOE_Read>
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	f043 0301 	orr.w	r3, r3, #1
 800a338:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800a33a:	88fb      	ldrh	r3, [r7, #6]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	7bfa      	ldrb	r2, [r7, #15]
 800a340:	2109      	movs	r1, #9
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe feff 	bl	8009146 <IOE_Write>
}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2109      	movs	r1, #9
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe ff01 	bl	800916c <IOE_Read>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	f023 0301 	bic.w	r3, r3, #1
 800a374:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	7bfa      	ldrb	r2, [r7, #15]
 800a37c:	2109      	movs	r1, #9
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe fee1 	bl	8009146 <IOE_Write>
    
}
 800a384:	bf00      	nop
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	460a      	mov	r2, r1
 800a396:	80fb      	strh	r3, [r7, #6]
 800a398:	4613      	mov	r3, r2
 800a39a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	210a      	movs	r1, #10
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe fee0 	bl	800916c <IOE_Read>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800a3b0:	7bfa      	ldrb	r2, [r7, #15]
 800a3b2:	797b      	ldrb	r3, [r7, #5]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	7bfa      	ldrb	r2, [r7, #15]
 800a3be:	210a      	movs	r1, #10
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe fec0 	bl	8009146 <IOE_Write>
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	460a      	mov	r2, r1
 800a3d8:	80fb      	strh	r3, [r7, #6]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800a3e2:	88fb      	ldrh	r3, [r7, #6]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	210a      	movs	r1, #10
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fe febf 	bl	800916c <IOE_Read>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800a3f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a3f6:	43db      	mvns	r3, r3
 800a3f8:	b25a      	sxtb	r2, r3
 800a3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fe:	4013      	ands	r3, r2
 800a400:	b25b      	sxtb	r3, r3
 800a402:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800a404:	88fb      	ldrh	r3, [r7, #6]
 800a406:	b2db      	uxtb	r3, r3
 800a408:	7bfa      	ldrb	r2, [r7, #15]
 800a40a:	210a      	movs	r1, #10
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe fe9a 	bl	8009146 <IOE_Write>
}
 800a412:	bf00      	nop
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	4603      	mov	r3, r0
 800a422:	460a      	mov	r2, r1
 800a424:	80fb      	strh	r3, [r7, #6]
 800a426:	4613      	mov	r3, r2
 800a428:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800a42a:	88fb      	ldrh	r3, [r7, #6]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	210b      	movs	r1, #11
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe fe9b 	bl	800916c <IOE_Read>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	797b      	ldrb	r3, [r7, #5]
 800a43c:	4013      	ands	r3, r2
 800a43e:	b2db      	uxtb	r3, r3
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	460a      	mov	r2, r1
 800a452:	80fb      	strh	r3, [r7, #6]
 800a454:	4613      	mov	r3, r2
 800a456:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	797a      	ldrb	r2, [r7, #5]
 800a45e:	210b      	movs	r1, #11
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe fe70 	bl	8009146 <IOE_Write>
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	4603      	mov	r3, r0
 800a476:	6039      	str	r1, [r7, #0]
 800a478:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800a47e:	88fb      	ldrh	r3, [r7, #6]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2117      	movs	r1, #23
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe fe71 	bl	800916c <IOE_Read>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	b25b      	sxtb	r3, r3
 800a492:	43db      	mvns	r3, r3
 800a494:	b25a      	sxtb	r2, r3
 800a496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a49a:	4013      	ands	r3, r2
 800a49c:	b25b      	sxtb	r3, r3
 800a49e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800a4a0:	88fb      	ldrh	r3, [r7, #6]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	7bfa      	ldrb	r2, [r7, #15]
 800a4a6:	2117      	movs	r1, #23
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fe4c 	bl	8009146 <IOE_Write>
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	4603      	mov	r3, r0
 800a4be:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2104      	movs	r1, #4
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe fe50 	bl	800916c <IOE_Read>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	f023 0304 	bic.w	r3, r3, #4
 800a4d6:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	7bfa      	ldrb	r2, [r7, #15]
 800a4de:	2104      	movs	r1, #4
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fe30 	bl	8009146 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	21f0      	movs	r1, #240	; 0xf0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff ffbf 	bl	800a46e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800a4f8:	88fb      	ldrh	r3, [r7, #6]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	7bfa      	ldrb	r2, [r7, #15]
 800a4fe:	2104      	movs	r1, #4
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fe20 	bl	8009146 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800a506:	88fb      	ldrh	r3, [r7, #6]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2249      	movs	r2, #73	; 0x49
 800a50c:	2120      	movs	r1, #32
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fe19 	bl	8009146 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800a514:	2002      	movs	r0, #2
 800a516:	f7fe fe53 	bl	80091c0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2201      	movs	r2, #1
 800a520:	2121      	movs	r1, #33	; 0x21
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fe0f 	bl	8009146 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	229a      	movs	r2, #154	; 0x9a
 800a52e:	2141      	movs	r1, #65	; 0x41
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe fe08 	bl	8009146 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2201      	movs	r2, #1
 800a53c:	214a      	movs	r1, #74	; 0x4a
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fe01 	bl	8009146 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a544:	88fb      	ldrh	r3, [r7, #6]
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2201      	movs	r2, #1
 800a54a:	214b      	movs	r1, #75	; 0x4b
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fdfa 	bl	8009146 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2200      	movs	r2, #0
 800a558:	214b      	movs	r1, #75	; 0x4b
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fdf3 	bl	8009146 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800a560:	88fb      	ldrh	r3, [r7, #6]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2201      	movs	r2, #1
 800a566:	2156      	movs	r1, #86	; 0x56
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fdec 	bl	8009146 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2201      	movs	r2, #1
 800a574:	2158      	movs	r1, #88	; 0x58
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fde5 	bl	8009146 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800a57c:	88fb      	ldrh	r3, [r7, #6]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2201      	movs	r2, #1
 800a582:	2140      	movs	r1, #64	; 0x40
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fdde 	bl	8009146 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	22ff      	movs	r2, #255	; 0xff
 800a590:	210b      	movs	r1, #11
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fdd7 	bl	8009146 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800a598:	2002      	movs	r0, #2
 800a59a:	f7fe fe11 	bl	80091c0 <IOE_Delay>
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800a5b4:	88fb      	ldrh	r3, [r7, #6]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2140      	movs	r1, #64	; 0x40
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fdd6 	bl	800916c <IOE_Read>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c6:	2b80      	cmp	r3, #128	; 0x80
 800a5c8:	bf0c      	ite	eq
 800a5ca:	2301      	moveq	r3, #1
 800a5cc:	2300      	movne	r3, #0
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00b      	beq.n	800a5f0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	214c      	movs	r1, #76	; 0x4c
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fdc4 	bl	800916c <IOE_Read>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d010      	beq.n	800a60c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	73fb      	strb	r3, [r7, #15]
 800a5ee:	e00d      	b.n	800a60c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a5f0:	88fb      	ldrh	r3, [r7, #6]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	214b      	movs	r1, #75	; 0x4b
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fda4 	bl	8009146 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a5fe:	88fb      	ldrh	r3, [r7, #6]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2200      	movs	r2, #0
 800a604:	214b      	movs	r1, #75	; 0x4b
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fd9d 	bl	8009146 <IOE_Write>
  }
  
  return ret;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b086      	sub	sp, #24
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	4603      	mov	r3, r0
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800a624:	89fb      	ldrh	r3, [r7, #14]
 800a626:	b2d8      	uxtb	r0, r3
 800a628:	f107 0210 	add.w	r2, r7, #16
 800a62c:	2304      	movs	r3, #4
 800a62e:	21d7      	movs	r1, #215	; 0xd7
 800a630:	f7fe fdaf 	bl	8009192 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800a634:	7c3b      	ldrb	r3, [r7, #16]
 800a636:	061a      	lsls	r2, r3, #24
 800a638:	7c7b      	ldrb	r3, [r7, #17]
 800a63a:	041b      	lsls	r3, r3, #16
 800a63c:	431a      	orrs	r2, r3
 800a63e:	7cbb      	ldrb	r3, [r7, #18]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	4313      	orrs	r3, r2
 800a644:	7cfa      	ldrb	r2, [r7, #19]
 800a646:	4313      	orrs	r3, r2
 800a648:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	0d1b      	lsrs	r3, r3, #20
 800a64e:	b29a      	uxth	r2, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	0a1b      	lsrs	r3, r3, #8
 800a658:	b29b      	uxth	r3, r3
 800a65a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a65e:	b29a      	uxth	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a664:	89fb      	ldrh	r3, [r7, #14]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2201      	movs	r2, #1
 800a66a:	214b      	movs	r1, #75	; 0x4b
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe fd6a 	bl	8009146 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a672:	89fb      	ldrh	r3, [r7, #14]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2200      	movs	r2, #0
 800a678:	214b      	movs	r1, #75	; 0x4b
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fd63 	bl	8009146 <IOE_Write>
}
 800a680:	bf00      	nop
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800a692:	f7fe fd52 	bl	800913a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	211f      	movs	r1, #31
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fe76 	bl	800a38c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800a6a0:	88fb      	ldrh	r3, [r7, #6]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff fe36 	bl	800a314 <stmpe811_EnableGlobalIT>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fe47 	bl	800a350 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	211f      	movs	r1, #31
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fe81 	bl	800a3ce <stmpe811_DisableITSource>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	211f      	movs	r1, #31
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff fe99 	bl	800a41a <stmpe811_ReadGITStatus>
 800a6e8:	4603      	mov	r3, r0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	211f      	movs	r1, #31
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff fea1 	bl	800a448 <stmpe811_ClearGlobalIT>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]
 800a722:	e00b      	b.n	800a73c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <stmpe811_GetInstance+0x40>)
 800a728:	5cd3      	ldrb	r3, [r2, r3]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	88fa      	ldrh	r2, [r7, #6]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d101      	bne.n	800a736 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	e006      	b.n	800a744 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	3301      	adds	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d9f0      	bls.n	800a724 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800a742:	23ff      	movs	r3, #255	; 0xff
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	20003f08 	.word	0x20003f08

0800a754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a758:	4a16      	ldr	r2, [pc, #88]	; (800a7b4 <SystemInit+0x60>)
 800a75a:	4b16      	ldr	r3, [pc, #88]	; (800a7b4 <SystemInit+0x60>)
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a768:	4a13      	ldr	r2, [pc, #76]	; (800a7b8 <SystemInit+0x64>)
 800a76a:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <SystemInit+0x64>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <SystemInit+0x64>)
 800a776:	2200      	movs	r2, #0
 800a778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a77a:	4a0f      	ldr	r2, [pc, #60]	; (800a7b8 <SystemInit+0x64>)
 800a77c:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <SystemInit+0x64>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <SystemInit+0x64>)
 800a78c:	4a0b      	ldr	r2, [pc, #44]	; (800a7bc <SystemInit+0x68>)
 800a78e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a790:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <SystemInit+0x64>)
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <SystemInit+0x64>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a79a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <SystemInit+0x64>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a7a2:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <SystemInit+0x60>)
 800a7a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7a8:	609a      	str	r2, [r3, #8]
#endif
}
 800a7aa:	bf00      	nop
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	e000ed00 	.word	0xe000ed00
 800a7b8:	40023800 	.word	0x40023800
 800a7bc:	24003010 	.word	0x24003010

0800a7c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a7c4:	4b11      	ldr	r3, [pc, #68]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7c6:	4a12      	ldr	r2, [pc, #72]	; (800a810 <MX_USART1_UART_Init+0x50>)
 800a7c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a7ca:	4b10      	ldr	r3, [pc, #64]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a7d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a7d2:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a7e4:	4b09      	ldr	r3, [pc, #36]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7e6:	220c      	movs	r2, #12
 800a7e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7ea:	4b08      	ldr	r3, [pc, #32]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a7f6:	4805      	ldr	r0, [pc, #20]	; (800a80c <MX_USART1_UART_Init+0x4c>)
 800a7f8:	f7fa faaa 	bl	8004d50 <HAL_UART_Init>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a802:	f7fe f8cf 	bl	80089a4 <Error_Handler>
  }

}
 800a806:	bf00      	nop
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	200041f8 	.word	0x200041f8
 800a810:	40011000 	.word	0x40011000

0800a814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08a      	sub	sp, #40	; 0x28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a81c:	f107 0314 	add.w	r3, r7, #20
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	605a      	str	r2, [r3, #4]
 800a826:	609a      	str	r2, [r3, #8]
 800a828:	60da      	str	r2, [r3, #12]
 800a82a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a19      	ldr	r2, [pc, #100]	; (800a898 <HAL_UART_MspInit+0x84>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d12c      	bne.n	800a890 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
 800a83a:	4a18      	ldr	r2, [pc, #96]	; (800a89c <HAL_UART_MspInit+0x88>)
 800a83c:	4b17      	ldr	r3, [pc, #92]	; (800a89c <HAL_UART_MspInit+0x88>)
 800a83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a840:	f043 0310 	orr.w	r3, r3, #16
 800a844:	6453      	str	r3, [r2, #68]	; 0x44
 800a846:	4b15      	ldr	r3, [pc, #84]	; (800a89c <HAL_UART_MspInit+0x88>)
 800a848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84a:	f003 0310 	and.w	r3, r3, #16
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	4a11      	ldr	r2, [pc, #68]	; (800a89c <HAL_UART_MspInit+0x88>)
 800a858:	4b10      	ldr	r3, [pc, #64]	; (800a89c <HAL_UART_MspInit+0x88>)
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	6313      	str	r3, [r2, #48]	; 0x30
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <HAL_UART_MspInit+0x88>)
 800a864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a86e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a874:	2302      	movs	r3, #2
 800a876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a878:	2301      	movs	r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a87c:	2303      	movs	r3, #3
 800a87e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a880:	2307      	movs	r3, #7
 800a882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a884:	f107 0314 	add.w	r3, r7, #20
 800a888:	4619      	mov	r1, r3
 800a88a:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <HAL_UART_MspInit+0x8c>)
 800a88c:	f7f6 fe40 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a890:	bf00      	nop
 800a892:	3728      	adds	r7, #40	; 0x28
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	40011000 	.word	0x40011000
 800a89c:	40023800 	.word	0x40023800
 800a8a0:	40020000 	.word	0x40020000

0800a8a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a8a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a8dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a8a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a8aa:	e003      	b.n	800a8b4 <LoopCopyDataInit>

0800a8ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a8ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a8b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a8b2:	3104      	adds	r1, #4

0800a8b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a8b4:	480b      	ldr	r0, [pc, #44]	; (800a8e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a8b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a8ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a8bc:	d3f6      	bcc.n	800a8ac <CopyDataInit>
  ldr  r2, =_sbss
 800a8be:	4a0b      	ldr	r2, [pc, #44]	; (800a8ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a8c0:	e002      	b.n	800a8c8 <LoopFillZerobss>

0800a8c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a8c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a8c4:	f842 3b04 	str.w	r3, [r2], #4

0800a8c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a8c8:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a8ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a8cc:	d3f9      	bcc.n	800a8c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a8ce:	f7ff ff41 	bl	800a754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a8d2:	f000 f811 	bl	800a8f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a8d6:	f7fd ff49 	bl	800876c <main>
  bx  lr    
 800a8da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a8dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800a8e0:	0800d25c 	.word	0x0800d25c
  ldr  r0, =_sdata
 800a8e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a8e8:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 800a8ec:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 800a8f0:	20004238 	.word	0x20004238

0800a8f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a8f4:	e7fe      	b.n	800a8f4 <ADC_IRQHandler>
	...

0800a8f8 <__libc_init_array>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	4e0d      	ldr	r6, [pc, #52]	; (800a930 <__libc_init_array+0x38>)
 800a8fc:	4c0d      	ldr	r4, [pc, #52]	; (800a934 <__libc_init_array+0x3c>)
 800a8fe:	1ba4      	subs	r4, r4, r6
 800a900:	10a4      	asrs	r4, r4, #2
 800a902:	2500      	movs	r5, #0
 800a904:	42a5      	cmp	r5, r4
 800a906:	d109      	bne.n	800a91c <__libc_init_array+0x24>
 800a908:	4e0b      	ldr	r6, [pc, #44]	; (800a938 <__libc_init_array+0x40>)
 800a90a:	4c0c      	ldr	r4, [pc, #48]	; (800a93c <__libc_init_array+0x44>)
 800a90c:	f000 f886 	bl	800aa1c <_init>
 800a910:	1ba4      	subs	r4, r4, r6
 800a912:	10a4      	asrs	r4, r4, #2
 800a914:	2500      	movs	r5, #0
 800a916:	42a5      	cmp	r5, r4
 800a918:	d105      	bne.n	800a926 <__libc_init_array+0x2e>
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a920:	4798      	blx	r3
 800a922:	3501      	adds	r5, #1
 800a924:	e7ee      	b.n	800a904 <__libc_init_array+0xc>
 800a926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a92a:	4798      	blx	r3
 800a92c:	3501      	adds	r5, #1
 800a92e:	e7f2      	b.n	800a916 <__libc_init_array+0x1e>
 800a930:	0800d254 	.word	0x0800d254
 800a934:	0800d254 	.word	0x0800d254
 800a938:	0800d254 	.word	0x0800d254
 800a93c:	0800d258 	.word	0x0800d258

0800a940 <__itoa>:
 800a940:	1e93      	subs	r3, r2, #2
 800a942:	2b22      	cmp	r3, #34	; 0x22
 800a944:	b510      	push	{r4, lr}
 800a946:	460c      	mov	r4, r1
 800a948:	d904      	bls.n	800a954 <__itoa+0x14>
 800a94a:	2300      	movs	r3, #0
 800a94c:	700b      	strb	r3, [r1, #0]
 800a94e:	461c      	mov	r4, r3
 800a950:	4620      	mov	r0, r4
 800a952:	bd10      	pop	{r4, pc}
 800a954:	2a0a      	cmp	r2, #10
 800a956:	d109      	bne.n	800a96c <__itoa+0x2c>
 800a958:	2800      	cmp	r0, #0
 800a95a:	da07      	bge.n	800a96c <__itoa+0x2c>
 800a95c:	232d      	movs	r3, #45	; 0x2d
 800a95e:	700b      	strb	r3, [r1, #0]
 800a960:	4240      	negs	r0, r0
 800a962:	2101      	movs	r1, #1
 800a964:	4421      	add	r1, r4
 800a966:	f000 f819 	bl	800a99c <__utoa>
 800a96a:	e7f1      	b.n	800a950 <__itoa+0x10>
 800a96c:	2100      	movs	r1, #0
 800a96e:	e7f9      	b.n	800a964 <__itoa+0x24>

0800a970 <itoa>:
 800a970:	f7ff bfe6 	b.w	800a940 <__itoa>

0800a974 <memcpy>:
 800a974:	b510      	push	{r4, lr}
 800a976:	1e43      	subs	r3, r0, #1
 800a978:	440a      	add	r2, r1
 800a97a:	4291      	cmp	r1, r2
 800a97c:	d100      	bne.n	800a980 <memcpy+0xc>
 800a97e:	bd10      	pop	{r4, pc}
 800a980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a984:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a988:	e7f7      	b.n	800a97a <memcpy+0x6>

0800a98a <memset>:
 800a98a:	4402      	add	r2, r0
 800a98c:	4603      	mov	r3, r0
 800a98e:	4293      	cmp	r3, r2
 800a990:	d100      	bne.n	800a994 <memset+0xa>
 800a992:	4770      	bx	lr
 800a994:	f803 1b01 	strb.w	r1, [r3], #1
 800a998:	e7f9      	b.n	800a98e <memset+0x4>
	...

0800a99c <__utoa>:
 800a99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a99e:	4c1e      	ldr	r4, [pc, #120]	; (800aa18 <__utoa+0x7c>)
 800a9a0:	b08b      	sub	sp, #44	; 0x2c
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	466d      	mov	r5, sp
 800a9a8:	f104 0e20 	add.w	lr, r4, #32
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	6861      	ldr	r1, [r4, #4]
 800a9b0:	462e      	mov	r6, r5
 800a9b2:	c603      	stmia	r6!, {r0, r1}
 800a9b4:	3408      	adds	r4, #8
 800a9b6:	4574      	cmp	r4, lr
 800a9b8:	4635      	mov	r5, r6
 800a9ba:	d1f7      	bne.n	800a9ac <__utoa+0x10>
 800a9bc:	7921      	ldrb	r1, [r4, #4]
 800a9be:	7131      	strb	r1, [r6, #4]
 800a9c0:	1e91      	subs	r1, r2, #2
 800a9c2:	6820      	ldr	r0, [r4, #0]
 800a9c4:	6030      	str	r0, [r6, #0]
 800a9c6:	2922      	cmp	r1, #34	; 0x22
 800a9c8:	f04f 0100 	mov.w	r1, #0
 800a9cc:	d904      	bls.n	800a9d8 <__utoa+0x3c>
 800a9ce:	7039      	strb	r1, [r7, #0]
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	b00b      	add	sp, #44	; 0x2c
 800a9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d8:	1e78      	subs	r0, r7, #1
 800a9da:	4606      	mov	r6, r0
 800a9dc:	fbb3 f5f2 	udiv	r5, r3, r2
 800a9e0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a9e4:	fb02 3315 	mls	r3, r2, r5, r3
 800a9e8:	4473      	add	r3, lr
 800a9ea:	1c4c      	adds	r4, r1, #1
 800a9ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a9f0:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	b965      	cbnz	r5, 800aa12 <__utoa+0x76>
 800a9f8:	553d      	strb	r5, [r7, r4]
 800a9fa:	187a      	adds	r2, r7, r1
 800a9fc:	1acc      	subs	r4, r1, r3
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	dae7      	bge.n	800a9d2 <__utoa+0x36>
 800aa02:	7844      	ldrb	r4, [r0, #1]
 800aa04:	7815      	ldrb	r5, [r2, #0]
 800aa06:	f800 5f01 	strb.w	r5, [r0, #1]!
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	f802 4901 	strb.w	r4, [r2], #-1
 800aa10:	e7f4      	b.n	800a9fc <__utoa+0x60>
 800aa12:	4621      	mov	r1, r4
 800aa14:	e7e2      	b.n	800a9dc <__utoa+0x40>
 800aa16:	bf00      	nop
 800aa18:	0800d224 	.word	0x0800d224

0800aa1c <_init>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	bf00      	nop
 800aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa22:	bc08      	pop	{r3}
 800aa24:	469e      	mov	lr, r3
 800aa26:	4770      	bx	lr

0800aa28 <_fini>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr
