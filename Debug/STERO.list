
STERO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002824  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d18c  0800d18c  0001d18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d198  0800d198  0001d198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  0800d19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  8 .bss          0000418c  2000009c  2000009c  0002009c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004228  20004228  0002009c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e68e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005a2d  00000000  00000000  0004e75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002178  00000000  00000000  00054188  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001eb0  00000000  00000000  00056300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000fa73  00000000  00000000  000581b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000988a  00000000  00000000  00067c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000714ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008acc  00000000  00000000  0007152c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a950 	.word	0x0800a950

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	0800a950 	.word	0x0800a950

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b97a 	b.w	8000d70 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	468c      	mov	ip, r1
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	9e08      	ldr	r6, [sp, #32]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d151      	bne.n	8000b48 <__udivmoddi4+0xb4>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d96d      	bls.n	8000b86 <__udivmoddi4+0xf2>
 8000aaa:	fab2 fe82 	clz	lr, r2
 8000aae:	f1be 0f00 	cmp.w	lr, #0
 8000ab2:	d00b      	beq.n	8000acc <__udivmoddi4+0x38>
 8000ab4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ab8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000abc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ac0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ac4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ac8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000acc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ad0:	0c25      	lsrs	r5, r4, #16
 8000ad2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ad6:	fa1f f987 	uxth.w	r9, r7
 8000ada:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ade:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ae2:	fb08 f309 	mul.w	r3, r8, r9
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x6c>
 8000aea:	19ed      	adds	r5, r5, r7
 8000aec:	f108 32ff 	add.w	r2, r8, #4294967295
 8000af0:	f080 8123 	bcs.w	8000d3a <__udivmoddi4+0x2a6>
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	f240 8120 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	443d      	add	r5, r7
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b08:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b10:	fb00 f909 	mul.w	r9, r0, r9
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x98>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	f080 810a 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000b22:	45a1      	cmp	r9, r4
 8000b24:	f240 8107 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	443c      	add	r4, r7
 8000b2c:	eba4 0409 	sub.w	r4, r4, r9
 8000b30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d061      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b3a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6034      	str	r4, [r6, #0]
 8000b42:	6073      	str	r3, [r6, #4]
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d907      	bls.n	8000b5c <__udivmoddi4+0xc8>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d054      	beq.n	8000bfa <__udivmoddi4+0x166>
 8000b50:	2100      	movs	r1, #0
 8000b52:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b56:	4608      	mov	r0, r1
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	fab3 f183 	clz	r1, r3
 8000b60:	2900      	cmp	r1, #0
 8000b62:	f040 808e 	bne.w	8000c82 <__udivmoddi4+0x1ee>
 8000b66:	42ab      	cmp	r3, r5
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xdc>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80fa 	bhi.w	8000d64 <__udivmoddi4+0x2d0>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb65 0503 	sbc.w	r5, r5, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	46ac      	mov	ip, r5
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d03f      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b7e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	b912      	cbnz	r2, 8000b8e <__udivmoddi4+0xfa>
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b8e:	fab7 fe87 	clz	lr, r7
 8000b92:	f1be 0f00 	cmp.w	lr, #0
 8000b96:	d134      	bne.n	8000c02 <__udivmoddi4+0x16e>
 8000b98:	1beb      	subs	r3, r5, r7
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ba6:	0c25      	lsrs	r5, r4, #16
 8000ba8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bb0:	fb0c f308 	mul.w	r3, ip, r8
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x134>
 8000bb8:	19ed      	adds	r5, r5, r7
 8000bba:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x132>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	f200 80d1 	bhi.w	8000d68 <__udivmoddi4+0x2d4>
 8000bc6:	4680      	mov	r8, r0
 8000bc8:	1aed      	subs	r5, r5, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bd0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bd4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bd8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x15c>
 8000be0:	19e4      	adds	r4, r4, r7
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x15a>
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	f200 80b8 	bhi.w	8000d5e <__udivmoddi4+0x2ca>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 040c 	sub.w	r4, r4, ip
 8000bf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf8:	e79d      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1ce 0420 	rsb	r4, lr, #32
 8000c06:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c0a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c0e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c12:	0c3a      	lsrs	r2, r7, #16
 8000c14:	fa25 f404 	lsr.w	r4, r5, r4
 8000c18:	ea48 0803 	orr.w	r8, r8, r3
 8000c1c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c20:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c24:	fb02 4411 	mls	r4, r2, r1, r4
 8000c28:	fa1f fc87 	uxth.w	ip, r7
 8000c2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c30:	fb01 f30c 	mul.w	r3, r1, ip
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x1bc>
 8000c3c:	19ed      	adds	r5, r5, r7
 8000c3e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c42:	f080 808a 	bcs.w	8000d5a <__udivmoddi4+0x2c6>
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	f240 8087 	bls.w	8000d5a <__udivmoddi4+0x2c6>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	443d      	add	r5, r7
 8000c50:	1aeb      	subs	r3, r5, r3
 8000c52:	fa1f f588 	uxth.w	r5, r8
 8000c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c62:	fb00 f30c 	mul.w	r3, r0, ip
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x1e6>
 8000c6a:	19ed      	adds	r5, r5, r7
 8000c6c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c70:	d26f      	bcs.n	8000d52 <__udivmoddi4+0x2be>
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	d96d      	bls.n	8000d52 <__udivmoddi4+0x2be>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443d      	add	r5, r7
 8000c7a:	1aeb      	subs	r3, r5, r3
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	e78f      	b.n	8000ba2 <__udivmoddi4+0x10e>
 8000c82:	f1c1 0720 	rsb	r7, r1, #32
 8000c86:	fa22 f807 	lsr.w	r8, r2, r7
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c90:	ea48 0303 	orr.w	r3, r8, r3
 8000c94:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ca2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ca6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000caa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cae:	fa1f f883 	uxth.w	r8, r3
 8000cb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb6:	fb09 f408 	mul.w	r4, r9, r8
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x244>
 8000cc6:	18ed      	adds	r5, r5, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	d243      	bcs.n	8000d56 <__udivmoddi4+0x2c2>
 8000cce:	42ac      	cmp	r4, r5
 8000cd0:	d941      	bls.n	8000d56 <__udivmoddi4+0x2c2>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	441d      	add	r5, r3
 8000cd8:	1b2d      	subs	r5, r5, r4
 8000cda:	fa1f fe8e 	uxth.w	lr, lr
 8000cde:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ce2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ce6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cea:	fb00 f808 	mul.w	r8, r0, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cf2:	18e4      	adds	r4, r4, r3
 8000cf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf8:	d229      	bcs.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfa:	45a0      	cmp	r8, r4
 8000cfc:	d927      	bls.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	441c      	add	r4, r3
 8000d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d06:	eba4 0408 	sub.w	r4, r4, r8
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	454c      	cmp	r4, r9
 8000d10:	46c6      	mov	lr, r8
 8000d12:	464d      	mov	r5, r9
 8000d14:	d315      	bcc.n	8000d42 <__udivmoddi4+0x2ae>
 8000d16:	d012      	beq.n	8000d3e <__udivmoddi4+0x2aa>
 8000d18:	b156      	cbz	r6, 8000d30 <__udivmoddi4+0x29c>
 8000d1a:	ebba 030e 	subs.w	r3, sl, lr
 8000d1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d22:	fa04 f707 	lsl.w	r7, r4, r7
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	6037      	str	r7, [r6, #0]
 8000d2e:	6074      	str	r4, [r6, #4]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	4618      	mov	r0, r3
 8000d38:	e6f8      	b.n	8000b2c <__udivmoddi4+0x98>
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	e6e0      	b.n	8000b00 <__udivmoddi4+0x6c>
 8000d3e:	45c2      	cmp	sl, r8
 8000d40:	d2ea      	bcs.n	8000d18 <__udivmoddi4+0x284>
 8000d42:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d46:	eb69 0503 	sbc.w	r5, r9, r3
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	e7e4      	b.n	8000d18 <__udivmoddi4+0x284>
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e7d7      	b.n	8000d02 <__udivmoddi4+0x26e>
 8000d52:	4640      	mov	r0, r8
 8000d54:	e791      	b.n	8000c7a <__udivmoddi4+0x1e6>
 8000d56:	4681      	mov	r9, r0
 8000d58:	e7be      	b.n	8000cd8 <__udivmoddi4+0x244>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	e778      	b.n	8000c50 <__udivmoddi4+0x1bc>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	e745      	b.n	8000bf0 <__udivmoddi4+0x15c>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e708      	b.n	8000b7a <__udivmoddi4+0xe6>
 8000d68:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6c:	443d      	add	r5, r7
 8000d6e:	e72b      	b.n	8000bc8 <__udivmoddi4+0x134>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8f8 	bl	8000f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f009 f968 	bl	800a078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f009 f932 	bl	800a010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20003f04 	.word	0x20003f04

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20003f04 	.word	0x20003f04

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_Delay+0x40>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad2      	subs	r2, r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3f7      	bcc.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	4909      	ldr	r1, [pc, #36]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	095b      	lsrs	r3, r3, #5
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	f002 021f 	and.w	r2, r2, #31
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	4909      	ldr	r1, [pc, #36]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	2201      	movs	r2, #1
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	401a      	ands	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f76:	2101      	movs	r1, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	1e59      	subs	r1, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff4e 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fba:	f7ff ff63 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8000fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	6978      	ldr	r0, [r7, #20]
 8000fc6:	f7ff ffb3 	bl	8000f30 <NVIC_EncodePriority>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff82 	bl	8000edc <__NVIC_SetPriority>
}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff56 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e03b      	b.n	8001086 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 fbee 	bl	8006804 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6852      	ldr	r2, [r2, #4]
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001050:	f022 0107 	bic.w	r1, r2, #7
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6892      	ldr	r2, [r2, #8]
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800106a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	68c9      	ldr	r1, [r1, #12]
 8001072:	430b      	orrs	r3, r1
 8001074:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af02      	add	r7, sp, #8
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_DMA2D_Start+0x1c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e018      	b.n	80010dc <HAL_DMA2D_Start+0x4e>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2202      	movs	r2, #2
 80010b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f987 	bl	80013d8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d056      	beq.n	80011ae <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001100:	f7ff fe6e 	bl	8000de0 <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001106:	e04b      	b.n	80011a0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001116:	2b00      	cmp	r3, #0
 8001118:	d023      	beq.n	8001162 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	f043 0202 	orr.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2221      	movs	r2, #33	; 0x21
 800114c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2204      	movs	r2, #4
 8001152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0a5      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d01a      	beq.n	80011a0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800116a:	f7ff fe39 	bl	8000de0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d802      	bhi.n	8001180 <HAL_DMA2D_PollForTransfer+0x9c>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10f      	bne.n	80011a0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001184:	f043 0220 	orr.w	r2, r3, #32
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2203      	movs	r2, #3
 8001190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e086      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ac      	beq.n	8001108 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d061      	beq.n	8001294 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fe06 	bl	8000de0 <HAL_GetTick>
 80011d4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80011d6:	e056      	b.n	8001286 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d02e      	beq.n	8001248 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f8:	f043 0204 	orr.w	r2, r3, #4
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	f043 0202 	orr.w	r2, r3, #2
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2229      	movs	r2, #41	; 0x29
 8001232:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2204      	movs	r2, #4
 8001238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e032      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124e:	d01a      	beq.n	8001286 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001250:	f7ff fdc6 	bl	8000de0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	1ad2      	subs	r2, r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d802      	bhi.n	8001266 <HAL_DMA2D_PollForTransfer+0x182>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	f043 0220 	orr.w	r2, r3, #32
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e013      	b.n	80012ae <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0a1      	beq.n	80011d8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2212      	movs	r2, #18
 800129a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_DMA2D_ConfigLayer+0x20>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e077      	b.n	80013c8 <HAL_DMA2D_ConfigLayer+0x110>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	3318      	adds	r3, #24
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	4313      	orrs	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_DMA2D_ConfigLayer+0x11c>)
 8001304:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d003      	beq.n	8001316 <HAL_DMA2D_ConfigLayer+0x5e>
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b09      	cmp	r3, #9
 8001314:	d107      	bne.n	8001326 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4313      	orrs	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e005      	b.n	8001332 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4313      	orrs	r3, r2
 8001330:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11f      	bne.n	8001378 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	43d2      	mvns	r2, r2
 8001346:	4011      	ands	r1, r2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	430a      	orrs	r2, r1
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d003      	beq.n	8001368 <HAL_DMA2D_ConfigLayer+0xb0>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d126      	bne.n	80013b6 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68d2      	ldr	r2, [r2, #12]
 8001370:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
 8001376:	e01e      	b.n	80013b6 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	69d1      	ldr	r1, [r2, #28]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	43d2      	mvns	r2, r2
 8001386:	4011      	ands	r1, r2
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	430a      	orrs	r2, r1
 800138c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b0a      	cmp	r3, #10
 800139e:	d003      	beq.n	80013a8 <HAL_DMA2D_ConfigLayer+0xf0>
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d106      	bne.n	80013b6 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68d2      	ldr	r2, [r2, #12]
 80013b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80013b4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	ff03000f 	.word	0xff03000f

080013d8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80013d8:	b480      	push	{r7}
 80013da:	b08b      	sub	sp, #44	; 0x2c
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013f0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	0410      	lsls	r0, r2, #16
 80013f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fa:	4302      	orrs	r2, r0
 80013fc:	430a      	orrs	r2, r1
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001410:	d174      	bne.n	80014fc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001418:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001420:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001428:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	431a      	orrs	r2, r3
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4313      	orrs	r3, r2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	e053      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4313      	orrs	r3, r2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e048      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d111      	bne.n	800148c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	0cdb      	lsrs	r3, r3, #19
 800146c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	0a9b      	lsrs	r3, r3, #10
 8001472:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	02db      	lsls	r3, r3, #11
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	e032      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d117      	bne.n	80014c4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	0fdb      	lsrs	r3, r3, #31
 8001498:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	0cdb      	lsrs	r3, r3, #19
 800149e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	0adb      	lsrs	r3, r3, #11
 80014a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	431a      	orrs	r2, r3
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	03db      	lsls	r3, r3, #15
 80014ba:	431a      	orrs	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4313      	orrs	r3, r2
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	e016      	b.n	80014f2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	0f1b      	lsrs	r3, r3, #28
 80014c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	0d1b      	lsrs	r3, r3, #20
 80014ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	0b1b      	lsrs	r3, r3, #12
 80014d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	011a      	lsls	r2, r3, #4
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	431a      	orrs	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80014fa:	e003      	b.n	8001504 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	372c      	adds	r7, #44	; 0x2c
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e177      	b.n	800181c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8166 	bne.w	8001816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x4a>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d00b      	beq.n	80015f6 <HAL_GPIO_Init+0xe6>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ea:	2b11      	cmp	r3, #17
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80c0 	beq.w	8001816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_GPIO_Init+0x320>)
 800169c:	4b64      	ldr	r3, [pc, #400]	; (8001830 <HAL_GPIO_Init+0x320>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_GPIO_Init+0x320>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_GPIO_Init+0x324>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_GPIO_Init+0x328>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d037      	beq.n	800174e <HAL_GPIO_Init+0x23e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a56      	ldr	r2, [pc, #344]	; (800183c <HAL_GPIO_Init+0x32c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d031      	beq.n	800174a <HAL_GPIO_Init+0x23a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a55      	ldr	r2, [pc, #340]	; (8001840 <HAL_GPIO_Init+0x330>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_GPIO_Init+0x236>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a54      	ldr	r2, [pc, #336]	; (8001844 <HAL_GPIO_Init+0x334>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x232>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a53      	ldr	r2, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x338>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x33c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x22a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x340>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x344>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x348>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_GPIO_Init+0x34c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x21a>
 8001726:	2309      	movs	r3, #9
 8001728:	e012      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172a:	230a      	movs	r3, #10
 800172c:	e010      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172e:	2308      	movs	r3, #8
 8001730:	e00e      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001732:	2307      	movs	r3, #7
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001736:	2306      	movs	r3, #6
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_GPIO_Init+0x324>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001792:	4a33      	ldr	r2, [pc, #204]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_GPIO_Init+0x350>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017bc:	4a28      	ldr	r2, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_GPIO_Init+0x350>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f ae84 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	3724      	adds	r7, #36	; 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40022000 	.word	0x40022000
 800185c:	40022400 	.word	0x40022400
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e0da      	b.n	8001a36 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	429a      	cmp	r2, r3
 8001898:	f040 80ca 	bne.w	8001a30 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800189c:	4a6b      	ldr	r2, [pc, #428]	; (8001a4c <HAL_GPIO_DeInit+0x1e8>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	4013      	ands	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_GPIO_DeInit+0x1ec>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d037      	beq.n	8001936 <HAL_GPIO_DeInit+0xd2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a62      	ldr	r2, [pc, #392]	; (8001a54 <HAL_GPIO_DeInit+0x1f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_GPIO_DeInit+0xce>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_GPIO_DeInit+0x1f4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_DeInit+0xca>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_GPIO_DeInit+0x1f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_DeInit+0xc6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_GPIO_DeInit+0x1fc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_DeInit+0xc2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <HAL_GPIO_DeInit+0x200>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_DeInit+0xbe>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_GPIO_DeInit+0x204>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_DeInit+0xba>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_GPIO_DeInit+0x208>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_DeInit+0xb6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_GPIO_DeInit+0x20c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_DeInit+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_GPIO_DeInit+0x210>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_DeInit+0xae>
 800190e:	2309      	movs	r3, #9
 8001910:	e012      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001912:	230a      	movs	r3, #10
 8001914:	e010      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001916:	2308      	movs	r3, #8
 8001918:	e00e      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800191a:	2307      	movs	r3, #7
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800191e:	2306      	movs	r3, #6
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_DeInit+0xd4>
 8001936:	2300      	movs	r3, #0
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	fa03 f202 	lsl.w	r2, r3, r2
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d132      	bne.n	80019b0 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800195a:	483c      	ldr	r0, [pc, #240]	; (8001a4c <HAL_GPIO_DeInit+0x1e8>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_GPIO_DeInit+0x1e8>)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	0892      	lsrs	r2, r2, #2
 8001966:	3202      	adds	r2, #2
 8001968:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	43d2      	mvns	r2, r2
 8001970:	400a      	ands	r2, r1
 8001972:	3302      	adds	r3, #2
 8001974:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001978:	493f      	ldr	r1, [pc, #252]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001986:	493c      	ldr	r1, [pc, #240]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 8001988:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	4013      	ands	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001994:	4938      	ldr	r1, [pc, #224]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019a2:	4935      	ldr	r1, [pc, #212]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_GPIO_DeInit+0x214>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2103      	movs	r1, #3
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08d9      	lsrs	r1, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3108      	adds	r1, #8
 80019d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	200f      	movs	r0, #15
 80019e0:	fa00 f303 	lsl.w	r3, r0, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2103      	movs	r1, #3
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2103      	movs	r1, #3
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	f67f af21 	bls.w	8001880 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40021c00 	.word	0x40021c00
 8001a70:	40022000 	.word	0x40022000
 8001a74:	40022400 	.word	0x40022400
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d104      	bne.n	8001ad2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	041a      	lsls	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e10f      	b.n	8001d16 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f005 fca4 	bl	8007458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b28:	f001 ff5e 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a7b      	ldr	r2, [pc, #492]	; (8001d20 <HAL_I2C_Init+0x23c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d807      	bhi.n	8001b48 <HAL_I2C_Init+0x64>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <HAL_I2C_Init+0x240>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf94      	ite	ls
 8001b40:	2301      	movls	r3, #1
 8001b42:	2300      	movhi	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e006      	b.n	8001b56 <HAL_I2C_Init+0x72>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_I2C_Init+0x244>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	bf94      	ite	ls
 8001b50:	2301      	movls	r3, #1
 8001b52:	2300      	movhi	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0db      	b.n	8001d16 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <HAL_I2C_Init+0x248>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0c9b      	lsrs	r3, r3, #18
 8001b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	6852      	ldr	r2, [r2, #4]
 8001b74:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4863      	ldr	r0, [pc, #396]	; (8001d20 <HAL_I2C_Init+0x23c>)
 8001b92:	4283      	cmp	r3, r0
 8001b94:	d802      	bhi.n	8001b9c <HAL_I2C_Init+0xb8>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	e009      	b.n	8001bb0 <HAL_I2C_Init+0xcc>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	4862      	ldr	r0, [pc, #392]	; (8001d30 <HAL_I2C_Init+0x24c>)
 8001ba8:	fba0 0303 	umull	r0, r3, r0, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	3301      	adds	r3, #1
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4955      	ldr	r1, [pc, #340]	; (8001d20 <HAL_I2C_Init+0x23c>)
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	d80d      	bhi.n	8001bec <HAL_I2C_Init+0x108>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e59      	subs	r1, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	bf38      	it	cc
 8001be8:	2304      	movcc	r3, #4
 8001bea:	e04f      	b.n	8001c8c <HAL_I2C_Init+0x1a8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_I2C_Init+0x134>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e5c      	subs	r4, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e012      	b.n	8001c3e <HAL_I2C_Init+0x15a>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1e5c      	subs	r4, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	0099      	lsls	r1, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Init+0x162>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e022      	b.n	8001c8c <HAL_I2C_Init+0x1a8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10e      	bne.n	8001c6c <HAL_I2C_Init+0x188>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e5c      	subs	r4, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	440b      	add	r3, r1
 8001c5c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6a:	e00f      	b.n	8001c8c <HAL_I2C_Init+0x1a8>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e5c      	subs	r4, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	0099      	lsls	r1, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	69d0      	ldr	r0, [r2, #28]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6a12      	ldr	r2, [r2, #32]
 8001ca6:	4302      	orrs	r2, r0
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	6908      	ldr	r0, [r1, #16]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	68c9      	ldr	r1, [r1, #12]
 8001cc6:	4301      	orrs	r1, r0
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6950      	ldr	r0, [r2, #20]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6992      	ldr	r2, [r2, #24]
 8001ce2:	4302      	orrs	r2, r0
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	000186a0 	.word	0x000186a0
 8001d24:	001e847f 	.word	0x001e847f
 8001d28:	003d08ff 	.word	0x003d08ff
 8001d2c:	431bde83 	.word	0x431bde83
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e021      	b.n	8001d8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2224      	movs	r2, #36	; 0x24
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f005 fbe4 	bl	800752c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	817b      	strh	r3, [r7, #10]
 8001da6:	460b      	mov	r3, r1
 8001da8:	813b      	strh	r3, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dae:	f7ff f817 	bl	8000de0 <HAL_GetTick>
 8001db2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	f040 80d9 	bne.w	8001f74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2319      	movs	r3, #25
 8001dc8:	2201      	movs	r2, #1
 8001dca:	496d      	ldr	r1, [pc, #436]	; (8001f80 <HAL_I2C_Mem_Write+0x1ec>)
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fc67 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e0cc      	b.n	8001f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Mem_Write+0x56>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0c5      	b.n	8001f76 <HAL_I2C_Mem_Write+0x1e2>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d007      	beq.n	8001e10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2221      	movs	r2, #33	; 0x21
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2240      	movs	r2, #64	; 0x40
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <HAL_I2C_Mem_Write+0x1f0>)
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e52:	88f8      	ldrh	r0, [r7, #6]
 8001e54:	893a      	ldrh	r2, [r7, #8]
 8001e56:	8979      	ldrh	r1, [r7, #10]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	4603      	mov	r3, r0
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fac4 	bl	80023f0 <I2C_RequestMemoryWrite>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d052      	beq.n	8001f14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e081      	b.n	8001f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fce8 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d107      	bne.n	8001e9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06b      	b.n	8001f76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11b      	bne.n	8001f14 <HAL_I2C_Mem_Write+0x180>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d017      	beq.n	8001f14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1aa      	bne.n	8001e72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fcd4 	bl	80028ce <I2C_WaitOnBTFFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d107      	bne.n	8001f44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e016      	b.n	8001f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	00100002 	.word	0x00100002
 8001f84:	ffff0000 	.word	0xffff0000

08001f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	817b      	strh	r3, [r7, #10]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	813b      	strh	r3, [r7, #8]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fa2:	f7fe ff1d 	bl	8000de0 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	f040 8208 	bne.w	80023c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2319      	movs	r3, #25
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	497b      	ldr	r1, [pc, #492]	; (80021ac <HAL_I2C_Mem_Read+0x224>)
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fb6d 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e1fb      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_I2C_Mem_Read+0x56>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e1f4      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d007      	beq.n	8002004 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2222      	movs	r2, #34	; 0x22
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a5b      	ldr	r2, [pc, #364]	; (80021b0 <HAL_I2C_Mem_Read+0x228>)
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002046:	88f8      	ldrh	r0, [r7, #6]
 8002048:	893a      	ldrh	r2, [r7, #8]
 800204a:	8979      	ldrh	r1, [r7, #10]
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	4603      	mov	r3, r0
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fa52 	bl	8002500 <I2C_RequestMemoryRead>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1b0      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	623b      	str	r3, [r7, #32]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e184      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	2b01      	cmp	r3, #1
 800209c:	d11b      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e164      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d11b      	bne.n	8002116 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	e144      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800212c:	e138      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	2b03      	cmp	r3, #3
 8002134:	f200 80f1 	bhi.w	800231a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	2b01      	cmp	r3, #1
 800213e:	d123      	bne.n	8002188 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fc03 	bl	8002950 <I2C_WaitOnRXNEFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e139      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	6912      	ldr	r2, [r2, #16]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002186:	e10b      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	2b02      	cmp	r3, #2
 800218e:	d14e      	bne.n	800222e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	2200      	movs	r2, #0
 8002198:	4906      	ldr	r1, [pc, #24]	; (80021b4 <HAL_I2C_Mem_Read+0x22c>)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa80 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e10e      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
 80021aa:	bf00      	nop
 80021ac:	00100002 	.word	0x00100002
 80021b0:	ffff0000 	.word	0xffff0000
 80021b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	6912      	ldr	r2, [r2, #16]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	6912      	ldr	r2, [r2, #16]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800222c:	e0b8      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2200      	movs	r2, #0
 8002236:	4966      	ldr	r1, [pc, #408]	; (80023d0 <HAL_I2C_Mem_Read+0x448>)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fa31 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0bf      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	6912      	ldr	r2, [r2, #16]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	2200      	movs	r2, #0
 8002292:	494f      	ldr	r1, [pc, #316]	; (80023d0 <HAL_I2C_Mem_Read+0x448>)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fa03 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e091      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	6912      	ldr	r2, [r2, #16]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	6912      	ldr	r2, [r2, #16]
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002318:	e042      	b.n	80023a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fb16 	bl	8002950 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e04c      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6912      	ldr	r2, [r2, #16]
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d118      	bne.n	80023a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	6912      	ldr	r2, [r2, #16]
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f aec2 	bne.w	800212e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
  }
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	00010004 	.word	0x00010004

080023d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e2:	b2db      	uxtb	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	817b      	strh	r3, [r7, #10]
 8002402:	460b      	mov	r3, r1
 8002404:	813b      	strh	r3, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2200      	movs	r2, #0
 8002422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f93a 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e05e      	b.n	80024f4 <I2C_RequestMemoryWrite+0x104>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	897a      	ldrh	r2, [r7, #10]
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	6a3a      	ldr	r2, [r7, #32]
 8002448:	492c      	ldr	r1, [pc, #176]	; (80024fc <I2C_RequestMemoryWrite+0x10c>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f97f 	bl	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <I2C_RequestMemoryWrite+0x6a>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e04c      	b.n	80024f4 <I2C_RequestMemoryWrite+0x104>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f9e9 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <I2C_RequestMemoryWrite+0xac>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b04      	cmp	r3, #4
 8002486:	d107      	bne.n	8002498 <I2C_RequestMemoryWrite+0xa8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e02b      	b.n	80024f4 <I2C_RequestMemoryWrite+0x104>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <I2C_RequestMemoryWrite+0xbe>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	893a      	ldrh	r2, [r7, #8]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	e021      	b.n	80024f2 <I2C_RequestMemoryWrite+0x102>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	893a      	ldrh	r2, [r7, #8]
 80024b4:	0a12      	lsrs	r2, r2, #8
 80024b6:	b292      	uxth	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	6a39      	ldr	r1, [r7, #32]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f9c3 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00d      	beq.n	80024e8 <I2C_RequestMemoryWrite+0xf8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <I2C_RequestMemoryWrite+0xf4>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e005      	b.n	80024f4 <I2C_RequestMemoryWrite+0x104>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	00010002 	.word	0x00010002

08002500 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	4608      	mov	r0, r1
 800250a:	4611      	mov	r1, r2
 800250c:	461a      	mov	r2, r3
 800250e:	4603      	mov	r3, r0
 8002510:	817b      	strh	r3, [r7, #10]
 8002512:	460b      	mov	r3, r1
 8002514:	813b      	strh	r3, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002528:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2200      	movs	r2, #0
 8002542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f8aa 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e09d      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	897a      	ldrh	r2, [r7, #10]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	6a3a      	ldr	r2, [r7, #32]
 8002568:	494c      	ldr	r1, [pc, #304]	; (800269c <I2C_RequestMemoryRead+0x19c>)
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8ef 	bl	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_RequestMemoryRead+0x7a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e08b      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	6a39      	ldr	r1, [r7, #32]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f959 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <I2C_RequestMemoryRead+0xbc>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <I2C_RequestMemoryRead+0xb8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e06a      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <I2C_RequestMemoryRead+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	893a      	ldrh	r2, [r7, #8]
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	611a      	str	r2, [r3, #16]
 80025cc:	e021      	b.n	8002612 <I2C_RequestMemoryRead+0x112>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	893a      	ldrh	r2, [r7, #8]
 80025d4:	0a12      	lsrs	r2, r2, #8
 80025d6:	b292      	uxth	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	6a39      	ldr	r1, [r7, #32]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f933 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00d      	beq.n	8002608 <I2C_RequestMemoryRead+0x108>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d107      	bne.n	8002604 <I2C_RequestMemoryRead+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e044      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	893a      	ldrh	r2, [r7, #8]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f918 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <I2C_RequestMemoryRead+0x13e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	2b04      	cmp	r3, #4
 8002628:	d107      	bne.n	800263a <I2C_RequestMemoryRead+0x13a>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e029      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2200      	movs	r2, #0
 8002656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f820 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_RequestMemoryRead+0x16a>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e013      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	897a      	ldrh	r2, [r7, #10]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	4907      	ldr	r1, [pc, #28]	; (800269c <I2C_RequestMemoryRead+0x19c>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f864 	bl	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <I2C_RequestMemoryRead+0x190>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <I2C_RequestMemoryRead+0x192>
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	00010002 	.word	0x00010002

080026a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	e025      	b.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d021      	beq.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7fe fb91 	bl	8000de0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d802      	bhi.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e023      	b.n	8002746 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d10d      	bne.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	e00c      	b.n	800273e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	429a      	cmp	r2, r3
 8002742:	d0b6      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800275c:	e051      	b.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276c:	d123      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002786:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e046      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d021      	beq.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7fe fb0f 	bl	8000de0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	1ad2      	subs	r2, r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d802      	bhi.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d116      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e020      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10c      	bne.n	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4013      	ands	r3, r2
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e00b      	b.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d18d      	bne.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002858:	e02d      	b.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8ce 	bl	80029fc <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02d      	b.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d021      	beq.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7fe fab5 	bl	8000de0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d802      	bhi.n	8002888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d116      	bne.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e007      	b.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d1ca      	bne.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028da:	e02d      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f88d 	bl	80029fc <I2C_IsAcknowledgeFailed>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e02d      	b.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d021      	beq.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe fa74 	bl	8000de0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	1ad2      	subs	r2, r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	d802      	bhi.n	800290a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e007      	b.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d1ca      	bne.n	80028dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800295c:	e042      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b10      	cmp	r3, #16
 800296a:	d119      	bne.n	80029a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0210 	mvn.w	r2, #16
 8002974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e029      	b.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	f7fe fa1e 	bl	8000de0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	1ad2      	subs	r2, r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d802      	bhi.n	80029b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d1b5      	bne.n	800295e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a12:	d11b      	bne.n	8002a4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d129      	bne.n	8002ac4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d12a      	bne.n	8002b42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2224      	movs	r2, #36	; 0x24
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	f023 030f 	bic.w	r3, r3, #15
 8002b12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	89fb      	ldrh	r3, [r7, #14]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	89fa      	ldrh	r2, [r7, #14]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0bf      	b.n	8002ce2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f005 fc5a 	bl	8008430 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	6992      	ldr	r2, [r2, #24]
 8002b8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002b92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	6991      	ldr	r1, [r2, #24]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6850      	ldr	r0, [r2, #4]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6892      	ldr	r2, [r2, #8]
 8002ba6:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bac:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6912      	ldr	r2, [r2, #16]
 8002bb2:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_LTDC_Init+0x19c>)
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	6891      	ldr	r1, [r2, #8]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6990      	ldr	r0, [r2, #24]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4302      	orrs	r2, r0
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68d9      	ldr	r1, [r3, #12]
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <HAL_LTDC_Init+0x19c>)
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	68d1      	ldr	r1, [r2, #12]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6a10      	ldr	r0, [r2, #32]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4302      	orrs	r2, r0
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6919      	ldr	r1, [r3, #16]
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_LTDC_Init+0x19c>)
 8002c20:	400b      	ands	r3, r1
 8002c22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	6911      	ldr	r1, [r2, #16]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4302      	orrs	r2, r0
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6959      	ldr	r1, [r3, #20]
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_LTDC_Init+0x19c>)
 8002c4e:	400b      	ands	r3, r1
 8002c50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	6951      	ldr	r1, [r2, #20]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4302      	orrs	r2, r0
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4302      	orrs	r2, r0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002caa:	4302      	orrs	r2, r0
 8002cac:	430a      	orrs	r2, r1
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cba:	f042 0206 	orr.w	r2, r2, #6
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	6992      	ldr	r2, [r2, #24]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	f000f800 	.word	0xf000f800

08002cf0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cf0:	b5b0      	push	{r4, r5, r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_LTDC_ConfigLayer+0x1a>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e02c      	b.n	8002d64 <HAL_LTDC_ConfigLayer+0x74>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2134      	movs	r1, #52	; 0x34
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	461d      	mov	r5, r3
 8002d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f83b 	bl	8002dc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bdb0      	pop	{r4, r5, r7, pc}

08002d6c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_LTDC_EnableDither+0x16>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e016      	b.n	8002db0 <HAL_LTDC_EnableDither+0x44>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_LTDC_EnableDither+0x50>)
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_LTDC_EnableDither+0x50>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40016800 	.word	0x40016800

08002dc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	4413      	add	r3, r2
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	01db      	lsls	r3, r3, #7
 8002dec:	4413      	add	r3, r2
 8002dee:	3384      	adds	r3, #132	; 0x84
 8002df0:	461a      	mov	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	01db      	lsls	r3, r3, #7
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3384      	adds	r3, #132	; 0x84
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e06:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	01db      	lsls	r3, r3, #7
 8002e12:	4413      	add	r3, r2
 8002e14:	3384      	adds	r3, #132	; 0x84
 8002e16:	4619      	mov	r1, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	4413      	add	r3, r2
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e40:	4413      	add	r3, r2
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	01db      	lsls	r3, r3, #7
 8002e50:	4413      	add	r3, r2
 8002e52:	3384      	adds	r3, #132	; 0x84
 8002e54:	461a      	mov	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	01db      	lsls	r3, r3, #7
 8002e60:	440b      	add	r3, r1
 8002e62:	3384      	adds	r3, #132	; 0x84
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	01db      	lsls	r3, r3, #7
 8002e76:	4413      	add	r3, r2
 8002e78:	3384      	adds	r3, #132	; 0x84
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8a:	4413      	add	r3, r2
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	01db      	lsls	r3, r3, #7
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3384      	adds	r3, #132	; 0x84
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	01db      	lsls	r3, r3, #7
 8002eae:	440b      	add	r3, r1
 8002eb0:	3384      	adds	r3, #132	; 0x84
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f023 0307 	bic.w	r3, r3, #7
 8002eb8:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	01db      	lsls	r3, r3, #7
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3384      	adds	r3, #132	; 0x84
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	01db      	lsls	r3, r3, #7
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3384      	adds	r3, #132	; 0x84
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	4413      	add	r3, r2
 8002f08:	3384      	adds	r3, #132	; 0x84
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	01db      	lsls	r3, r3, #7
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3384      	adds	r3, #132	; 0x84
 8002f1e:	4619      	mov	r1, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f26:	461a      	mov	r2, r3
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	01db      	lsls	r3, r3, #7
 8002f40:	4413      	add	r3, r2
 8002f42:	3384      	adds	r3, #132	; 0x84
 8002f44:	461a      	mov	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	01db      	lsls	r3, r3, #7
 8002f50:	440b      	add	r3, r1
 8002f52:	3384      	adds	r3, #132	; 0x84
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	4413      	add	r3, r2
 8002f68:	3384      	adds	r3, #132	; 0x84
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	01db      	lsls	r3, r3, #7
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3384      	adds	r3, #132	; 0x84
 8002f80:	461a      	mov	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3384      	adds	r3, #132	; 0x84
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f96:	f023 0307 	bic.w	r3, r3, #7
 8002f9a:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3384      	adds	r3, #132	; 0x84
 8002faa:	4619      	mov	r1, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	01db      	lsls	r3, r3, #7
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3384      	adds	r3, #132	; 0x84
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	01db      	lsls	r3, r3, #7
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3384      	adds	r3, #132	; 0x84
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	01db      	lsls	r3, r3, #7
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3384      	adds	r3, #132	; 0x84
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e01b      	b.n	8003038 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8003008:	2303      	movs	r3, #3
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e014      	b.n	8003038 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b04      	cmp	r3, #4
 8003014:	d00b      	beq.n	800302e <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800301a:	2b02      	cmp	r3, #2
 800301c:	d007      	beq.n	800302e <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003022:	2b03      	cmp	r3, #3
 8003024:	d003      	beq.n	800302e <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800302a:	2b07      	cmp	r3, #7
 800302c:	d102      	bne.n	8003034 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 800302e:	2302      	movs	r3, #2
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e001      	b.n	8003038 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8003034:	2301      	movs	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	01db      	lsls	r3, r3, #7
 8003042:	4413      	add	r3, r2
 8003044:	3384      	adds	r3, #132	; 0x84
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	440b      	add	r3, r1
 8003054:	3384      	adds	r3, #132	; 0x84
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800305c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	01db      	lsls	r3, r3, #7
 8003068:	4413      	add	r3, r2
 800306a:	3384      	adds	r3, #132	; 0x84
 800306c:	4618      	mov	r0, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	041a      	lsls	r2, r3, #16
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1acb      	subs	r3, r1, r3
 8003084:	69f9      	ldr	r1, [r7, #28]
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	3303      	adds	r3, #3
 800308c:	4313      	orrs	r3, r2
 800308e:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	01db      	lsls	r3, r3, #7
 800309a:	4413      	add	r3, r2
 800309c:	3384      	adds	r3, #132	; 0x84
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	01db      	lsls	r3, r3, #7
 80030aa:	440b      	add	r3, r1
 80030ac:	3384      	adds	r3, #132	; 0x84
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030b4:	f023 0307 	bic.w	r3, r3, #7
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	01db      	lsls	r3, r3, #7
 80030c4:	4413      	add	r3, r2
 80030c6:	3384      	adds	r3, #132	; 0x84
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	01db      	lsls	r3, r3, #7
 80030da:	4413      	add	r3, r2
 80030dc:	3384      	adds	r3, #132	; 0x84
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	01db      	lsls	r3, r3, #7
 80030ea:	440b      	add	r3, r1
 80030ec:	3384      	adds	r3, #132	; 0x84
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]
}
 80030f6:	bf00      	nop
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_PWR_PVD_IRQHandler+0x20>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003114:	f000 f808 	bl	8003128 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003118:	4b02      	ldr	r3, [pc, #8]	; (8003124 <HAL_PWR_PVD_IRQHandler+0x20>)
 800311a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800311e:	615a      	str	r2, [r3, #20]
  }
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_PWREx_EnableOverDrive+0x94>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003164:	f7fd fe3c 	bl	8000de0 <HAL_GetTick>
 8003168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800316a:	e009      	b.n	8003180 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800316c:	f7fd fe38 	bl	8000de0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317a:	d901      	bls.n	8003180 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e01f      	b.n	80031c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d1ee      	bne.n	800316c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003194:	f7fd fe24 	bl	8000de0 <HAL_GetTick>
 8003198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800319a:	e009      	b.n	80031b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800319c:	f7fd fe20 	bl	8000de0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031aa:	d901      	bls.n	80031b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e007      	b.n	80031c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031bc:	d1ee      	bne.n	800319c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	420e0040 	.word	0x420e0040
 80031d0:	40007000 	.word	0x40007000
 80031d4:	420e0044 	.word	0x420e0044

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e22d      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d075      	beq.n	80032e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f6:	4ba3      	ldr	r3, [pc, #652]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d00c      	beq.n	800321c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4ba0      	ldr	r3, [pc, #640]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d112      	bne.n	8003234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320e:	4b9d      	ldr	r3, [pc, #628]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321a:	d10b      	bne.n	8003234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	4b99      	ldr	r3, [pc, #612]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05b      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d157      	bne.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e208      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d106      	bne.n	800324c <HAL_RCC_OscConfig+0x74>
 800323e:	4a91      	ldr	r2, [pc, #580]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	4b90      	ldr	r3, [pc, #576]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xb0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x98>
 8003256:	4a8b      	ldr	r2, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4a88      	ldr	r2, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	4b87      	ldr	r3, [pc, #540]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xb0>
 8003270:	4a84      	ldr	r2, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	4b84      	ldr	r3, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4a81      	ldr	r2, [pc, #516]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800327e:	4b81      	ldr	r3, [pc, #516]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fd fda6 	bl	8000de0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003298:	f7fd fda2 	bl	8000de0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1cd      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xc0>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd fd92 	bl	8000de0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fd fd8e 	bl	8000de0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e1b9      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d063      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003302:	2b08      	cmp	r3, #8
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x152>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e18d      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4956      	ldr	r1, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e03a      	b.n	80033b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b4f      	ldr	r3, [pc, #316]	; (8003488 <HAL_RCC_OscConfig+0x2b0>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fd fd47 	bl	8000de0 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003356:	f7fd fd43 	bl	8000de0 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e16e      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4943      	ldr	r1, [pc, #268]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <HAL_RCC_OscConfig+0x2b0>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fd26 	bl	8000de0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003398:	f7fd fd22 	bl	8000de0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e14d      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d030      	beq.n	8003424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_RCC_OscConfig+0x2b4>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fd fd06 	bl	8000de0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fd fd02 	bl	8000de0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e12d      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x200>
 80033f6:	e015      	b.n	8003424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCC_OscConfig+0x2b4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fd fcef 	bl	8000de0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003406:	f7fd fceb 	bl	8000de0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e116      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a0 	beq.w	8003572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_OscConfig+0x2b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d121      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <HAL_RCC_OscConfig+0x2b8>)
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCC_OscConfig+0x2b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fd fcb1 	bl	8000de0 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e011      	b.n	80034a6 <HAL_RCC_OscConfig+0x2ce>
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	42470000 	.word	0x42470000
 800348c:	42470e80 	.word	0x42470e80
 8003490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003494:	f7fd fca4 	bl	8000de0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0cf      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_RCC_OscConfig+0x478>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2f0>
 80034ba:	4a66      	ldr	r2, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034bc:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	e01c      	b.n	8003502 <HAL_RCC_OscConfig+0x32a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d10c      	bne.n	80034ea <HAL_RCC_OscConfig+0x312>
 80034d0:	4a60      	ldr	r2, [pc, #384]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034d2:	4b60      	ldr	r3, [pc, #384]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	e00b      	b.n	8003502 <HAL_RCC_OscConfig+0x32a>
 80034ea:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034ec:	4b59      	ldr	r3, [pc, #356]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034f8:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f023 0304 	bic.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d015      	beq.n	8003536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fc69 	bl	8000de0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fc65 	bl	8000de0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e08e      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ee      	beq.n	8003512 <HAL_RCC_OscConfig+0x33a>
 8003534:	e014      	b.n	8003560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fd fc53 	bl	8000de0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fc4f 	bl	8000de0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e078      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ee      	bne.n	800353e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 8003568:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d064      	beq.n	8003644 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b08      	cmp	r3, #8
 8003584:	d05c      	beq.n	8003640 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d141      	bne.n	8003612 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_RCC_OscConfig+0x480>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fc24 	bl	8000de0 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359c:	f7fd fc20 	bl	8000de0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e04b      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ba:	4926      	ldr	r1, [pc, #152]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	019b      	lsls	r3, r3, #6
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	3b01      	subs	r3, #1
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	061b      	lsls	r3, r3, #24
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <HAL_RCC_OscConfig+0x480>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fd fbf9 	bl	8000de0 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd fbf5 	bl	8000de0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e020      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x41a>
 8003610:	e018      	b.n	8003644 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_OscConfig+0x480>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fd fbe2 	bl	8000de0 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fbde 	bl	8000de0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e009      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x47c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x448>
 800363e:	e001      	b.n	8003644 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40007000 	.word	0x40007000
 8003654:	40023800 	.word	0x40023800
 8003658:	42470060 	.word	0x42470060

0800365c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0ca      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d20c      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b64      	ldr	r3, [pc, #400]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b62      	ldr	r3, [pc, #392]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0b6      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	4b58      	ldr	r3, [pc, #352]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c8:	4a52      	ldr	r2, [pc, #328]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	4b52      	ldr	r3, [pc, #328]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	494f      	ldr	r1, [pc, #316]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d044      	beq.n	800377c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b46      	ldr	r3, [pc, #280]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d119      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e07d      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d003      	beq.n	800371a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003716:	2b03      	cmp	r3, #3
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371a:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e06d      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372a:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e065      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373a:	4936      	ldr	r1, [pc, #216]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	4b35      	ldr	r3, [pc, #212]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 0203 	bic.w	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800374c:	f7fd fb48 	bl	8000de0 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	e00a      	b.n	800376a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fd fb44 	bl	8000de0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e04d      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 020c 	and.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	429a      	cmp	r2, r3
 800377a:	d1eb      	bne.n	8003754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d90c      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e030      	b.n	8003806 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4918      	ldr	r1, [pc, #96]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ce:	4911      	ldr	r1, [pc, #68]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	4b10      	ldr	r3, [pc, #64]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037e2:	f000 f81d 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	fa21 f303 	lsr.w	r3, r1, r3
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80037fe:	2000      	movs	r0, #0
 8003800:	f006 fc3a 	bl	800a078 <HAL_InitTick>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00
 8003814:	40023800 	.word	0x40023800
 8003818:	0800d14c 	.word	0x0800d14c
 800381c:	20000098 	.word	0x20000098

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b08f      	sub	sp, #60	; 0x3c
 8003826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382c:	2300      	movs	r3, #0
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
 8003830:	2300      	movs	r3, #0
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003838:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b04      	cmp	r3, #4
 8003842:	d007      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x34>
 8003844:	2b08      	cmp	r3, #8
 8003846:	d008      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x3a>
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 80b2 	bne.w	80039b2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800384e:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8003852:	e0b1      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003854:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003858:	e0ae      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385a:	4b5a      	ldr	r3, [pc, #360]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003864:	4b57      	ldr	r3, [pc, #348]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d04e      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003870:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	ea01 0103 	and.w	r1, r1, r3
 8003886:	ea02 0204 	and.w	r2, r2, r4
 800388a:	460b      	mov	r3, r1
 800388c:	4614      	mov	r4, r2
 800388e:	0160      	lsls	r0, r4, #5
 8003890:	6278      	str	r0, [r7, #36]	; 0x24
 8003892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003894:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003898:	6278      	str	r0, [r7, #36]	; 0x24
 800389a:	015b      	lsls	r3, r3, #5
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80038a2:	1a5b      	subs	r3, r3, r1
 80038a4:	eb64 0402 	sbc.w	r4, r4, r2
 80038a8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80038ac:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80038b0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80038b4:	ebb8 0803 	subs.w	r8, r8, r3
 80038b8:	eb69 0904 	sbc.w	r9, r9, r4
 80038bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80038d4:	eb18 0801 	adds.w	r8, r8, r1
 80038d8:	eb49 0902 	adc.w	r9, r9, r2
 80038dc:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80038f4:	4640      	mov	r0, r8
 80038f6:	4649      	mov	r1, r9
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	f04f 0400 	mov.w	r4, #0
 80038fe:	461a      	mov	r2, r3
 8003900:	4623      	mov	r3, r4
 8003902:	f7fd f8af 	bl	8000a64 <__aeabi_uldivmod>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
 800390c:	e043      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	f04f 0400 	mov.w	r4, #0
 8003918:	f240 11ff 	movw	r1, #511	; 0x1ff
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	ea01 0103 	and.w	r1, r1, r3
 8003924:	ea02 0204 	and.w	r2, r2, r4
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	0160      	lsls	r0, r4, #5
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	015b      	lsls	r3, r3, #5
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003940:	1a5b      	subs	r3, r3, r1
 8003942:	eb64 0402 	sbc.w	r4, r4, r2
 8003946:	01a6      	lsls	r6, r4, #6
 8003948:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800394c:	019d      	lsls	r5, r3, #6
 800394e:	1aed      	subs	r5, r5, r3
 8003950:	eb66 0604 	sbc.w	r6, r6, r4
 8003954:	00f3      	lsls	r3, r6, #3
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	00eb      	lsls	r3, r5, #3
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003968:	186d      	adds	r5, r5, r1
 800396a:	eb46 0602 	adc.w	r6, r6, r2
 800396e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003972:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8003976:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800397a:	4655      	mov	r5, sl
 800397c:	465e      	mov	r6, fp
 800397e:	4628      	mov	r0, r5
 8003980:	4631      	mov	r1, r6
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	f04f 0400 	mov.w	r4, #0
 8003988:	461a      	mov	r2, r3
 800398a:	4623      	mov	r3, r4
 800398c:	f7fd f86a 	bl	8000a64 <__aeabi_uldivmod>
 8003990:	4603      	mov	r3, r0
 8003992:	460c      	mov	r4, r1
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	3301      	adds	r3, #1
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80039a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039b0:	e002      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	373c      	adds	r7, #60	; 0x3c
 80039be:	46bd      	mov	sp, r7
 80039c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	007a1200 	.word	0x007a1200

080039d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000098 	.word	0x20000098

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4601      	mov	r1, r0
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a9b      	lsrs	r3, r3, #10
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4a03      	ldr	r2, [pc, #12]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fe:	5cd3      	ldrb	r3, [r2, r3]
 8003a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	0800d15c 	.word	0x0800d15c

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a14:	f7ff ffdc 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0b5b      	lsrs	r3, r3, #13
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4a03      	ldr	r2, [pc, #12]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	0800d15c 	.word	0x0800d15c

08003a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	220f      	movs	r2, #15
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0203 	and.w	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	08db      	lsrs	r3, r3, #3
 8003a72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_RCC_GetClockConfig+0x60>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 020f 	and.w	r2, r3, #15
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40023c00 	.word	0x40023c00

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d061      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ac4:	4ba3      	ldr	r3, [pc, #652]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aca:	f7fd f989 	bl	8000de0 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ad2:	f7fd f985 	bl	8000de0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e177      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ae4:	4b9c      	ldr	r3, [pc, #624]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003afc:	4996      	ldr	r1, [pc, #600]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	019a      	lsls	r2, r3, #6
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b1c:	4b8e      	ldr	r3, [pc, #568]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b22:	0f1b      	lsrs	r3, r3, #28
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003b2a:	498b      	ldr	r1, [pc, #556]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	019a      	lsls	r2, r3, #6
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	071b      	lsls	r3, r3, #28
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b44:	4984      	ldr	r1, [pc, #528]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b46:	4b84      	ldr	r3, [pc, #528]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4c:	f023 021f 	bic.w	r2, r3, #31
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b5c:	4b7d      	ldr	r3, [pc, #500]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b62:	f7fd f93d 	bl	8000de0 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b6a:	f7fd f939 	bl	8000de0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e12b      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7c:	4b76      	ldr	r3, [pc, #472]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d079      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba0:	4b6e      	ldr	r3, [pc, #440]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba6:	f7fd f91b 	bl	8000de0 <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bae:	f7fd f917 	bl	8000de0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e109      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bc0:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bcc:	d0ef      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bda:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	0f1b      	lsrs	r3, r3, #28
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003be8:	495b      	ldr	r1, [pc, #364]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	019a      	lsls	r2, r3, #6
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	071b      	lsls	r3, r3, #28
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c02:	4955      	ldr	r1, [pc, #340]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c04:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	0e1b      	lsrs	r3, r3, #24
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c36:	4948      	ldr	r1, [pc, #288]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	019a      	lsls	r2, r3, #6
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c50:	4941      	ldr	r1, [pc, #260]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c52:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd f8b8 	bl	8000de0 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c74:	f7fd f8b4 	bl	8000de0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0a6      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 808d 	beq.w	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cbe:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cca:	f7fd f889 	bl	8000de0 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fd f885 	bl	8000de0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e077      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d039      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d032      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d11e      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd f853 	bl	8000de0 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	e014      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fd f84f 	bl	8000de0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d90b      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e03f      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003d54:	42470068 	.word	0x42470068
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	42470070 	.word	0x42470070
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0e4      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d80:	d10d      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003d82:	4916      	ldr	r1, [pc, #88]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]
 8003d9c:	e005      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003d9e:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003da8:	6093      	str	r3, [r2, #8]
 8003daa:	490c      	ldr	r1, [pc, #48]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	4313      	orrs	r3, r2
 8003dba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dd0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	424711e0 	.word	0x424711e0

08003de4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e025      	b.n	8003e44 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f002 fded 	bl	80069ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f001 fa1f 	bl	8005268 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	f001 fa8a 	bl	800534e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d101      	bne.n	8003e68 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e018      	b.n	8003e9a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fae7 	bl	800544c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d104      	bne.n	8003e90 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003e8e:	e003      	b.n	8003e98 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d101      	bne.n	8003ebc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e00e      	b.n	8003eda <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 fafa 	bl	80054c4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e055      	b.n	8003fa0 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f004 fcf6 	bl	8008900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6851      	ldr	r1, [r2, #4]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6892      	ldr	r2, [r2, #8]
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6912      	ldr	r2, [r2, #16]
 8003f44:	4311      	orrs	r1, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6952      	ldr	r2, [r2, #20]
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6992      	ldr	r2, [r2, #24]
 8003f50:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003f54:	4311      	orrs	r1, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	69d2      	ldr	r2, [r2, #28]
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6a12      	ldr	r2, [r2, #32]
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6992      	ldr	r2, [r2, #24]
 8003f72:	0c12      	lsrs	r2, r2, #16
 8003f74:	f002 0104 	and.w	r1, r2, #4
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	69d2      	ldr	r2, [r2, #28]
 8003f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01a      	b.n	8003ff0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f004 fcdc 	bl	8008990 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_SPI_Transmit+0x22>
 8004016:	2302      	movs	r3, #2
 8004018:	e11c      	b.n	8004254 <HAL_SPI_Transmit+0x25c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004022:	f7fc fedd 	bl	8000de0 <HAL_GetTick>
 8004026:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d002      	beq.n	800403e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004038:	2302      	movs	r3, #2
 800403a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800403c:	e101      	b.n	8004242 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_Transmit+0x52>
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800404e:	e0f8      	b.n	8004242 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2203      	movs	r2, #3
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004096:	d107      	bne.n	80040a8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d007      	beq.n	80040c6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ce:	d14b      	bne.n	8004168 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Transmit+0xe6>
 80040d8:	8afb      	ldrh	r3, [r7, #22]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d13e      	bne.n	800415c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004102:	e02b      	b.n	800415c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d112      	bne.n	8004138 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	86da      	strh	r2, [r3, #54]	; 0x36
 8004136:	e011      	b.n	800415c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004138:	f7fc fe52 	bl	8000de0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	1ad2      	subs	r2, r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d303      	bcc.n	8004150 <HAL_SPI_Transmit+0x158>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Transmit+0x15e>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	77fb      	strb	r3, [r7, #31]
          goto error;
 800415a:	e072      	b.n	8004242 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ce      	bne.n	8004104 <HAL_SPI_Transmit+0x10c>
 8004166:	e04c      	b.n	8004202 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_SPI_Transmit+0x17e>
 8004170:	8afb      	ldrh	r3, [r7, #22]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d140      	bne.n	80041f8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800419c:	e02c      	b.n	80041f8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d113      	bne.n	80041d4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80041d2:	e011      	b.n	80041f8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d4:	f7fc fe04 	bl	8000de0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad2      	subs	r2, r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d303      	bcc.n	80041ec <HAL_SPI_Transmit+0x1f4>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d102      	bne.n	80041f2 <HAL_SPI_Transmit+0x1fa>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041f6:	e024      	b.n	8004242 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1cd      	bne.n	800419e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fb7b 	bl	8004902 <SPI_EndRxTxTransaction>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004252:	7ffb      	ldrb	r3, [r7, #31]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004278:	d112      	bne.n	80042a0 <HAL_SPI_Receive+0x44>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2204      	movs	r2, #4
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8e6 	bl	8004468 <HAL_SPI_TransmitReceive>
 800429c:	4603      	mov	r3, r0
 800429e:	e0df      	b.n	8004460 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_Receive+0x52>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0d8      	b.n	8004460 <HAL_SPI_Receive+0x204>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b6:	f7fc fd93 	bl	8000de0 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d002      	beq.n	80042ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042cc:	e0bf      	b.n	800444e <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_Receive+0x7e>
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042de:	e0b6      	b.n	800444e <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2204      	movs	r2, #4
 80042e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d107      	bne.n	8004338 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d007      	beq.n	8004356 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d161      	bne.n	8004422 <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800435e:	e02d      	b.n	80043bc <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d114      	bne.n	8004398 <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	320c      	adds	r2, #12
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004396:	e011      	b.n	80043bc <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004398:	f7fc fd22 	bl	8000de0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d303      	bcc.n	80043b0 <HAL_SPI_Receive+0x154>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_Receive+0x15a>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043ba:	e048      	b.n	800444e <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1cc      	bne.n	8004360 <HAL_SPI_Receive+0x104>
 80043c6:	e031      	b.n	800442c <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d113      	bne.n	80043fe <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	68d2      	ldr	r2, [r2, #12]
 80043e0:	b292      	uxth	r2, r2
 80043e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043fc:	e011      	b.n	8004422 <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fe:	f7fc fcef 	bl	8000de0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad2      	subs	r2, r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d303      	bcc.n	8004416 <HAL_SPI_Receive+0x1ba>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_Receive+0x1c0>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004420:	e015      	b.n	800444e <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1cd      	bne.n	80043c8 <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa31 	bl	8004898 <SPI_EndRxTransaction>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004476:	2301      	movs	r3, #1
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_SPI_TransmitReceive+0x26>
 800448a:	2302      	movs	r3, #2
 800448c:	e188      	b.n	80047a0 <HAL_SPI_TransmitReceive+0x338>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004496:	f7fc fca3 	bl	8000de0 <HAL_GetTick>
 800449a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044ac:	887b      	ldrh	r3, [r7, #2]
 80044ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d00f      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x70>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044be:	d107      	bne.n	80044d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <HAL_SPI_TransmitReceive+0x68>
 80044c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d003      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044d6:	e159      	b.n	800478c <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_SPI_TransmitReceive+0x82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_TransmitReceive+0x82>
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044f0:	e14c      	b.n	800478c <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d003      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2205      	movs	r2, #5
 8004502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	887a      	ldrh	r2, [r7, #2]
 8004516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	887a      	ldrh	r2, [r7, #2]
 8004528:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	887a      	ldrh	r2, [r7, #2]
 800452e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d007      	beq.n	800455a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004562:	d178      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x10a>
 800456c:	8b7b      	ldrh	r3, [r7, #26]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d166      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800457a:	8812      	ldrh	r2, [r2, #0]
 800457c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004596:	e053      	b.n	8004640 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d11b      	bne.n	80045de <HAL_SPI_TransmitReceive+0x176>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d016      	beq.n	80045de <HAL_SPI_TransmitReceive+0x176>
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d113      	bne.n	80045de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d119      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x1b8>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d014      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	68d2      	ldr	r2, [r2, #12]
 8004600:	b292      	uxth	r2, r2
 8004602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800461c:	2301      	movs	r3, #1
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004620:	f7fc fbde 	bl	8000de0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	1ad2      	subs	r2, r2, r3
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	429a      	cmp	r2, r3
 800462e:	d307      	bcc.n	8004640 <HAL_SPI_TransmitReceive+0x1d8>
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d003      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800463e:	e0a5      	b.n	800478c <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1a6      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x130>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1a1      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x130>
 8004654:	e07c      	b.n	8004750 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x1fc>
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d16b      	bne.n	800473c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468a:	e057      	b.n	800473c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d11c      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x26c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x26c>
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d114      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d119      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x2ae>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d014      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004712:	2301      	movs	r3, #1
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004716:	f7fc fb63 	bl	8000de0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	429a      	cmp	r2, r3
 8004724:	d303      	bcc.n	800472e <HAL_SPI_TransmitReceive+0x2c6>
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d102      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x2cc>
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800473a:	e027      	b.n	800478c <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1a2      	bne.n	800468c <HAL_SPI_TransmitReceive+0x224>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d19d      	bne.n	800468c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f8d4 	bl	8004902 <SPI_EndRxTxTransaction>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800476c:	e00e      	b.n	800478c <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800479c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3730      	adds	r7, #48	; 0x30
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b6:	b2db      	uxtb	r3, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d4:	e04c      	b.n	8004870 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d048      	beq.n	8004870 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047de:	f7fc faff 	bl	8000de0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad2      	subs	r2, r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d202      	bcs.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d13d      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	6852      	ldr	r2, [r2, #4]
 80047fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004802:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480c:	d111      	bne.n	8004832 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d004      	beq.n	8004822 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d107      	bne.n	8004832 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	d10f      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e00f      	b.n	8004890 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	401a      	ands	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	429a      	cmp	r2, r3
 800488c:	d1a3      	bne.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ac:	d111      	bne.n	80048d2 <SPI_EndRxTransaction+0x3a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b6:	d004      	beq.n	80048c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c0:	d107      	bne.n	80048d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff ff71 	bl	80047c4 <SPI_WaitFlagStateUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e000      	b.n	80048fa <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af02      	add	r7, sp, #8
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff ff53 	bl	80047c4 <SPI_WaitFlagStateUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e000      	b.n	8004936 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e01d      	b.n	800498c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f815 	bl	8004994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f000 f967 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	68d2      	ldr	r2, [r2, #12]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d007      	beq.n	80049e2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0202 	mvn.w	r2, #2
 8004a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8ee 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8e0 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8f1 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0204 	mvn.w	r2, #4
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8c4 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8b6 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8c7 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f89a 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f88c 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f89d 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f870 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f862 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f873 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10e      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f003 fe76 	bl	8008860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f902 	bl	8004da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f838 	bl	8004c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0220 	mvn.w	r2, #32
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8cc 	bl	8004d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a40      	ldr	r2, [pc, #256]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d00f      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3d      	ldr	r2, [pc, #244]	; (8004d68 <TIM_Base_SetConfig+0x118>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <TIM_Base_SetConfig+0x11c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3b      	ldr	r2, [pc, #236]	; (8004d70 <TIM_Base_SetConfig+0x120>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3a      	ldr	r2, [pc, #232]	; (8004d74 <TIM_Base_SetConfig+0x124>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d02b      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d027      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <TIM_Base_SetConfig+0x118>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d023      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <TIM_Base_SetConfig+0x11c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01f      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2a      	ldr	r2, [pc, #168]	; (8004d70 <TIM_Base_SetConfig+0x120>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <TIM_Base_SetConfig+0x124>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a28      	ldr	r2, [pc, #160]	; (8004d78 <TIM_Base_SetConfig+0x128>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <TIM_Base_SetConfig+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <TIM_Base_SetConfig+0x130>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <TIM_Base_SetConfig+0x134>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <TIM_Base_SetConfig+0x138>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <TIM_Base_SetConfig+0x13c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0xf8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <TIM_Base_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d103      	bne.n	8004d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	615a      	str	r2, [r3, #20]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40010400 	.word	0x40010400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800
 8004d84:	40001800 	.word	0x40001800
 8004d88:	40001c00 	.word	0x40001c00
 8004d8c:	40002000 	.word	0x40002000

08004d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e03f      	b.n	8004e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f005 fcb2 	bl	800a748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f829 	bl	8004e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6912      	ldr	r2, [r2, #16]
 8004e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	6952      	ldr	r2, [r2, #20]
 8004e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	68d2      	ldr	r2, [r2, #12]
 8004e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	6912      	ldr	r2, [r2, #16]
 8004e66:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e98:	f023 030c 	bic.w	r3, r3, #12
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	6952      	ldr	r2, [r2, #20]
 8004eac:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6992      	ldr	r2, [r2, #24]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec0:	f040 80e4 	bne.w	800508c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4aab      	ldr	r2, [pc, #684]	; (8005178 <UART_SetConfig+0x324>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <UART_SetConfig+0x84>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4aaa      	ldr	r2, [pc, #680]	; (800517c <UART_SetConfig+0x328>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d16c      	bne.n	8004fb2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681c      	ldr	r4, [r3, #0]
 8004edc:	f7fe fd98 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009a      	lsls	r2, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	4aa2      	ldr	r2, [pc, #648]	; (8005180 <UART_SetConfig+0x32c>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	011d      	lsls	r5, r3, #4
 8004f00:	f7fe fd86 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009a      	lsls	r2, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f1a:	f7fe fd79 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009a      	lsls	r2, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	4a92      	ldr	r2, [pc, #584]	; (8005180 <UART_SetConfig+0x32c>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	2264      	movs	r2, #100	; 0x64
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	1af3      	subs	r3, r6, r3
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	3332      	adds	r3, #50	; 0x32
 8004f48:	4a8d      	ldr	r2, [pc, #564]	; (8005180 <UART_SetConfig+0x32c>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f56:	441d      	add	r5, r3
 8004f58:	f7fe fd5a 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f72:	f7fe fd4d 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	4a7c      	ldr	r2, [pc, #496]	; (8005180 <UART_SetConfig+0x32c>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2264      	movs	r2, #100	; 0x64
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	1af3      	subs	r3, r6, r3
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	3332      	adds	r3, #50	; 0x32
 8004fa0:	4a77      	ldr	r2, [pc, #476]	; (8005180 <UART_SetConfig+0x32c>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	442b      	add	r3, r5
 8004fae:	60a3      	str	r3, [r4, #8]
 8004fb0:	e154      	b.n	800525c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	f7fe fd17 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	4a6b      	ldr	r2, [pc, #428]	; (8005180 <UART_SetConfig+0x32c>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	011d      	lsls	r5, r3, #4
 8004fda:	f7fe fd05 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ff4:	f7fe fcf8 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	4a5c      	ldr	r2, [pc, #368]	; (8005180 <UART_SetConfig+0x32c>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2264      	movs	r2, #100	; 0x64
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	1af3      	subs	r3, r6, r3
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a57      	ldr	r2, [pc, #348]	; (8005180 <UART_SetConfig+0x32c>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005030:	441d      	add	r5, r3
 8005032:	f7fe fcd9 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005036:	4602      	mov	r2, r0
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb2 f6f3 	udiv	r6, r2, r3
 800504c:	f7fe fccc 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005050:	4602      	mov	r2, r0
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009a      	lsls	r2, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	4a46      	ldr	r2, [pc, #280]	; (8005180 <UART_SetConfig+0x32c>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2264      	movs	r2, #100	; 0x64
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	1af3      	subs	r3, r6, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a41      	ldr	r2, [pc, #260]	; (8005180 <UART_SetConfig+0x32c>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	442b      	add	r3, r5
 8005088:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800508a:	e0e7      	b.n	800525c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a39      	ldr	r2, [pc, #228]	; (8005178 <UART_SetConfig+0x324>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <UART_SetConfig+0x24c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a38      	ldr	r2, [pc, #224]	; (800517c <UART_SetConfig+0x328>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d171      	bne.n	8005184 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681c      	ldr	r4, [r3, #0]
 80050a4:	f7fe fcb4 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	4a30      	ldr	r2, [pc, #192]	; (8005180 <UART_SetConfig+0x32c>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	011d      	lsls	r5, r3, #4
 80050c8:	f7fe fca2 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009a      	lsls	r2, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	fbb2 f6f3 	udiv	r6, r2, r3
 80050e2:	f7fe fc95 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009a      	lsls	r2, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <UART_SetConfig+0x32c>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2264      	movs	r2, #100	; 0x64
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	1af3      	subs	r3, r6, r3
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	3332      	adds	r3, #50	; 0x32
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <UART_SetConfig+0x32c>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800511c:	441d      	add	r5, r3
 800511e:	f7fe fc77 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8005122:	4602      	mov	r2, r0
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009a      	lsls	r2, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fbb2 f6f3 	udiv	r6, r2, r3
 8005138:	f7fe fc6a 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 800513c:	4602      	mov	r2, r0
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009a      	lsls	r2, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <UART_SetConfig+0x32c>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	2264      	movs	r2, #100	; 0x64
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	1af3      	subs	r3, r6, r3
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	3332      	adds	r3, #50	; 0x32
 8005166:	4a06      	ldr	r2, [pc, #24]	; (8005180 <UART_SetConfig+0x32c>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	442b      	add	r3, r5
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	e071      	b.n	800525c <UART_SetConfig+0x408>
 8005178:	40011000 	.word	0x40011000
 800517c:	40011400 	.word	0x40011400
 8005180:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681c      	ldr	r4, [r3, #0]
 8005188:	f7fe fc2e 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 800518c:	4602      	mov	r2, r0
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009a      	lsls	r2, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	4a30      	ldr	r2, [pc, #192]	; (8005264 <UART_SetConfig+0x410>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	011d      	lsls	r5, r3, #4
 80051ac:	f7fe fc1c 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009a      	lsls	r2, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80051c6:	f7fe fc0f 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009a      	lsls	r2, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	4a20      	ldr	r2, [pc, #128]	; (8005264 <UART_SetConfig+0x410>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2264      	movs	r2, #100	; 0x64
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	1af3      	subs	r3, r6, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	; 0x32
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <UART_SetConfig+0x410>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005200:	441d      	add	r5, r3
 8005202:	f7fe fbf1 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005206:	4602      	mov	r2, r0
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fbb2 f6f3 	udiv	r6, r2, r3
 800521c:	f7fe fbe4 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005220:	4602      	mov	r2, r0
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009a      	lsls	r2, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	4a0b      	ldr	r2, [pc, #44]	; (8005264 <UART_SetConfig+0x410>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	2264      	movs	r2, #100	; 0x64
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	1af3      	subs	r3, r6, r3
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	3332      	adds	r3, #50	; 0x32
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <UART_SetConfig+0x410>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	442b      	add	r3, r5
 8005258:	60a3      	str	r3, [r4, #8]
}
 800525a:	e7ff      	b.n	800525c <UART_SetConfig+0x408>
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005264:	51eb851f 	.word	0x51eb851f

08005268 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d029      	beq.n	80052d6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800528e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005292:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800529c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80052a2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80052a8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80052ae:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80052b4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80052ba:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80052c0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80052c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e034      	b.n	8005340 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80052ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80052f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005306:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800530a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005314:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800531a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005320:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005326:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800532c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4313      	orrs	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d02e      	beq.n	80053c6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005374:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	3b01      	subs	r3, #1
 8005382:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005384:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	3b01      	subs	r3, #1
 800538c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800538e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	3b01      	subs	r3, #1
 8005396:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005398:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	3b01      	subs	r3, #1
 80053a0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80053a2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80053ac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80053b6:	4313      	orrs	r3, r2
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e03b      	b.n	800543e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	3b01      	subs	r3, #1
 80053de:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80053e8:	4313      	orrs	r3, r2
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80053fc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	3b01      	subs	r3, #1
 800540a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800540c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	3b01      	subs	r3, #1
 8005414:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005416:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	3b01      	subs	r3, #1
 800541e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005420:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	3b01      	subs	r3, #1
 8005428:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800542a:	4313      	orrs	r3, r2
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005468:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	3b01      	subs	r3, #1
 8005470:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005472:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005484:	f7fb fcac 	bl	8000de0 <HAL_GetTick>
 8005488:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800548a:	e010      	b.n	80054ae <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d00c      	beq.n	80054ae <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <FMC_SDRAM_SendCommand+0x5e>
 800549a:	f7fb fca1 	bl	8000de0 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d901      	bls.n	80054ae <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e006      	b.n	80054bc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d0e8      	beq.n	800548c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	4603      	mov	r3, r0
 80054f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fc:	2b84      	cmp	r3, #132	; 0x84
 80054fe:	d005      	beq.n	800550c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005500:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	3303      	adds	r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800551e:	f000 fe2d 	bl	800617c <vTaskStartScheduler>
  
  return osOK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}

08005528 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af02      	add	r7, sp, #8
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685c      	ldr	r4, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800553e:	b29e      	uxth	r6, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ffcf 	bl	80054ea <makeFreeRtosPriority>
 800554c:	4602      	mov	r2, r0
 800554e:	f107 030c 	add.w	r3, r7, #12
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	9200      	str	r2, [sp, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4632      	mov	r2, r6
 800555a:	4629      	mov	r1, r5
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fcaf 	bl	8005ec0 <xTaskCreate>
 8005562:	4603      	mov	r3, r0
 8005564:	2b01      	cmp	r3, #1
 8005566:	d001      	beq.n	800556c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005576 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <osDelay+0x16>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	e000      	b.n	800558e <osDelay+0x18>
 800558c:	2301      	movs	r3, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fdc0 	bl	8006114 <vTaskDelay>
  
  return osOK;
 8005594:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f103 0208 	add.w	r2, r3, #8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f103 0208 	add.w	r2, r3, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f103 0208 	add.w	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d103      	bne.n	8005660 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e00c      	b.n	800567a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3308      	adds	r3, #8
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e002      	b.n	800566e <vListInsert+0x2e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	d9f6      	bls.n	8005668 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6852      	ldr	r2, [r2, #4]
 80056d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d103      	bne.n	80056e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	1e5a      	subs	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3b04      	subs	r3, #4
 8005718:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b04      	subs	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b04      	subs	r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005738:	4a0c      	ldr	r2, [pc, #48]	; (800576c <pxPortInitialiseStack+0x64>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3b14      	subs	r3, #20
 8005742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b04      	subs	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f06f 0202 	mvn.w	r2, #2
 8005756:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b20      	subs	r3, #32
 800575c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	08005771 	.word	0x08005771

08005770 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <prvTaskExitError+0x50>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d009      	beq.n	8005798 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e7fe      	b.n	8005796 <prvTaskExitError+0x26>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057aa:	bf00      	nop
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0fc      	beq.n	80057ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057b2:	bf00      	nop
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	20000004 	.word	0x20000004
	...

080057d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <pxCurrentTCBConst2>)
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057da:	f380 8809 	msr	PSP, r0
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8811 	msr	BASEPRI, r0
 80057ea:	4770      	bx	lr
 80057ec:	f3af 8000 	nop.w

080057f0 <pxCurrentTCBConst2>:
 80057f0:	20003cd8 	.word	0x20003cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop

080057f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057f8:	4808      	ldr	r0, [pc, #32]	; (800581c <prvPortStartFirstTask+0x24>)
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f380 8808 	msr	MSP, r0
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8814 	msr	CONTROL, r0
 800580a:	b662      	cpsie	i
 800580c:	b661      	cpsie	f
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	df00      	svc	0
 8005818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800581a:	bf00      	nop
 800581c:	e000ed08 	.word	0xe000ed08

08005820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005826:	4b44      	ldr	r3, [pc, #272]	; (8005938 <xPortStartScheduler+0x118>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a44      	ldr	r2, [pc, #272]	; (800593c <xPortStartScheduler+0x11c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <xPortStartScheduler+0x24>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	e7fe      	b.n	8005842 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005844:	4b3c      	ldr	r3, [pc, #240]	; (8005938 <xPortStartScheduler+0x118>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <xPortStartScheduler+0x120>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d109      	bne.n	8005862 <xPortStartScheduler+0x42>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e7fe      	b.n	8005860 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005862:	4b38      	ldr	r3, [pc, #224]	; (8005944 <xPortStartScheduler+0x124>)
 8005864:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	22ff      	movs	r2, #255	; 0xff
 8005872:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005884:	b2da      	uxtb	r2, r3
 8005886:	4b30      	ldr	r3, [pc, #192]	; (8005948 <xPortStartScheduler+0x128>)
 8005888:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800588a:	4b30      	ldr	r3, [pc, #192]	; (800594c <xPortStartScheduler+0x12c>)
 800588c:	2207      	movs	r2, #7
 800588e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005890:	e009      	b.n	80058a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <xPortStartScheduler+0x12c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3b01      	subs	r3, #1
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <xPortStartScheduler+0x12c>)
 800589a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d0ef      	beq.n	8005892 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <xPortStartScheduler+0x12c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f1c3 0307 	rsb	r3, r3, #7
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d009      	beq.n	80058d2 <xPortStartScheduler+0xb2>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	e7fe      	b.n	80058d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <xPortStartScheduler+0x12c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	4a1c      	ldr	r2, [pc, #112]	; (800594c <xPortStartScheduler+0x12c>)
 80058da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <xPortStartScheduler+0x12c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058e4:	4a19      	ldr	r2, [pc, #100]	; (800594c <xPortStartScheduler+0x12c>)
 80058e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058f0:	4a17      	ldr	r2, [pc, #92]	; (8005950 <xPortStartScheduler+0x130>)
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <xPortStartScheduler+0x130>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <xPortStartScheduler+0x130>)
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <xPortStartScheduler+0x130>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005908:	f000 f8d6 	bl	8005ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <xPortStartScheduler+0x134>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005912:	f000 f8f5 	bl	8005b00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <xPortStartScheduler+0x138>)
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <xPortStartScheduler+0x138>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005920:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005922:	f7ff ff69 	bl	80057f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005926:	f000 fdd5 	bl	80064d4 <vTaskSwitchContext>
	prvTaskExitError();
 800592a:	f7ff ff21 	bl	8005770 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	e000ed00 	.word	0xe000ed00
 800593c:	410fc271 	.word	0x410fc271
 8005940:	410fc270 	.word	0x410fc270
 8005944:	e000e400 	.word	0xe000e400
 8005948:	200000b8 	.word	0x200000b8
 800594c:	200000bc 	.word	0x200000bc
 8005950:	e000ed20 	.word	0xe000ed20
 8005954:	20000004 	.word	0x20000004
 8005958:	e000ef34 	.word	0xe000ef34

0800595c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <vPortEnterCritical+0x54>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <vPortEnterCritical+0x54>)
 800597c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800597e:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <vPortEnterCritical+0x54>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10e      	bne.n	80059a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <vPortEnterCritical+0x58>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <vPortEnterCritical+0x48>
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	e7fe      	b.n	80059a2 <vPortEnterCritical+0x46>
	}
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	20000004 	.word	0x20000004
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <vPortExitCritical+0x4c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <vPortExitCritical+0x22>
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	e7fe      	b.n	80059d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80059da:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <vPortExitCritical+0x4c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3b01      	subs	r3, #1
 80059e0:	4a08      	ldr	r2, [pc, #32]	; (8005a04 <vPortExitCritical+0x4c>)
 80059e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <vPortExitCritical+0x4c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <vPortExitCritical+0x3e>
 80059ec:	2300      	movs	r3, #0
 80059ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000004 	.word	0x20000004
	...

08005a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a10:	f3ef 8009 	mrs	r0, PSP
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <pxCurrentTCBConst>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f01e 0f10 	tst.w	lr, #16
 8005a20:	bf08      	it	eq
 8005a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a34:	f380 8811 	msr	BASEPRI, r0
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f000 fd48 	bl	80064d4 <vTaskSwitchContext>
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f380 8811 	msr	BASEPRI, r0
 8005a4c:	bc09      	pop	{r0, r3}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f01e 0f10 	tst.w	lr, #16
 8005a5a:	bf08      	it	eq
 8005a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a60:	f380 8809 	msr	PSP, r0
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst>:
 8005a70:	20003cd8 	.word	0x20003cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a90:	f000 fc64 	bl	800635c <xTaskIncrementTick>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <SysTick_Handler+0x3c>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <vPortSetupTimerInterrupt+0x34>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <vPortSetupTimerInterrupt+0x38>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ac8:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <vPortSetupTimerInterrupt+0x3c>)
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <vPortSetupTimerInterrupt+0x40>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	490b      	ldr	r1, [pc, #44]	; (8005afc <vPortSetupTimerInterrupt+0x44>)
 8005ad0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ad4:	099b      	lsrs	r3, r3, #6
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ada:	4b04      	ldr	r3, [pc, #16]	; (8005aec <vPortSetupTimerInterrupt+0x34>)
 8005adc:	2207      	movs	r2, #7
 8005ade:	601a      	str	r2, [r3, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	e000e010 	.word	0xe000e010
 8005af0:	e000e018 	.word	0xe000e018
 8005af4:	e000e014 	.word	0xe000e014
 8005af8:	20000098 	.word	0x20000098
 8005afc:	10624dd3 	.word	0x10624dd3

08005b00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b10 <vPortEnableVFP+0x10>
 8005b04:	6801      	ldr	r1, [r0, #0]
 8005b06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b0a:	6001      	str	r1, [r0, #0]
 8005b0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b0e:	bf00      	nop
 8005b10:	e000ed88 	.word	0xe000ed88

08005b14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b20:	f000 fb72 	bl	8006208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b24:	4b57      	ldr	r3, [pc, #348]	; (8005c84 <pvPortMalloc+0x170>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b2c:	f000 f90c 	bl	8005d48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b30:	4b55      	ldr	r3, [pc, #340]	; (8005c88 <pvPortMalloc+0x174>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f040 808c 	bne.w	8005c56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01c      	beq.n	8005b7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005b44:	2208      	movs	r2, #8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d013      	beq.n	8005b7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f023 0307 	bic.w	r3, r3, #7
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <pvPortMalloc+0x6a>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e7fe      	b.n	8005b7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d068      	beq.n	8005c56 <pvPortMalloc+0x142>
 8005b84:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <pvPortMalloc+0x178>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d863      	bhi.n	8005c56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b8e:	4b40      	ldr	r3, [pc, #256]	; (8005c90 <pvPortMalloc+0x17c>)
 8005b90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b92:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <pvPortMalloc+0x17c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b98:	e004      	b.n	8005ba4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d203      	bcs.n	8005bb6 <pvPortMalloc+0xa2>
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f1      	bne.n	8005b9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bb6:	4b33      	ldr	r3, [pc, #204]	; (8005c84 <pvPortMalloc+0x170>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d04a      	beq.n	8005c56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	4413      	add	r3, r2
 8005bc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	1ad2      	subs	r2, r2, r3
 8005bda:	2308      	movs	r3, #8
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d91e      	bls.n	8005c20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <pvPortMalloc+0xf4>
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e7fe      	b.n	8005c06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c1a:	69b8      	ldr	r0, [r7, #24]
 8005c1c:	f000 f8f6 	bl	8005e0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <pvPortMalloc+0x178>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <pvPortMalloc+0x178>)
 8005c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c2e:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <pvPortMalloc+0x178>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b18      	ldr	r3, [pc, #96]	; (8005c94 <pvPortMalloc+0x180>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d203      	bcs.n	8005c42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <pvPortMalloc+0x178>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <pvPortMalloc+0x180>)
 8005c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <pvPortMalloc+0x174>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c56:	f000 fae5 	bl	8006224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <pvPortMalloc+0x164>
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e7fe      	b.n	8005c76 <pvPortMalloc+0x162>
	return pvReturn;
 8005c78:	69fb      	ldr	r3, [r7, #28]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3728      	adds	r7, #40	; 0x28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20003cc8 	.word	0x20003cc8
 8005c88:	20003cd4 	.word	0x20003cd4
 8005c8c:	20003ccc 	.word	0x20003ccc
 8005c90:	20003cc0 	.word	0x20003cc0
 8005c94:	20003cd0 	.word	0x20003cd0

08005c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d046      	beq.n	8005d38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005caa:	2308      	movs	r3, #8
 8005cac:	425b      	negs	r3, r3
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <vPortFree+0xa8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <vPortFree+0x42>
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e7fe      	b.n	8005cd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <vPortFree+0x5e>
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	e7fe      	b.n	8005cf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <vPortFree+0xa8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d019      	beq.n	8005d38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d115      	bne.n	8005d38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <vPortFree+0xa8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	43db      	mvns	r3, r3
 8005d16:	401a      	ands	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d1c:	f000 fa74 	bl	8006208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <vPortFree+0xac>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	4a06      	ldr	r2, [pc, #24]	; (8005d44 <vPortFree+0xac>)
 8005d2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d2e:	6938      	ldr	r0, [r7, #16]
 8005d30:	f000 f86c 	bl	8005e0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d34:	f000 fa76 	bl	8006224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d38:	bf00      	nop
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20003cd4 	.word	0x20003cd4
 8005d44:	20003ccc 	.word	0x20003ccc

08005d48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d54:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <prvHeapInit+0xac>)
 8005d56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3307      	adds	r3, #7
 8005d66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0307 	bic.w	r3, r3, #7
 8005d6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <prvHeapInit+0xac>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d80:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <prvHeapInit+0xb0>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <prvHeapInit+0xb0>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d94:	2208      	movs	r2, #8
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0307 	bic.w	r3, r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <prvHeapInit+0xb4>)
 8005da8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <prvHeapInit+0xb4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <prvHeapInit+0xb4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <prvHeapInit+0xb4>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <prvHeapInit+0xb8>)
 8005dd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <prvHeapInit+0xbc>)
 8005dde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <prvHeapInit+0xc0>)
 8005de2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005de6:	601a      	str	r2, [r3, #0]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	200000c0 	.word	0x200000c0
 8005df8:	20003cc0 	.word	0x20003cc0
 8005dfc:	20003cc8 	.word	0x20003cc8
 8005e00:	20003cd0 	.word	0x20003cd0
 8005e04:	20003ccc 	.word	0x20003ccc
 8005e08:	20003cd4 	.word	0x20003cd4

08005e0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <prvInsertBlockIntoFreeList+0xac>)
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e002      	b.n	8005e20 <prvInsertBlockIntoFreeList+0x14>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d3f7      	bcc.n	8005e1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d108      	bne.n	8005e4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	441a      	add	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d118      	bne.n	8005e94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <prvInsertBlockIntoFreeList+0xb0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d00d      	beq.n	8005e8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	441a      	add	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e008      	b.n	8005e9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <prvInsertBlockIntoFreeList+0xb0>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e003      	b.n	8005e9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d002      	beq.n	8005eaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20003cc0 	.word	0x20003cc0
 8005ebc:	20003cc8 	.word	0x20003cc8

08005ec0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	; 0x30
 8005ec4:	af04      	add	r7, sp, #16
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fe1d 	bl	8005b14 <pvPortMalloc>
 8005eda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ee2:	2054      	movs	r0, #84	; 0x54
 8005ee4:	f7ff fe16 	bl	8005b14 <pvPortMalloc>
 8005ee8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef6:	e005      	b.n	8005f04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef8:	6978      	ldr	r0, [r7, #20]
 8005efa:	f7ff fecd 	bl	8005c98 <vPortFree>
 8005efe:	e001      	b.n	8005f04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d013      	beq.n	8005f32 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f0a:	88fa      	ldrh	r2, [r7, #6]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9303      	str	r3, [sp, #12]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f80e 	bl	8005f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f26:	69f8      	ldr	r0, [r7, #28]
 8005f28:	f000 f88a 	bl	8006040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e002      	b.n	8005f38 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f38:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b088      	sub	sp, #32
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <prvInitialiseNewTask+0x46>
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e7fe      	b.n	8005f86 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	e012      	b.n	8005fb4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	7819      	ldrb	r1, [r3, #0]
 8005f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3334      	adds	r3, #52	; 0x34
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d006      	beq.n	8005fbc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d9e9      	bls.n	8005f8e <prvInitialiseNewTask+0x4c>
 8005fba:	e000      	b.n	8005fbe <prvInitialiseNewTask+0x7c>
		{
			break;
 8005fbc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d901      	bls.n	8005fd0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fcc:	2306      	movs	r3, #6
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff faf9 	bl	80055de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff faf4 	bl	80055de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	f1c3 0207 	rsb	r2, r3, #7
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	2200      	movs	r2, #0
 8006010:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	69b8      	ldr	r0, [r7, #24]
 8006020:	f7ff fb72 	bl	8005708 <pxPortInitialiseStack>
 8006024:	4602      	mov	r2, r0
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006036:	bf00      	nop
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006048:	f7ff fc88 	bl	800595c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800604c:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <prvAddNewTaskToReadyList+0xb8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <prvAddNewTaskToReadyList+0xb8>)
 8006054:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <prvAddNewTaskToReadyList+0xbc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800605e:	4a27      	ldr	r2, [pc, #156]	; (80060fc <prvAddNewTaskToReadyList+0xbc>)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <prvAddNewTaskToReadyList+0xb8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d110      	bne.n	800608e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800606c:	f000 faa4 	bl	80065b8 <prvInitialiseTaskLists>
 8006070:	e00d      	b.n	800608e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006072:	4b23      	ldr	r3, [pc, #140]	; (8006100 <prvAddNewTaskToReadyList+0xc0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800607a:	4b20      	ldr	r3, [pc, #128]	; (80060fc <prvAddNewTaskToReadyList+0xbc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	429a      	cmp	r2, r3
 8006086:	d802      	bhi.n	800608e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <prvAddNewTaskToReadyList+0xbc>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <prvAddNewTaskToReadyList+0xc4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3301      	adds	r3, #1
 8006094:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <prvAddNewTaskToReadyList+0xc4>)
 8006096:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	2201      	movs	r2, #1
 800609e:	409a      	lsls	r2, r3
 80060a0:	4b19      	ldr	r3, [pc, #100]	; (8006108 <prvAddNewTaskToReadyList+0xc8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <prvAddNewTaskToReadyList+0xc8>)
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4a15      	ldr	r2, [pc, #84]	; (800610c <prvAddNewTaskToReadyList+0xcc>)
 80060b8:	441a      	add	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f7ff fa99 	bl	80055f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060c6:	f7ff fc77 	bl	80059b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <prvAddNewTaskToReadyList+0xc0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00e      	beq.n	80060f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <prvAddNewTaskToReadyList+0xbc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	429a      	cmp	r2, r3
 80060de:	d207      	bcs.n	80060f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <prvAddNewTaskToReadyList+0xd0>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20003dd8 	.word	0x20003dd8
 80060fc:	20003cd8 	.word	0x20003cd8
 8006100:	20003de4 	.word	0x20003de4
 8006104:	20003df4 	.word	0x20003df4
 8006108:	20003de0 	.word	0x20003de0
 800610c:	20003cdc 	.word	0x20003cdc
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d016      	beq.n	8006154 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006126:	4b13      	ldr	r3, [pc, #76]	; (8006174 <vTaskDelay+0x60>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <vTaskDelay+0x2e>
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	e7fe      	b.n	8006140 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006142:	f000 f861 	bl	8006208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006146:	2100      	movs	r1, #0
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fad7 	bl	80066fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800614e:	f000 f869 	bl	8006224 <xTaskResumeAll>
 8006152:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <vTaskDelay+0x64>)
 800615c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20003e00 	.word	0x20003e00
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006182:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <vTaskStartScheduler+0x74>)
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	2300      	movs	r3, #0
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	2300      	movs	r3, #0
 800618c:	2280      	movs	r2, #128	; 0x80
 800618e:	4919      	ldr	r1, [pc, #100]	; (80061f4 <vTaskStartScheduler+0x78>)
 8006190:	4819      	ldr	r0, [pc, #100]	; (80061f8 <vTaskStartScheduler+0x7c>)
 8006192:	f7ff fe95 	bl	8005ec0 <xTaskCreate>
 8006196:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d115      	bne.n	80061ca <vTaskStartScheduler+0x4e>
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <vTaskStartScheduler+0x80>)
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295
 80061b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <vTaskStartScheduler+0x84>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <vTaskStartScheduler+0x88>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061c4:	f7ff fb2c 	bl	8005820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061c8:	e00d      	b.n	80061e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d109      	bne.n	80061e6 <vTaskStartScheduler+0x6a>
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	e7fe      	b.n	80061e4 <vTaskStartScheduler+0x68>
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20003dfc 	.word	0x20003dfc
 80061f4:	0800a968 	.word	0x0800a968
 80061f8:	08006589 	.word	0x08006589
 80061fc:	20003df8 	.word	0x20003df8
 8006200:	20003de4 	.word	0x20003de4
 8006204:	20003ddc 	.word	0x20003ddc

08006208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <vTaskSuspendAll+0x18>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	4a03      	ldr	r2, [pc, #12]	; (8006220 <vTaskSuspendAll+0x18>)
 8006214:	6013      	str	r3, [r2, #0]
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	20003e00 	.word	0x20003e00

08006224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006232:	4b41      	ldr	r3, [pc, #260]	; (8006338 <xTaskResumeAll+0x114>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <xTaskResumeAll+0x2a>
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	e7fe      	b.n	800624c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800624e:	f7ff fb85 	bl	800595c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006252:	4b39      	ldr	r3, [pc, #228]	; (8006338 <xTaskResumeAll+0x114>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	4a37      	ldr	r2, [pc, #220]	; (8006338 <xTaskResumeAll+0x114>)
 800625a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625c:	4b36      	ldr	r3, [pc, #216]	; (8006338 <xTaskResumeAll+0x114>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d161      	bne.n	8006328 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <xTaskResumeAll+0x118>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05d      	beq.n	8006328 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800626c:	e02e      	b.n	80062cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800626e:	4b34      	ldr	r3, [pc, #208]	; (8006340 <xTaskResumeAll+0x11c>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3318      	adds	r3, #24
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fa19 	bl	80056b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3304      	adds	r3, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fa14 	bl	80056b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	2201      	movs	r2, #1
 8006290:	409a      	lsls	r2, r3
 8006292:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <xTaskResumeAll+0x120>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <xTaskResumeAll+0x120>)
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <xTaskResumeAll+0x124>)
 80062aa:	441a      	add	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f7ff f9a0 	bl	80055f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4b23      	ldr	r3, [pc, #140]	; (800634c <xTaskResumeAll+0x128>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d302      	bcc.n	80062cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <xTaskResumeAll+0x12c>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062cc:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <xTaskResumeAll+0x11c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1cc      	bne.n	800626e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062da:	f000 f9e9 	bl	80066b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <xTaskResumeAll+0x130>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d010      	beq.n	800630c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062ea:	f000 f837 	bl	800635c <xTaskIncrementTick>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <xTaskResumeAll+0x12c>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f1      	bne.n	80062ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <xTaskResumeAll+0x130>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xTaskResumeAll+0x12c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <xTaskResumeAll+0x134>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006328:	f7ff fb46 	bl	80059b8 <vPortExitCritical>

	return xAlreadyYielded;
 800632c:	68bb      	ldr	r3, [r7, #8]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20003e00 	.word	0x20003e00
 800633c:	20003dd8 	.word	0x20003dd8
 8006340:	20003d98 	.word	0x20003d98
 8006344:	20003de0 	.word	0x20003de0
 8006348:	20003cdc 	.word	0x20003cdc
 800634c:	20003cd8 	.word	0x20003cd8
 8006350:	20003dec 	.word	0x20003dec
 8006354:	20003de8 	.word	0x20003de8
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006366:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <xTaskIncrementTick+0x14c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 808c 	bne.w	8006488 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006370:	4b4e      	ldr	r3, [pc, #312]	; (80064ac <xTaskIncrementTick+0x150>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006378:	4a4c      	ldr	r2, [pc, #304]	; (80064ac <xTaskIncrementTick+0x150>)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d11f      	bne.n	80063c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006384:	4b4a      	ldr	r3, [pc, #296]	; (80064b0 <xTaskIncrementTick+0x154>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <xTaskIncrementTick+0x46>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	e7fe      	b.n	80063a0 <xTaskIncrementTick+0x44>
 80063a2:	4b43      	ldr	r3, [pc, #268]	; (80064b0 <xTaskIncrementTick+0x154>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <xTaskIncrementTick+0x158>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a40      	ldr	r2, [pc, #256]	; (80064b0 <xTaskIncrementTick+0x154>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	4a40      	ldr	r2, [pc, #256]	; (80064b4 <xTaskIncrementTick+0x158>)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	4b40      	ldr	r3, [pc, #256]	; (80064b8 <xTaskIncrementTick+0x15c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a3e      	ldr	r2, [pc, #248]	; (80064b8 <xTaskIncrementTick+0x15c>)
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	f000 f976 	bl	80066b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063c4:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <xTaskIncrementTick+0x160>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d34d      	bcc.n	800646a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ce:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <xTaskIncrementTick+0x154>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <xTaskIncrementTick+0x80>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <xTaskIncrementTick+0x82>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	4b36      	ldr	r3, [pc, #216]	; (80064bc <xTaskIncrementTick+0x160>)
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	601a      	str	r2, [r3, #0]
					break;
 80063ea:	e03e      	b.n	800646a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063ec:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <xTaskIncrementTick+0x154>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d203      	bcs.n	800640c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006404:	4a2d      	ldr	r2, [pc, #180]	; (80064bc <xTaskIncrementTick+0x160>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6013      	str	r3, [r2, #0]
						break;
 800640a:	e02e      	b.n	800646a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff f94e 	bl	80056b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3318      	adds	r3, #24
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff f945 	bl	80056b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	2201      	movs	r2, #1
 800642e:	409a      	lsls	r2, r3
 8006430:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <xTaskIncrementTick+0x164>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <xTaskIncrementTick+0x164>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a1f      	ldr	r2, [pc, #124]	; (80064c4 <xTaskIncrementTick+0x168>)
 8006448:	441a      	add	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7ff f8d1 	bl	80055f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <xTaskIncrementTick+0x16c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d3b4      	bcc.n	80063ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006468:	e7b1      	b.n	80063ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <xTaskIncrementTick+0x16c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006470:	4914      	ldr	r1, [pc, #80]	; (80064c4 <xTaskIncrementTick+0x168>)
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d907      	bls.n	8006492 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e004      	b.n	8006492 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <xTaskIncrementTick+0x170>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <xTaskIncrementTick+0x170>)
 8006490:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <xTaskIncrementTick+0x174>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800649a:	2301      	movs	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800649e:	697b      	ldr	r3, [r7, #20]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20003e00 	.word	0x20003e00
 80064ac:	20003ddc 	.word	0x20003ddc
 80064b0:	20003d90 	.word	0x20003d90
 80064b4:	20003d94 	.word	0x20003d94
 80064b8:	20003df0 	.word	0x20003df0
 80064bc:	20003df8 	.word	0x20003df8
 80064c0:	20003de0 	.word	0x20003de0
 80064c4:	20003cdc 	.word	0x20003cdc
 80064c8:	20003cd8 	.word	0x20003cd8
 80064cc:	20003de8 	.word	0x20003de8
 80064d0:	20003dec 	.word	0x20003dec

080064d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064da:	4b26      	ldr	r3, [pc, #152]	; (8006574 <vTaskSwitchContext+0xa0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064e2:	4b25      	ldr	r3, [pc, #148]	; (8006578 <vTaskSwitchContext+0xa4>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064e8:	e03e      	b.n	8006568 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <vTaskSwitchContext+0xa4>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064f0:	4b22      	ldr	r3, [pc, #136]	; (800657c <vTaskSwitchContext+0xa8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	fab3 f383 	clz	r3, r3
 80064fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	f1c3 031f 	rsb	r3, r3, #31
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	491e      	ldr	r1, [pc, #120]	; (8006580 <vTaskSwitchContext+0xac>)
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <vTaskSwitchContext+0x5a>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	e7fe      	b.n	800652c <vTaskSwitchContext+0x58>
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4a11      	ldr	r2, [pc, #68]	; (8006580 <vTaskSwitchContext+0xac>)
 800653a:	4413      	add	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	3308      	adds	r3, #8
 8006550:	429a      	cmp	r2, r3
 8006552:	d104      	bne.n	800655e <vTaskSwitchContext+0x8a>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4a07      	ldr	r2, [pc, #28]	; (8006584 <vTaskSwitchContext+0xb0>)
 8006566:	6013      	str	r3, [r2, #0]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	20003e00 	.word	0x20003e00
 8006578:	20003dec 	.word	0x20003dec
 800657c:	20003de0 	.word	0x20003de0
 8006580:	20003cdc 	.word	0x20003cdc
 8006584:	20003cd8 	.word	0x20003cd8

08006588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006590:	f000 f852 	bl	8006638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <prvIdleTask+0x28>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d9f9      	bls.n	8006590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <prvIdleTask+0x2c>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065ac:	e7f0      	b.n	8006590 <prvIdleTask+0x8>
 80065ae:	bf00      	nop
 80065b0:	20003cdc 	.word	0x20003cdc
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	e00c      	b.n	80065de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <prvInitialiseTaskLists+0x60>)
 80065d0:	4413      	add	r3, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ffe3 	bl	800559e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3301      	adds	r3, #1
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	d9ef      	bls.n	80065c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e4:	480d      	ldr	r0, [pc, #52]	; (800661c <prvInitialiseTaskLists+0x64>)
 80065e6:	f7fe ffda 	bl	800559e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ea:	480d      	ldr	r0, [pc, #52]	; (8006620 <prvInitialiseTaskLists+0x68>)
 80065ec:	f7fe ffd7 	bl	800559e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f0:	480c      	ldr	r0, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x6c>)
 80065f2:	f7fe ffd4 	bl	800559e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065f6:	480c      	ldr	r0, [pc, #48]	; (8006628 <prvInitialiseTaskLists+0x70>)
 80065f8:	f7fe ffd1 	bl	800559e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <prvInitialiseTaskLists+0x74>)
 80065fe:	f7fe ffce 	bl	800559e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvInitialiseTaskLists+0x78>)
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <prvInitialiseTaskLists+0x64>)
 8006606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <prvInitialiseTaskLists+0x7c>)
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <prvInitialiseTaskLists+0x68>)
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20003cdc 	.word	0x20003cdc
 800661c:	20003d68 	.word	0x20003d68
 8006620:	20003d7c 	.word	0x20003d7c
 8006624:	20003d98 	.word	0x20003d98
 8006628:	20003dac 	.word	0x20003dac
 800662c:	20003dc4 	.word	0x20003dc4
 8006630:	20003d90 	.word	0x20003d90
 8006634:	20003d94 	.word	0x20003d94

08006638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663e:	e019      	b.n	8006674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006640:	f7ff f98c 	bl	800595c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <prvCheckTasksWaitingTermination+0x4c>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f82e 	bl	80056b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006656:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvCheckTasksWaitingTermination+0x50>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <prvCheckTasksWaitingTermination+0x50>)
 800665e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800666a:	f7ff f9a5 	bl	80059b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f80e 	bl	8006690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e1      	bne.n	8006640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20003dac 	.word	0x20003dac
 8006688:	20003dd8 	.word	0x20003dd8
 800668c:	20003dc0 	.word	0x20003dc0

08006690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fafb 	bl	8005c98 <vPortFree>
			vPortFree( pxTCB );
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff faf8 	bl	8005c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <prvResetNextTaskUnblockTime+0x44>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <prvResetNextTaskUnblockTime+0x14>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <prvResetNextTaskUnblockTime+0x16>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <prvResetNextTaskUnblockTime+0x48>)
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295
 80066d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066d2:	e008      	b.n	80066e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <prvResetNextTaskUnblockTime+0x44>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4a05      	ldr	r2, [pc, #20]	; (80066f8 <prvResetNextTaskUnblockTime+0x48>)
 80066e4:	6013      	str	r3, [r2, #0]
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20003d90 	.word	0x20003d90
 80066f8:	20003df8 	.word	0x20003df8

080066fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800670c:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3304      	adds	r3, #4
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe ffcd 	bl	80056b2 <uxListRemove>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800671e:	4b24      	ldr	r3, [pc, #144]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	2201      	movs	r2, #1
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43da      	mvns	r2, r3
 800672c:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4013      	ands	r3, r2
 8006732:	4a20      	ldr	r2, [pc, #128]	; (80067b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006734:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d10a      	bne.n	8006754 <prvAddCurrentTaskToDelayedList+0x58>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	481a      	ldr	r0, [pc, #104]	; (80067b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800674e:	f7fe ff53 	bl	80055f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006752:	e026      	b.n	80067a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800675c:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	429a      	cmp	r2, r3
 800676a:	d209      	bcs.n	8006780 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fe ff61 	bl	8005640 <vListInsert>
}
 800677e:	e010      	b.n	80067a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fe ff57 	bl	8005640 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	d202      	bcs.n	80067a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800679c:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6013      	str	r3, [r2, #0]
}
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20003ddc 	.word	0x20003ddc
 80067b0:	20003cd8 	.word	0x20003cd8
 80067b4:	20003de0 	.word	0x20003de0
 80067b8:	20003dc4 	.word	0x20003dc4
 80067bc:	20003d94 	.word	0x20003d94
 80067c0:	20003d90 	.word	0x20003d90
 80067c4:	20003df8 	.word	0x20003df8

080067c8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <MX_DMA2D_Init+0x34>)
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <MX_DMA2D_Init+0x38>)
 80067d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <MX_DMA2D_Init+0x34>)
 80067d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80067d8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <MX_DMA2D_Init+0x34>)
 80067dc:	2200      	movs	r2, #0
 80067de:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <MX_DMA2D_Init+0x34>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80067e6:	4805      	ldr	r0, [pc, #20]	; (80067fc <MX_DMA2D_Init+0x34>)
 80067e8:	f7fa fc08 	bl	8000ffc <HAL_DMA2D_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80067f2:	f002 f847 	bl	8008884 <Error_Handler>
  }

}
 80067f6:	bf00      	nop
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20003f08 	.word	0x20003f08
 8006800:	4002b000 	.word	0x4002b000

08006804 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <HAL_DMA2D_MspInit+0x3c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d10d      	bne.n	8006832 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	4a0a      	ldr	r2, [pc, #40]	; (8006844 <HAL_DMA2D_MspInit+0x40>)
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_DMA2D_MspInit+0x40>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006824:	6313      	str	r3, [r2, #48]	; 0x30
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <HAL_DMA2D_MspInit+0x40>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	4002b000 	.word	0x4002b000
 8006844:	40023800 	.word	0x40023800

08006848 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800684e:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <MX_FMC_Init+0x84>)
 8006850:	4a1f      	ldr	r2, [pc, #124]	; (80068d0 <MX_FMC_Init+0x88>)
 8006852:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006854:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <MX_FMC_Init+0x84>)
 8006856:	2201      	movs	r2, #1
 8006858:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800685a:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <MX_FMC_Init+0x84>)
 800685c:	2200      	movs	r2, #0
 800685e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <MX_FMC_Init+0x84>)
 8006862:	2204      	movs	r2, #4
 8006864:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006866:	4b19      	ldr	r3, [pc, #100]	; (80068cc <MX_FMC_Init+0x84>)
 8006868:	2210      	movs	r2, #16
 800686a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <MX_FMC_Init+0x84>)
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006872:	4b16      	ldr	r3, [pc, #88]	; (80068cc <MX_FMC_Init+0x84>)
 8006874:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006878:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <MX_FMC_Init+0x84>)
 800687c:	2200      	movs	r2, #0
 800687e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8006880:	4b12      	ldr	r3, [pc, #72]	; (80068cc <MX_FMC_Init+0x84>)
 8006882:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006886:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006888:	4b10      	ldr	r3, [pc, #64]	; (80068cc <MX_FMC_Init+0x84>)
 800688a:	2200      	movs	r2, #0
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <MX_FMC_Init+0x84>)
 8006890:	2200      	movs	r2, #0
 8006892:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006894:	2302      	movs	r3, #2
 8006896:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006898:	2307      	movs	r3, #7
 800689a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800689c:	2304      	movs	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80068a0:	2307      	movs	r3, #7
 80068a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80068a4:	2303      	movs	r3, #3
 80068a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80068a8:	2302      	movs	r3, #2
 80068aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80068ac:	2302      	movs	r3, #2
 80068ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4805      	ldr	r0, [pc, #20]	; (80068cc <MX_FMC_Init+0x84>)
 80068b6:	f7fd fa95 	bl	8003de4 <HAL_SDRAM_Init>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <MX_FMC_Init+0x7c>
  {
    Error_Handler( );
 80068c0:	f001 ffe0 	bl	8008884 <Error_Handler>
  }

}
 80068c4:	bf00      	nop
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20003f48 	.word	0x20003f48
 80068d0:	a0000140 	.word	0xa0000140

080068d4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80068da:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <HAL_FMC_MspInit+0xf8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d16f      	bne.n	80069c2 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80068e2:	4b3a      	ldr	r3, [pc, #232]	; (80069cc <HAL_FMC_MspInit+0xf8>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80068e8:	2300      	movs	r3, #0
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	4a38      	ldr	r2, [pc, #224]	; (80069d0 <HAL_FMC_MspInit+0xfc>)
 80068ee:	4b38      	ldr	r3, [pc, #224]	; (80069d0 <HAL_FMC_MspInit+0xfc>)
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	6393      	str	r3, [r2, #56]	; 0x38
 80068f8:	4b35      	ldr	r3, [pc, #212]	; (80069d0 <HAL_FMC_MspInit+0xfc>)
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006904:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006908:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690a:	2302      	movs	r3, #2
 800690c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006912:	2303      	movs	r3, #3
 8006914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006916:	230c      	movs	r3, #12
 8006918:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800691a:	1d3b      	adds	r3, r7, #4
 800691c:	4619      	mov	r1, r3
 800691e:	482d      	ldr	r0, [pc, #180]	; (80069d4 <HAL_FMC_MspInit+0x100>)
 8006920:	f7fa fdf6 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006924:	2301      	movs	r3, #1
 8006926:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006928:	2302      	movs	r3, #2
 800692a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006930:	2303      	movs	r3, #3
 8006932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006934:	230c      	movs	r3, #12
 8006936:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006938:	1d3b      	adds	r3, r7, #4
 800693a:	4619      	mov	r1, r3
 800693c:	4826      	ldr	r0, [pc, #152]	; (80069d8 <HAL_FMC_MspInit+0x104>)
 800693e:	f7fa fde7 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006942:	f248 1333 	movw	r3, #33075	; 0x8133
 8006946:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006948:	2302      	movs	r3, #2
 800694a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006950:	2303      	movs	r3, #3
 8006952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006954:	230c      	movs	r3, #12
 8006956:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006958:	1d3b      	adds	r3, r7, #4
 800695a:	4619      	mov	r1, r3
 800695c:	481f      	ldr	r0, [pc, #124]	; (80069dc <HAL_FMC_MspInit+0x108>)
 800695e:	f7fa fdd7 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8006962:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006966:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006968:	2302      	movs	r3, #2
 800696a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006970:	2303      	movs	r3, #3
 8006972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006974:	230c      	movs	r3, #12
 8006976:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006978:	1d3b      	adds	r3, r7, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4818      	ldr	r0, [pc, #96]	; (80069e0 <HAL_FMC_MspInit+0x10c>)
 800697e:	f7fa fdc7 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006982:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006986:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006988:	2302      	movs	r3, #2
 800698a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006990:	2303      	movs	r3, #3
 8006992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006994:	230c      	movs	r3, #12
 8006996:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4811      	ldr	r0, [pc, #68]	; (80069e4 <HAL_FMC_MspInit+0x110>)
 800699e:	f7fa fdb7 	bl	8001510 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80069a2:	2360      	movs	r3, #96	; 0x60
 80069a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a6:	2302      	movs	r3, #2
 80069a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ae:	2303      	movs	r3, #3
 80069b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80069b2:	230c      	movs	r3, #12
 80069b4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	480b      	ldr	r0, [pc, #44]	; (80069e8 <HAL_FMC_MspInit+0x114>)
 80069bc:	f7fa fda8 	bl	8001510 <HAL_GPIO_Init>
 80069c0:	e000      	b.n	80069c4 <HAL_FMC_MspInit+0xf0>
    return;
 80069c2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20003e04 	.word	0x20003e04
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40021400 	.word	0x40021400
 80069d8:	40020800 	.word	0x40020800
 80069dc:	40021800 	.word	0x40021800
 80069e0:	40021000 	.word	0x40021000
 80069e4:	40020c00 	.word	0x40020c00
 80069e8:	40020400 	.word	0x40020400

080069ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80069f4:	f7ff ff6e 	bl	80068d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006a00:	b5b0      	push	{r4, r5, r7, lr}
 8006a02:	b094      	sub	sp, #80	; 0x50
 8006a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	ts_struct = &struktura;
 8006a06:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <MX_FREERTOS_Init+0xb4>)
 8006a08:	4a2b      	ldr	r2, [pc, #172]	; (8006ab8 <MX_FREERTOS_Init+0xb8>)
 8006a0a:	601a      	str	r2, [r3, #0]
	ts_init(ts_struct);
 8006a0c:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <MX_FREERTOS_Init+0xb4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 ff13 	bl	800883c <ts_init>
	initMenu(ts_struct, globalClassHandler);
 8006a16:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <MX_FREERTOS_Init+0xb4>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b28      	ldr	r3, [pc, #160]	; (8006abc <MX_FREERTOS_Init+0xbc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f000 ff4b 	bl	80078bc <initMenu>
		/* definition and creation of mpuTask */
		osThreadDef(mpuTask, StartDefaultTask, osPriorityNormal, 0, 128);
		//empty thread

		/* definition and creation of lcdTask */
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityHigh, 0, 128);
 8006a26:	4b26      	ldr	r3, [pc, #152]	; (8006ac0 <MX_FREERTOS_Init+0xc0>)
 8006a28:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	6023      	str	r3, [r4, #0]
		lcdTaskHandle = osThreadCreate(osThread(LCD_handling), NULL);
 8006a36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fd73 	bl	8005528 <osThreadCreate>
 8006a42:	4602      	mov	r2, r0
 8006a44:	4b1f      	ldr	r3, [pc, #124]	; (8006ac4 <MX_FREERTOS_Init+0xc4>)
 8006a46:	601a      	str	r2, [r3, #0]

		/* definition and creation of touchTask */
		osThreadDef(TS_handling, StartTS_handling, osPriorityNormal, 0, 128);
 8006a48:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <MX_FREERTOS_Init+0xc8>)
 8006a4a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006a4e:	461d      	mov	r5, r3
 8006a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	6023      	str	r3, [r4, #0]
		touchTaskHandle = osThreadCreate(osThread(TS_handling), NULL);
 8006a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fd62 	bl	8005528 <osThreadCreate>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b19      	ldr	r3, [pc, #100]	; (8006acc <MX_FREERTOS_Init+0xcc>)
 8006a68:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(MPU_handling, StartMPU_handling, osPriorityNormal, 0, 128);
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <MX_FREERTOS_Init+0xd0>)
 8006a6c:	f107 0414 	add.w	r4, r7, #20
 8006a70:	461d      	mov	r5, r3
 8006a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a76:	682b      	ldr	r3, [r5, #0]
 8006a78:	6023      	str	r3, [r4, #0]
		mpuTaskHandle = osThreadCreate(osThread(MPU_handling), NULL);
 8006a7a:	f107 0314 	add.w	r3, r7, #20
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fd51 	bl	8005528 <osThreadCreate>
 8006a86:	4602      	mov	r2, r0
 8006a88:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <MX_FREERTOS_Init+0xd4>)
 8006a8a:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(GAME_master, StartGAME_master, osPriorityNormal, 0, 128);
 8006a8c:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <MX_FREERTOS_Init+0xd8>)
 8006a8e:	463c      	mov	r4, r7
 8006a90:	461d      	mov	r5, r3
 8006a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	6023      	str	r3, [r4, #0]
		gameTaskHandle = osThreadCreate(osThread(GAME_master), NULL);
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fd42 	bl	8005528 <osThreadCreate>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <MX_FREERTOS_Init+0xdc>)
 8006aa8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8006aaa:	bf00      	nop
 8006aac:	3750      	adds	r7, #80	; 0x50
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20003fa0 	.word	0x20003fa0
 8006ab8:	20003f80 	.word	0x20003f80
 8006abc:	20003f90 	.word	0x20003f90
 8006ac0:	0800a980 	.word	0x0800a980
 8006ac4:	20003f9c 	.word	0x20003f9c
 8006ac8:	0800a9a0 	.word	0x0800a9a0
 8006acc:	20003f7c 	.word	0x20003f7c
 8006ad0:	0800a9c4 	.word	0x0800a9c4
 8006ad4:	20003f8c 	.word	0x20003f8c
 8006ad8:	0800a9e4 	.word	0x0800a9e4
 8006adc:	20003f98 	.word	0x20003f98

08006ae0 <StartLCD_handling>:
 * @brief Function implementing the lcdTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartLCD_handling(void const * argument) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006ae8:	2001      	movs	r0, #1
 8006aea:	f7fe fd44 	bl	8005576 <osDelay>
		if (HAL_GetTick() - startTime >= 50) {
 8006aee:	f7fa f977 	bl	8000de0 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <StartLCD_handling+0x40>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b31      	cmp	r3, #49	; 0x31
 8006afc:	d9f4      	bls.n	8006ae8 <StartLCD_handling+0x8>
			flagTouch = 0; //wyzerowanie flagi
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <StartLCD_handling+0x44>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

			Display(globalClassHandler);
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <StartLCD_handling+0x48>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 ff37 	bl	800797c <Display>
			Service();
 8006b0e:	f000 ff59 	bl	80079c4 <Service>
			startTime = HAL_GetTick(); //eliminacja drgan
 8006b12:	f7fa f965 	bl	8000de0 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	4b01      	ldr	r3, [pc, #4]	; (8006b20 <StartLCD_handling+0x40>)
 8006b1a:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8006b1c:	e7e4      	b.n	8006ae8 <StartLCD_handling+0x8>
 8006b1e:	bf00      	nop
 8006b20:	20003fa4 	.word	0x20003fa4
 8006b24:	20003e2c 	.word	0x20003e2c
 8006b28:	20003f90 	.word	0x20003f90

08006b2c <StartTS_handling>:
 * @brief Function implementing the touchTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTS_handling(void const * argument) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fe fd1e 	bl	8005576 <osDelay>
		BSP_TS_GetState(ts_struct);
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <StartTS_handling+0x40>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f003 f9b4 	bl	8009eac <BSP_TS_GetState>
		if (ts_struct->TouchDetected) {
 8006b44:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <StartTS_handling+0x40>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d006      	beq.n	8006b5c <StartTS_handling+0x30>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b54:	4806      	ldr	r0, [pc, #24]	; (8006b70 <StartTS_handling+0x44>)
 8006b56:	f7fa ff91 	bl	8001a7c <HAL_GPIO_WritePin>
 8006b5a:	e7eb      	b.n	8006b34 <StartTS_handling+0x8>
		}
		else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b62:	4803      	ldr	r0, [pc, #12]	; (8006b70 <StartTS_handling+0x44>)
 8006b64:	f7fa ff8a 	bl	8001a7c <HAL_GPIO_WritePin>
		osDelay(1);
 8006b68:	e7e4      	b.n	8006b34 <StartTS_handling+0x8>
 8006b6a:	bf00      	nop
 8006b6c:	20003fa0 	.word	0x20003fa0
 8006b70:	40021800 	.word	0x40021800

08006b74 <StartMPU_handling>:
	}
	/* USER CODE END StartTask03 */
}

/* USER CODE END Header_StartDefaultTask */
void StartMPU_handling(void const * argument) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for (;;) {
		read_gyro(&current_x, &current_y, &current_z);
 8006b7c:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <StartMPU_handling+0x1c>)
 8006b7e:	4905      	ldr	r1, [pc, #20]	; (8006b94 <StartMPU_handling+0x20>)
 8006b80:	4805      	ldr	r0, [pc, #20]	; (8006b98 <StartMPU_handling+0x24>)
 8006b82:	f000 fa71 	bl	8007068 <read_gyro>
		//printf("X-Axis: %d ", x);
		//printf("Y-Axis: %d ", y);
		//printf("Z-Axis: %d\r\n", z);
		osDelay(10);
 8006b86:	200a      	movs	r0, #10
 8006b88:	f7fe fcf5 	bl	8005576 <osDelay>
		read_gyro(&current_x, &current_y, &current_z);
 8006b8c:	e7f6      	b.n	8006b7c <StartMPU_handling+0x8>
 8006b8e:	bf00      	nop
 8006b90:	20003e1c 	.word	0x20003e1c
 8006b94:	20003e18 	.word	0x20003e18
 8006b98:	20003e14 	.word	0x20003e14

08006b9c <StartGAME_master>:
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE END Header_StartDefaultTask */
void StartGAME_master(void const * argument) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	f7fe fce6 	bl	8005576 <osDelay>
		if (HAL_GetTick() - startTimeAntiWindupSystem >= 100) {
 8006baa:	f7fa f919 	bl	8000de0 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	4b42      	ldr	r3, [pc, #264]	; (8006cbc <StartGAME_master+0x120>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b63      	cmp	r3, #99	; 0x63
 8006bb8:	d9f4      	bls.n	8006ba4 <StartGAME_master+0x8>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8006bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bbe:	4840      	ldr	r0, [pc, #256]	; (8006cc0 <StartGAME_master+0x124>)
 8006bc0:	f7fa ff75 	bl	8001aae <HAL_GPIO_TogglePin>
			if(current_x - previous_x > 2) x = x + current_x - previous_x;
 8006bc4:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <StartGAME_master+0x128>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <StartGAME_master+0x12c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	dd09      	ble.n	8006be6 <StartGAME_master+0x4a>
 8006bd2:	4b3e      	ldr	r3, [pc, #248]	; (8006ccc <StartGAME_master+0x130>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <StartGAME_master+0x128>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	441a      	add	r2, r3
 8006bdc:	4b3a      	ldr	r3, [pc, #232]	; (8006cc8 <StartGAME_master+0x12c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	4a3a      	ldr	r2, [pc, #232]	; (8006ccc <StartGAME_master+0x130>)
 8006be4:	6013      	str	r3, [r2, #0]
			if(current_x - previous_x < -2) x = x + current_x - previous_x;
 8006be6:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <StartGAME_master+0x128>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b37      	ldr	r3, [pc, #220]	; (8006cc8 <StartGAME_master+0x12c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f113 0f02 	cmn.w	r3, #2
 8006bf4:	da09      	bge.n	8006c0a <StartGAME_master+0x6e>
 8006bf6:	4b35      	ldr	r3, [pc, #212]	; (8006ccc <StartGAME_master+0x130>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b32      	ldr	r3, [pc, #200]	; (8006cc4 <StartGAME_master+0x128>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	441a      	add	r2, r3
 8006c00:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <StartGAME_master+0x12c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	4a31      	ldr	r2, [pc, #196]	; (8006ccc <StartGAME_master+0x130>)
 8006c08:	6013      	str	r3, [r2, #0]

			if(current_y - previous_y > 2) y = y + current_y - previous_y;
 8006c0a:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <StartGAME_master+0x134>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b31      	ldr	r3, [pc, #196]	; (8006cd4 <StartGAME_master+0x138>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	dd09      	ble.n	8006c2c <StartGAME_master+0x90>
 8006c18:	4b2f      	ldr	r3, [pc, #188]	; (8006cd8 <StartGAME_master+0x13c>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b2c      	ldr	r3, [pc, #176]	; (8006cd0 <StartGAME_master+0x134>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	441a      	add	r2, r3
 8006c22:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <StartGAME_master+0x138>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	4a2b      	ldr	r2, [pc, #172]	; (8006cd8 <StartGAME_master+0x13c>)
 8006c2a:	6013      	str	r3, [r2, #0]
			if(current_y - previous_y < -2) y = y + current_y - previous_y;
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <StartGAME_master+0x134>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <StartGAME_master+0x138>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f113 0f02 	cmn.w	r3, #2
 8006c3a:	da09      	bge.n	8006c50 <StartGAME_master+0xb4>
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <StartGAME_master+0x13c>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <StartGAME_master+0x134>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	441a      	add	r2, r3
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <StartGAME_master+0x138>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <StartGAME_master+0x13c>)
 8006c4e:	6013      	str	r3, [r2, #0]

			if(current_z - previous_z > 2) z = z + current_z - previous_z;
 8006c50:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <StartGAME_master+0x140>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b22      	ldr	r3, [pc, #136]	; (8006ce0 <StartGAME_master+0x144>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	dd09      	ble.n	8006c72 <StartGAME_master+0xd6>
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <StartGAME_master+0x148>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <StartGAME_master+0x140>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	441a      	add	r2, r3
 8006c68:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <StartGAME_master+0x144>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <StartGAME_master+0x148>)
 8006c70:	6013      	str	r3, [r2, #0]
			if(current_z - previous_z < -2) z = z + current_z - previous_z;
 8006c72:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <StartGAME_master+0x140>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <StartGAME_master+0x144>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f113 0f02 	cmn.w	r3, #2
 8006c80:	da09      	bge.n	8006c96 <StartGAME_master+0xfa>
 8006c82:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <StartGAME_master+0x148>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <StartGAME_master+0x140>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	441a      	add	r2, r3
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <StartGAME_master+0x144>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <StartGAME_master+0x148>)
 8006c94:	6013      	str	r3, [r2, #0]

			startTimeAntiWindupSystem = HAL_GetTick();
 8006c96:	f7fa f8a3 	bl	8000de0 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4b07      	ldr	r3, [pc, #28]	; (8006cbc <StartGAME_master+0x120>)
 8006c9e:	601a      	str	r2, [r3, #0]
			previous_x = current_x;
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <StartGAME_master+0x128>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <StartGAME_master+0x12c>)
 8006ca6:	6013      	str	r3, [r2, #0]
			previous_y = current_y;
 8006ca8:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <StartGAME_master+0x134>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <StartGAME_master+0x138>)
 8006cae:	6013      	str	r3, [r2, #0]
			previous_z = current_z;
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <StartGAME_master+0x140>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <StartGAME_master+0x144>)
 8006cb6:	6013      	str	r3, [r2, #0]
		osDelay(1);
 8006cb8:	e774      	b.n	8006ba4 <StartGAME_master+0x8>
 8006cba:	bf00      	nop
 8006cbc:	20003f94 	.word	0x20003f94
 8006cc0:	40021800 	.word	0x40021800
 8006cc4:	20003e14 	.word	0x20003e14
 8006cc8:	20003e20 	.word	0x20003e20
 8006ccc:	20003e08 	.word	0x20003e08
 8006cd0:	20003e18 	.word	0x20003e18
 8006cd4:	20003e24 	.word	0x20003e24
 8006cd8:	20003e0c 	.word	0x20003e0c
 8006cdc:	20003e1c 	.word	0x20003e1c
 8006ce0:	20003e28 	.word	0x20003e28
 8006ce4:	20003e10 	.word	0x20003e10

08006ce8 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08e      	sub	sp, #56	; 0x38
 8006cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
 8006cf8:	609a      	str	r2, [r3, #8]
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	4a89      	ldr	r2, [pc, #548]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d04:	4b88      	ldr	r3, [pc, #544]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	f043 0304 	orr.w	r3, r3, #4
 8006d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0e:	4b86      	ldr	r3, [pc, #536]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	623b      	str	r3, [r7, #32]
 8006d18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	4a82      	ldr	r2, [pc, #520]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d20:	4b81      	ldr	r3, [pc, #516]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	f043 0320 	orr.w	r3, r3, #32
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	4a7b      	ldr	r2, [pc, #492]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d3c:	4b7a      	ldr	r3, [pc, #488]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d44:	6313      	str	r3, [r2, #48]	; 0x30
 8006d46:	4b78      	ldr	r3, [pc, #480]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	4a74      	ldr	r2, [pc, #464]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d58:	4b73      	ldr	r3, [pc, #460]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	6313      	str	r3, [r2, #48]	; 0x30
 8006d62:	4b71      	ldr	r3, [pc, #452]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	4a6d      	ldr	r2, [pc, #436]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d74:	4b6c      	ldr	r3, [pc, #432]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7e:	4b6a      	ldr	r3, [pc, #424]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	4a66      	ldr	r2, [pc, #408]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d90:	4b65      	ldr	r3, [pc, #404]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9a:	4b63      	ldr	r3, [pc, #396]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	4a5f      	ldr	r2, [pc, #380]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006dac:	4b5e      	ldr	r3, [pc, #376]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	f043 0310 	orr.w	r3, r3, #16
 8006db4:	6313      	str	r3, [r2, #48]	; 0x30
 8006db6:	4b5c      	ldr	r3, [pc, #368]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	4a58      	ldr	r2, [pc, #352]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006dc8:	4b57      	ldr	r3, [pc, #348]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd2:	4b55      	ldr	r3, [pc, #340]	; (8006f28 <MX_GPIO_Init+0x240>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	2116      	movs	r1, #22
 8006de2:	4852      	ldr	r0, [pc, #328]	; (8006f2c <MX_GPIO_Init+0x244>)
 8006de4:	f7fa fe4a 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006de8:	2200      	movs	r2, #0
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	4850      	ldr	r0, [pc, #320]	; (8006f30 <MX_GPIO_Init+0x248>)
 8006dee:	f7fa fe45 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8006df2:	2200      	movs	r2, #0
 8006df4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006df8:	484e      	ldr	r0, [pc, #312]	; (8006f34 <MX_GPIO_Init+0x24c>)
 8006dfa:	f7fa fe3f 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006e04:	484c      	ldr	r0, [pc, #304]	; (8006f38 <MX_GPIO_Init+0x250>)
 8006e06:	f7fa fe39 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8006e0a:	2316      	movs	r3, #22
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e16:	2300      	movs	r3, #0
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4842      	ldr	r0, [pc, #264]	; (8006f2c <MX_GPIO_Init+0x244>)
 8006e22:	f7fa fb75 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8006e26:	f248 0307 	movw	r3, #32775	; 0x8007
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006e2c:	4b43      	ldr	r3, [pc, #268]	; (8006f3c <MX_GPIO_Init+0x254>)
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e38:	4619      	mov	r1, r3
 8006e3a:	483d      	ldr	r0, [pc, #244]	; (8006f30 <MX_GPIO_Init+0x248>)
 8006e3c:	f7fa fb68 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e44:	2301      	movs	r3, #1
 8006e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e54:	4619      	mov	r1, r3
 8006e56:	4836      	ldr	r0, [pc, #216]	; (8006f30 <MX_GPIO_Init+0x248>)
 8006e58:	f7fa fb5a 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8006e5c:	2320      	movs	r3, #32
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <MX_GPIO_Init+0x254>)
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8006e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	482f      	ldr	r0, [pc, #188]	; (8006f2c <MX_GPIO_Init+0x244>)
 8006e70:	f7fa fb4e 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006e74:	2304      	movs	r3, #4
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e84:	4619      	mov	r1, r3
 8006e86:	482e      	ldr	r0, [pc, #184]	; (8006f40 <MX_GPIO_Init+0x258>)
 8006e88:	f7fa fb42 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006e8c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e92:	2302      	movs	r3, #2
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4825      	ldr	r0, [pc, #148]	; (8006f40 <MX_GPIO_Init+0x258>)
 8006eaa:	f7fa fb31 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	481f      	ldr	r0, [pc, #124]	; (8006f40 <MX_GPIO_Init+0x258>)
 8006ec4:	f7fa fb24 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8006ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eda:	4619      	mov	r1, r3
 8006edc:	4815      	ldr	r0, [pc, #84]	; (8006f34 <MX_GPIO_Init+0x24c>)
 8006ede:	f7fa fb17 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8006ee2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ef8:	4619      	mov	r1, r3
 8006efa:	480e      	ldr	r0, [pc, #56]	; (8006f34 <MX_GPIO_Init+0x24c>)
 8006efc:	f7fa fb08 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8006f00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f06:	2301      	movs	r3, #1
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f16:	4619      	mov	r1, r3
 8006f18:	4807      	ldr	r0, [pc, #28]	; (8006f38 <MX_GPIO_Init+0x250>)
 8006f1a:	f7fa faf9 	bl	8001510 <HAL_GPIO_Init>

}
 8006f1e:	bf00      	nop
 8006f20:	3738      	adds	r7, #56	; 0x38
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	40020800 	.word	0x40020800
 8006f30:	40020000 	.word	0x40020000
 8006f34:	40020c00 	.word	0x40020c00
 8006f38:	40021800 	.word	0x40021800
 8006f3c:	10120000 	.word	0x10120000
 8006f40:	40020400 	.word	0x40020400

08006f44 <writegyro>:
#include "spi.h"
#include "gyro.h"
#include "FreeRTOS.h"
#include "task.h"

void writegyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006f44:	b084      	sub	sp, #16
 8006f46:	b580      	push	{r7, lr}
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	f107 0e08 	add.w	lr, r7, #8
 8006f4e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    taskENTER_CRITICAL();
 8006f52:	f7fe fd03 	bl	800595c <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006f56:	2200      	movs	r2, #0
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4810      	ldr	r0, [pc, #64]	; (8006f9c <writegyro+0x58>)
 8006f5c:	f7fa fd8e 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006f60:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006f64:	2332      	movs	r3, #50	; 0x32
 8006f66:	2201      	movs	r2, #1
 8006f68:	f107 0008 	add.w	r0, r7, #8
 8006f6c:	f7fd f844 	bl	8003ff8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI, &data, 1, 50);
 8006f70:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006f74:	2332      	movs	r3, #50	; 0x32
 8006f76:	2201      	movs	r2, #1
 8006f78:	f107 0008 	add.w	r0, r7, #8
 8006f7c:	f7fd f83c 	bl	8003ff8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006f80:	2201      	movs	r2, #1
 8006f82:	2102      	movs	r1, #2
 8006f84:	4805      	ldr	r0, [pc, #20]	; (8006f9c <writegyro+0x58>)
 8006f86:	f7fa fd79 	bl	8001a7c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006f8a:	f7fe fd15 	bl	80059b8 <vPortExitCritical>
}
 8006f8e:	bf00      	nop
 8006f90:	46bd      	mov	sp, r7
 8006f92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f96:	b004      	add	sp, #16
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40020800 	.word	0x40020800

08006fa0 <readgyro>:

uint8_t readgyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	f107 0e08 	add.w	lr, r7, #8
 8006faa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	address = address | 0x80;
 8006fae:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    taskENTER_CRITICAL();
 8006fbc:	f7fe fcce 	bl	800595c <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	4810      	ldr	r0, [pc, #64]	; (8007008 <readgyro+0x68>)
 8006fc6:	f7fa fd59 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006fca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006fce:	2332      	movs	r3, #50	; 0x32
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f107 0008 	add.w	r0, r7, #8
 8006fd6:	f7fd f80f 	bl	8003ff8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI, &data, 1, 50);
 8006fda:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006fde:	2332      	movs	r3, #50	; 0x32
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f107 0008 	add.w	r0, r7, #8
 8006fe6:	f7fd f939 	bl	800425c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006fea:	2201      	movs	r2, #1
 8006fec:	2102      	movs	r1, #2
 8006fee:	4806      	ldr	r0, [pc, #24]	; (8007008 <readgyro+0x68>)
 8006ff0:	f7fa fd44 	bl	8001a7c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006ff4:	f7fe fce0 	bl	80059b8 <vPortExitCritical>

	return data;
 8006ff8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007004:	b004      	add	sp, #16
 8007006:	4770      	bx	lr
 8007008:	40020800 	.word	0x40020800

0800700c <gyro_init>:

void gyro_init() {
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b095      	sub	sp, #84	; 0x54
 8007010:	af14      	add	r7, sp, #80	; 0x50
	writegyro(hspi5, 0x20, 0x0F);
 8007012:	4c13      	ldr	r4, [pc, #76]	; (8007060 <gyro_init+0x54>)
 8007014:	230f      	movs	r3, #15
 8007016:	9313      	str	r3, [sp, #76]	; 0x4c
 8007018:	2320      	movs	r3, #32
 800701a:	9312      	str	r3, [sp, #72]	; 0x48
 800701c:	4668      	mov	r0, sp
 800701e:	f104 0310 	add.w	r3, r4, #16
 8007022:	2248      	movs	r2, #72	; 0x48
 8007024:	4619      	mov	r1, r3
 8007026:	f003 fc3f 	bl	800a8a8 <memcpy>
 800702a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800702e:	f7ff ff89 	bl	8006f44 <writegyro>
	writegyro(hspi5, 0x23, 0x30);
 8007032:	4c0b      	ldr	r4, [pc, #44]	; (8007060 <gyro_init+0x54>)
 8007034:	2330      	movs	r3, #48	; 0x30
 8007036:	9313      	str	r3, [sp, #76]	; 0x4c
 8007038:	2323      	movs	r3, #35	; 0x23
 800703a:	9312      	str	r3, [sp, #72]	; 0x48
 800703c:	4668      	mov	r0, sp
 800703e:	f104 0310 	add.w	r3, r4, #16
 8007042:	2248      	movs	r2, #72	; 0x48
 8007044:	4619      	mov	r1, r3
 8007046:	f003 fc2f 	bl	800a8a8 <memcpy>
 800704a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800704e:	f7ff ff79 	bl	8006f44 <writegyro>
	HAL_Delay(100);
 8007052:	2064      	movs	r0, #100	; 0x64
 8007054:	f7f9 fed0 	bl	8000df8 <HAL_Delay>
}
 8007058:	bf00      	nop
 800705a:	3704      	adds	r7, #4
 800705c:	46bd      	mov	sp, r7
 800705e:	bd90      	pop	{r4, r7, pc}
 8007060:	200040f4 	.word	0x200040f4
 8007064:	00000000 	.word	0x00000000

08007068 <read_gyro>:

void read_gyro(int *gyrox, int *gyroy, int *gyroz) {
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b09d      	sub	sp, #116	; 0x74
 800706c:	af14      	add	r7, sp, #80	; 0x50
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
	static char datax[2] = { 0 };
	static char datay[2] = { 0 };
	static char dataz[2] = { 0 };
	float xgyro = 0;
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
	float ygyro = 0;
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	61bb      	str	r3, [r7, #24]
	float zgyro = 0;
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
	static float delta[3] = { 0 };
	static float current[3] = { 0 };
	static float time_delay = 10;

	datax[0] = readgyro(hspi5, 0x28, datax[0]);
 8007086:	4bca      	ldr	r3, [pc, #808]	; (80073b0 <read_gyro+0x348>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4cca      	ldr	r4, [pc, #808]	; (80073b4 <read_gyro+0x34c>)
 800708c:	9313      	str	r3, [sp, #76]	; 0x4c
 800708e:	2328      	movs	r3, #40	; 0x28
 8007090:	9312      	str	r3, [sp, #72]	; 0x48
 8007092:	4668      	mov	r0, sp
 8007094:	f104 0310 	add.w	r3, r4, #16
 8007098:	2248      	movs	r2, #72	; 0x48
 800709a:	4619      	mov	r1, r3
 800709c:	f003 fc04 	bl	800a8a8 <memcpy>
 80070a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070a4:	f7ff ff7c 	bl	8006fa0 <readgyro>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	4bc0      	ldr	r3, [pc, #768]	; (80073b0 <read_gyro+0x348>)
 80070ae:	701a      	strb	r2, [r3, #0]
	datax[1] = readgyro(hspi5, 0x29, datax[1]);
 80070b0:	4bbf      	ldr	r3, [pc, #764]	; (80073b0 <read_gyro+0x348>)
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	4cbf      	ldr	r4, [pc, #764]	; (80073b4 <read_gyro+0x34c>)
 80070b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80070b8:	2329      	movs	r3, #41	; 0x29
 80070ba:	9312      	str	r3, [sp, #72]	; 0x48
 80070bc:	4668      	mov	r0, sp
 80070be:	f104 0310 	add.w	r3, r4, #16
 80070c2:	2248      	movs	r2, #72	; 0x48
 80070c4:	4619      	mov	r1, r3
 80070c6:	f003 fbef 	bl	800a8a8 <memcpy>
 80070ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070ce:	f7ff ff67 	bl	8006fa0 <readgyro>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	4bb6      	ldr	r3, [pc, #728]	; (80073b0 <read_gyro+0x348>)
 80070d8:	705a      	strb	r2, [r3, #1]

	datay[0] = readgyro(hspi5, 0x2A, datay[0]);
 80070da:	4bb7      	ldr	r3, [pc, #732]	; (80073b8 <read_gyro+0x350>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	4cb5      	ldr	r4, [pc, #724]	; (80073b4 <read_gyro+0x34c>)
 80070e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80070e2:	232a      	movs	r3, #42	; 0x2a
 80070e4:	9312      	str	r3, [sp, #72]	; 0x48
 80070e6:	4668      	mov	r0, sp
 80070e8:	f104 0310 	add.w	r3, r4, #16
 80070ec:	2248      	movs	r2, #72	; 0x48
 80070ee:	4619      	mov	r1, r3
 80070f0:	f003 fbda 	bl	800a8a8 <memcpy>
 80070f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070f8:	f7ff ff52 	bl	8006fa0 <readgyro>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	4bad      	ldr	r3, [pc, #692]	; (80073b8 <read_gyro+0x350>)
 8007102:	701a      	strb	r2, [r3, #0]
	datay[1] = readgyro(hspi5, 0x2B, datay[1]);
 8007104:	4bac      	ldr	r3, [pc, #688]	; (80073b8 <read_gyro+0x350>)
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	4caa      	ldr	r4, [pc, #680]	; (80073b4 <read_gyro+0x34c>)
 800710a:	9313      	str	r3, [sp, #76]	; 0x4c
 800710c:	232b      	movs	r3, #43	; 0x2b
 800710e:	9312      	str	r3, [sp, #72]	; 0x48
 8007110:	4668      	mov	r0, sp
 8007112:	f104 0310 	add.w	r3, r4, #16
 8007116:	2248      	movs	r2, #72	; 0x48
 8007118:	4619      	mov	r1, r3
 800711a:	f003 fbc5 	bl	800a8a8 <memcpy>
 800711e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007122:	f7ff ff3d 	bl	8006fa0 <readgyro>
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	4ba3      	ldr	r3, [pc, #652]	; (80073b8 <read_gyro+0x350>)
 800712c:	705a      	strb	r2, [r3, #1]

	dataz[0] = readgyro(hspi5, 0x2C, dataz[0]);
 800712e:	4ba3      	ldr	r3, [pc, #652]	; (80073bc <read_gyro+0x354>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4ca0      	ldr	r4, [pc, #640]	; (80073b4 <read_gyro+0x34c>)
 8007134:	9313      	str	r3, [sp, #76]	; 0x4c
 8007136:	232c      	movs	r3, #44	; 0x2c
 8007138:	9312      	str	r3, [sp, #72]	; 0x48
 800713a:	4668      	mov	r0, sp
 800713c:	f104 0310 	add.w	r3, r4, #16
 8007140:	2248      	movs	r2, #72	; 0x48
 8007142:	4619      	mov	r1, r3
 8007144:	f003 fbb0 	bl	800a8a8 <memcpy>
 8007148:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800714c:	f7ff ff28 	bl	8006fa0 <readgyro>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	4b99      	ldr	r3, [pc, #612]	; (80073bc <read_gyro+0x354>)
 8007156:	701a      	strb	r2, [r3, #0]
	dataz[1] = readgyro(hspi5, 0x2D, dataz[1]);
 8007158:	4b98      	ldr	r3, [pc, #608]	; (80073bc <read_gyro+0x354>)
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	4c95      	ldr	r4, [pc, #596]	; (80073b4 <read_gyro+0x34c>)
 800715e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007160:	232d      	movs	r3, #45	; 0x2d
 8007162:	9312      	str	r3, [sp, #72]	; 0x48
 8007164:	4668      	mov	r0, sp
 8007166:	f104 0310 	add.w	r3, r4, #16
 800716a:	2248      	movs	r2, #72	; 0x48
 800716c:	4619      	mov	r1, r3
 800716e:	f003 fb9b 	bl	800a8a8 <memcpy>
 8007172:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007176:	f7ff ff13 	bl	8006fa0 <readgyro>
 800717a:	4603      	mov	r3, r0
 800717c:	461a      	mov	r2, r3
 800717e:	4b8f      	ldr	r3, [pc, #572]	; (80073bc <read_gyro+0x354>)
 8007180:	705a      	strb	r2, [r3, #1]

	xgyro = datax[1] * 256 + datax[0];
 8007182:	4b8b      	ldr	r3, [pc, #556]	; (80073b0 <read_gyro+0x348>)
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	4a89      	ldr	r2, [pc, #548]	; (80073b0 <read_gyro+0x348>)
 800718a:	7812      	ldrb	r2, [r2, #0]
 800718c:	4413      	add	r3, r2
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007196:	edc7 7a07 	vstr	s15, [r7, #28]
	if (xgyro > 32767) {
 800719a:	edd7 7a07 	vldr	s15, [r7, #28]
 800719e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80073c0 <read_gyro+0x358>
 80071a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	dd07      	ble.n	80071bc <read_gyro+0x154>
		xgyro -= 65536;
 80071ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80071b0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80073c4 <read_gyro+0x35c>
 80071b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071b8:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	ygyro = datay[1] * 256 + datay[0];
 80071bc:	4b7e      	ldr	r3, [pc, #504]	; (80073b8 <read_gyro+0x350>)
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	4a7d      	ldr	r2, [pc, #500]	; (80073b8 <read_gyro+0x350>)
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	4413      	add	r3, r2
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071d0:	edc7 7a06 	vstr	s15, [r7, #24]
	if (ygyro > 32767) {
 80071d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80071d8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80073c0 <read_gyro+0x358>
 80071dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	dd07      	ble.n	80071f6 <read_gyro+0x18e>
		ygyro -= 65536;
 80071e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80071ea:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80073c4 <read_gyro+0x35c>
 80071ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071f2:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	zgyro = dataz[1] * 256 + dataz[0];
 80071f6:	4b71      	ldr	r3, [pc, #452]	; (80073bc <read_gyro+0x354>)
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	4a6f      	ldr	r2, [pc, #444]	; (80073bc <read_gyro+0x354>)
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	4413      	add	r3, r2
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800720a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (zgyro > 32767) {
 800720e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007212:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80073c0 <read_gyro+0x358>
 8007216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721e:	dd07      	ble.n	8007230 <read_gyro+0x1c8>
		zgyro -= 65536;
 8007220:	edd7 7a05 	vldr	s15, [r7, #20]
 8007224:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80073c4 <read_gyro+0x35c>
 8007228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800722c:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	xgyro -= 29;
 8007230:	edd7 7a07 	vldr	s15, [r7, #28]
 8007234:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8007238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800723c:	edc7 7a07 	vstr	s15, [r7, #28]
	ygyro -= 8;
 8007240:	edd7 7a06 	vldr	s15, [r7, #24]
 8007244:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800724c:	edc7 7a06 	vstr	s15, [r7, #24]
	zgyro += 12;
 8007250:	edd7 7a05 	vldr	s15, [r7, #20]
 8007254:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8007258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800725c:	edc7 7a05 	vstr	s15, [r7, #20]
	xgyro *= 0.07;
 8007260:	69f8      	ldr	r0, [r7, #28]
 8007262:	f7f9 f929 	bl	80004b8 <__aeabi_f2d>
 8007266:	a350      	add	r3, pc, #320	; (adr r3, 80073a8 <read_gyro+0x340>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f978 	bl	8000560 <__aeabi_dmul>
 8007270:	4603      	mov	r3, r0
 8007272:	460c      	mov	r4, r1
 8007274:	4618      	mov	r0, r3
 8007276:	4621      	mov	r1, r4
 8007278:	f7f9 fba4 	bl	80009c4 <__aeabi_d2f>
 800727c:	4603      	mov	r3, r0
 800727e:	61fb      	str	r3, [r7, #28]
	ygyro *= 0.07;
 8007280:	69b8      	ldr	r0, [r7, #24]
 8007282:	f7f9 f919 	bl	80004b8 <__aeabi_f2d>
 8007286:	a348      	add	r3, pc, #288	; (adr r3, 80073a8 <read_gyro+0x340>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f9 f968 	bl	8000560 <__aeabi_dmul>
 8007290:	4603      	mov	r3, r0
 8007292:	460c      	mov	r4, r1
 8007294:	4618      	mov	r0, r3
 8007296:	4621      	mov	r1, r4
 8007298:	f7f9 fb94 	bl	80009c4 <__aeabi_d2f>
 800729c:	4603      	mov	r3, r0
 800729e:	61bb      	str	r3, [r7, #24]
	zgyro *= 0.07;
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f7f9 f909 	bl	80004b8 <__aeabi_f2d>
 80072a6:	a340      	add	r3, pc, #256	; (adr r3, 80073a8 <read_gyro+0x340>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f9 f958 	bl	8000560 <__aeabi_dmul>
 80072b0:	4603      	mov	r3, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	4618      	mov	r0, r3
 80072b6:	4621      	mov	r1, r4
 80072b8:	f7f9 fb84 	bl	80009c4 <__aeabi_d2f>
 80072bc:	4603      	mov	r3, r0
 80072be:	617b      	str	r3, [r7, #20]

	delta[0] = xgyro * (time_delay);
 80072c0:	4b41      	ldr	r3, [pc, #260]	; (80073c8 <read_gyro+0x360>)
 80072c2:	ed93 7a00 	vldr	s14, [r3]
 80072c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	4b3f      	ldr	r3, [pc, #252]	; (80073cc <read_gyro+0x364>)
 80072d0:	edc3 7a00 	vstr	s15, [r3]
	current[0] += delta[0];
 80072d4:	4b3e      	ldr	r3, [pc, #248]	; (80073d0 <read_gyro+0x368>)
 80072d6:	ed93 7a00 	vldr	s14, [r3]
 80072da:	4b3c      	ldr	r3, [pc, #240]	; (80073cc <read_gyro+0x364>)
 80072dc:	edd3 7a00 	vldr	s15, [r3]
 80072e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072e4:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <read_gyro+0x368>)
 80072e6:	edc3 7a00 	vstr	s15, [r3]

	delta[1] = ygyro * (time_delay);
 80072ea:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <read_gyro+0x360>)
 80072ec:	ed93 7a00 	vldr	s14, [r3]
 80072f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80072f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f8:	4b34      	ldr	r3, [pc, #208]	; (80073cc <read_gyro+0x364>)
 80072fa:	edc3 7a01 	vstr	s15, [r3, #4]
	current[1] += delta[1];
 80072fe:	4b34      	ldr	r3, [pc, #208]	; (80073d0 <read_gyro+0x368>)
 8007300:	ed93 7a01 	vldr	s14, [r3, #4]
 8007304:	4b31      	ldr	r3, [pc, #196]	; (80073cc <read_gyro+0x364>)
 8007306:	edd3 7a01 	vldr	s15, [r3, #4]
 800730a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800730e:	4b30      	ldr	r3, [pc, #192]	; (80073d0 <read_gyro+0x368>)
 8007310:	edc3 7a01 	vstr	s15, [r3, #4]

	delta[2] = zgyro * (time_delay);
 8007314:	4b2c      	ldr	r3, [pc, #176]	; (80073c8 <read_gyro+0x360>)
 8007316:	ed93 7a00 	vldr	s14, [r3]
 800731a:	edd7 7a05 	vldr	s15, [r7, #20]
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <read_gyro+0x364>)
 8007324:	edc3 7a02 	vstr	s15, [r3, #8]
	current[2] += delta[2];
 8007328:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <read_gyro+0x368>)
 800732a:	ed93 7a02 	vldr	s14, [r3, #8]
 800732e:	4b27      	ldr	r3, [pc, #156]	; (80073cc <read_gyro+0x364>)
 8007330:	edd3 7a02 	vldr	s15, [r3, #8]
 8007334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <read_gyro+0x368>)
 800733a:	edc3 7a02 	vstr	s15, [r3, #8]

	*gyrox = ((int) current[0])/182/6;
 800733e:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <read_gyro+0x368>)
 8007340:	edd3 7a00 	vldr	s15, [r3]
 8007344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007348:	ee17 3a90 	vmov	r3, s15
 800734c:	4a21      	ldr	r2, [pc, #132]	; (80073d4 <read_gyro+0x36c>)
 800734e:	fb82 1203 	smull	r1, r2, r2, r3
 8007352:	441a      	add	r2, r3
 8007354:	1292      	asrs	r2, r2, #10
 8007356:	17db      	asrs	r3, r3, #31
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	601a      	str	r2, [r3, #0]
	*gyroy = ((int) current[1])/182/6;
 800735e:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <read_gyro+0x368>)
 8007360:	edd3 7a01 	vldr	s15, [r3, #4]
 8007364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007368:	ee17 3a90 	vmov	r3, s15
 800736c:	4a19      	ldr	r2, [pc, #100]	; (80073d4 <read_gyro+0x36c>)
 800736e:	fb82 1203 	smull	r1, r2, r2, r3
 8007372:	441a      	add	r2, r3
 8007374:	1292      	asrs	r2, r2, #10
 8007376:	17db      	asrs	r3, r3, #31
 8007378:	1ad2      	subs	r2, r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	601a      	str	r2, [r3, #0]
	*gyroz = ((int) current[2])/182/6;
 800737e:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <read_gyro+0x368>)
 8007380:	edd3 7a02 	vldr	s15, [r3, #8]
 8007384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007388:	ee17 3a90 	vmov	r3, s15
 800738c:	4a11      	ldr	r2, [pc, #68]	; (80073d4 <read_gyro+0x36c>)
 800738e:	fb82 1203 	smull	r1, r2, r2, r3
 8007392:	441a      	add	r2, r3
 8007394:	1292      	asrs	r2, r2, #10
 8007396:	17db      	asrs	r3, r3, #31
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
}
 800739e:	bf00      	nop
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	1eb851ec 	.word	0x1eb851ec
 80073ac:	3fb1eb85 	.word	0x3fb1eb85
 80073b0:	20003e30 	.word	0x20003e30
 80073b4:	200040f4 	.word	0x200040f4
 80073b8:	20003e34 	.word	0x20003e34
 80073bc:	20003e38 	.word	0x20003e38
 80073c0:	46fffe00 	.word	0x46fffe00
 80073c4:	47800000 	.word	0x47800000
 80073c8:	20000018 	.word	0x20000018
 80073cc:	20003e3c 	.word	0x20003e3c
 80073d0:	20003e48 	.word	0x20003e48
 80073d4:	f00f00f1 	.word	0xf00f00f1

080073d8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <MX_I2C3_Init+0x74>)
 80073de:	4a1c      	ldr	r2, [pc, #112]	; (8007450 <MX_I2C3_Init+0x78>)
 80073e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80073e2:	4b1a      	ldr	r3, [pc, #104]	; (800744c <MX_I2C3_Init+0x74>)
 80073e4:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <MX_I2C3_Init+0x7c>)
 80073e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80073e8:	4b18      	ldr	r3, [pc, #96]	; (800744c <MX_I2C3_Init+0x74>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80073ee:	4b17      	ldr	r3, [pc, #92]	; (800744c <MX_I2C3_Init+0x74>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80073f4:	4b15      	ldr	r3, [pc, #84]	; (800744c <MX_I2C3_Init+0x74>)
 80073f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80073fc:	4b13      	ldr	r3, [pc, #76]	; (800744c <MX_I2C3_Init+0x74>)
 80073fe:	2200      	movs	r2, #0
 8007400:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <MX_I2C3_Init+0x74>)
 8007404:	2200      	movs	r2, #0
 8007406:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <MX_I2C3_Init+0x74>)
 800740a:	2200      	movs	r2, #0
 800740c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <MX_I2C3_Init+0x74>)
 8007410:	2200      	movs	r2, #0
 8007412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007414:	480d      	ldr	r0, [pc, #52]	; (800744c <MX_I2C3_Init+0x74>)
 8007416:	f7fa fb65 	bl	8001ae4 <HAL_I2C_Init>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007420:	f001 fa30 	bl	8008884 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007424:	2100      	movs	r1, #0
 8007426:	4809      	ldr	r0, [pc, #36]	; (800744c <MX_I2C3_Init+0x74>)
 8007428:	f7fb fb17 	bl	8002a5a <HAL_I2CEx_ConfigAnalogFilter>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8007432:	f001 fa27 	bl	8008884 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007436:	2100      	movs	r1, #0
 8007438:	4804      	ldr	r0, [pc, #16]	; (800744c <MX_I2C3_Init+0x74>)
 800743a:	f7fb fb4a 	bl	8002ad2 <HAL_I2CEx_ConfigDigitalFilter>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007444:	f001 fa1e 	bl	8008884 <Error_Handler>
  }

}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20003fa8 	.word	0x20003fa8
 8007450:	40005c00 	.word	0x40005c00
 8007454:	000186a0 	.word	0x000186a0

08007458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <HAL_I2C_MspInit+0xc4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d14b      	bne.n	8007512 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	4a28      	ldr	r2, [pc, #160]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	f043 0304 	orr.w	r3, r3, #4
 8007488:	6313      	str	r3, [r2, #48]	; 0x30
 800748a:	4b25      	ldr	r3, [pc, #148]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f003 0304 	and.w	r3, r3, #4
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	4a21      	ldr	r2, [pc, #132]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 800749c:	4b20      	ldr	r3, [pc, #128]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	6313      	str	r3, [r2, #48]	; 0x30
 80074a6:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074b8:	2312      	movs	r3, #18
 80074ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074bc:	2301      	movs	r3, #1
 80074be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074c0:	2300      	movs	r3, #0
 80074c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80074c4:	2304      	movs	r3, #4
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80074c8:	f107 0314 	add.w	r3, r7, #20
 80074cc:	4619      	mov	r1, r3
 80074ce:	4815      	ldr	r0, [pc, #84]	; (8007524 <HAL_I2C_MspInit+0xcc>)
 80074d0:	f7fa f81e 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80074d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074da:	2312      	movs	r3, #18
 80074dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074de:	2301      	movs	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e2:	2300      	movs	r3, #0
 80074e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80074e6:	2304      	movs	r3, #4
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4619      	mov	r1, r3
 80074f0:	480d      	ldr	r0, [pc, #52]	; (8007528 <HAL_I2C_MspInit+0xd0>)
 80074f2:	f7fa f80d 	bl	8001510 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80074f6:	2300      	movs	r3, #0
 80074f8:	60bb      	str	r3, [r7, #8]
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007504:	6413      	str	r3, [r2, #64]	; 0x40
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <HAL_I2C_MspInit+0xc8>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007512:	bf00      	nop
 8007514:	3728      	adds	r7, #40	; 0x28
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40005c00 	.word	0x40005c00
 8007520:	40023800 	.word	0x40023800
 8007524:	40020800 	.word	0x40020800
 8007528:	40020000 	.word	0x40020000

0800752c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <HAL_I2C_MspDeInit+0x3c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d10f      	bne.n	800755e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800753e:	4a0b      	ldr	r2, [pc, #44]	; (800756c <HAL_I2C_MspDeInit+0x40>)
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <HAL_I2C_MspDeInit+0x40>)
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007548:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800754a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800754e:	4808      	ldr	r0, [pc, #32]	; (8007570 <HAL_I2C_MspDeInit+0x44>)
 8007550:	f7fa f988 	bl	8001864 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8007554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007558:	4806      	ldr	r0, [pc, #24]	; (8007574 <HAL_I2C_MspDeInit+0x48>)
 800755a:	f7fa f983 	bl	8001864 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40005c00 	.word	0x40005c00
 800756c:	40023800 	.word	0x40023800
 8007570:	40020800 	.word	0x40020800
 8007574:	40020000 	.word	0x40020000

08007578 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800757c:	f001 fc4e 	bl	8008e1c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8007580:	20ca      	movs	r0, #202	; 0xca
 8007582:	f000 f95d 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8007586:	20c3      	movs	r0, #195	; 0xc3
 8007588:	f000 f967 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800758c:	2008      	movs	r0, #8
 800758e:	f000 f964 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8007592:	2050      	movs	r0, #80	; 0x50
 8007594:	f000 f961 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8007598:	20cf      	movs	r0, #207	; 0xcf
 800759a:	f000 f951 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800759e:	2000      	movs	r0, #0
 80075a0:	f000 f95b 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80075a4:	20c1      	movs	r0, #193	; 0xc1
 80075a6:	f000 f958 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80075aa:	2030      	movs	r0, #48	; 0x30
 80075ac:	f000 f955 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80075b0:	20ed      	movs	r0, #237	; 0xed
 80075b2:	f000 f945 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80075b6:	2064      	movs	r0, #100	; 0x64
 80075b8:	f000 f94f 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80075bc:	2003      	movs	r0, #3
 80075be:	f000 f94c 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80075c2:	2012      	movs	r0, #18
 80075c4:	f000 f949 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80075c8:	2081      	movs	r0, #129	; 0x81
 80075ca:	f000 f946 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80075ce:	20e8      	movs	r0, #232	; 0xe8
 80075d0:	f000 f936 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80075d4:	2085      	movs	r0, #133	; 0x85
 80075d6:	f000 f940 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80075da:	2000      	movs	r0, #0
 80075dc:	f000 f93d 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80075e0:	2078      	movs	r0, #120	; 0x78
 80075e2:	f000 f93a 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80075e6:	20cb      	movs	r0, #203	; 0xcb
 80075e8:	f000 f92a 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80075ec:	2039      	movs	r0, #57	; 0x39
 80075ee:	f000 f934 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80075f2:	202c      	movs	r0, #44	; 0x2c
 80075f4:	f000 f931 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80075f8:	2000      	movs	r0, #0
 80075fa:	f000 f92e 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80075fe:	2034      	movs	r0, #52	; 0x34
 8007600:	f000 f92b 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8007604:	2002      	movs	r0, #2
 8007606:	f000 f928 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800760a:	20f7      	movs	r0, #247	; 0xf7
 800760c:	f000 f918 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8007610:	2020      	movs	r0, #32
 8007612:	f000 f922 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8007616:	20ea      	movs	r0, #234	; 0xea
 8007618:	f000 f912 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800761c:	2000      	movs	r0, #0
 800761e:	f000 f91c 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007622:	2000      	movs	r0, #0
 8007624:	f000 f919 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8007628:	20b1      	movs	r0, #177	; 0xb1
 800762a:	f000 f909 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800762e:	2000      	movs	r0, #0
 8007630:	f000 f913 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8007634:	201b      	movs	r0, #27
 8007636:	f000 f910 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800763a:	20b6      	movs	r0, #182	; 0xb6
 800763c:	f000 f900 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8007640:	200a      	movs	r0, #10
 8007642:	f000 f90a 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8007646:	20a2      	movs	r0, #162	; 0xa2
 8007648:	f000 f907 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800764c:	20c0      	movs	r0, #192	; 0xc0
 800764e:	f000 f8f7 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8007652:	2010      	movs	r0, #16
 8007654:	f000 f901 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8007658:	20c1      	movs	r0, #193	; 0xc1
 800765a:	f000 f8f1 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800765e:	2010      	movs	r0, #16
 8007660:	f000 f8fb 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8007664:	20c5      	movs	r0, #197	; 0xc5
 8007666:	f000 f8eb 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800766a:	2045      	movs	r0, #69	; 0x45
 800766c:	f000 f8f5 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8007670:	2015      	movs	r0, #21
 8007672:	f000 f8f2 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8007676:	20c7      	movs	r0, #199	; 0xc7
 8007678:	f000 f8e2 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800767c:	2090      	movs	r0, #144	; 0x90
 800767e:	f000 f8ec 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8007682:	2036      	movs	r0, #54	; 0x36
 8007684:	f000 f8dc 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8007688:	20c8      	movs	r0, #200	; 0xc8
 800768a:	f000 f8e6 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800768e:	20f2      	movs	r0, #242	; 0xf2
 8007690:	f000 f8d6 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007694:	2000      	movs	r0, #0
 8007696:	f000 f8e0 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800769a:	20b0      	movs	r0, #176	; 0xb0
 800769c:	f000 f8d0 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80076a0:	20c2      	movs	r0, #194	; 0xc2
 80076a2:	f000 f8da 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80076a6:	20b6      	movs	r0, #182	; 0xb6
 80076a8:	f000 f8ca 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80076ac:	200a      	movs	r0, #10
 80076ae:	f000 f8d4 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80076b2:	20a7      	movs	r0, #167	; 0xa7
 80076b4:	f000 f8d1 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80076b8:	2027      	movs	r0, #39	; 0x27
 80076ba:	f000 f8ce 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80076be:	2004      	movs	r0, #4
 80076c0:	f000 f8cb 	bl	800785a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80076c4:	202a      	movs	r0, #42	; 0x2a
 80076c6:	f000 f8bb 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80076ca:	2000      	movs	r0, #0
 80076cc:	f000 f8c5 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80076d0:	2000      	movs	r0, #0
 80076d2:	f000 f8c2 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80076d6:	2000      	movs	r0, #0
 80076d8:	f000 f8bf 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80076dc:	20ef      	movs	r0, #239	; 0xef
 80076de:	f000 f8bc 	bl	800785a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80076e2:	202b      	movs	r0, #43	; 0x2b
 80076e4:	f000 f8ac 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80076e8:	2000      	movs	r0, #0
 80076ea:	f000 f8b6 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80076ee:	2000      	movs	r0, #0
 80076f0:	f000 f8b3 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80076f4:	2001      	movs	r0, #1
 80076f6:	f000 f8b0 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80076fa:	203f      	movs	r0, #63	; 0x3f
 80076fc:	f000 f8ad 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8007700:	20f6      	movs	r0, #246	; 0xf6
 8007702:	f000 f89d 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007706:	2001      	movs	r0, #1
 8007708:	f000 f8a7 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800770c:	2000      	movs	r0, #0
 800770e:	f000 f8a4 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8007712:	2006      	movs	r0, #6
 8007714:	f000 f8a1 	bl	800785a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8007718:	202c      	movs	r0, #44	; 0x2c
 800771a:	f000 f891 	bl	8007840 <ili9341_WriteReg>
  LCD_Delay(200);
 800771e:	20c8      	movs	r0, #200	; 0xc8
 8007720:	f001 fc6a 	bl	8008ff8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8007724:	2026      	movs	r0, #38	; 0x26
 8007726:	f000 f88b 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800772a:	2001      	movs	r0, #1
 800772c:	f000 f895 	bl	800785a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8007730:	20e0      	movs	r0, #224	; 0xe0
 8007732:	f000 f885 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8007736:	200f      	movs	r0, #15
 8007738:	f000 f88f 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800773c:	2029      	movs	r0, #41	; 0x29
 800773e:	f000 f88c 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8007742:	2024      	movs	r0, #36	; 0x24
 8007744:	f000 f889 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007748:	200c      	movs	r0, #12
 800774a:	f000 f886 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800774e:	200e      	movs	r0, #14
 8007750:	f000 f883 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8007754:	2009      	movs	r0, #9
 8007756:	f000 f880 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800775a:	204e      	movs	r0, #78	; 0x4e
 800775c:	f000 f87d 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007760:	2078      	movs	r0, #120	; 0x78
 8007762:	f000 f87a 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8007766:	203c      	movs	r0, #60	; 0x3c
 8007768:	f000 f877 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800776c:	2009      	movs	r0, #9
 800776e:	f000 f874 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8007772:	2013      	movs	r0, #19
 8007774:	f000 f871 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007778:	2005      	movs	r0, #5
 800777a:	f000 f86e 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800777e:	2017      	movs	r0, #23
 8007780:	f000 f86b 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007784:	2011      	movs	r0, #17
 8007786:	f000 f868 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800778a:	2000      	movs	r0, #0
 800778c:	f000 f865 	bl	800785a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8007790:	20e1      	movs	r0, #225	; 0xe1
 8007792:	f000 f855 	bl	8007840 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007796:	2000      	movs	r0, #0
 8007798:	f000 f85f 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800779c:	2016      	movs	r0, #22
 800779e:	f000 f85c 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80077a2:	201b      	movs	r0, #27
 80077a4:	f000 f859 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80077a8:	2004      	movs	r0, #4
 80077aa:	f000 f856 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80077ae:	2011      	movs	r0, #17
 80077b0:	f000 f853 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80077b4:	2007      	movs	r0, #7
 80077b6:	f000 f850 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80077ba:	2031      	movs	r0, #49	; 0x31
 80077bc:	f000 f84d 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80077c0:	2033      	movs	r0, #51	; 0x33
 80077c2:	f000 f84a 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80077c6:	2042      	movs	r0, #66	; 0x42
 80077c8:	f000 f847 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80077cc:	2005      	movs	r0, #5
 80077ce:	f000 f844 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80077d2:	200c      	movs	r0, #12
 80077d4:	f000 f841 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80077d8:	200a      	movs	r0, #10
 80077da:	f000 f83e 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80077de:	2028      	movs	r0, #40	; 0x28
 80077e0:	f000 f83b 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80077e4:	202f      	movs	r0, #47	; 0x2f
 80077e6:	f000 f838 	bl	800785a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80077ea:	200f      	movs	r0, #15
 80077ec:	f000 f835 	bl	800785a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80077f0:	2011      	movs	r0, #17
 80077f2:	f000 f825 	bl	8007840 <ili9341_WriteReg>
  LCD_Delay(200);
 80077f6:	20c8      	movs	r0, #200	; 0xc8
 80077f8:	f001 fbfe 	bl	8008ff8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80077fc:	2029      	movs	r0, #41	; 0x29
 80077fe:	f000 f81f 	bl	8007840 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8007802:	202c      	movs	r0, #44	; 0x2c
 8007804:	f000 f81c 	bl	8007840 <ili9341_WriteReg>
}
 8007808:	bf00      	nop
 800780a:	bd80      	pop	{r7, pc}

0800780c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8007810:	f001 fb04 	bl	8008e1c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8007814:	2103      	movs	r1, #3
 8007816:	20d3      	movs	r0, #211	; 0xd3
 8007818:	f000 f82c 	bl	8007874 <ili9341_ReadData>
 800781c:	4603      	mov	r3, r0
 800781e:	b29b      	uxth	r3, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}

08007824 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007828:	2029      	movs	r0, #41	; 0x29
 800782a:	f000 f809 	bl	8007840 <ili9341_WriteReg>
}
 800782e:	bf00      	nop
 8007830:	bd80      	pop	{r7, pc}

08007832 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8007836:	2028      	movs	r0, #40	; 0x28
 8007838:	f000 f802 	bl	8007840 <ili9341_WriteReg>
}
 800783c:	bf00      	nop
 800783e:	bd80      	pop	{r7, pc}

08007840 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	4618      	mov	r0, r3
 800784e:	f001 fb7f 	bl	8008f50 <LCD_IO_WriteReg>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	4603      	mov	r3, r0
 8007862:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fb50 	bl	8008f0c <LCD_IO_WriteData>
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	460a      	mov	r2, r1
 800787e:	80fb      	strh	r3, [r7, #6]
 8007880:	4613      	mov	r3, r2
 8007882:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8007884:	797a      	ldrb	r2, [r7, #5]
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fb82 	bl	8008f94 <LCD_IO_ReadData>
 8007890:	4603      	mov	r3, r0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800789e:	23f0      	movs	r3, #240	; 0xf0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80078aa:	b480      	push	{r7}
 80078ac:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80078ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <initMenu>:
 */
extern int x;
extern int y;
extern int z;

void initMenu(TS_StateTypeDef* str, globalClass* globalClassHandler) {
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	localstr = str;
 80078c6:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <initMenu+0x24>)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6013      	str	r3, [r2, #0]
	localClassHandler = globalClassHandler;
 80078cc:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <initMenu+0x28>)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6013      	str	r3, [r2, #0]
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20003ffc 	.word	0x20003ffc
 80078e4:	20004000 	.word	0x20004000

080078e8 <screenRefresh>:

void screenRefresh(void) {
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
	BSP_LCD_SelectLayer(1);
 80078ec:	2001      	movs	r0, #1
 80078ee:	f001 fc91 	bl	8009214 <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80078f2:	4808      	ldr	r0, [pc, #32]	; (8007914 <screenRefresh+0x2c>)
 80078f4:	f001 fcd0 	bl	8009298 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	f001 fcb2 	bl	8009264 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	f001 fce2 	bl	80092cc <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font24);
 8007908:	4802      	ldr	r0, [pc, #8]	; (8007914 <screenRefresh+0x2c>)
 800790a:	f001 fcc5 	bl	8009298 <BSP_LCD_SetFont>
}
 800790e:	bf00      	nop
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000010 	.word	0x20000010

08007918 <DrawButton>:

void DrawButton(char* text, uint8_t line_number) {
 8007918:	b590      	push	{r4, r7, lr}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007924:	4813      	ldr	r0, [pc, #76]	; (8007974 <DrawButton+0x5c>)
 8007926:	f001 fc85 	bl	8009234 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(20, line_number, BSP_LCD_GetXSize()-40, 44);
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	b29c      	uxth	r4, r3
 800792e:	f001 fbf3 	bl	8009118 <BSP_LCD_GetXSize>
 8007932:	4603      	mov	r3, r0
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b28      	subs	r3, #40	; 0x28
 8007938:	b29a      	uxth	r2, r3
 800793a:	232c      	movs	r3, #44	; 0x2c
 800793c:	4621      	mov	r1, r4
 800793e:	2014      	movs	r0, #20
 8007940:	f001 ffe6 	bl	8009910 <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8007944:	480b      	ldr	r0, [pc, #44]	; (8007974 <DrawButton+0x5c>)
 8007946:	f001 fc8d 	bl	8009264 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	f001 fc71 	bl	8009234 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8007952:	4809      	ldr	r0, [pc, #36]	; (8007978 <DrawButton+0x60>)
 8007954:	f001 fca0 	bl	8009298 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, line_number + 14, (uint8_t*)text,
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	b29b      	uxth	r3, r3
 800795c:	330e      	adds	r3, #14
 800795e:	b299      	uxth	r1, r3
 8007960:	2301      	movs	r3, #1
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	2000      	movs	r0, #0
 8007966:	f001 fd1f 	bl	80093a8 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	bd90      	pop	{r4, r7, pc}
 8007972:	bf00      	nop
 8007974:	ff000080 	.word	0xff000080
 8007978:	20000008 	.word	0x20000008

0800797c <Display>:

void Display(void) {
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
	if (page == 0) Display_Intro();
 8007980:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <Display+0x44>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <Display+0x10>
 8007988:	f000 f83a 	bl	8007a00 <Display_Intro>
	if (page == 1) Display_Menu();
 800798c:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <Display+0x44>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <Display+0x1c>
 8007994:	f000 f956 	bl	8007c44 <Display_Menu>
	if (page == 2) Display_Start();
 8007998:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <Display+0x44>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d101      	bne.n	80079a4 <Display+0x28>
 80079a0:	f000 fa60 	bl	8007e64 <Display_Start>
	if (page == 3) Display_Odczyty();
 80079a4:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <Display+0x44>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d101      	bne.n	80079b0 <Display+0x34>
 80079ac:	f000 fadc 	bl	8007f68 <Display_Odczyty>
	if (page == 4) Display_Onas();
 80079b0:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <Display+0x44>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d101      	bne.n	80079bc <Display+0x40>
 80079b8:	f000 fb88 	bl	80080cc <Display_Onas>
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20003e5c 	.word	0x20003e5c

080079c4 <Service>:

void Service(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
	if (page == 1) menuService();
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <Service+0x38>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <Service+0x10>
 80079d0:	f000 fbba 	bl	8008148 <menuService>
	if (page == 2) startService();
 80079d4:	4b09      	ldr	r3, [pc, #36]	; (80079fc <Service+0x38>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d101      	bne.n	80079e0 <Service+0x1c>
 80079dc:	f000 fc06 	bl	80081ec <startService>
	if (page == 3) odczytyService();
 80079e0:	4b06      	ldr	r3, [pc, #24]	; (80079fc <Service+0x38>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d101      	bne.n	80079ec <Service+0x28>
 80079e8:	f000 fc24 	bl	8008234 <odczytyService>
	if (page == 4) onasService();
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <Service+0x38>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d101      	bne.n	80079f8 <Service+0x34>
 80079f4:	f000 fc46 	bl	8008284 <onasService>
}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20003e5c 	.word	0x20003e5c

08007a00 <Display_Intro>:

void Display_Intro(void) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
	if(switchingINTRO_flag == 0) {
 8007a06:	4b89      	ldr	r3, [pc, #548]	; (8007c2c <Display_Intro+0x22c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f040 810a 	bne.w	8007c24 <Display_Intro+0x224>
		switchingINTRO_flag = 1;
 8007a10:	4b86      	ldr	r3, [pc, #536]	; (8007c2c <Display_Intro+0x22c>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007a16:	f7ff ff67 	bl	80078e8 <screenRefresh>
		int waitTime = 500;
 8007a1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007a1e:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007a20:	4883      	ldr	r0, [pc, #524]	; (8007c30 <Display_Intro+0x230>)
 8007a22:	f001 fc07 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	f001 fc1b 	bl	8009264 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4a80      	ldr	r2, [pc, #512]	; (8007c34 <Display_Intro+0x234>)
 8007a32:	2150      	movs	r1, #80	; 0x50
 8007a34:	2000      	movs	r0, #0
 8007a36:	f001 fcb7 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 110, (uint8_t*)"GAME", CENTER_MODE);
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4a7e      	ldr	r2, [pc, #504]	; (8007c38 <Display_Intro+0x238>)
 8007a3e:	216e      	movs	r1, #110	; 0x6e
 8007a40:	2000      	movs	r0, #0
 8007a42:	f001 fcb1 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007a46:	487a      	ldr	r0, [pc, #488]	; (8007c30 <Display_Intro+0x230>)
 8007a48:	f001 fbf4 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 8007a4c:	2314      	movs	r3, #20
 8007a4e:	2214      	movs	r2, #20
 8007a50:	2196      	movs	r1, #150	; 0x96
 8007a52:	2050      	movs	r0, #80	; 0x50
 8007a54:	f001 ff5c 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 180, 20, 20);
 8007a58:	2314      	movs	r3, #20
 8007a5a:	2214      	movs	r2, #20
 8007a5c:	21b4      	movs	r1, #180	; 0xb4
 8007a5e:	2050      	movs	r0, #80	; 0x50
 8007a60:	f001 ff56 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 210, 20, 20);
 8007a64:	2314      	movs	r3, #20
 8007a66:	2214      	movs	r2, #20
 8007a68:	21d2      	movs	r1, #210	; 0xd2
 8007a6a:	2050      	movs	r0, #80	; 0x50
 8007a6c:	f001 ff50 	bl	8009910 <BSP_LCD_FillRect>

		BSP_LCD_FillRect(110, 150, 20, 20);
 8007a70:	2314      	movs	r3, #20
 8007a72:	2214      	movs	r2, #20
 8007a74:	2196      	movs	r1, #150	; 0x96
 8007a76:	206e      	movs	r0, #110	; 0x6e
 8007a78:	f001 ff4a 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 180, 20, 20);
 8007a7c:	2314      	movs	r3, #20
 8007a7e:	2214      	movs	r2, #20
 8007a80:	21b4      	movs	r1, #180	; 0xb4
 8007a82:	206e      	movs	r0, #110	; 0x6e
 8007a84:	f001 ff44 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 210, 20, 20);
 8007a88:	2314      	movs	r3, #20
 8007a8a:	2214      	movs	r2, #20
 8007a8c:	21d2      	movs	r1, #210	; 0xd2
 8007a8e:	206e      	movs	r0, #110	; 0x6e
 8007a90:	f001 ff3e 	bl	8009910 <BSP_LCD_FillRect>

		BSP_LCD_FillRect(140, 150, 20, 20);
 8007a94:	2314      	movs	r3, #20
 8007a96:	2214      	movs	r2, #20
 8007a98:	2196      	movs	r1, #150	; 0x96
 8007a9a:	208c      	movs	r0, #140	; 0x8c
 8007a9c:	f001 ff38 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007aa0:	2314      	movs	r3, #20
 8007aa2:	2214      	movs	r2, #20
 8007aa4:	21b4      	movs	r1, #180	; 0xb4
 8007aa6:	208c      	movs	r0, #140	; 0x8c
 8007aa8:	f001 ff32 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007aac:	2314      	movs	r3, #20
 8007aae:	2214      	movs	r2, #20
 8007ab0:	21d2      	movs	r1, #210	; 0xd2
 8007ab2:	208c      	movs	r0, #140	; 0x8c
 8007ab4:	f001 ff2c 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8007ab8:	485d      	ldr	r0, [pc, #372]	; (8007c30 <Display_Intro+0x230>)
 8007aba:	f001 fbd3 	bl	8009264 <BSP_LCD_SetBackColor>
		//Loading module
		HAL_Delay(waitTime);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7f9 f999 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ac6:	485d      	ldr	r0, [pc, #372]	; (8007c3c <Display_Intro+0x23c>)
 8007ac8:	f001 fbb4 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 8007acc:	2314      	movs	r3, #20
 8007ace:	2214      	movs	r2, #20
 8007ad0:	2196      	movs	r1, #150	; 0x96
 8007ad2:	2050      	movs	r0, #80	; 0x50
 8007ad4:	f001 ff1c 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007ad8:	4858      	ldr	r0, [pc, #352]	; (8007c3c <Display_Intro+0x23c>)
 8007ada:	f001 fbc3 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 f989 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ae6:	4855      	ldr	r0, [pc, #340]	; (8007c3c <Display_Intro+0x23c>)
 8007ae8:	f001 fba4 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 180, 20, 20);
 8007aec:	2314      	movs	r3, #20
 8007aee:	2214      	movs	r2, #20
 8007af0:	21b4      	movs	r1, #180	; 0xb4
 8007af2:	2050      	movs	r0, #80	; 0x50
 8007af4:	f001 ff0c 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007af8:	4850      	ldr	r0, [pc, #320]	; (8007c3c <Display_Intro+0x23c>)
 8007afa:	f001 fbb3 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f9 f979 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b06:	484d      	ldr	r0, [pc, #308]	; (8007c3c <Display_Intro+0x23c>)
 8007b08:	f001 fb94 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 210, 20, 20);
 8007b0c:	2314      	movs	r3, #20
 8007b0e:	2214      	movs	r2, #20
 8007b10:	21d2      	movs	r1, #210	; 0xd2
 8007b12:	2050      	movs	r0, #80	; 0x50
 8007b14:	f001 fefc 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b18:	4848      	ldr	r0, [pc, #288]	; (8007c3c <Display_Intro+0x23c>)
 8007b1a:	f001 fba3 	bl	8009264 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7f9 f969 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b26:	4845      	ldr	r0, [pc, #276]	; (8007c3c <Display_Intro+0x23c>)
 8007b28:	f001 fb84 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 210, 20, 20);
 8007b2c:	2314      	movs	r3, #20
 8007b2e:	2214      	movs	r2, #20
 8007b30:	21d2      	movs	r1, #210	; 0xd2
 8007b32:	206e      	movs	r0, #110	; 0x6e
 8007b34:	f001 feec 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b38:	4840      	ldr	r0, [pc, #256]	; (8007c3c <Display_Intro+0x23c>)
 8007b3a:	f001 fb93 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f9 f959 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b46:	483d      	ldr	r0, [pc, #244]	; (8007c3c <Display_Intro+0x23c>)
 8007b48:	f001 fb74 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007b4c:	2314      	movs	r3, #20
 8007b4e:	2214      	movs	r2, #20
 8007b50:	21d2      	movs	r1, #210	; 0xd2
 8007b52:	208c      	movs	r0, #140	; 0x8c
 8007b54:	f001 fedc 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b58:	4838      	ldr	r0, [pc, #224]	; (8007c3c <Display_Intro+0x23c>)
 8007b5a:	f001 fb83 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 f949 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b66:	4835      	ldr	r0, [pc, #212]	; (8007c3c <Display_Intro+0x23c>)
 8007b68:	f001 fb64 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007b6c:	2314      	movs	r3, #20
 8007b6e:	2214      	movs	r2, #20
 8007b70:	21b4      	movs	r1, #180	; 0xb4
 8007b72:	208c      	movs	r0, #140	; 0x8c
 8007b74:	f001 fecc 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b78:	4830      	ldr	r0, [pc, #192]	; (8007c3c <Display_Intro+0x23c>)
 8007b7a:	f001 fb73 	bl	8009264 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f9 f939 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b86:	482d      	ldr	r0, [pc, #180]	; (8007c3c <Display_Intro+0x23c>)
 8007b88:	f001 fb54 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 150, 20, 20);
 8007b8c:	2314      	movs	r3, #20
 8007b8e:	2214      	movs	r2, #20
 8007b90:	2196      	movs	r1, #150	; 0x96
 8007b92:	208c      	movs	r0, #140	; 0x8c
 8007b94:	f001 febc 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b98:	4828      	ldr	r0, [pc, #160]	; (8007c3c <Display_Intro+0x23c>)
 8007b9a:	f001 fb63 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7f9 f929 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ba6:	4825      	ldr	r0, [pc, #148]	; (8007c3c <Display_Intro+0x23c>)
 8007ba8:	f001 fb44 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 150, 20, 20);
 8007bac:	2314      	movs	r3, #20
 8007bae:	2214      	movs	r2, #20
 8007bb0:	2196      	movs	r1, #150	; 0x96
 8007bb2:	206e      	movs	r0, #110	; 0x6e
 8007bb4:	f001 feac 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007bb8:	4820      	ldr	r0, [pc, #128]	; (8007c3c <Display_Intro+0x23c>)
 8007bba:	f001 fb53 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f9 f919 	bl	8000df8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007bc6:	481d      	ldr	r0, [pc, #116]	; (8007c3c <Display_Intro+0x23c>)
 8007bc8:	f001 fb34 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 180, 20, 20);
 8007bcc:	2314      	movs	r3, #20
 8007bce:	2214      	movs	r2, #20
 8007bd0:	21b4      	movs	r1, #180	; 0xb4
 8007bd2:	206e      	movs	r0, #110	; 0x6e
 8007bd4:	f001 fe9c 	bl	8009910 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007bd8:	4818      	ldr	r0, [pc, #96]	; (8007c3c <Display_Intro+0x23c>)
 8007bda:	f001 fb43 	bl	8009264 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7f9 f909 	bl	8000df8 <HAL_Delay>

		for(int i=80; i>=20; i--)
 8007be6:	2350      	movs	r3, #80	; 0x50
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	e015      	b.n	8007c18 <Display_Intro+0x218>
		{
			screenRefresh();
 8007bec:	f7ff fe7c 	bl	80078e8 <screenRefresh>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007bf0:	480f      	ldr	r0, [pc, #60]	; (8007c30 <Display_Intro+0x230>)
 8007bf2:	f001 fb1f 	bl	8009234 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	f001 fb33 	bl	8009264 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, i, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	b299      	uxth	r1, r3
 8007c02:	2301      	movs	r3, #1
 8007c04:	4a0b      	ldr	r2, [pc, #44]	; (8007c34 <Display_Intro+0x234>)
 8007c06:	2000      	movs	r0, #0
 8007c08:	f001 fbce 	bl	80093a8 <BSP_LCD_DisplayStringAt>
			HAL_Delay(15);
 8007c0c:	200f      	movs	r0, #15
 8007c0e:	f7f9 f8f3 	bl	8000df8 <HAL_Delay>
		for(int i=80; i>=20; i--)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b13      	cmp	r3, #19
 8007c1c:	dce6      	bgt.n	8007bec <Display_Intro+0x1ec>
		}
		page = 1;
 8007c1e:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <Display_Intro+0x240>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
	}
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20003e54 	.word	0x20003e54
 8007c30:	ff000080 	.word	0xff000080
 8007c34:	0800aa00 	.word	0x0800aa00
 8007c38:	0800aa0c 	.word	0x0800aa0c
 8007c3c:	ffff0000 	.word	0xffff0000
 8007c40:	20003e5c 	.word	0x20003e5c

08007c44 <Display_Menu>:

void Display_Menu(void) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
	if(switchingMENU_flag == 1) {
 8007c48:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <Display_Menu+0x4c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d11d      	bne.n	8007c8c <Display_Menu+0x48>
		switchingMENU_flag = 0;
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <Display_Menu+0x4c>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007c56:	f7ff fe47 	bl	80078e8 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007c5a:	480e      	ldr	r0, [pc, #56]	; (8007c94 <Display_Menu+0x50>)
 8007c5c:	f001 faea 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	f001 fafe 	bl	8009264 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007c68:	2301      	movs	r3, #1
 8007c6a:	4a0b      	ldr	r2, [pc, #44]	; (8007c98 <Display_Menu+0x54>)
 8007c6c:	2114      	movs	r1, #20
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f001 fb9a 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		DrawButton("START",60);
 8007c74:	213c      	movs	r1, #60	; 0x3c
 8007c76:	4809      	ldr	r0, [pc, #36]	; (8007c9c <Display_Menu+0x58>)
 8007c78:	f7ff fe4e 	bl	8007918 <DrawButton>
		DrawButton("ODCZYTY",120);
 8007c7c:	2178      	movs	r1, #120	; 0x78
 8007c7e:	4808      	ldr	r0, [pc, #32]	; (8007ca0 <Display_Menu+0x5c>)
 8007c80:	f7ff fe4a 	bl	8007918 <DrawButton>
		DrawButton("O NAS",180);
 8007c84:	21b4      	movs	r1, #180	; 0xb4
 8007c86:	4807      	ldr	r0, [pc, #28]	; (8007ca4 <Display_Menu+0x60>)
 8007c88:	f7ff fe46 	bl	8007918 <DrawButton>
	}
}
 8007c8c:	bf00      	nop
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000054 	.word	0x20000054
 8007c94:	ff000080 	.word	0xff000080
 8007c98:	0800aa00 	.word	0x0800aa00
 8007c9c:	0800aa14 	.word	0x0800aa14
 8007ca0:	0800aa1c 	.word	0x0800aa1c
 8007ca4:	0800aa24 	.word	0x0800aa24

08007ca8 <checkcollision>:
 * @param y1 The y coordinate of the first point making up the line.
 * @param x2 The x coordinate of the second point making up the line.
 * @param y2 The y coordinate of the second point making up the line.
 * @waring The function works only for vertical and horizontal lines.
 */
static void checkcollision(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8007ca8:	b490      	push	{r4, r7}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	80fb      	strh	r3, [r7, #6]
 8007cba:	4603      	mov	r3, r0
 8007cbc:	80bb      	strh	r3, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	807b      	strh	r3, [r7, #2]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	803b      	strh	r3, [r7, #0]
	if (y1 == y2){
 8007cc6:	88ba      	ldrh	r2, [r7, #4]
 8007cc8:	883b      	ldrh	r3, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d12c      	bne.n	8007d28 <checkcollision+0x80>
		if ((xpos >= (x1-10) && xpos <= (x2+10)) && (ypos > (y1-10) && ypos < (y2+10))) {
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <checkcollision+0xec>)
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	3b0a      	subs	r3, #10
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	db55      	blt.n	8007d88 <checkcollision+0xe0>
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <checkcollision+0xec>)
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	887b      	ldrh	r3, [r7, #2]
 8007ce4:	330a      	adds	r3, #10
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	dc4e      	bgt.n	8007d88 <checkcollision+0xe0>
 8007cea:	4b2b      	ldr	r3, [pc, #172]	; (8007d98 <checkcollision+0xf0>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	88bb      	ldrh	r3, [r7, #4]
 8007cf2:	3b0a      	subs	r3, #10
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	dd47      	ble.n	8007d88 <checkcollision+0xe0>
 8007cf8:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <checkcollision+0xf0>)
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	883b      	ldrh	r3, [r7, #0]
 8007d00:	330a      	adds	r3, #10
 8007d02:	429a      	cmp	r2, r3
 8007d04:	da40      	bge.n	8007d88 <checkcollision+0xe0>
			if (ypos > y2) {
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <checkcollision+0xf0>)
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	883a      	ldrh	r2, [r7, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d205      	bcs.n	8007d1c <checkcollision+0x74>
				ypos = y2 + 10;
 8007d10:	883b      	ldrh	r3, [r7, #0]
 8007d12:	330a      	adds	r3, #10
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <checkcollision+0xf0>)
 8007d18:	801a      	strh	r2, [r3, #0]
			} else {
				xpos = x2 - 10;
			}
		}
	}
}
 8007d1a:	e035      	b.n	8007d88 <checkcollision+0xe0>
				ypos = y2 - 10;
 8007d1c:	883b      	ldrh	r3, [r7, #0]
 8007d1e:	3b0a      	subs	r3, #10
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <checkcollision+0xf0>)
 8007d24:	801a      	strh	r2, [r3, #0]
}
 8007d26:	e02f      	b.n	8007d88 <checkcollision+0xe0>
	} else if (x1 == x2) {
 8007d28:	88fa      	ldrh	r2, [r7, #6]
 8007d2a:	887b      	ldrh	r3, [r7, #2]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d12b      	bne.n	8007d88 <checkcollision+0xe0>
		if ((xpos >= (x1-10) && xpos <= (x2+10)) && (ypos > (y1-10) && ypos < (y2+10))) {
 8007d30:	4b18      	ldr	r3, [pc, #96]	; (8007d94 <checkcollision+0xec>)
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	3b0a      	subs	r3, #10
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	db24      	blt.n	8007d88 <checkcollision+0xe0>
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <checkcollision+0xec>)
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	887b      	ldrh	r3, [r7, #2]
 8007d46:	330a      	adds	r3, #10
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	dc1d      	bgt.n	8007d88 <checkcollision+0xe0>
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <checkcollision+0xf0>)
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	88bb      	ldrh	r3, [r7, #4]
 8007d54:	3b0a      	subs	r3, #10
 8007d56:	429a      	cmp	r2, r3
 8007d58:	dd16      	ble.n	8007d88 <checkcollision+0xe0>
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <checkcollision+0xf0>)
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	883b      	ldrh	r3, [r7, #0]
 8007d62:	330a      	adds	r3, #10
 8007d64:	429a      	cmp	r2, r3
 8007d66:	da0f      	bge.n	8007d88 <checkcollision+0xe0>
			if (xpos > x2) {
 8007d68:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <checkcollision+0xec>)
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	887a      	ldrh	r2, [r7, #2]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d205      	bcs.n	8007d7e <checkcollision+0xd6>
				xpos = x2 + 10;
 8007d72:	887b      	ldrh	r3, [r7, #2]
 8007d74:	330a      	adds	r3, #10
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <checkcollision+0xec>)
 8007d7a:	801a      	strh	r2, [r3, #0]
}
 8007d7c:	e004      	b.n	8007d88 <checkcollision+0xe0>
				xpos = x2 - 10;
 8007d7e:	887b      	ldrh	r3, [r7, #2]
 8007d80:	3b0a      	subs	r3, #10
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <checkcollision+0xec>)
 8007d86:	801a      	strh	r2, [r3, #0]
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc90      	pop	{r4, r7}
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000064 	.word	0x20000064
 8007d98:	20000066 	.word	0x20000066

08007d9c <labyrinthDraw>:

/*
 * @brief Function for drawing the labyrinth and checking the collisions.
 */

static void labyrinthDraw() {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
	BSP_LCD_DrawLine(50, 225, 200, 225);
 8007da0:	23e1      	movs	r3, #225	; 0xe1
 8007da2:	22c8      	movs	r2, #200	; 0xc8
 8007da4:	21e1      	movs	r1, #225	; 0xe1
 8007da6:	2032      	movs	r0, #50	; 0x32
 8007da8:	f001 fbf8 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(50, 225, 200, 225);
 8007dac:	23e1      	movs	r3, #225	; 0xe1
 8007dae:	22c8      	movs	r2, #200	; 0xc8
 8007db0:	21e1      	movs	r1, #225	; 0xe1
 8007db2:	2032      	movs	r0, #50	; 0x32
 8007db4:	f7ff ff78 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(200, 75, 200, 225);
 8007db8:	23e1      	movs	r3, #225	; 0xe1
 8007dba:	22c8      	movs	r2, #200	; 0xc8
 8007dbc:	214b      	movs	r1, #75	; 0x4b
 8007dbe:	20c8      	movs	r0, #200	; 0xc8
 8007dc0:	f001 fbec 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(200, 75, 200, 225);
 8007dc4:	23e1      	movs	r3, #225	; 0xe1
 8007dc6:	22c8      	movs	r2, #200	; 0xc8
 8007dc8:	214b      	movs	r1, #75	; 0x4b
 8007dca:	20c8      	movs	r0, #200	; 0xc8
 8007dcc:	f7ff ff6c 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(50, 75, 200, 75);
 8007dd0:	234b      	movs	r3, #75	; 0x4b
 8007dd2:	22c8      	movs	r2, #200	; 0xc8
 8007dd4:	214b      	movs	r1, #75	; 0x4b
 8007dd6:	2032      	movs	r0, #50	; 0x32
 8007dd8:	f001 fbe0 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(50, 75, 200, 75);
 8007ddc:	234b      	movs	r3, #75	; 0x4b
 8007dde:	22c8      	movs	r2, #200	; 0xc8
 8007de0:	214b      	movs	r1, #75	; 0x4b
 8007de2:	2032      	movs	r0, #50	; 0x32
 8007de4:	f7ff ff60 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(50, 75, 50, 100);
 8007de8:	2364      	movs	r3, #100	; 0x64
 8007dea:	2232      	movs	r2, #50	; 0x32
 8007dec:	214b      	movs	r1, #75	; 0x4b
 8007dee:	2032      	movs	r0, #50	; 0x32
 8007df0:	f001 fbd4 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(50, 75, 50, 100);
 8007df4:	2364      	movs	r3, #100	; 0x64
 8007df6:	2232      	movs	r2, #50	; 0x32
 8007df8:	214b      	movs	r1, #75	; 0x4b
 8007dfa:	2032      	movs	r0, #50	; 0x32
 8007dfc:	f7ff ff54 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(50, 75, 50, 200);
 8007e00:	23c8      	movs	r3, #200	; 0xc8
 8007e02:	2232      	movs	r2, #50	; 0x32
 8007e04:	214b      	movs	r1, #75	; 0x4b
 8007e06:	2032      	movs	r0, #50	; 0x32
 8007e08:	f001 fbc8 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(50, 75, 50, 200);
 8007e0c:	23c8      	movs	r3, #200	; 0xc8
 8007e0e:	2232      	movs	r2, #50	; 0x32
 8007e10:	214b      	movs	r1, #75	; 0x4b
 8007e12:	2032      	movs	r0, #50	; 0x32
 8007e14:	f7ff ff48 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(50, 200, 150, 200);
 8007e18:	23c8      	movs	r3, #200	; 0xc8
 8007e1a:	2296      	movs	r2, #150	; 0x96
 8007e1c:	21c8      	movs	r1, #200	; 0xc8
 8007e1e:	2032      	movs	r0, #50	; 0x32
 8007e20:	f001 fbbc 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(50, 200, 150, 200);
 8007e24:	23c8      	movs	r3, #200	; 0xc8
 8007e26:	2296      	movs	r2, #150	; 0x96
 8007e28:	21c8      	movs	r1, #200	; 0xc8
 8007e2a:	2032      	movs	r0, #50	; 0x32
 8007e2c:	f7ff ff3c 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(125, 75, 125, 175);
 8007e30:	23af      	movs	r3, #175	; 0xaf
 8007e32:	227d      	movs	r2, #125	; 0x7d
 8007e34:	214b      	movs	r1, #75	; 0x4b
 8007e36:	207d      	movs	r0, #125	; 0x7d
 8007e38:	f001 fbb0 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(125, 75, 125, 175);
 8007e3c:	23af      	movs	r3, #175	; 0xaf
 8007e3e:	227d      	movs	r2, #125	; 0x7d
 8007e40:	214b      	movs	r1, #75	; 0x4b
 8007e42:	207d      	movs	r0, #125	; 0x7d
 8007e44:	f7ff ff30 	bl	8007ca8 <checkcollision>

	BSP_LCD_DrawLine(75, 125, 125, 125);
 8007e48:	237d      	movs	r3, #125	; 0x7d
 8007e4a:	227d      	movs	r2, #125	; 0x7d
 8007e4c:	217d      	movs	r1, #125	; 0x7d
 8007e4e:	204b      	movs	r0, #75	; 0x4b
 8007e50:	f001 fba4 	bl	800959c <BSP_LCD_DrawLine>
	checkcollision(75, 125, 125, 125);
 8007e54:	237d      	movs	r3, #125	; 0x7d
 8007e56:	227d      	movs	r2, #125	; 0x7d
 8007e58:	217d      	movs	r1, #125	; 0x7d
 8007e5a:	204b      	movs	r0, #75	; 0x4b
 8007e5c:	f7ff ff24 	bl	8007ca8 <checkcollision>
}
 8007e60:	bf00      	nop
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <Display_Start>:

void Display_Start(void) {
 8007e64:	b5b0      	push	{r4, r5, r7, lr}
 8007e66:	af00      	add	r7, sp, #0
	if(switchingSTART_flag == 1) {
 8007e68:	4b35      	ldr	r3, [pc, #212]	; (8007f40 <Display_Start+0xdc>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d164      	bne.n	8007f3a <Display_Start+0xd6>
//		switchingSTART_flag = 0;
		screenRefresh();
 8007e70:	f7ff fd3a 	bl	80078e8 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007e74:	4833      	ldr	r0, [pc, #204]	; (8007f44 <Display_Start+0xe0>)
 8007e76:	f001 f9dd 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	f001 f9f1 	bl	8009264 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"SCENA GRY", CENTER_MODE);
 8007e82:	2301      	movs	r3, #1
 8007e84:	4a30      	ldr	r2, [pc, #192]	; (8007f48 <Display_Start+0xe4>)
 8007e86:	2114      	movs	r1, #20
 8007e88:	2000      	movs	r0, #0
 8007e8a:	f001 fa8d 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007e8e:	21fa      	movs	r1, #250	; 0xfa
 8007e90:	482e      	ldr	r0, [pc, #184]	; (8007f4c <Display_Start+0xe8>)
 8007e92:	f7ff fd41 	bl	8007918 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007e96:	482e      	ldr	r0, [pc, #184]	; (8007f50 <Display_Start+0xec>)
 8007e98:	f001 f9cc 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(xpos, ypos, 10);
 8007e9c:	4b2d      	ldr	r3, [pc, #180]	; (8007f54 <Display_Start+0xf0>)
 8007e9e:	8818      	ldrh	r0, [r3, #0]
 8007ea0:	4b2d      	ldr	r3, [pc, #180]	; (8007f58 <Display_Start+0xf4>)
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	220a      	movs	r2, #10
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f001 fd8c 	bl	80099c4 <BSP_LCD_FillCircle>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007eac:	4828      	ldr	r0, [pc, #160]	; (8007f50 <Display_Start+0xec>)
 8007eae:	f001 f9d9 	bl	8009264 <BSP_LCD_SetBackColor>

		labyrinthDraw();
 8007eb2:	f7ff ff73 	bl	8007d9c <labyrinthDraw>

		/*
		 * Multiplication by 0.5 for better driving.
		 */
		xpos += y * 0.5;
 8007eb6:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <Display_Start+0xf0>)
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f8 faea 	bl	8000494 <__aeabi_i2d>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	4b25      	ldr	r3, [pc, #148]	; (8007f5c <Display_Start+0xf8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f8 fae3 	bl	8000494 <__aeabi_i2d>
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <Display_Start+0xfc>)
 8007ed4:	f7f8 fb44 	bl	8000560 <__aeabi_dmul>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 f98c 	bl	80001fc <__adddf3>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	4621      	mov	r1, r4
 8007eec:	f7f8 fd4a 	bl	8000984 <__aeabi_d2uiz>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	4b17      	ldr	r3, [pc, #92]	; (8007f54 <Display_Start+0xf0>)
 8007ef6:	801a      	strh	r2, [r3, #0]
		ypos += x * 0.5;
 8007ef8:	4b17      	ldr	r3, [pc, #92]	; (8007f58 <Display_Start+0xf4>)
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 fac9 	bl	8000494 <__aeabi_i2d>
 8007f02:	4604      	mov	r4, r0
 8007f04:	460d      	mov	r5, r1
 8007f06:	4b17      	ldr	r3, [pc, #92]	; (8007f64 <Display_Start+0x100>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f8 fac2 	bl	8000494 <__aeabi_i2d>
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <Display_Start+0xfc>)
 8007f16:	f7f8 fb23 	bl	8000560 <__aeabi_dmul>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 f96b 	bl	80001fc <__adddf3>
 8007f26:	4603      	mov	r3, r0
 8007f28:	460c      	mov	r4, r1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f7f8 fd29 	bl	8000984 <__aeabi_d2uiz>
 8007f32:	4603      	mov	r3, r0
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	4b08      	ldr	r3, [pc, #32]	; (8007f58 <Display_Start+0xf4>)
 8007f38:	801a      	strh	r2, [r3, #0]
	}
}
 8007f3a:	bf00      	nop
 8007f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000058 	.word	0x20000058
 8007f44:	ff000080 	.word	0xff000080
 8007f48:	0800aa2c 	.word	0x0800aa2c
 8007f4c:	0800aa38 	.word	0x0800aa38
 8007f50:	ffff0000 	.word	0xffff0000
 8007f54:	20000064 	.word	0x20000064
 8007f58:	20000066 	.word	0x20000066
 8007f5c:	20003e0c 	.word	0x20003e0c
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	20003e08 	.word	0x20003e08

08007f68 <Display_Odczyty>:

void Display_Odczyty(void) {
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b091      	sub	sp, #68	; 0x44
 8007f6c:	af00      	add	r7, sp, #0
	if(switchingODCZYTY_flag == 1) {
 8007f6e:	4b4b      	ldr	r3, [pc, #300]	; (800809c <Display_Odczyty+0x134>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d11a      	bne.n	8007fac <Display_Odczyty+0x44>
		screenRefresh();
 8007f76:	f7ff fcb7 	bl	80078e8 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007f7a:	4849      	ldr	r0, [pc, #292]	; (80080a0 <Display_Odczyty+0x138>)
 8007f7c:	f001 f95a 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	f001 f96e 	bl	8009264 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"ODCZYTY MPU", CENTER_MODE);
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4a46      	ldr	r2, [pc, #280]	; (80080a4 <Display_Odczyty+0x13c>)
 8007f8c:	2114      	movs	r1, #20
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f001 fa0a 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007f94:	21fa      	movs	r1, #250	; 0xfa
 8007f96:	4844      	ldr	r0, [pc, #272]	; (80080a8 <Display_Odczyty+0x140>)
 8007f98:	f7ff fcbe 	bl	8007918 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007f9c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007fa0:	f001 f948 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	f001 f95c 	bl	8009264 <BSP_LCD_SetBackColor>
	}
	if(refreshODCZYTY_flag == 1 || switchingODCZYTY_flag == 1) {
 8007fac:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <Display_Odczyty+0x144>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d003      	beq.n	8007fbc <Display_Odczyty+0x54>
 8007fb4:	4b39      	ldr	r3, [pc, #228]	; (800809c <Display_Odczyty+0x134>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d16b      	bne.n	8008094 <Display_Odczyty+0x12c>
		switchingODCZYTY_flag = 0;
 8007fbc:	4b37      	ldr	r3, [pc, #220]	; (800809c <Display_Odczyty+0x134>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
		uint8_t refreshLine[14] = "              ";
 8007fc2:	4b3b      	ldr	r3, [pc, #236]	; (80080b0 <Display_Odczyty+0x148>)
 8007fc4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fca:	c407      	stmia	r4!, {r0, r1, r2}
 8007fcc:	8023      	strh	r3, [r4, #0]
		uint8_t xaxis[14] = "X ASIX: ";
 8007fce:	4a39      	ldr	r2, [pc, #228]	; (80080b4 <Display_Odczyty+0x14c>)
 8007fd0:	f107 0320 	add.w	r3, r7, #32
 8007fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fd6:	c303      	stmia	r3!, {r0, r1}
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	711a      	strb	r2, [r3, #4]
		uint8_t yaxis[14] = "Y ASIX: ";
 8007fe4:	4a34      	ldr	r2, [pc, #208]	; (80080b8 <Display_Odczyty+0x150>)
 8007fe6:	f107 0310 	add.w	r3, r7, #16
 8007fea:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fec:	c303      	stmia	r3!, {r0, r1}
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	f107 0319 	add.w	r3, r7, #25
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	711a      	strb	r2, [r3, #4]
		uint8_t zaxis[14] = "Z ASIX: ";
 8007ffa:	4a30      	ldr	r2, [pc, #192]	; (80080bc <Display_Odczyty+0x154>)
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008000:	c303      	stmia	r3!, {r0, r1}
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	f107 0309 	add.w	r3, r7, #9
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	711a      	strb	r2, [r3, #4]
		itoa(x, &xaxis[8], 10);
 800800e:	4b2c      	ldr	r3, [pc, #176]	; (80080c0 <Display_Odczyty+0x158>)
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f107 0320 	add.w	r3, r7, #32
 8008016:	3308      	adds	r3, #8
 8008018:	220a      	movs	r2, #10
 800801a:	4619      	mov	r1, r3
 800801c:	f002 fc42 	bl	800a8a4 <itoa>
		itoa(y, &yaxis[8], 10);
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <Display_Odczyty+0x15c>)
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	f107 0310 	add.w	r3, r7, #16
 8008028:	3308      	adds	r3, #8
 800802a:	220a      	movs	r2, #10
 800802c:	4619      	mov	r1, r3
 800802e:	f002 fc39 	bl	800a8a4 <itoa>
		itoa(z, &zaxis[8], 10);
 8008032:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <Display_Odczyty+0x160>)
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	463b      	mov	r3, r7
 8008038:	3308      	adds	r3, #8
 800803a:	220a      	movs	r2, #10
 800803c:	4619      	mov	r1, r3
 800803e:	f002 fc31 	bl	800a8a4 <itoa>
		BSP_LCD_DisplayStringAt(0, 60, refreshLine, CENTER_MODE);
 8008042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008046:	2301      	movs	r3, #1
 8008048:	213c      	movs	r1, #60	; 0x3c
 800804a:	2000      	movs	r0, #0
 800804c:	f001 f9ac 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 60, xaxis, CENTER_MODE);
 8008050:	f107 0220 	add.w	r2, r7, #32
 8008054:	2301      	movs	r3, #1
 8008056:	213c      	movs	r1, #60	; 0x3c
 8008058:	2000      	movs	r0, #0
 800805a:	f001 f9a5 	bl	80093a8 <BSP_LCD_DisplayStringAt>

		BSP_LCD_DisplayStringAt(0, 100, refreshLine, CENTER_MODE);
 800805e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008062:	2301      	movs	r3, #1
 8008064:	2164      	movs	r1, #100	; 0x64
 8008066:	2000      	movs	r0, #0
 8008068:	f001 f99e 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 100, yaxis, CENTER_MODE);
 800806c:	f107 0210 	add.w	r2, r7, #16
 8008070:	2301      	movs	r3, #1
 8008072:	2164      	movs	r1, #100	; 0x64
 8008074:	2000      	movs	r0, #0
 8008076:	f001 f997 	bl	80093a8 <BSP_LCD_DisplayStringAt>

		BSP_LCD_DisplayStringAt(0, 140, refreshLine, CENTER_MODE);
 800807a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800807e:	2301      	movs	r3, #1
 8008080:	218c      	movs	r1, #140	; 0x8c
 8008082:	2000      	movs	r0, #0
 8008084:	f001 f990 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 140, zaxis, CENTER_MODE);
 8008088:	463a      	mov	r2, r7
 800808a:	2301      	movs	r3, #1
 800808c:	218c      	movs	r1, #140	; 0x8c
 800808e:	2000      	movs	r0, #0
 8008090:	f001 f98a 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		}
}
 8008094:	bf00      	nop
 8008096:	3744      	adds	r7, #68	; 0x44
 8008098:	46bd      	mov	sp, r7
 800809a:	bd90      	pop	{r4, r7, pc}
 800809c:	2000005c 	.word	0x2000005c
 80080a0:	ff000080 	.word	0xff000080
 80080a4:	0800aa40 	.word	0x0800aa40
 80080a8:	0800aa38 	.word	0x0800aa38
 80080ac:	20003e58 	.word	0x20003e58
 80080b0:	0800aa4c 	.word	0x0800aa4c
 80080b4:	0800aa5c 	.word	0x0800aa5c
 80080b8:	0800aa6c 	.word	0x0800aa6c
 80080bc:	0800aa7c 	.word	0x0800aa7c
 80080c0:	20003e08 	.word	0x20003e08
 80080c4:	20003e0c 	.word	0x20003e0c
 80080c8:	20003e10 	.word	0x20003e10

080080cc <Display_Onas>:


void Display_Onas(void) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
	if(switchingONAS_flag == 1) {
 80080d0:	4b17      	ldr	r3, [pc, #92]	; (8008130 <Display_Onas+0x64>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d129      	bne.n	800812c <Display_Onas+0x60>
		switchingONAS_flag = 0;
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <Display_Onas+0x64>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
		screenRefresh();
 80080de:	f7ff fc03 	bl	80078e8 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80080e2:	4814      	ldr	r0, [pc, #80]	; (8008134 <Display_Onas+0x68>)
 80080e4:	f001 f8a6 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	f001 f8ba 	bl	8009264 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"Autorzy", CENTER_MODE);
 80080f0:	2301      	movs	r3, #1
 80080f2:	4a11      	ldr	r2, [pc, #68]	; (8008138 <Display_Onas+0x6c>)
 80080f4:	2114      	movs	r1, #20
 80080f6:	2000      	movs	r0, #0
 80080f8:	f001 f956 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 80080fc:	21fa      	movs	r1, #250	; 0xfa
 80080fe:	480f      	ldr	r0, [pc, #60]	; (800813c <Display_Onas+0x70>)
 8008100:	f7ff fc0a 	bl	8007918 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008104:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008108:	f001 f894 	bl	8009234 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	f001 f8a8 	bl	8009264 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"Adam Krzykala", CENTER_MODE);
 8008114:	2301      	movs	r3, #1
 8008116:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <Display_Onas+0x74>)
 8008118:	213c      	movs	r1, #60	; 0x3c
 800811a:	2000      	movs	r0, #0
 800811c:	f001 f944 	bl	80093a8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Szymon Rajca", CENTER_MODE);
 8008120:	2301      	movs	r3, #1
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <Display_Onas+0x78>)
 8008124:	2150      	movs	r1, #80	; 0x50
 8008126:	2000      	movs	r0, #0
 8008128:	f001 f93e 	bl	80093a8 <BSP_LCD_DisplayStringAt>

	}
}
 800812c:	bf00      	nop
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000060 	.word	0x20000060
 8008134:	ff000080 	.word	0xff000080
 8008138:	0800aa8c 	.word	0x0800aa8c
 800813c:	0800aa38 	.word	0x0800aa38
 8008140:	0800aa94 	.word	0x0800aa94
 8008144:	0800aaa4 	.word	0x0800aaa4

08008148 <menuService>:


void menuService(void) {
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 800814c:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <menuService+0x8c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d03b      	beq.n	80081ce <menuService+0x86>
		if (localstr->Y >= 60 && localstr->Y <= 104)
 8008156:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <menuService+0x8c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	889b      	ldrh	r3, [r3, #4]
 800815c:	2b3b      	cmp	r3, #59	; 0x3b
 800815e:	d90d      	bls.n	800817c <menuService+0x34>
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <menuService+0x8c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	889b      	ldrh	r3, [r3, #4]
 8008166:	2b68      	cmp	r3, #104	; 0x68
 8008168:	d808      	bhi.n	800817c <menuService+0x34>
				{

			page = 2;
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <menuService+0x90>)
 800816c:	2202      	movs	r2, #2
 800816e:	601a      	str	r2, [r3, #0]
			switchingSTART_flag = 1;
 8008170:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <menuService+0x94>)
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8008176:	2032      	movs	r0, #50	; 0x32
 8008178:	f7f8 fe3e 	bl	8000df8 <HAL_Delay>
		}
		if (localstr->Y >= 120 && localstr->Y <= 164)
 800817c:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <menuService+0x8c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	889b      	ldrh	r3, [r3, #4]
 8008182:	2b77      	cmp	r3, #119	; 0x77
 8008184:	d910      	bls.n	80081a8 <menuService+0x60>
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <menuService+0x8c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	889b      	ldrh	r3, [r3, #4]
 800818c:	2ba4      	cmp	r3, #164	; 0xa4
 800818e:	d80b      	bhi.n	80081a8 <menuService+0x60>
						{

			page = 3;
 8008190:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <menuService+0x90>)
 8008192:	2203      	movs	r2, #3
 8008194:	601a      	str	r2, [r3, #0]
			switchingODCZYTY_flag = 1;
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <menuService+0x98>)
 8008198:	2201      	movs	r2, #1
 800819a:	601a      	str	r2, [r3, #0]
			refreshODCZYTY_flag = 1;
 800819c:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <menuService+0x9c>)
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80081a2:	2032      	movs	r0, #50	; 0x32
 80081a4:	f7f8 fe28 	bl	8000df8 <HAL_Delay>
				}
		if (localstr->Y >= 180 && localstr->Y <= 224)
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <menuService+0x8c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	889b      	ldrh	r3, [r3, #4]
 80081ae:	2bb3      	cmp	r3, #179	; 0xb3
 80081b0:	d90d      	bls.n	80081ce <menuService+0x86>
 80081b2:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <menuService+0x8c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	889b      	ldrh	r3, [r3, #4]
 80081b8:	2be0      	cmp	r3, #224	; 0xe0
 80081ba:	d808      	bhi.n	80081ce <menuService+0x86>
						{

			page = 4;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <menuService+0x90>)
 80081be:	2204      	movs	r2, #4
 80081c0:	601a      	str	r2, [r3, #0]
			switchingONAS_flag = 1;
 80081c2:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <menuService+0xa0>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80081c8:	2032      	movs	r0, #50	; 0x32
 80081ca:	f7f8 fe15 	bl	8000df8 <HAL_Delay>
				}
	}
}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20003ffc 	.word	0x20003ffc
 80081d8:	20003e5c 	.word	0x20003e5c
 80081dc:	20000058 	.word	0x20000058
 80081e0:	2000005c 	.word	0x2000005c
 80081e4:	20003e58 	.word	0x20003e58
 80081e8:	20000060 	.word	0x20000060

080081ec <startService>:

void startService(void) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <startService+0x3c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d013      	beq.n	8008222 <startService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <startService+0x3c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	889b      	ldrh	r3, [r3, #4]
 8008200:	2bf9      	cmp	r3, #249	; 0xf9
 8008202:	d90e      	bls.n	8008222 <startService+0x36>
 8008204:	4b08      	ldr	r3, [pc, #32]	; (8008228 <startService+0x3c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	889b      	ldrh	r3, [r3, #4]
 800820a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800820e:	d808      	bhi.n	8008222 <startService+0x36>
				{
			page = 1;
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <startService+0x40>)
 8008212:	2201      	movs	r2, #1
 8008214:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <startService+0x44>)
 8008218:	2201      	movs	r2, #1
 800821a:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 800821c:	2032      	movs	r0, #50	; 0x32
 800821e:	f7f8 fdeb 	bl	8000df8 <HAL_Delay>
		}
	}
}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20003ffc 	.word	0x20003ffc
 800822c:	20003e5c 	.word	0x20003e5c
 8008230:	20000054 	.word	0x20000054

08008234 <odczytyService>:

void odczytyService(void) {
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8008238:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <odczytyService+0x40>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <odczytyService+0x3c>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8008242:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <odczytyService+0x40>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	889b      	ldrh	r3, [r3, #4]
 8008248:	2bf9      	cmp	r3, #249	; 0xf9
 800824a:	d911      	bls.n	8008270 <odczytyService+0x3c>
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <odczytyService+0x40>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	889b      	ldrh	r3, [r3, #4]
 8008252:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8008256:	d80b      	bhi.n	8008270 <odczytyService+0x3c>
				{
			refreshODCZYTY_flag = 0;
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <odczytyService+0x44>)
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
			page = 1;
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <odczytyService+0x48>)
 8008260:	2201      	movs	r2, #1
 8008262:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8008264:	4b06      	ldr	r3, [pc, #24]	; (8008280 <odczytyService+0x4c>)
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 800826a:	2032      	movs	r0, #50	; 0x32
 800826c:	f7f8 fdc4 	bl	8000df8 <HAL_Delay>
		}
	}

}
 8008270:	bf00      	nop
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20003ffc 	.word	0x20003ffc
 8008278:	20003e58 	.word	0x20003e58
 800827c:	20003e5c 	.word	0x20003e5c
 8008280:	20000054 	.word	0x20000054

08008284 <onasService>:

void onasService(void) {
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8008288:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <onasService+0x3c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d013      	beq.n	80082ba <onasService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8008292:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <onasService+0x3c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	889b      	ldrh	r3, [r3, #4]
 8008298:	2bf9      	cmp	r3, #249	; 0xf9
 800829a:	d90e      	bls.n	80082ba <onasService+0x36>
 800829c:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <onasService+0x3c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80082a6:	d808      	bhi.n	80082ba <onasService+0x36>
				{
			page = 1;
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <onasService+0x40>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <onasService+0x44>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80082b4:	2032      	movs	r0, #50	; 0x32
 80082b6:	f7f8 fd9f 	bl	8000df8 <HAL_Delay>
		}
	}
}
 80082ba:	bf00      	nop
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20003ffc 	.word	0x20003ffc
 80082c4:	20003e5c 	.word	0x20003e5c
 80082c8:	20000054 	.word	0x20000054

080082cc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b09a      	sub	sp, #104	; 0x68
 80082d0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80082d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082d6:	2234      	movs	r2, #52	; 0x34
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f002 faef 	bl	800a8be <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80082e0:	463b      	mov	r3, r7
 80082e2:	2234      	movs	r2, #52	; 0x34
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f002 fae9 	bl	800a8be <memset>

  hltdc.Instance = LTDC;
 80082ec:	4b4e      	ldr	r3, [pc, #312]	; (8008428 <MX_LTDC_Init+0x15c>)
 80082ee:	4a4f      	ldr	r2, [pc, #316]	; (800842c <MX_LTDC_Init+0x160>)
 80082f0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80082f2:	4b4d      	ldr	r3, [pc, #308]	; (8008428 <MX_LTDC_Init+0x15c>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80082f8:	4b4b      	ldr	r3, [pc, #300]	; (8008428 <MX_LTDC_Init+0x15c>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80082fe:	4b4a      	ldr	r3, [pc, #296]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008300:	2200      	movs	r2, #0
 8008302:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008304:	4b48      	ldr	r3, [pc, #288]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008306:	2200      	movs	r2, #0
 8008308:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800830a:	4b47      	ldr	r3, [pc, #284]	; (8008428 <MX_LTDC_Init+0x15c>)
 800830c:	2207      	movs	r2, #7
 800830e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8008310:	4b45      	ldr	r3, [pc, #276]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008312:	2203      	movs	r2, #3
 8008314:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8008316:	4b44      	ldr	r3, [pc, #272]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008318:	220e      	movs	r2, #14
 800831a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800831c:	4b42      	ldr	r3, [pc, #264]	; (8008428 <MX_LTDC_Init+0x15c>)
 800831e:	2205      	movs	r2, #5
 8008320:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 8008322:	4b41      	ldr	r3, [pc, #260]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008324:	f240 1225 	movw	r2, #293	; 0x125
 8008328:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 800832a:	4b3f      	ldr	r3, [pc, #252]	; (8008428 <MX_LTDC_Init+0x15c>)
 800832c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008330:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 8008332:	4b3d      	ldr	r3, [pc, #244]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008334:	f240 122b 	movw	r2, #299	; 0x12b
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 800833a:	4b3b      	ldr	r3, [pc, #236]	; (8008428 <MX_LTDC_Init+0x15c>)
 800833c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8008342:	4b39      	ldr	r3, [pc, #228]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800834a:	4b37      	ldr	r3, [pc, #220]	; (8008428 <MX_LTDC_Init+0x15c>)
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8008352:	4b35      	ldr	r3, [pc, #212]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800835a:	4833      	ldr	r0, [pc, #204]	; (8008428 <MX_LTDC_Init+0x15c>)
 800835c:	f7fa fbf8 	bl	8002b50 <HAL_LTDC_Init>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8008366:	f000 fa8d 	bl	8008884 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800837a:	2300      	movs	r3, #0
 800837c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800838a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800838c:	2305      	movs	r3, #5
 800838e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80083ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083b2:	2200      	movs	r2, #0
 80083b4:	4619      	mov	r1, r3
 80083b6:	481c      	ldr	r0, [pc, #112]	; (8008428 <MX_LTDC_Init+0x15c>)
 80083b8:	f7fa fc9a 	bl	8002cf0 <HAL_LTDC_ConfigLayer>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80083c2:	f000 fa5f 	bl	8008884 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80083e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80083e8:	2305      	movs	r3, #5
 80083ea:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800840a:	463b      	mov	r3, r7
 800840c:	2201      	movs	r2, #1
 800840e:	4619      	mov	r1, r3
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <MX_LTDC_Init+0x15c>)
 8008412:	f7fa fc6d 	bl	8002cf0 <HAL_LTDC_ConfigLayer>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800841c:	f000 fa32 	bl	8008884 <Error_Handler>
  }

}
 8008420:	bf00      	nop
 8008422:	3768      	adds	r7, #104	; 0x68
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	20004004 	.word	0x20004004
 800842c:	40016800 	.word	0x40016800

08008430 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	609a      	str	r2, [r3, #8]
 8008444:	60da      	str	r2, [r3, #12]
 8008446:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a77      	ldr	r2, [pc, #476]	; (800862c <HAL_LTDC_MspInit+0x1fc>)
 800844e:	4293      	cmp	r3, r2
 8008450:	f040 80e8 	bne.w	8008624 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008454:	2300      	movs	r3, #0
 8008456:	623b      	str	r3, [r7, #32]
 8008458:	4a75      	ldr	r2, [pc, #468]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 800845a:	4b75      	ldr	r3, [pc, #468]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008462:	6453      	str	r3, [r2, #68]	; 0x44
 8008464:	4b72      	ldr	r3, [pc, #456]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800846c:	623b      	str	r3, [r7, #32]
 800846e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008470:	2300      	movs	r3, #0
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	4a6e      	ldr	r2, [pc, #440]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008476:	4b6e      	ldr	r3, [pc, #440]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	f043 0320 	orr.w	r3, r3, #32
 800847e:	6313      	str	r3, [r2, #48]	; 0x30
 8008480:	4b6b      	ldr	r3, [pc, #428]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	61fb      	str	r3, [r7, #28]
 800848a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800848c:	2300      	movs	r3, #0
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	4a67      	ldr	r2, [pc, #412]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008492:	4b67      	ldr	r3, [pc, #412]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	6313      	str	r3, [r2, #48]	; 0x30
 800849c:	4b64      	ldr	r3, [pc, #400]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	61bb      	str	r3, [r7, #24]
 80084a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	4a60      	ldr	r2, [pc, #384]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084ae:	4b60      	ldr	r3, [pc, #384]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b2:	f043 0302 	orr.w	r3, r3, #2
 80084b6:	6313      	str	r3, [r2, #48]	; 0x30
 80084b8:	4b5d      	ldr	r3, [pc, #372]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80084c4:	2300      	movs	r3, #0
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	4a59      	ldr	r2, [pc, #356]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084ca:	4b59      	ldr	r3, [pc, #356]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d2:	6313      	str	r3, [r2, #48]	; 0x30
 80084d4:	4b56      	ldr	r3, [pc, #344]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	4a52      	ldr	r2, [pc, #328]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084e6:	4b52      	ldr	r3, [pc, #328]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	f043 0304 	orr.w	r3, r3, #4
 80084ee:	6313      	str	r3, [r2, #48]	; 0x30
 80084f0:	4b4f      	ldr	r3, [pc, #316]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084fc:	2300      	movs	r3, #0
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	4a4b      	ldr	r2, [pc, #300]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008502:	4b4b      	ldr	r3, [pc, #300]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	f043 0308 	orr.w	r3, r3, #8
 800850a:	6313      	str	r3, [r2, #48]	; 0x30
 800850c:	4b48      	ldr	r3, [pc, #288]	; (8008630 <HAL_LTDC_MspInit+0x200>)
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8008518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851e:	2302      	movs	r3, #2
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008522:	2300      	movs	r3, #0
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008526:	2300      	movs	r3, #0
 8008528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800852a:	230e      	movs	r3, #14
 800852c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800852e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008532:	4619      	mov	r1, r3
 8008534:	483f      	ldr	r0, [pc, #252]	; (8008634 <HAL_LTDC_MspInit+0x204>)
 8008536:	f7f8 ffeb 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800853a:	f641 0358 	movw	r3, #6232	; 0x1858
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008540:	2302      	movs	r3, #2
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008544:	2300      	movs	r3, #0
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008548:	2300      	movs	r3, #0
 800854a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800854c:	230e      	movs	r3, #14
 800854e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008554:	4619      	mov	r1, r3
 8008556:	4838      	ldr	r0, [pc, #224]	; (8008638 <HAL_LTDC_MspInit+0x208>)
 8008558:	f7f8 ffda 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800855c:	2303      	movs	r3, #3
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008560:	2302      	movs	r3, #2
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	2300      	movs	r3, #0
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008568:	2300      	movs	r3, #0
 800856a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800856c:	2309      	movs	r3, #9
 800856e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008574:	4619      	mov	r1, r3
 8008576:	4831      	ldr	r0, [pc, #196]	; (800863c <HAL_LTDC_MspInit+0x20c>)
 8008578:	f7f8 ffca 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800857c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008582:	2302      	movs	r3, #2
 8008584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008586:	2300      	movs	r3, #0
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800858a:	2300      	movs	r3, #0
 800858c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800858e:	230e      	movs	r3, #14
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008596:	4619      	mov	r1, r3
 8008598:	4828      	ldr	r0, [pc, #160]	; (800863c <HAL_LTDC_MspInit+0x20c>)
 800859a:	f7f8 ffb9 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800859e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a4:	2302      	movs	r3, #2
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ac:	2300      	movs	r3, #0
 80085ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80085b0:	230e      	movs	r3, #14
 80085b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80085b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b8:	4619      	mov	r1, r3
 80085ba:	4821      	ldr	r0, [pc, #132]	; (8008640 <HAL_LTDC_MspInit+0x210>)
 80085bc:	f7f8 ffa8 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80085c0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c6:	2302      	movs	r3, #2
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ce:	2300      	movs	r3, #0
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80085d2:	230e      	movs	r3, #14
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085da:	4619      	mov	r1, r3
 80085dc:	4819      	ldr	r0, [pc, #100]	; (8008644 <HAL_LTDC_MspInit+0x214>)
 80085de:	f7f8 ff97 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80085e2:	2348      	movs	r3, #72	; 0x48
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e6:	2302      	movs	r3, #2
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ee:	2300      	movs	r3, #0
 80085f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80085f2:	230e      	movs	r3, #14
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085fa:	4619      	mov	r1, r3
 80085fc:	4812      	ldr	r0, [pc, #72]	; (8008648 <HAL_LTDC_MspInit+0x218>)
 80085fe:	f7f8 ff87 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8008602:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008608:	2302      	movs	r3, #2
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860c:	2300      	movs	r3, #0
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008610:	2300      	movs	r3, #0
 8008612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008614:	2309      	movs	r3, #9
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800861c:	4619      	mov	r1, r3
 800861e:	4808      	ldr	r0, [pc, #32]	; (8008640 <HAL_LTDC_MspInit+0x210>)
 8008620:	f7f8 ff76 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8008624:	bf00      	nop
 8008626:	3738      	adds	r7, #56	; 0x38
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40016800 	.word	0x40016800
 8008630:	40023800 	.word	0x40023800
 8008634:	40021400 	.word	0x40021400
 8008638:	40020000 	.word	0x40020000
 800863c:	40020400 	.word	0x40020400
 8008640:	40021800 	.word	0x40021800
 8008644:	40020800 	.word	0x40020800
 8008648:	40020c00 	.word	0x40020c00

0800864c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008650:	f7f8 fb90 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008654:	f000 f822 	bl	800869c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initPointers(&hdma2d, &hltdc, &hsdram1);
 8008658:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <main+0x44>)
 800865a:	490e      	ldr	r1, [pc, #56]	; (8008694 <main+0x48>)
 800865c:	480e      	ldr	r0, [pc, #56]	; (8008698 <main+0x4c>)
 800865e:	f000 f8a7 	bl	80087b0 <initPointers>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008662:	f7fe fb41 	bl	8006ce8 <MX_GPIO_Init>
  MX_LTDC_Init();
 8008666:	f7ff fe31 	bl	80082cc <MX_LTDC_Init>
  MX_FMC_Init();
 800866a:	f7fe f8ed 	bl	8006848 <MX_FMC_Init>
  MX_DMA2D_Init();
 800866e:	f7fe f8ab 	bl	80067c8 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8008672:	f7fe feb1 	bl	80073d8 <MX_I2C3_Init>
  MX_SPI5_Init();
 8008676:	f000 f90d 	bl	8008894 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800867a:	f002 f83b 	bl	800a6f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  gyro_init();
 800867e:	f7fe fcc5 	bl	800700c <gyro_init>
  ltdc_finishConfig();
 8008682:	f000 f8bd 	bl	8008800 <ltdc_finishConfig>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8008686:	f7fe f9bb 	bl	8006a00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800868a:	f7fc ff46 	bl	800551a <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 800868e:	e7fe      	b.n	800868e <main+0x42>
 8008690:	20003f48 	.word	0x20003f48
 8008694:	20004004 	.word	0x20004004
 8008698:	20003f08 	.word	0x20003f08

0800869c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b0a0      	sub	sp, #128	; 0x80
 80086a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086a6:	2230      	movs	r2, #48	; 0x30
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f002 f907 	bl	800a8be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	609a      	str	r2, [r3, #8]
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80086c0:	f107 030c 	add.w	r3, r7, #12
 80086c4:	2230      	movs	r2, #48	; 0x30
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f002 f8f8 	bl	800a8be <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	4a35      	ldr	r2, [pc, #212]	; (80087a8 <SystemClock_Config+0x10c>)
 80086d4:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <SystemClock_Config+0x10c>)
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086dc:	6413      	str	r3, [r2, #64]	; 0x40
 80086de:	4b32      	ldr	r3, [pc, #200]	; (80087a8 <SystemClock_Config+0x10c>)
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <SystemClock_Config+0x110>)
 80086f0:	4b2e      	ldr	r3, [pc, #184]	; (80087ac <SystemClock_Config+0x110>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	4b2c      	ldr	r3, [pc, #176]	; (80087ac <SystemClock_Config+0x110>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008702:	607b      	str	r3, [r7, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008706:	2301      	movs	r3, #1
 8008708:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800870a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800870e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008710:	2302      	movs	r3, #2
 8008712:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008714:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008718:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800871a:	2304      	movs	r3, #4
 800871c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800871e:	23b4      	movs	r3, #180	; 0xb4
 8008720:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008722:	2302      	movs	r3, #2
 8008724:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008726:	2307      	movs	r3, #7
 8008728:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800872a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800872e:	4618      	mov	r0, r3
 8008730:	f7fa fd52 	bl	80031d8 <HAL_RCC_OscConfig>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800873a:	f000 f8a3 	bl	8008884 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800873e:	f7fa fcfb 	bl	8003138 <HAL_PWREx_EnableOverDrive>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8008748:	f000 f89c 	bl	8008884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800874c:	230f      	movs	r3, #15
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008750:	2302      	movs	r3, #2
 8008752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008754:	2300      	movs	r3, #0
 8008756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800875c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800875e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008762:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008764:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008768:	2105      	movs	r1, #5
 800876a:	4618      	mov	r0, r3
 800876c:	f7fa ff76 	bl	800365c <HAL_RCC_ClockConfig>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8008776:	f000 f885 	bl	8008884 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800877a:	2308      	movs	r3, #8
 800877c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800877e:	23c0      	movs	r3, #192	; 0xc0
 8008780:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8008782:	2304      	movs	r3, #4
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8008786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800878a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800878c:	f107 030c 	add.w	r3, r7, #12
 8008790:	4618      	mov	r0, r3
 8008792:	f7fb f983 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800879c:	f000 f872 	bl	8008884 <Error_Handler>
  }
}
 80087a0:	bf00      	nop
 80087a2:	3780      	adds	r7, #128	; 0x80
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40007000 	.word	0x40007000

080087b0 <initPointers>:

uint8_t tickBuffer[50];
uint8_t tickSize;

void initPointers(DMA2D_HandleTypeDef* arg_hdma2d,
		LTDC_HandleTypeDef* arg_hltdc, SDRAM_HandleTypeDef* arg_hsdram1) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
	p_hdma2d = arg_hdma2d;
 80087bc:	4a0d      	ldr	r2, [pc, #52]	; (80087f4 <initPointers+0x44>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6013      	str	r3, [r2, #0]
	p_hltdc = arg_hltdc;
 80087c2:	4a0d      	ldr	r2, [pc, #52]	; (80087f8 <initPointers+0x48>)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	6013      	str	r3, [r2, #0]
	p_hsdram1 = arg_hsdram1;
 80087c8:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <initPointers+0x4c>)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6013      	str	r3, [r2, #0]

	LTDCSetup(p_hltdc);
 80087ce:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <initPointers+0x48>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fc70 	bl	80090b8 <LTDCSetup>
	RAMSetup(p_hsdram1);
 80087d8:	4b08      	ldr	r3, [pc, #32]	; (80087fc <initPointers+0x4c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 fab1 	bl	8009d44 <RAMSetup>
	DMASetup(p_hdma2d);
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <initPointers+0x44>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fc76 	bl	80090d8 <DMASetup>
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200040ec 	.word	0x200040ec
 80087f8:	200040f0 	.word	0x200040f0
 80087fc:	200040b0 	.word	0x200040b0

08008800 <ltdc_finishConfig>:

void fmc_finishConfig() {
	p_hsdram1->Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
}

void ltdc_finishConfig() {
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
	initILI9341();
 8008804:	f000 fc78 	bl	80090f8 <initILI9341>
	RAMSetup(p_hsdram1);
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <ltdc_finishConfig+0x34>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f001 fa99 	bl	8009d44 <RAMSetup>
	/* Initialize the SDRAM */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008812:	f240 506a 	movw	r0, #1386	; 0x56a
 8008816:	f001 faa5 	bl	8009d64 <BSP_SDRAM_Initialization_sequence>
	/* Set the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800881a:	4807      	ldr	r0, [pc, #28]	; (8008838 <ltdc_finishConfig+0x38>)
 800881c:	f000 fd3c 	bl	8009298 <BSP_LCD_SetFont>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8008820:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008824:	2001      	movs	r0, #1
 8008826:	f000 fc8f 	bl	8009148 <BSP_LCD_LayerDefaultInit>
	HAL_Delay(100);
 800882a:	2064      	movs	r0, #100	; 0x64
 800882c:	f7f8 fae4 	bl	8000df8 <HAL_Delay>
}
 8008830:	bf00      	nop
 8008832:	bd80      	pop	{r7, pc}
 8008834:	200040b0 	.word	0x200040b0
 8008838:	20000010 	.word	0x20000010

0800883c <ts_init>:
void ts_init(TS_StateTypeDef* struktura) {
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	BSP_TS_Init(1000, 1000);
 8008844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800884c:	f001 faf4 	bl	8009e38 <BSP_TS_Init>
	BSP_TS_GetState(struktura);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fb2b 	bl	8009eac <BSP_TS_GetState>

}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a04      	ldr	r2, [pc, #16]	; (8008880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d101      	bne.n	8008876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008872:	f7f8 faa1 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40001000 	.word	0x40001000

08008884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008888:	bf00      	nop
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8008898:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <MX_SPI5_Init+0x64>)
 800889a:	4a18      	ldr	r2, [pc, #96]	; (80088fc <MX_SPI5_Init+0x68>)
 800889c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80088a4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80088ac:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80088b8:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088c4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088da:	2200      	movs	r2, #0
 80088dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80088de:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088e0:	220a      	movs	r2, #10
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80088e4:	4804      	ldr	r0, [pc, #16]	; (80088f8 <MX_SPI5_Init+0x64>)
 80088e6:	f7fb fafc 	bl	8003ee2 <HAL_SPI_Init>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80088f0:	f7ff ffc8 	bl	8008884 <Error_Handler>
  }

}
 80088f4:	bf00      	nop
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	200040f4 	.word	0x200040f4
 80088fc:	40015000 	.word	0x40015000

08008900 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a19      	ldr	r2, [pc, #100]	; (8008984 <HAL_SPI_MspInit+0x84>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d12c      	bne.n	800897c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	4a18      	ldr	r2, [pc, #96]	; (8008988 <HAL_SPI_MspInit+0x88>)
 8008928:	4b17      	ldr	r3, [pc, #92]	; (8008988 <HAL_SPI_MspInit+0x88>)
 800892a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008930:	6453      	str	r3, [r2, #68]	; 0x44
 8008932:	4b15      	ldr	r3, [pc, #84]	; (8008988 <HAL_SPI_MspInit+0x88>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	4a11      	ldr	r2, [pc, #68]	; (8008988 <HAL_SPI_MspInit+0x88>)
 8008944:	4b10      	ldr	r3, [pc, #64]	; (8008988 <HAL_SPI_MspInit+0x88>)
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	f043 0320 	orr.w	r3, r3, #32
 800894c:	6313      	str	r3, [r2, #48]	; 0x30
 800894e:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <HAL_SPI_MspInit+0x88>)
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800895a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800895e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008960:	2302      	movs	r3, #2
 8008962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008968:	2300      	movs	r3, #0
 800896a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800896c:	2305      	movs	r3, #5
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008970:	f107 0314 	add.w	r3, r7, #20
 8008974:	4619      	mov	r1, r3
 8008976:	4805      	ldr	r0, [pc, #20]	; (800898c <HAL_SPI_MspInit+0x8c>)
 8008978:	f7f8 fdca 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800897c:	bf00      	nop
 800897e:	3728      	adds	r7, #40	; 0x28
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40015000 	.word	0x40015000
 8008988:	40023800 	.word	0x40023800
 800898c:	40021400 	.word	0x40021400

08008990 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_SPI_MspDeInit+0x30>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10a      	bne.n	80089b8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80089a2:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <HAL_SPI_MspDeInit+0x34>)
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <HAL_SPI_MspDeInit+0x34>)
 80089a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089ac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80089ae:	f44f 7160 	mov.w	r1, #896	; 0x380
 80089b2:	4805      	ldr	r0, [pc, #20]	; (80089c8 <HAL_SPI_MspDeInit+0x38>)
 80089b4:	f7f8 ff56 	bl	8001864 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40015000 	.word	0x40015000
 80089c4:	40023800 	.word	0x40023800
 80089c8:	40021400 	.word	0x40021400

080089cc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a33      	ldr	r2, [pc, #204]	; (8008aa8 <I2Cx_MspInit+0xdc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d15f      	bne.n	8008a9e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	4a32      	ldr	r2, [pc, #200]	; (8008aac <I2Cx_MspInit+0xe0>)
 80089e4:	4b31      	ldr	r3, [pc, #196]	; (8008aac <I2Cx_MspInit+0xe0>)
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	f043 0304 	orr.w	r3, r3, #4
 80089ec:	6313      	str	r3, [r2, #48]	; 0x30
 80089ee:	4b2f      	ldr	r3, [pc, #188]	; (8008aac <I2Cx_MspInit+0xe0>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	4a2b      	ldr	r2, [pc, #172]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a00:	4b2a      	ldr	r3, [pc, #168]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0a:	4b28      	ldr	r3, [pc, #160]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8008a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8008a1c:	2312      	movs	r3, #18
 8008a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8008a24:	2302      	movs	r3, #2
 8008a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008a28:	2304      	movs	r3, #4
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	4619      	mov	r1, r3
 8008a32:	481f      	ldr	r0, [pc, #124]	; (8008ab0 <I2Cx_MspInit+0xe4>)
 8008a34:	f7f8 fd6c 	bl	8001510 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8008a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a3c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8008a3e:	f107 0314 	add.w	r3, r7, #20
 8008a42:	4619      	mov	r1, r3
 8008a44:	481b      	ldr	r0, [pc, #108]	; (8008ab4 <I2Cx_MspInit+0xe8>)
 8008a46:	f7f8 fd63 	bl	8001510 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	4a17      	ldr	r2, [pc, #92]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a50:	4b16      	ldr	r3, [pc, #88]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a58:	6413      	str	r3, [r2, #64]	; 0x40
 8008a5a:	4b14      	ldr	r3, [pc, #80]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a62:	60bb      	str	r3, [r7, #8]
 8008a64:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8008a66:	4a11      	ldr	r2, [pc, #68]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a68:	4b10      	ldr	r3, [pc, #64]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a70:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8008a72:	4a0e      	ldr	r2, [pc, #56]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a74:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <I2Cx_MspInit+0xe0>)
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a7c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	210f      	movs	r1, #15
 8008a82:	2048      	movs	r0, #72	; 0x48
 8008a84:	f7f8 fa90 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008a88:	2048      	movs	r0, #72	; 0x48
 8008a8a:	f7f8 faa9 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	210f      	movs	r1, #15
 8008a92:	2049      	movs	r0, #73	; 0x49
 8008a94:	f7f8 fa88 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8008a98:	2049      	movs	r0, #73	; 0x49
 8008a9a:	f7f8 faa1 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	3728      	adds	r7, #40	; 0x28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40005c00 	.word	0x40005c00
 8008aac:	40023800 	.word	0x40023800
 8008ab0:	40020000 	.word	0x40020000
 8008ab4:	40020800 	.word	0x40020800

08008ab8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8008abc:	4814      	ldr	r0, [pc, #80]	; (8008b10 <I2Cx_Init+0x58>)
 8008abe:	f7f9 fc89 	bl	80023d4 <HAL_I2C_GetState>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d121      	bne.n	8008b0c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8008ac8:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <I2Cx_Init+0x58>)
 8008aca:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <I2Cx_Init+0x5c>)
 8008acc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8008ace:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <I2Cx_Init+0x58>)
 8008ad0:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <I2Cx_Init+0x60>)
 8008ad2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <I2Cx_Init+0x58>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <I2Cx_Init+0x58>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <I2Cx_Init+0x58>)
 8008ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ae6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8008ae8:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <I2Cx_Init+0x58>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8008aee:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <I2Cx_Init+0x58>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <I2Cx_Init+0x58>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <I2Cx_Init+0x58>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8008b00:	4803      	ldr	r0, [pc, #12]	; (8008b10 <I2Cx_Init+0x58>)
 8008b02:	f7ff ff63 	bl	80089cc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8008b06:	4802      	ldr	r0, [pc, #8]	; (8008b10 <I2Cx_Init+0x58>)
 8008b08:	f7f8 ffec 	bl	8001ae4 <HAL_I2C_Init>
  }
}
 8008b0c:	bf00      	nop
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	2000414c 	.word	0x2000414c
 8008b14:	40005c00 	.word	0x40005c00
 8008b18:	000186a0 	.word	0x000186a0

08008b1c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8008b22:	2300      	movs	r3, #0
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	4a13      	ldr	r2, [pc, #76]	; (8008b74 <I2Cx_ITConfig+0x58>)
 8008b28:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <I2Cx_ITConfig+0x58>)
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	6313      	str	r3, [r2, #48]	; 0x30
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <I2Cx_ITConfig+0x58>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8008b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8008b44:	2301      	movs	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <I2Cx_ITConfig+0x5c>)
 8008b4e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8008b50:	1d3b      	adds	r3, r7, #4
 8008b52:	4619      	mov	r1, r3
 8008b54:	4809      	ldr	r0, [pc, #36]	; (8008b7c <I2Cx_ITConfig+0x60>)
 8008b56:	f7f8 fcdb 	bl	8001510 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	210f      	movs	r1, #15
 8008b5e:	2028      	movs	r0, #40	; 0x28
 8008b60:	f7f8 fa22 	bl	8000fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8008b64:	2028      	movs	r0, #40	; 0x28
 8008b66:	f7f8 fa3b 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
}
 8008b6a:	bf00      	nop
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	40023800 	.word	0x40023800
 8008b78:	10210000 	.word	0x10210000
 8008b7c:	40020000 	.word	0x40020000

08008b80 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af04      	add	r7, sp, #16
 8008b86:	4603      	mov	r3, r0
 8008b88:	71fb      	strb	r3, [r7, #7]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	71bb      	strb	r3, [r7, #6]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	b299      	uxth	r1, r3
 8008b9a:	79bb      	ldrb	r3, [r7, #6]
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <I2Cx_WriteData+0x4c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	9302      	str	r3, [sp, #8]
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	1d7b      	adds	r3, r7, #5
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2301      	movs	r3, #1
 8008bae:	4808      	ldr	r0, [pc, #32]	; (8008bd0 <I2Cx_WriteData+0x50>)
 8008bb0:	f7f9 f8f0 	bl	8001d94 <HAL_I2C_Mem_Write>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008bbe:	f000 f863 	bl	8008c88 <I2Cx_Error>
  }        
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000068 	.word	0x20000068
 8008bd0:	2000414c 	.word	0x2000414c

08008bd4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af04      	add	r7, sp, #16
 8008bda:	4603      	mov	r3, r0
 8008bdc:	460a      	mov	r2, r1
 8008bde:	71fb      	strb	r3, [r7, #7]
 8008be0:	4613      	mov	r3, r2
 8008be2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	b299      	uxth	r1, r3
 8008bf0:	79bb      	ldrb	r3, [r7, #6]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <I2Cx_ReadData+0x50>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	9302      	str	r3, [sp, #8]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	f107 030e 	add.w	r3, r7, #14
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2301      	movs	r3, #1
 8008c06:	4808      	ldr	r0, [pc, #32]	; (8008c28 <I2Cx_ReadData+0x54>)
 8008c08:	f7f9 f9be 	bl	8001f88 <HAL_I2C_Mem_Read>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008c16:	f000 f837 	bl	8008c88 <I2Cx_Error>
  
  }
  return value;
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20000068 	.word	0x20000068
 8008c28:	2000414c 	.word	0x2000414c

08008c2c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af04      	add	r7, sp, #16
 8008c32:	603a      	str	r2, [r7, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	71bb      	strb	r3, [r7, #6]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	b299      	uxth	r1, r3
 8008c4a:	79bb      	ldrb	r3, [r7, #6]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	4b0c      	ldr	r3, [pc, #48]	; (8008c80 <I2Cx_ReadBuffer+0x54>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	88bb      	ldrh	r3, [r7, #4]
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	4809      	ldr	r0, [pc, #36]	; (8008c84 <I2Cx_ReadBuffer+0x58>)
 8008c60:	f7f9 f992 	bl	8001f88 <HAL_I2C_Mem_Read>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e002      	b.n	8008c78 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008c72:	f000 f809 	bl	8008c88 <I2Cx_Error>

    return 1;
 8008c76:	2301      	movs	r3, #1
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000068 	.word	0x20000068
 8008c84:	2000414c 	.word	0x2000414c

08008c88 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8008c8c:	4803      	ldr	r0, [pc, #12]	; (8008c9c <I2Cx_Error+0x14>)
 8008c8e:	f7f9 f851 	bl	8001d34 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8008c92:	f7ff ff11 	bl	8008ab8 <I2Cx_Init>
}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	2000414c 	.word	0x2000414c

08008ca0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8008ca4:	4819      	ldr	r0, [pc, #100]	; (8008d0c <SPIx_Init+0x6c>)
 8008ca6:	f7fb fd7f 	bl	80047a8 <HAL_SPI_GetState>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d12b      	bne.n	8008d08 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <SPIx_Init+0x6c>)
 8008cb2:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <SPIx_Init+0x70>)
 8008cb4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008cb6:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <SPIx_Init+0x6c>)
 8008cb8:	2218      	movs	r2, #24
 8008cba:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8008cbc:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <SPIx_Init+0x6c>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8008cc2:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <SPIx_Init+0x6c>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8008cc8:	4b10      	ldr	r3, [pc, #64]	; (8008d0c <SPIx_Init+0x6c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <SPIx_Init+0x6c>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <SPIx_Init+0x6c>)
 8008cd6:	2207      	movs	r2, #7
 8008cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <SPIx_Init+0x6c>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <SPIx_Init+0x6c>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <SPIx_Init+0x6c>)
 8008ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cec:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8008cee:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <SPIx_Init+0x6c>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <SPIx_Init+0x6c>)
 8008cf6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008cfa:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <SPIx_Init+0x6c>)
 8008cfe:	f000 f853 	bl	8008da8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8008d02:	4802      	ldr	r0, [pc, #8]	; (8008d0c <SPIx_Init+0x6c>)
 8008d04:	f7fb f8ed 	bl	8003ee2 <HAL_SPI_Init>
  }
}
 8008d08:	bf00      	nop
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20003e60 	.word	0x20003e60
 8008d10:	40015000 	.word	0x40015000

08008d14 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <SPIx_Read+0x38>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f107 0108 	add.w	r1, r7, #8
 8008d2e:	4808      	ldr	r0, [pc, #32]	; (8008d50 <SPIx_Read+0x3c>)
 8008d30:	f7fb fa94 	bl	800425c <HAL_SPI_Receive>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008d3e:	f000 f827 	bl	8008d90 <SPIx_Error>
  }
  
  return readvalue;
 8008d42:	68bb      	ldr	r3, [r7, #8]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2000006c 	.word	0x2000006c
 8008d50:	20003e60 	.word	0x20003e60

08008d54 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <SPIx_Write+0x34>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	1db9      	adds	r1, r7, #6
 8008d68:	2201      	movs	r2, #1
 8008d6a:	4808      	ldr	r0, [pc, #32]	; (8008d8c <SPIx_Write+0x38>)
 8008d6c:	f7fb f944 	bl	8003ff8 <HAL_SPI_Transmit>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008d7a:	f000 f809 	bl	8008d90 <SPIx_Error>
  }
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	2000006c 	.word	0x2000006c
 8008d8c:	20003e60 	.word	0x20003e60

08008d90 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8008d94:	4803      	ldr	r0, [pc, #12]	; (8008da4 <SPIx_Error+0x14>)
 8008d96:	f7fb f907 	bl	8003fa8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8008d9a:	f7ff ff81 	bl	8008ca0 <SPIx_Init>
}
 8008d9e:	bf00      	nop
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20003e60 	.word	0x20003e60

08008da8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8008db0:	2300      	movs	r3, #0
 8008db2:	613b      	str	r3, [r7, #16]
 8008db4:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <SPIx_MspInit+0x6c>)
 8008db6:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <SPIx_MspInit+0x6c>)
 8008db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <SPIx_MspInit+0x6c>)
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	4a10      	ldr	r2, [pc, #64]	; (8008e14 <SPIx_MspInit+0x6c>)
 8008dd2:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <SPIx_MspInit+0x6c>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f043 0320 	orr.w	r3, r3, #32
 8008dda:	6313      	str	r3, [r2, #48]	; 0x30
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <SPIx_MspInit+0x6c>)
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8008de8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8008dee:	2302      	movs	r3, #2
 8008df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8008df2:	2302      	movs	r3, #2
 8008df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8008df6:	2301      	movs	r3, #1
 8008df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8008dfa:	2305      	movs	r3, #5
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	4619      	mov	r1, r3
 8008e04:	4804      	ldr	r0, [pc, #16]	; (8008e18 <SPIx_MspInit+0x70>)
 8008e06:	f7f8 fb83 	bl	8001510 <HAL_GPIO_Init>
}
 8008e0a:	bf00      	nop
 8008e0c:	3728      	adds	r7, #40	; 0x28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40023800 	.word	0x40023800
 8008e18:	40021400 	.word	0x40021400

08008e1c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8008e22:	4b36      	ldr	r3, [pc, #216]	; (8008efc <LCD_IO_Init+0xe0>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d164      	bne.n	8008ef4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8008e2a:	4b34      	ldr	r3, [pc, #208]	; (8008efc <LCD_IO_Init+0xe0>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8008e30:	2300      	movs	r3, #0
 8008e32:	60bb      	str	r3, [r7, #8]
 8008e34:	4a32      	ldr	r2, [pc, #200]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008e36:	4b32      	ldr	r3, [pc, #200]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f043 0308 	orr.w	r3, r3, #8
 8008e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8008e40:	4b2f      	ldr	r3, [pc, #188]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8008e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008e52:	2301      	movs	r3, #1
 8008e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8008e5e:	f107 030c 	add.w	r3, r7, #12
 8008e62:	4619      	mov	r1, r3
 8008e64:	4827      	ldr	r0, [pc, #156]	; (8008f04 <LCD_IO_Init+0xe8>)
 8008e66:	f7f8 fb53 	bl	8001510 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	607b      	str	r3, [r7, #4]
 8008e6e:	4a24      	ldr	r2, [pc, #144]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008e70:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e74:	f043 0308 	orr.w	r3, r3, #8
 8008e78:	6313      	str	r3, [r2, #48]	; 0x30
 8008e7a:	4b21      	ldr	r3, [pc, #132]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8008e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008e94:	2302      	movs	r3, #2
 8008e96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8008e98:	f107 030c 	add.w	r3, r7, #12
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4819      	ldr	r0, [pc, #100]	; (8008f04 <LCD_IO_Init+0xe8>)
 8008ea0:	f7f8 fb36 	bl	8001510 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008eaa:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	f043 0304 	orr.w	r3, r3, #4
 8008eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <LCD_IO_Init+0xe4>)
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8008ed0:	f107 030c 	add.w	r3, r7, #12
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	480c      	ldr	r0, [pc, #48]	; (8008f08 <LCD_IO_Init+0xec>)
 8008ed8:	f7f8 fb1a 	bl	8001510 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8008edc:	2200      	movs	r2, #0
 8008ede:	2104      	movs	r1, #4
 8008ee0:	4809      	ldr	r0, [pc, #36]	; (8008f08 <LCD_IO_Init+0xec>)
 8008ee2:	f7f8 fdcb 	bl	8001a7c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	2104      	movs	r1, #4
 8008eea:	4807      	ldr	r0, [pc, #28]	; (8008f08 <LCD_IO_Init+0xec>)
 8008eec:	f7f8 fdc6 	bl	8001a7c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8008ef0:	f7ff fed6 	bl	8008ca0 <SPIx_Init>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3720      	adds	r7, #32
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20003eb8 	.word	0x20003eb8
 8008f00:	40023800 	.word	0x40023800
 8008f04:	40020c00 	.word	0x40020c00
 8008f08:	40020800 	.word	0x40020800

08008f0c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008f16:	2201      	movs	r2, #1
 8008f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f1c:	480a      	ldr	r0, [pc, #40]	; (8008f48 <LCD_IO_WriteData+0x3c>)
 8008f1e:	f7f8 fdad 	bl	8001a7c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8008f22:	2200      	movs	r2, #0
 8008f24:	2104      	movs	r1, #4
 8008f26:	4809      	ldr	r0, [pc, #36]	; (8008f4c <LCD_IO_WriteData+0x40>)
 8008f28:	f7f8 fda8 	bl	8001a7c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff ff10 	bl	8008d54 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008f34:	2201      	movs	r2, #1
 8008f36:	2104      	movs	r1, #4
 8008f38:	4804      	ldr	r0, [pc, #16]	; (8008f4c <LCD_IO_WriteData+0x40>)
 8008f3a:	f7f8 fd9f 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40020c00 	.word	0x40020c00
 8008f4c:	40020800 	.word	0x40020800

08008f50 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f60:	480a      	ldr	r0, [pc, #40]	; (8008f8c <LCD_IO_WriteReg+0x3c>)
 8008f62:	f7f8 fd8b 	bl	8001a7c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8008f66:	2200      	movs	r2, #0
 8008f68:	2104      	movs	r1, #4
 8008f6a:	4809      	ldr	r0, [pc, #36]	; (8008f90 <LCD_IO_WriteReg+0x40>)
 8008f6c:	f7f8 fd86 	bl	8001a7c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff feed 	bl	8008d54 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	4804      	ldr	r0, [pc, #16]	; (8008f90 <LCD_IO_WriteReg+0x40>)
 8008f80:	f7f8 fd7c 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40020c00 	.word	0x40020c00
 8008f90:	40020800 	.word	0x40020800

08008f94 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	460a      	mov	r2, r1
 8008f9e:	80fb      	strh	r3, [r7, #6]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2104      	movs	r1, #4
 8008fac:	4810      	ldr	r0, [pc, #64]	; (8008ff0 <LCD_IO_ReadData+0x5c>)
 8008fae:	f7f8 fd65 	bl	8001a7c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008fb8:	480e      	ldr	r0, [pc, #56]	; (8008ff4 <LCD_IO_ReadData+0x60>)
 8008fba:	f7f8 fd5f 	bl	8001a7c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff fec7 	bl	8008d54 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8008fc6:	797b      	ldrb	r3, [r7, #5]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fea3 	bl	8008d14 <SPIx_Read>
 8008fce:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008fd6:	4807      	ldr	r0, [pc, #28]	; (8008ff4 <LCD_IO_ReadData+0x60>)
 8008fd8:	f7f8 fd50 	bl	8001a7c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008fdc:	2201      	movs	r2, #1
 8008fde:	2104      	movs	r1, #4
 8008fe0:	4803      	ldr	r0, [pc, #12]	; (8008ff0 <LCD_IO_ReadData+0x5c>)
 8008fe2:	f7f8 fd4b 	bl	8001a7c <HAL_GPIO_WritePin>
  
  return readvalue;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40020800 	.word	0x40020800
 8008ff4:	40020c00 	.word	0x40020c00

08008ff8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7f7 fef9 	bl	8000df8 <HAL_Delay>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800900e:	b580      	push	{r7, lr}
 8009010:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8009012:	f7ff fd51 	bl	8008ab8 <I2Cx_Init>
}
 8009016:	bf00      	nop
 8009018:	bd80      	pop	{r7, pc}

0800901a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800901e:	f7ff fd7d 	bl	8008b1c <I2Cx_ITConfig>
}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}

08009026 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	4603      	mov	r3, r0
 800902e:	71fb      	strb	r3, [r7, #7]
 8009030:	460b      	mov	r3, r1
 8009032:	71bb      	strb	r3, [r7, #6]
 8009034:	4613      	mov	r3, r2
 8009036:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8009038:	797a      	ldrb	r2, [r7, #5]
 800903a:	79b9      	ldrb	r1, [r7, #6]
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff fd9e 	bl	8008b80 <I2Cx_WriteData>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	460a      	mov	r2, r1
 8009056:	71fb      	strb	r3, [r7, #7]
 8009058:	4613      	mov	r3, r2
 800905a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800905c:	79ba      	ldrb	r2, [r7, #6]
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff fdb6 	bl	8008bd4 <I2Cx_ReadData>
 8009068:	4603      	mov	r3, r0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	603a      	str	r2, [r7, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	4603      	mov	r3, r0
 800907e:	71fb      	strb	r3, [r7, #7]
 8009080:	460b      	mov	r3, r1
 8009082:	71bb      	strb	r3, [r7, #6]
 8009084:	4613      	mov	r3, r2
 8009086:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8009088:	88bb      	ldrh	r3, [r7, #4]
 800908a:	79b9      	ldrb	r1, [r7, #6]
 800908c:	79f8      	ldrb	r0, [r7, #7]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	f7ff fdcc 	bl	8008c2c <I2Cx_ReadBuffer>
 8009094:	4603      	mov	r3, r0
 8009096:	b29b      	uxth	r3, r3
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7f7 fea5 	bl	8000df8 <HAL_Delay>
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <LTDCSetup>:
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c);
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex);
static void ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize,
		uint32_t ColorMode);
void LTDCSetup(LTDC_HandleTypeDef* arg_wsk) {
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	LtdcHandler = arg_wsk;
 80090c0:	4a04      	ldr	r2, [pc, #16]	; (80090d4 <LTDCSetup+0x1c>)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6013      	str	r3, [r2, #0]
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	200041a0 	.word	0x200041a0

080090d8 <DMASetup>:
void DMASetup(DMA2D_HandleTypeDef* arg_wsk) {
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	Dma2dHandler = arg_wsk;
 80090e0:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <DMASetup+0x1c>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6013      	str	r3, [r2, #0]
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20003ebc 	.word	0x20003ebc

080090f8 <initILI9341>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */

void initILI9341() {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
	/* Select the device */
	LcdDrv = &ili9341_drv;
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <initILI9341+0x18>)
 80090fe:	4a05      	ldr	r2, [pc, #20]	; (8009114 <initILI9341+0x1c>)
 8009100:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8009102:	4b03      	ldr	r3, [pc, #12]	; (8009110 <initILI9341+0x18>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4798      	blx	r3
}
 800910a:	bf00      	nop
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200041a4 	.word	0x200041a4
 8009114:	2000001c 	.word	0x2000001c

08009118 <BSP_LCD_GetXSize>:

/**
 * @brief  Gets the LCD X size.
 * @retval The used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void) {
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelWidth();
 800911c:	4b03      	ldr	r3, [pc, #12]	; (800912c <BSP_LCD_GetXSize+0x14>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	4798      	blx	r3
 8009124:	4603      	mov	r3, r0
}
 8009126:	4618      	mov	r0, r3
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200041a4 	.word	0x200041a4

08009130 <BSP_LCD_GetYSize>:

/**
 * @brief  Gets the LCD Y size.
 * @retval The used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void) {
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelHeight();
 8009134:	4b03      	ldr	r3, [pc, #12]	; (8009144 <BSP_LCD_GetYSize+0x14>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	4798      	blx	r3
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200041a4 	.word	0x200041a4

08009148 <BSP_LCD_LayerDefaultInit>:
/**
 * @brief  Initializes the LCD layers.
 * @param  LayerIndex: the layer foreground or background.
 * @param  FB_Address: the layer frame buffer.
 */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address) {
 8009148:	b580      	push	{r7, lr}
 800914a:	b090      	sub	sp, #64	; 0x40
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	80fb      	strh	r3, [r7, #6]
	LCD_LayerCfgTypeDef Layercfg;

	/* Layer Init */
	Layercfg.WindowX0 = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]
	Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8009158:	f7ff ffde 	bl	8009118 <BSP_LCD_GetXSize>
 800915c:	4603      	mov	r3, r0
 800915e:	613b      	str	r3, [r7, #16]
	Layercfg.WindowY0 = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
	Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8009164:	f7ff ffe4 	bl	8009130 <BSP_LCD_GetYSize>
 8009168:	4603      	mov	r3, r0
 800916a:	61bb      	str	r3, [r7, #24]
	Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800916c:	2300      	movs	r3, #0
 800916e:	61fb      	str	r3, [r7, #28]
	Layercfg.FBStartAdress = FB_Address;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	633b      	str	r3, [r7, #48]	; 0x30
	Layercfg.Alpha = 255;
 8009174:	23ff      	movs	r3, #255	; 0xff
 8009176:	623b      	str	r3, [r7, #32]
	Layercfg.Alpha0 = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
	Layercfg.Backcolor.Blue = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Layercfg.Backcolor.Green = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	Layercfg.Backcolor.Red = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800918e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
	Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009194:	2307      	movs	r3, #7
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
	Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8009198:	f7ff ffbe 	bl	8009118 <BSP_LCD_GetXSize>
 800919c:	4603      	mov	r3, r0
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
	Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80091a0:	f7ff ffc6 	bl	8009130 <BSP_LCD_GetYSize>
 80091a4:	4603      	mov	r3, r0
 80091a6:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_LTDC_ConfigLayer(LtdcHandler, &Layercfg, LayerIndex);
 80091a8:	4b17      	ldr	r3, [pc, #92]	; (8009208 <BSP_LCD_LayerDefaultInit+0xc0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	f107 010c 	add.w	r1, r7, #12
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f9 fd9c 	bl	8002cf0 <HAL_LTDC_ConfigLayer>

	DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	4914      	ldr	r1, [pc, #80]	; (800920c <BSP_LCD_LayerDefaultInit+0xc4>)
 80091bc:	4613      	mov	r3, r2
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	3304      	adds	r3, #4
 80091c8:	f04f 32ff 	mov.w	r2, #4294967295
 80091cc:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].pFont = &Font24;
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	490e      	ldr	r1, [pc, #56]	; (800920c <BSP_LCD_LayerDefaultInit+0xc4>)
 80091d2:	4613      	mov	r3, r2
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	3308      	adds	r3, #8
 80091de:	4a0c      	ldr	r2, [pc, #48]	; (8009210 <BSP_LCD_LayerDefaultInit+0xc8>)
 80091e0:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80091e2:	88fa      	ldrh	r2, [r7, #6]
 80091e4:	4909      	ldr	r1, [pc, #36]	; (800920c <BSP_LCD_LayerDefaultInit+0xc4>)
 80091e6:	4613      	mov	r3, r2
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80091f4:	601a      	str	r2, [r3, #0]

	/* Dithering activation */
	HAL_LTDC_EnableDither(LtdcHandler);
 80091f6:	4b04      	ldr	r3, [pc, #16]	; (8009208 <BSP_LCD_LayerDefaultInit+0xc0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f9 fdb6 	bl	8002d6c <HAL_LTDC_EnableDither>
}
 8009200:	bf00      	nop
 8009202:	3740      	adds	r7, #64	; 0x40
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200041a0 	.word	0x200041a0
 800920c:	20003ec4 	.word	0x20003ec4
 8009210:	20000010 	.word	0x20000010

08009214 <BSP_LCD_SelectLayer>:

/**
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: the Layer foreground or background.
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex) {
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 800921c:	4a04      	ldr	r2, [pc, #16]	; (8009230 <BSP_LCD_SelectLayer+0x1c>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6013      	str	r3, [r2, #0]
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	20003ec0 	.word	0x20003ec0

08009234 <BSP_LCD_SetTextColor>:

/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetTextColor(uint32_t Color) {
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 800923c:	4b07      	ldr	r3, [pc, #28]	; (800925c <BSP_LCD_SetTextColor+0x28>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4907      	ldr	r1, [pc, #28]	; (8009260 <BSP_LCD_SetTextColor+0x2c>)
 8009242:	4613      	mov	r3, r2
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	601a      	str	r2, [r3, #0]
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	20003ec0 	.word	0x20003ec0
 8009260:	20003ec4 	.word	0x20003ec4

08009264 <BSP_LCD_SetBackColor>:

/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetBackColor(uint32_t Color) {
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 800926c:	4b08      	ldr	r3, [pc, #32]	; (8009290 <BSP_LCD_SetBackColor+0x2c>)
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	4908      	ldr	r1, [pc, #32]	; (8009294 <BSP_LCD_SetBackColor+0x30>)
 8009272:	4613      	mov	r3, r2
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	3304      	adds	r3, #4
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20003ec0 	.word	0x20003ec0
 8009294:	20003ec4 	.word	0x20003ec4

08009298 <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 80092a0:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <BSP_LCD_SetFont+0x2c>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	4908      	ldr	r1, [pc, #32]	; (80092c8 <BSP_LCD_SetFont+0x30>)
 80092a6:	4613      	mov	r3, r2
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	3308      	adds	r3, #8
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20003ec0 	.word	0x20003ec0
 80092c8:	20003ec4 	.word	0x20003ec4

080092cc <BSP_LCD_Clear>:

/**
 * @brief  Clears the hole LCD.
 * @param  Color: the color of the background
 */
void BSP_LCD_Clear(uint32_t Color) {
 80092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	FillBuffer(ActiveLayer,
 80092d4:	4b10      	ldr	r3, [pc, #64]	; (8009318 <BSP_LCD_Clear+0x4c>)
 80092d6:	681c      	ldr	r4, [r3, #0]
			(uint32_t *) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress),
 80092d8:	4b10      	ldr	r3, [pc, #64]	; (800931c <BSP_LCD_Clear+0x50>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <BSP_LCD_Clear+0x4c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2134      	movs	r1, #52	; 0x34
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	4413      	add	r3, r2
 80092e8:	335c      	adds	r3, #92	; 0x5c
 80092ea:	681b      	ldr	r3, [r3, #0]
	FillBuffer(ActiveLayer,
 80092ec:	461d      	mov	r5, r3
 80092ee:	f7ff ff13 	bl	8009118 <BSP_LCD_GetXSize>
 80092f2:	4606      	mov	r6, r0
 80092f4:	f7ff ff1c 	bl	8009130 <BSP_LCD_GetYSize>
 80092f8:	4602      	mov	r2, r0
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2300      	movs	r3, #0
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4613      	mov	r3, r2
 8009304:	4632      	mov	r2, r6
 8009306:	4629      	mov	r1, r5
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fcdd 	bl	8009cc8 <FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009316:	bf00      	nop
 8009318:	20003ec0 	.word	0x20003ec0
 800931c:	200041a0 	.word	0x200041a0

08009320 <BSP_LCD_DisplayChar>:
 * @brief  Displays one character.
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	80fb      	strh	r3, [r7, #6]
 800932a:	460b      	mov	r3, r1
 800932c:	80bb      	strh	r3, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos,
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8009332:	4b1b      	ldr	r3, [pc, #108]	; (80093a0 <BSP_LCD_DisplayChar+0x80>)
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	491b      	ldr	r1, [pc, #108]	; (80093a4 <BSP_LCD_DisplayChar+0x84>)
 8009338:	4613      	mov	r3, r2
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	3308      	adds	r3, #8
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6819      	ldr	r1, [r3, #0]
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	f1a3 0020 	sub.w	r0, r3, #32
					*\
 DrawProp[ActiveLayer].pFont->Height
 800934e:	4b14      	ldr	r3, [pc, #80]	; (80093a0 <BSP_LCD_DisplayChar+0x80>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4c14      	ldr	r4, [pc, #80]	; (80093a4 <BSP_LCD_DisplayChar+0x84>)
 8009354:	4613      	mov	r3, r2
 8009356:	005b      	lsls	r3, r3, #1
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4423      	add	r3, r4
 800935e:	3308      	adds	r3, #8
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	88db      	ldrh	r3, [r3, #6]
					*\
 8009364:	fb03 f000 	mul.w	r0, r3, r0
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009368:	4b0d      	ldr	r3, [pc, #52]	; (80093a0 <BSP_LCD_DisplayChar+0x80>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	4c0d      	ldr	r4, [pc, #52]	; (80093a4 <BSP_LCD_DisplayChar+0x84>)
 800936e:	4613      	mov	r3, r2
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4423      	add	r3, r4
 8009378:	3308      	adds	r3, #8
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	889b      	ldrh	r3, [r3, #4]
 800937e:	3307      	adds	r3, #7
 8009380:	2b00      	cmp	r3, #0
 8009382:	da00      	bge.n	8009386 <BSP_LCD_DisplayChar+0x66>
 8009384:	3307      	adds	r3, #7
 8009386:	10db      	asrs	r3, r3, #3
 8009388:	fb03 f300 	mul.w	r3, r3, r0
	DrawChar(Xpos, Ypos,
 800938c:	18ca      	adds	r2, r1, r3
 800938e:	88b9      	ldrh	r1, [r7, #4]
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fbde 	bl	8009b54 <DrawChar>
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	bd90      	pop	{r4, r7, pc}
 80093a0:	20003ec0 	.word	0x20003ec0
 80093a4:	20003ec4 	.word	0x20003ec4

080093a8 <BSP_LCD_DisplayStringAt>:
 *                @arg CENTER_MODE
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 80093a8:	b5b0      	push	{r4, r5, r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60ba      	str	r2, [r7, #8]
 80093b0:	461a      	mov	r2, r3
 80093b2:	4603      	mov	r3, r0
 80093b4:	81fb      	strh	r3, [r7, #14]
 80093b6:	460b      	mov	r3, r1
 80093b8:	81bb      	strh	r3, [r7, #12]
 80093ba:	4613      	mov	r3, r2
 80093bc:	71fb      	strb	r3, [r7, #7]
	uint16_t refcolumn = 1, i = 0;
 80093be:	2301      	movs	r3, #1
 80093c0:	83fb      	strh	r3, [r7, #30]
 80093c2:	2300      	movs	r3, #0
 80093c4:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 80093d2:	e002      	b.n	80093da <BSP_LCD_DisplayStringAt+0x32>
		size++;
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	617a      	str	r2, [r7, #20]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1f6      	bne.n	80093d4 <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80093e6:	f7ff fe97 	bl	8009118 <BSP_LCD_GetXSize>
 80093ea:	4b4a      	ldr	r3, [pc, #296]	; (8009514 <BSP_LCD_DisplayStringAt+0x16c>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	494a      	ldr	r1, [pc, #296]	; (8009518 <BSP_LCD_DisplayStringAt+0x170>)
 80093f0:	4613      	mov	r3, r2
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	3308      	adds	r3, #8
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	889b      	ldrh	r3, [r3, #4]
 8009400:	fbb0 f3f3 	udiv	r3, r0, r3
 8009404:	613b      	str	r3, [r7, #16]

	switch (mode) {
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d01c      	beq.n	8009446 <BSP_LCD_DisplayStringAt+0x9e>
 800940c:	2b03      	cmp	r3, #3
 800940e:	d017      	beq.n	8009440 <BSP_LCD_DisplayStringAt+0x98>
 8009410:	2b01      	cmp	r3, #1
 8009412:	d12e      	bne.n	8009472 <BSP_LCD_DisplayStringAt+0xca>
	case CENTER_MODE: {
		refcolumn = X
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	1ad1      	subs	r1, r2, r3
 800941a:	4b3e      	ldr	r3, [pc, #248]	; (8009514 <BSP_LCD_DisplayStringAt+0x16c>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	483e      	ldr	r0, [pc, #248]	; (8009518 <BSP_LCD_DisplayStringAt+0x170>)
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4403      	add	r3, r0
 800942a:	3308      	adds	r3, #8
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	889b      	ldrh	r3, [r3, #4]
 8009430:	fb03 f301 	mul.w	r3, r3, r1
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	b29a      	uxth	r2, r3
		refcolumn = X
 8009438:	89fb      	ldrh	r3, [r7, #14]
 800943a:	4413      	add	r3, r2
 800943c:	83fb      	strh	r3, [r7, #30]
		break;
 800943e:	e01b      	b.n	8009478 <BSP_LCD_DisplayStringAt+0xd0>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	83fb      	strh	r3, [r7, #30]
		break;
 8009444:	e018      	b.n	8009478 <BSP_LCD_DisplayStringAt+0xd0>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	b299      	uxth	r1, r3
 800944e:	4b31      	ldr	r3, [pc, #196]	; (8009514 <BSP_LCD_DisplayStringAt+0x16c>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4831      	ldr	r0, [pc, #196]	; (8009518 <BSP_LCD_DisplayStringAt+0x170>)
 8009454:	4613      	mov	r3, r2
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4403      	add	r3, r0
 800945e:	3308      	adds	r3, #8
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	889b      	ldrh	r3, [r3, #4]
 8009464:	fb11 f303 	smulbb	r3, r1, r3
 8009468:	b29a      	uxth	r2, r3
 800946a:	89fb      	ldrh	r3, [r7, #14]
 800946c:	4413      	add	r3, r2
 800946e:	83fb      	strh	r3, [r7, #30]
		break;
 8009470:	e002      	b.n	8009478 <BSP_LCD_DisplayStringAt+0xd0>
	}
	default: {
		refcolumn = X;
 8009472:	89fb      	ldrh	r3, [r7, #14]
 8009474:	83fb      	strh	r3, [r7, #30]
		break;
 8009476:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8009478:	e01a      	b.n	80094b0 <BSP_LCD_DisplayStringAt+0x108>
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	89b9      	ldrh	r1, [r7, #12]
 8009480:	8bfb      	ldrh	r3, [r7, #30]
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff ff4c 	bl	8009320 <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8009488:	4b22      	ldr	r3, [pc, #136]	; (8009514 <BSP_LCD_DisplayStringAt+0x16c>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4922      	ldr	r1, [pc, #136]	; (8009518 <BSP_LCD_DisplayStringAt+0x170>)
 800948e:	4613      	mov	r3, r2
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	3308      	adds	r3, #8
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	889a      	ldrh	r2, [r3, #4]
 800949e:	8bfb      	ldrh	r3, [r7, #30]
 80094a0:	4413      	add	r3, r2
 80094a2:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60bb      	str	r3, [r7, #8]
		i++;
 80094aa:	8bbb      	ldrh	r3, [r7, #28]
 80094ac:	3301      	adds	r3, #1
 80094ae:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	781b      	ldrb	r3, [r3, #0]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2dc      	uxtb	r4, r3
 80094be:	f7ff fe2b 	bl	8009118 <BSP_LCD_GetXSize>
 80094c2:	4605      	mov	r5, r0
 80094c4:	8bb9      	ldrh	r1, [r7, #28]
 80094c6:	4b13      	ldr	r3, [pc, #76]	; (8009514 <BSP_LCD_DisplayStringAt+0x16c>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4813      	ldr	r0, [pc, #76]	; (8009518 <BSP_LCD_DisplayStringAt+0x170>)
 80094cc:	4613      	mov	r3, r2
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4403      	add	r3, r0
 80094d6:	3308      	adds	r3, #8
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	889b      	ldrh	r3, [r3, #4]
 80094dc:	fb03 f301 	mul.w	r3, r3, r1
 80094e0:	1aeb      	subs	r3, r5, r3
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 80094e2:	b299      	uxth	r1, r3
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <BSP_LCD_DisplayStringAt+0x16c>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	480b      	ldr	r0, [pc, #44]	; (8009518 <BSP_LCD_DisplayStringAt+0x170>)
 80094ea:	4613      	mov	r3, r2
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4403      	add	r3, r0
 80094f4:	3308      	adds	r3, #8
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	889b      	ldrh	r3, [r3, #4]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 80094fa:	4299      	cmp	r1, r3
 80094fc:	bf2c      	ite	cs
 80094fe:	2301      	movcs	r3, #1
 8009500:	2300      	movcc	r3, #0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	4023      	ands	r3, r4
 8009506:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1b6      	bne.n	800947a <BSP_LCD_DisplayStringAt+0xd2>
	}
}
 800950c:	bf00      	nop
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bdb0      	pop	{r4, r5, r7, pc}
 8009514:	20003ec0 	.word	0x20003ec0
 8009518:	20003ec4 	.word	0x20003ec4

0800951c <BSP_LCD_DrawHLine>:
 * @brief  Displays an horizontal line.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Length: line length
 */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length) {
 800951c:	b5b0      	push	{r4, r5, r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af02      	add	r7, sp, #8
 8009522:	4603      	mov	r3, r0
 8009524:	80fb      	strh	r3, [r7, #6]
 8009526:	460b      	mov	r3, r1
 8009528:	80bb      	strh	r3, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	807b      	strh	r3, [r7, #2]
	uint32_t xaddress = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]

	/* Get the line address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009532:	4b17      	ldr	r3, [pc, #92]	; (8009590 <BSP_LCD_DrawHLine+0x74>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4b17      	ldr	r3, [pc, #92]	; (8009594 <BSP_LCD_DrawHLine+0x78>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2134      	movs	r1, #52	; 0x34
 800953c:	fb01 f303 	mul.w	r3, r1, r3
 8009540:	4413      	add	r3, r2
 8009542:	335c      	adds	r3, #92	; 0x5c
 8009544:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8009546:	f7ff fde7 	bl	8009118 <BSP_LCD_GetXSize>
 800954a:	4602      	mov	r2, r0
 800954c:	88bb      	ldrh	r3, [r7, #4]
 800954e:	fb03 f202 	mul.w	r2, r3, r2
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009558:	4423      	add	r3, r4
 800955a:	60fb      	str	r3, [r7, #12]

	/* Write line */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Length, 1, 0,
 800955c:	4b0d      	ldr	r3, [pc, #52]	; (8009594 <BSP_LCD_DrawHLine+0x78>)
 800955e:	6818      	ldr	r0, [r3, #0]
 8009560:	68fc      	ldr	r4, [r7, #12]
 8009562:	887d      	ldrh	r5, [r7, #2]
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <BSP_LCD_DrawHLine+0x78>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	490b      	ldr	r1, [pc, #44]	; (8009598 <BSP_LCD_DrawHLine+0x7c>)
 800956a:	4613      	mov	r3, r2
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	2300      	movs	r3, #0
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	2301      	movs	r3, #1
 800957e:	462a      	mov	r2, r5
 8009580:	4621      	mov	r1, r4
 8009582:	f000 fba1 	bl	8009cc8 <FillBuffer>
			DrawProp[ActiveLayer].TextColor);
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bdb0      	pop	{r4, r5, r7, pc}
 800958e:	bf00      	nop
 8009590:	200041a0 	.word	0x200041a0
 8009594:	20003ec0 	.word	0x20003ec0
 8009598:	20003ec4 	.word	0x20003ec4

0800959c <BSP_LCD_DrawLine>:
 * @param  X1: the point 1 X position
 * @param  Y1: the point 1 Y position
 * @param  X2: the point 2 X position
 * @param  Y2: the point 2 Y position
 */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 800959c:	b590      	push	{r4, r7, lr}
 800959e:	b08b      	sub	sp, #44	; 0x2c
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	461a      	mov	r2, r3
 80095aa:	4623      	mov	r3, r4
 80095ac:	80fb      	strh	r3, [r7, #6]
 80095ae:	4603      	mov	r3, r0
 80095b0:	80bb      	strh	r3, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	807b      	strh	r3, [r7, #2]
 80095b6:	4613      	mov	r3, r2
 80095b8:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, yinc1 =
 80095ba:	2300      	movs	r3, #0
 80095bc:	823b      	strh	r3, [r7, #16]
 80095be:	2300      	movs	r3, #0
 80095c0:	81fb      	strh	r3, [r7, #14]
 80095c2:	2300      	movs	r3, #0
 80095c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80095c6:	2300      	movs	r3, #0
 80095c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80095ca:	2300      	movs	r3, #0
 80095cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80095ce:	2300      	movs	r3, #0
 80095d0:	843b      	strh	r3, [r7, #32]
 80095d2:	2300      	movs	r3, #0
 80095d4:	83fb      	strh	r3, [r7, #30]
			0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80095d6:	2300      	movs	r3, #0
 80095d8:	83bb      	strh	r3, [r7, #28]
 80095da:	2300      	movs	r3, #0
 80095dc:	837b      	strh	r3, [r7, #26]
 80095de:	2300      	movs	r3, #0
 80095e0:	833b      	strh	r3, [r7, #24]
 80095e2:	2300      	movs	r3, #0
 80095e4:	82fb      	strh	r3, [r7, #22]
 80095e6:	2300      	movs	r3, #0
 80095e8:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	827b      	strh	r3, [r7, #18]

	deltax = ABS(X2 - X1); /* The difference between the x's */
 80095ee:	887a      	ldrh	r2, [r7, #2]
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfb8      	it	lt
 80095f8:	425b      	neglt	r3, r3
 80095fa:	823b      	strh	r3, [r7, #16]
	deltay = ABS(Y2 - Y1); /* The difference between the y's */
 80095fc:	883a      	ldrh	r2, [r7, #0]
 80095fe:	88bb      	ldrh	r3, [r7, #4]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	bfb8      	it	lt
 8009606:	425b      	neglt	r3, r3
 8009608:	81fb      	strh	r3, [r7, #14]
	x = X1; /* Start x off at the first pixel */
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = Y1; /* Start y off at the first pixel */
 800960e:	88bb      	ldrh	r3, [r7, #4]
 8009610:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (X2 >= X1) /* The x-values are increasing */
 8009612:	887a      	ldrh	r2, [r7, #2]
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	429a      	cmp	r2, r3
 8009618:	d304      	bcc.n	8009624 <BSP_LCD_DrawLine+0x88>
	{
		xinc1 = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 800961e:	2301      	movs	r3, #1
 8009620:	843b      	strh	r3, [r7, #32]
 8009622:	e005      	b.n	8009630 <BSP_LCD_DrawLine+0x94>
	} else /* The x-values are decreasing */
	{
		xinc1 = -1;
 8009624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009628:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 800962a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800962e:	843b      	strh	r3, [r7, #32]
	}

	if (Y2 >= Y1) /* The y-values are increasing */
 8009630:	883a      	ldrh	r2, [r7, #0]
 8009632:	88bb      	ldrh	r3, [r7, #4]
 8009634:	429a      	cmp	r2, r3
 8009636:	d304      	bcc.n	8009642 <BSP_LCD_DrawLine+0xa6>
	{
		yinc1 = 1;
 8009638:	2301      	movs	r3, #1
 800963a:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 800963c:	2301      	movs	r3, #1
 800963e:	83bb      	strh	r3, [r7, #28]
 8009640:	e005      	b.n	800964e <BSP_LCD_DrawLine+0xb2>
	} else /* The y-values are decreasing */
	{
		yinc1 = -1;
 8009642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009646:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8009648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800964c:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) /* There is at least one x-value for every y-value */
 800964e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009656:	429a      	cmp	r2, r3
 8009658:	db10      	blt.n	800967c <BSP_LCD_DrawLine+0xe0>
	{
		xinc1 = 0; /* Don't change the x when numerator >= denominator */
 800965a:	2300      	movs	r3, #0
 800965c:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0; /* Don't change the y for every iteration */
 800965e:	2300      	movs	r3, #0
 8009660:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8009662:	8a3b      	ldrh	r3, [r7, #16]
 8009664:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8009666:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800966a:	0fda      	lsrs	r2, r3, #31
 800966c:	4413      	add	r3, r2
 800966e:	105b      	asrs	r3, r3, #1
 8009670:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8009672:	89fb      	ldrh	r3, [r7, #14]
 8009674:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax; /* There are more x-values than y-values */
 8009676:	8a3b      	ldrh	r3, [r7, #16]
 8009678:	82bb      	strh	r3, [r7, #20]
 800967a:	e00f      	b.n	800969c <BSP_LCD_DrawLine+0x100>
	} else /* There is at least one y-value for every x-value */
	{
		xinc2 = 0; /* Don't change the x for every iteration */
 800967c:	2300      	movs	r3, #0
 800967e:	843b      	strh	r3, [r7, #32]
		yinc1 = 0; /* Don't change the y when numerator >= denominator */
 8009680:	2300      	movs	r3, #0
 8009682:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8009684:	89fb      	ldrh	r3, [r7, #14]
 8009686:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8009688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800968c:	0fda      	lsrs	r2, r3, #31
 800968e:	4413      	add	r3, r2
 8009690:	105b      	asrs	r3, r3, #1
 8009692:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8009694:	8a3b      	ldrh	r3, [r7, #16]
 8009696:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay; /* There are more y-values than x-values */
 8009698:	89fb      	ldrh	r3, [r7, #14]
 800969a:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800969c:	2300      	movs	r3, #0
 800969e:	827b      	strh	r3, [r7, #18]
 80096a0:	e038      	b.n	8009714 <BSP_LCD_DrawLine+0x178>
		BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor); /* Draw the current pixel */
 80096a2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80096a4:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80096a6:	4b20      	ldr	r3, [pc, #128]	; (8009728 <BSP_LCD_DrawLine+0x18c>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	4920      	ldr	r1, [pc, #128]	; (800972c <BSP_LCD_DrawLine+0x190>)
 80096ac:	4613      	mov	r3, r2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	4621      	mov	r1, r4
 80096bc:	f000 fa22 	bl	8009b04 <BSP_LCD_DrawPixel>
		num += numadd; /* Increase the numerator by the top of the fraction */
 80096c0:	8b3a      	ldrh	r2, [r7, #24]
 80096c2:	8afb      	ldrh	r3, [r7, #22]
 80096c4:	4413      	add	r3, r2
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	833b      	strh	r3, [r7, #24]
		if (num >= den) /* Check if numerator >= denominator */
 80096ca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80096ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	db0e      	blt.n	80096f4 <BSP_LCD_DrawLine+0x158>
		{
			num -= den; /* Calculate the new numerator value */
 80096d6:	8b3a      	ldrh	r2, [r7, #24]
 80096d8:	8b7b      	ldrh	r3, [r7, #26]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	833b      	strh	r3, [r7, #24]
			x += xinc1; /* Change the x as appropriate */
 80096e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80096e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096e4:	4413      	add	r3, r2
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1; /* Change the y as appropriate */
 80096ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096ec:	8bfb      	ldrh	r3, [r7, #30]
 80096ee:	4413      	add	r3, r2
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2; /* Change the x as appropriate */
 80096f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80096f6:	8c3b      	ldrh	r3, [r7, #32]
 80096f8:	4413      	add	r3, r2
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2; /* Change the y as appropriate */
 80096fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009700:	8bbb      	ldrh	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	b29b      	uxth	r3, r3
 8009706:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8009708:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800970c:	b29b      	uxth	r3, r3
 800970e:	3301      	adds	r3, #1
 8009710:	b29b      	uxth	r3, r3
 8009712:	827b      	strh	r3, [r7, #18]
 8009714:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009718:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800971c:	429a      	cmp	r2, r3
 800971e:	ddc0      	ble.n	80096a2 <BSP_LCD_DrawLine+0x106>
	}
}
 8009720:	bf00      	nop
 8009722:	372c      	adds	r7, #44	; 0x2c
 8009724:	46bd      	mov	sp, r7
 8009726:	bd90      	pop	{r4, r7, pc}
 8009728:	20003ec0 	.word	0x20003ec0
 800972c:	20003ec4 	.word	0x20003ec4

08009730 <BSP_LCD_DrawCircle>:
 * @brief  Displays a circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	80fb      	strh	r3, [r7, #6]
 800973a:	460b      	mov	r3, r1
 800973c:	80bb      	strh	r3, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	807b      	strh	r3, [r7, #2]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8009742:	887b      	ldrh	r3, [r7, #2]
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	f1c3 0303 	rsb	r3, r3, #3
 800974a:	617b      	str	r3, [r7, #20]
	curx = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]
	cury = Radius;
 8009750:	887b      	ldrh	r3, [r7, #2]
 8009752:	60fb      	str	r3, [r7, #12]

	while (curx <= cury) {
 8009754:	e0cf      	b.n	80098f6 <BSP_LCD_DrawCircle+0x1c6>
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury),
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	b29a      	uxth	r2, r3
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	4413      	add	r3, r2
 800975e:	b298      	uxth	r0, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	b29b      	uxth	r3, r3
 8009764:	88ba      	ldrh	r2, [r7, #4]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	b29c      	uxth	r4, r3
 800976a:	4b67      	ldr	r3, [pc, #412]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	4967      	ldr	r1, [pc, #412]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 8009770:	4613      	mov	r3, r2
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	4621      	mov	r1, r4
 8009780:	f000 f9c0 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury),
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	b29b      	uxth	r3, r3
 8009788:	88fa      	ldrh	r2, [r7, #6]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	b298      	uxth	r0, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	b29b      	uxth	r3, r3
 8009792:	88ba      	ldrh	r2, [r7, #4]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	b29c      	uxth	r4, r3
 8009798:	4b5b      	ldr	r3, [pc, #364]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	495b      	ldr	r1, [pc, #364]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 800979e:	4613      	mov	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	4621      	mov	r1, r4
 80097ae:	f000 f9a9 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx),
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	4413      	add	r3, r2
 80097ba:	b298      	uxth	r0, r3
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	88ba      	ldrh	r2, [r7, #4]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	b29c      	uxth	r4, r3
 80097c6:	4b50      	ldr	r3, [pc, #320]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4950      	ldr	r1, [pc, #320]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 80097cc:	4613      	mov	r3, r2
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	4621      	mov	r1, r4
 80097dc:	f000 f992 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx),
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	b298      	uxth	r0, r3
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	88ba      	ldrh	r2, [r7, #4]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	b29c      	uxth	r4, r3
 80097f4:	4b44      	ldr	r3, [pc, #272]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	4944      	ldr	r1, [pc, #272]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 80097fa:	4613      	mov	r3, r2
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	440b      	add	r3, r1
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	4621      	mov	r1, r4
 800980a:	f000 f97b 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury),
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	b29a      	uxth	r2, r3
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	4413      	add	r3, r2
 8009816:	b298      	uxth	r0, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	b29a      	uxth	r2, r3
 800981c:	88bb      	ldrh	r3, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	b29c      	uxth	r4, r3
 8009822:	4b39      	ldr	r3, [pc, #228]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	4939      	ldr	r1, [pc, #228]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 8009828:	4613      	mov	r3, r2
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	4621      	mov	r1, r4
 8009838:	f000 f964 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury),
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	b29b      	uxth	r3, r3
 8009840:	88fa      	ldrh	r2, [r7, #6]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	b298      	uxth	r0, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	b29a      	uxth	r2, r3
 800984a:	88bb      	ldrh	r3, [r7, #4]
 800984c:	4413      	add	r3, r2
 800984e:	b29c      	uxth	r4, r3
 8009850:	4b2d      	ldr	r3, [pc, #180]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	492d      	ldr	r1, [pc, #180]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 8009856:	4613      	mov	r3, r2
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	4621      	mov	r1, r4
 8009866:	f000 f94d 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx),
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	b29a      	uxth	r2, r3
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	4413      	add	r3, r2
 8009872:	b298      	uxth	r0, r3
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	b29a      	uxth	r2, r3
 8009878:	88bb      	ldrh	r3, [r7, #4]
 800987a:	4413      	add	r3, r2
 800987c:	b29c      	uxth	r4, r3
 800987e:	4b22      	ldr	r3, [pc, #136]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4922      	ldr	r1, [pc, #136]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 8009884:	4613      	mov	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	4621      	mov	r1, r4
 8009894:	f000 f936 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx),
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	b29b      	uxth	r3, r3
 800989c:	88fa      	ldrh	r2, [r7, #6]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	b298      	uxth	r0, r3
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	88bb      	ldrh	r3, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	b29c      	uxth	r4, r3
 80098ac:	4b16      	ldr	r3, [pc, #88]	; (8009908 <BSP_LCD_DrawCircle+0x1d8>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	4916      	ldr	r1, [pc, #88]	; (800990c <BSP_LCD_DrawCircle+0x1dc>)
 80098b2:	4613      	mov	r3, r2
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	4621      	mov	r1, r4
 80098c2:	f000 f91f 	bl	8009b04 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);

		if (d < 0) {
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da06      	bge.n	80098da <BSP_LCD_DrawCircle+0x1aa>
			d += (curx << 2) + 6;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	009a      	lsls	r2, r3, #2
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	4413      	add	r3, r2
 80098d4:	3306      	adds	r3, #6
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e00a      	b.n	80098f0 <BSP_LCD_DrawCircle+0x1c0>
		} else {
			d += ((curx - cury) << 2) + 10;
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	009a      	lsls	r2, r3, #2
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4413      	add	r3, r2
 80098e6:	330a      	adds	r3, #10
 80098e8:	617b      	str	r3, [r7, #20]
			cury--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3301      	adds	r3, #1
 80098f4:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	f67f af2b 	bls.w	8009756 <BSP_LCD_DrawCircle+0x26>
	}
}
 8009900:	bf00      	nop
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	bd90      	pop	{r4, r7, pc}
 8009908:	20003ec0 	.word	0x20003ec0
 800990c:	20003ec4 	.word	0x20003ec4

08009910 <BSP_LCD_FillRect>:
 * @param  Ypos: the Y position
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height) {
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	b086      	sub	sp, #24
 8009916:	af02      	add	r7, sp, #8
 8009918:	4604      	mov	r4, r0
 800991a:	4608      	mov	r0, r1
 800991c:	4611      	mov	r1, r2
 800991e:	461a      	mov	r2, r3
 8009920:	4623      	mov	r3, r4
 8009922:	80fb      	strh	r3, [r7, #6]
 8009924:	4603      	mov	r3, r0
 8009926:	80bb      	strh	r3, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	807b      	strh	r3, [r7, #2]
 800992c:	4613      	mov	r3, r2
 800992e:	803b      	strh	r3, [r7, #0]
	uint32_t xaddress = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009934:	4b20      	ldr	r3, [pc, #128]	; (80099b8 <BSP_LCD_FillRect+0xa8>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4920      	ldr	r1, [pc, #128]	; (80099bc <BSP_LCD_FillRect+0xac>)
 800993a:	4613      	mov	r3, r2
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fc74 	bl	8009234 <BSP_LCD_SetTextColor>

	/* Get the rectangle start address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 800994c:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <BSP_LCD_FillRect+0xb0>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <BSP_LCD_FillRect+0xa8>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2134      	movs	r1, #52	; 0x34
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	335c      	adds	r3, #92	; 0x5c
 800995e:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8009960:	f7ff fbda 	bl	8009118 <BSP_LCD_GetXSize>
 8009964:	4602      	mov	r2, r0
 8009966:	88bb      	ldrh	r3, [r7, #4]
 8009968:	fb03 f202 	mul.w	r2, r3, r2
 800996c:	88fb      	ldrh	r3, [r7, #6]
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009972:	4423      	add	r3, r4
 8009974:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009976:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <BSP_LCD_FillRect+0xa8>)
 8009978:	681c      	ldr	r4, [r3, #0]
 800997a:	68fd      	ldr	r5, [r7, #12]
 800997c:	887e      	ldrh	r6, [r7, #2]
 800997e:	f8b7 8000 	ldrh.w	r8, [r7]
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8009982:	f7ff fbc9 	bl	8009118 <BSP_LCD_GetXSize>
 8009986:	4602      	mov	r2, r0
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009988:	887b      	ldrh	r3, [r7, #2]
 800998a:	1ad1      	subs	r1, r2, r3
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <BSP_LCD_FillRect+0xa8>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	480a      	ldr	r0, [pc, #40]	; (80099bc <BSP_LCD_FillRect+0xac>)
 8009992:	4613      	mov	r3, r2
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4403      	add	r3, r0
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	9301      	str	r3, [sp, #4]
 80099a0:	9100      	str	r1, [sp, #0]
 80099a2:	4643      	mov	r3, r8
 80099a4:	4632      	mov	r2, r6
 80099a6:	4629      	mov	r1, r5
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 f98d 	bl	8009cc8 <FillBuffer>
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	20003ec0 	.word	0x20003ec0
 80099bc:	20003ec4 	.word	0x20003ec4
 80099c0:	200041a0 	.word	0x200041a0

080099c4 <BSP_LCD_FillCircle>:
 * @brief  Displays a full circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	80fb      	strh	r3, [r7, #6]
 80099ce:	460b      	mov	r3, r1
 80099d0:	80bb      	strh	r3, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	807b      	strh	r3, [r7, #2]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 80099d6:	887b      	ldrh	r3, [r7, #2]
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	f1c3 0303 	rsb	r3, r3, #3
 80099de:	617b      	str	r3, [r7, #20]

	curx = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	613b      	str	r3, [r7, #16]
	cury = Radius;
 80099e4:	887b      	ldrh	r3, [r7, #2]
 80099e6:	60fb      	str	r3, [r7, #12]

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80099e8:	4b44      	ldr	r3, [pc, #272]	; (8009afc <BSP_LCD_FillCircle+0x138>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	4944      	ldr	r1, [pc, #272]	; (8009b00 <BSP_LCD_FillCircle+0x13c>)
 80099ee:	4613      	mov	r3, r2
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fc1a 	bl	8009234 <BSP_LCD_SetTextColor>

	while (curx <= cury) {
 8009a00:	e061      	b.n	8009ac6 <BSP_LCD_FillCircle+0x102>
		if (cury > 0) {
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d021      	beq.n	8009a4c <BSP_LCD_FillCircle+0x88>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	88fa      	ldrh	r2, [r7, #6]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	b298      	uxth	r0, r3
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	88bb      	ldrh	r3, [r7, #4]
 8009a18:	4413      	add	r3, r2
 8009a1a:	b299      	uxth	r1, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	461a      	mov	r2, r3
 8009a26:	f7ff fd79 	bl	800951c <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	88fa      	ldrh	r2, [r7, #6]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	b298      	uxth	r0, r3
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	88ba      	ldrh	r2, [r7, #4]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	b299      	uxth	r1, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7ff fd68 	bl	800951c <BSP_LCD_DrawHLine>
		}

		if (curx > 0) {
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d021      	beq.n	8009a96 <BSP_LCD_FillCircle+0xd2>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	88fa      	ldrh	r2, [r7, #6]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	b298      	uxth	r0, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	88ba      	ldrh	r2, [r7, #4]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	b299      	uxth	r1, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f7ff fd54 	bl	800951c <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	88fa      	ldrh	r2, [r7, #6]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	b298      	uxth	r0, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	88bb      	ldrh	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	b299      	uxth	r1, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	f7ff fd43 	bl	800951c <BSP_LCD_DrawHLine>
		}
		if (d < 0) {
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	da06      	bge.n	8009aaa <BSP_LCD_FillCircle+0xe6>
			d += (curx << 2) + 6;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	009a      	lsls	r2, r3, #2
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3306      	adds	r3, #6
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	e00a      	b.n	8009ac0 <BSP_LCD_FillCircle+0xfc>
		} else {
			d += ((curx - cury) << 2) + 10;
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	009a      	lsls	r2, r3, #2
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	330a      	adds	r3, #10
 8009ab8:	617b      	str	r3, [r7, #20]
			cury--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d999      	bls.n	8009a02 <BSP_LCD_FillCircle+0x3e>
	}

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009ace:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <BSP_LCD_FillCircle+0x138>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	490b      	ldr	r1, [pc, #44]	; (8009b00 <BSP_LCD_FillCircle+0x13c>)
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	4413      	add	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	440b      	add	r3, r1
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fba7 	bl	8009234 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8009ae6:	887a      	ldrh	r2, [r7, #2]
 8009ae8:	88b9      	ldrh	r1, [r7, #4]
 8009aea:	88fb      	ldrh	r3, [r7, #6]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fe1f 	bl	8009730 <BSP_LCD_DrawCircle>
}
 8009af2:	bf00      	nop
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20003ec0 	.word	0x20003ec0
 8009b00:	20003ec4 	.word	0x20003ec4

08009b04 <BSP_LCD_DrawPixel>:
 * @brief  Writes Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8009b04:	b5b0      	push	{r4, r5, r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	603a      	str	r2, [r7, #0]
 8009b0e:	80fb      	strh	r3, [r7, #6]
 8009b10:	460b      	mov	r3, r1
 8009b12:	80bb      	strh	r3, [r7, #4]
	/* Write data value to all SDRAM memory */
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009b14:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <BSP_LCD_DrawPixel+0x48>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <BSP_LCD_DrawPixel+0x4c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2134      	movs	r1, #52	; 0x34
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	335c      	adds	r3, #92	; 0x5c
 8009b26:	681c      	ldr	r4, [r3, #0]
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8009b28:	88bd      	ldrh	r5, [r7, #4]
 8009b2a:	f7ff faf5 	bl	8009118 <BSP_LCD_GetXSize>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	fb03 f205 	mul.w	r2, r3, r5
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4423      	add	r3, r4
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8009b3c:	461a      	mov	r2, r3
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6013      	str	r3, [r2, #0]
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bdb0      	pop	{r4, r5, r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200041a0 	.word	0x200041a0
 8009b50:	20003ec0 	.word	0x20003ec0

08009b54 <DrawChar>:
 * @brief  Draws a character on LCD.
 * @param  Xpos: the Line where to display the character shape
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c) {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	603a      	str	r2, [r7, #0]
 8009b5e:	80fb      	strh	r3, [r7, #6]
 8009b60:	460b      	mov	r3, r1
 8009b62:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	61fb      	str	r3, [r7, #28]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]

	height = DrawProp[ActiveLayer].pFont->Height;
 8009b70:	4b53      	ldr	r3, [pc, #332]	; (8009cc0 <DrawChar+0x16c>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4953      	ldr	r1, [pc, #332]	; (8009cc4 <DrawChar+0x170>)
 8009b76:	4613      	mov	r3, r2
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	3308      	adds	r3, #8
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	88db      	ldrh	r3, [r3, #6]
 8009b86:	827b      	strh	r3, [r7, #18]
	width = DrawProp[ActiveLayer].pFont->Width;
 8009b88:	4b4d      	ldr	r3, [pc, #308]	; (8009cc0 <DrawChar+0x16c>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	494d      	ldr	r1, [pc, #308]	; (8009cc4 <DrawChar+0x170>)
 8009b8e:	4613      	mov	r3, r2
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	3308      	adds	r3, #8
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	889b      	ldrh	r3, [r3, #4]
 8009b9e:	823b      	strh	r3, [r7, #16]

	offset = 8 * ((width + 7) / 8) - width;
 8009ba0:	8a3b      	ldrh	r3, [r7, #16]
 8009ba2:	3307      	adds	r3, #7
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	da00      	bge.n	8009baa <DrawChar+0x56>
 8009ba8:	3307      	adds	r3, #7
 8009baa:	10db      	asrs	r3, r3, #3
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	8a3b      	ldrh	r3, [r7, #16]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < height; i++) {
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	e076      	b.n	8009cae <DrawChar+0x15a>
		pchar = ((uint8_t *) c + (width + 7) / 8 * i);
 8009bc0:	8a3b      	ldrh	r3, [r7, #16]
 8009bc2:	3307      	adds	r3, #7
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da00      	bge.n	8009bca <DrawChar+0x76>
 8009bc8:	3307      	adds	r3, #7
 8009bca:	10db      	asrs	r3, r3, #3
 8009bcc:	461a      	mov	r2, r3
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	fb03 f302 	mul.w	r3, r3, r2
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	60bb      	str	r3, [r7, #8]

		switch (((width + 7) / 8)) {
 8009bda:	8a3b      	ldrh	r3, [r7, #16]
 8009bdc:	3307      	adds	r3, #7
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da00      	bge.n	8009be4 <DrawChar+0x90>
 8009be2:	3307      	adds	r3, #7
 8009be4:	10db      	asrs	r3, r3, #3
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d002      	beq.n	8009bf0 <DrawChar+0x9c>
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d004      	beq.n	8009bf8 <DrawChar+0xa4>
 8009bee:	e00c      	b.n	8009c0a <DrawChar+0xb6>
		case 1:
			line = pchar[0];
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	617b      	str	r3, [r7, #20]
			break;
 8009bf6:	e016      	b.n	8009c26 <DrawChar+0xd2>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	3201      	adds	r2, #1
 8009c02:	7812      	ldrb	r2, [r2, #0]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]
			break;
 8009c08:	e00d      	b.n	8009c26 <DrawChar+0xd2>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	041a      	lsls	r2, r3, #16
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	3301      	adds	r3, #1
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	3202      	adds	r2, #2
 8009c1e:	7812      	ldrb	r2, [r2, #0]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
			break;
 8009c24:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8009c26:	2300      	movs	r3, #0
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e036      	b.n	8009c9a <DrawChar+0x146>
			if (line & (1 << (width - j + offset - 1))) {
 8009c2c:	8a3a      	ldrh	r2, [r7, #16]
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	1ad2      	subs	r2, r2, r3
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	4413      	add	r3, r2
 8009c36:	3b01      	subs	r3, #1
 8009c38:	2201      	movs	r2, #1
 8009c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d012      	beq.n	8009c6e <DrawChar+0x11a>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	4413      	add	r3, r2
 8009c50:	b298      	uxth	r0, r3
 8009c52:	4b1b      	ldr	r3, [pc, #108]	; (8009cc0 <DrawChar+0x16c>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	491b      	ldr	r1, [pc, #108]	; (8009cc4 <DrawChar+0x170>)
 8009c58:	4613      	mov	r3, r2
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	88bb      	ldrh	r3, [r7, #4]
 8009c66:	4619      	mov	r1, r3
 8009c68:	f7ff ff4c 	bl	8009b04 <BSP_LCD_DrawPixel>
 8009c6c:	e012      	b.n	8009c94 <DrawChar+0x140>
						DrawProp[ActiveLayer].TextColor);
			} else {
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	4413      	add	r3, r2
 8009c76:	b298      	uxth	r0, r3
 8009c78:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <DrawChar+0x16c>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	4911      	ldr	r1, [pc, #68]	; (8009cc4 <DrawChar+0x170>)
 8009c7e:	4613      	mov	r3, r2
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	3304      	adds	r3, #4
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	88bb      	ldrh	r3, [r7, #4]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f7ff ff38 	bl	8009b04 <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	3301      	adds	r3, #1
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	8a3a      	ldrh	r2, [r7, #16]
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d8c4      	bhi.n	8009c2c <DrawChar+0xd8>
						DrawProp[ActiveLayer].BackColor);
			}
		}
		Ypos++;
 8009ca2:	88bb      	ldrh	r3, [r7, #4]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < height; i++) {
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
 8009cae:	8a7a      	ldrh	r2, [r7, #18]
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d884      	bhi.n	8009bc0 <DrawChar+0x6c>
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20003ec0 	.word	0x20003ec0
 8009cc4:	20003ec4 	.word	0x20003ec4

08009cc8 <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]

	/* Register to memory mode with ARGB8888 as color Mode */

	Dma2dHandler->Init.Mode = DMA2D_R2M;
 8009cd6:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <FillBuffer+0x78>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009cde:	605a      	str	r2, [r3, #4]
	Dma2dHandler->Init.ColorMode = DMA2D_ARGB8888;
 8009ce0:	4b17      	ldr	r3, [pc, #92]	; (8009d40 <FillBuffer+0x78>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	609a      	str	r2, [r3, #8]
	Dma2dHandler->Init.OutputOffset = OffLine;
 8009ce8:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <FillBuffer+0x78>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	60da      	str	r2, [r3, #12]

	//Dma2dHandler->Instance = DMA2D;

	/* DMA2D Initialization */

	if (HAL_DMA2D_Init(Dma2dHandler) == HAL_OK) {
 8009cf0:	4b13      	ldr	r3, [pc, #76]	; (8009d40 <FillBuffer+0x78>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7f7 f981 	bl	8000ffc <HAL_DMA2D_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d11a      	bne.n	8009d36 <FillBuffer+0x6e>
		if (HAL_DMA2D_ConfigLayer(Dma2dHandler, LayerIndex) == HAL_OK) {
 8009d00:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <FillBuffer+0x78>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68f9      	ldr	r1, [r7, #12]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7f7 fad6 	bl	80012b8 <HAL_DMA2D_ConfigLayer>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d111      	bne.n	8009d36 <FillBuffer+0x6e>
			if (HAL_DMA2D_Start(Dma2dHandler, ColorIndex, (uint32_t) pDst,
 8009d12:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <FillBuffer+0x78>)
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69f9      	ldr	r1, [r7, #28]
 8009d20:	f7f7 f9b5 	bl	800108e <HAL_DMA2D_Start>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <FillBuffer+0x6e>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(Dma2dHandler, 10);
 8009d2a:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <FillBuffer+0x78>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	210a      	movs	r1, #10
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7f7 f9d7 	bl	80010e4 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20003ebc 	.word	0x20003ebc

08009d44 <RAMSetup>:

/**
 * @brief  Initializes the SDRAM device.
 */

void RAMSetup(SDRAM_HandleTypeDef* arg_wsk) {
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	SdramHandle = arg_wsk;
 8009d4c:	4a04      	ldr	r2, [pc, #16]	; (8009d60 <RAMSetup+0x1c>)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6013      	str	r3, [r2, #0]
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20003edc 	.word	0x20003edc

08009d64 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8009d70:	4b2f      	ldr	r3, [pc, #188]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009d72:	2201      	movs	r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009d76:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009d78:	2208      	movs	r2, #8
 8009d7a:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009d7c:	4b2c      	ldr	r3, [pc, #176]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009d82:	4b2b      	ldr	r3, [pc, #172]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009d88:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d90:	4927      	ldr	r1, [pc, #156]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fa f85a 	bl	8003e4c <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8009d98:	2001      	movs	r0, #1
 8009d9a:	f7f7 f82d 	bl	8000df8 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009da0:	2202      	movs	r2, #2
 8009da2:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009da4:	4b22      	ldr	r3, [pc, #136]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009da6:	2208      	movs	r2, #8
 8009da8:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009daa:	4b21      	ldr	r3, [pc, #132]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009db0:	4b1f      	ldr	r3, [pc, #124]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009db6:	4b1f      	ldr	r3, [pc, #124]	; (8009e34 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dbe:	491c      	ldr	r1, [pc, #112]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fa f843 	bl	8003e4c <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009dc6:	4b1a      	ldr	r3, [pc, #104]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dc8:	2203      	movs	r2, #3
 8009dca:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009dcc:	4b18      	ldr	r3, [pc, #96]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dce:	2208      	movs	r2, #8
 8009dd0:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 8009dd2:	4b17      	ldr	r3, [pc, #92]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009dd8:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009de6:	4912      	ldr	r1, [pc, #72]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fa f82f 	bl	8003e4c <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8009dee:	f44f 730c 	mov.w	r3, #560	; 0x230
 8009df2:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8009df4:	4b0e      	ldr	r3, [pc, #56]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009df6:	2204      	movs	r2, #4
 8009df8:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009dfa:	4b0d      	ldr	r3, [pc, #52]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e0a:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e14:	4906      	ldr	r1, [pc, #24]	; (8009e30 <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fa f818 	bl	8003e4c <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(SdramHandle, RefreshCount);
 8009e1c:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fa f83d 	bl	8003ea2 <HAL_SDRAM_ProgramRefreshRate>
}
 8009e28:	bf00      	nop
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20003ee0 	.word	0x20003ee0
 8009e34:	20003edc 	.word	0x20003edc

08009e38 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	460a      	mov	r2, r1
 8009e42:	80fb      	strh	r3, [r7, #6]
 8009e44:	4613      	mov	r3, r2
 8009e46:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8009e4c:	4a13      	ldr	r2, [pc, #76]	; (8009e9c <BSP_TS_Init+0x64>)
 8009e4e:	88fb      	ldrh	r3, [r7, #6]
 8009e50:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8009e52:	4a13      	ldr	r2, [pc, #76]	; (8009ea0 <BSP_TS_Init+0x68>)
 8009e54:	88bb      	ldrh	r3, [r7, #4]
 8009e56:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <BSP_TS_Init+0x6c>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2082      	movs	r0, #130	; 0x82
 8009e5e:	4798      	blx	r3
 8009e60:	4603      	mov	r3, r0
 8009e62:	461a      	mov	r2, r3
 8009e64:	f640 0311 	movw	r3, #2065	; 0x811
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d104      	bne.n	8009e76 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8009e6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ea8 <BSP_TS_Init+0x70>)
 8009e6e:	4a0d      	ldr	r2, [pc, #52]	; (8009ea4 <BSP_TS_Init+0x6c>)
 8009e70:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <BSP_TS_Init+0x70>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2082      	movs	r0, #130	; 0x82
 8009e84:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8009e86:	4b08      	ldr	r3, [pc, #32]	; (8009ea8 <BSP_TS_Init+0x70>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2082      	movs	r0, #130	; 0x82
 8009e8e:	4798      	blx	r3
  }

  return ret;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20003ef4 	.word	0x20003ef4
 8009ea0:	20003ef6 	.word	0x20003ef6
 8009ea4:	20000070 	.word	0x20000070
 8009ea8:	20003ef0 	.word	0x20003ef0

08009eac <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8009eb4:	4b4f      	ldr	r3, [pc, #316]	; (8009ff4 <BSP_TS_GetState+0x148>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2082      	movs	r0, #130	; 0x82
 8009ebc:	4798      	blx	r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 808d 	beq.w	8009fea <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8009ed0:	4b48      	ldr	r3, [pc, #288]	; (8009ff4 <BSP_TS_GetState+0x148>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	f107 020c 	add.w	r2, r7, #12
 8009eda:	f107 010e 	add.w	r1, r7, #14
 8009ede:	2082      	movs	r0, #130	; 0x82
 8009ee0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8009ee2:	89bb      	ldrh	r3, [r7, #12]
 8009ee4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8009eec:	89bb      	ldrh	r3, [r7, #12]
 8009eee:	4a42      	ldr	r2, [pc, #264]	; (8009ff8 <BSP_TS_GetState+0x14c>)
 8009ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef4:	08db      	lsrs	r3, r3, #3
 8009ef6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8009ef8:	8abb      	ldrh	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	82bb      	strh	r3, [r7, #20]
 8009f02:	e008      	b.n	8009f16 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8009f04:	4b3d      	ldr	r3, [pc, #244]	; (8009ffc <BSP_TS_GetState+0x150>)
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	8aba      	ldrh	r2, [r7, #20]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d903      	bls.n	8009f16 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8009f0e:	4b3b      	ldr	r3, [pc, #236]	; (8009ffc <BSP_TS_GetState+0x150>)
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8009f16:	8abb      	ldrh	r3, [r7, #20]
 8009f18:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8009f1a:	89fb      	ldrh	r3, [r7, #14]
 8009f1c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d806      	bhi.n	8009f32 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8009f24:	89fb      	ldrh	r3, [r7, #14]
 8009f26:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8009f2a:	330e      	adds	r3, #14
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	81fb      	strh	r3, [r7, #14]
 8009f30:	e005      	b.n	8009f3e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8009f32:	89fb      	ldrh	r3, [r7, #14]
 8009f34:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8009f38:	3308      	adds	r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8009f3e:	89fb      	ldrh	r3, [r7, #14]
 8009f40:	4a2f      	ldr	r2, [pc, #188]	; (800a000 <BSP_TS_GetState+0x154>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	08db      	lsrs	r3, r3, #3
 8009f48:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8009f4a:	8afb      	ldrh	r3, [r7, #22]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	82fb      	strh	r3, [r7, #22]
 8009f54:	e008      	b.n	8009f68 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8009f56:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <BSP_TS_GetState+0x158>)
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	8afa      	ldrh	r2, [r7, #22]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d903      	bls.n	8009f68 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8009f60:	4b28      	ldr	r3, [pc, #160]	; (800a004 <BSP_TS_GetState+0x158>)
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8009f68:	8afb      	ldrh	r3, [r7, #22]
 8009f6a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8009f6c:	89fb      	ldrh	r3, [r7, #14]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	4b25      	ldr	r3, [pc, #148]	; (800a008 <BSP_TS_GetState+0x15c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d906      	bls.n	8009f86 <BSP_TS_GetState+0xda>
 8009f78:	89fa      	ldrh	r2, [r7, #14]
 8009f7a:	4b23      	ldr	r3, [pc, #140]	; (800a008 <BSP_TS_GetState+0x15c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	e005      	b.n	8009f92 <BSP_TS_GetState+0xe6>
 8009f86:	4b20      	ldr	r3, [pc, #128]	; (800a008 <BSP_TS_GetState+0x15c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	89fb      	ldrh	r3, [r7, #14]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8009f94:	89bb      	ldrh	r3, [r7, #12]
 8009f96:	461a      	mov	r2, r3
 8009f98:	4b1c      	ldr	r3, [pc, #112]	; (800a00c <BSP_TS_GetState+0x160>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d906      	bls.n	8009fae <BSP_TS_GetState+0x102>
 8009fa0:	89ba      	ldrh	r2, [r7, #12]
 8009fa2:	4b1a      	ldr	r3, [pc, #104]	; (800a00c <BSP_TS_GetState+0x160>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	e005      	b.n	8009fba <BSP_TS_GetState+0x10e>
 8009fae:	4b17      	ldr	r3, [pc, #92]	; (800a00c <BSP_TS_GetState+0x160>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	89bb      	ldrh	r3, [r7, #12]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8009fbc:	8a7a      	ldrh	r2, [r7, #18]
 8009fbe:	8a3b      	ldrh	r3, [r7, #16]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	dd07      	ble.n	8009fd6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8009fc6:	89fb      	ldrh	r3, [r7, #14]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <BSP_TS_GetState+0x15c>)
 8009fcc:	601a      	str	r2, [r3, #0]
      _y = y; 
 8009fce:	89bb      	ldrh	r3, [r7, #12]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4b0e      	ldr	r3, [pc, #56]	; (800a00c <BSP_TS_GetState+0x160>)
 8009fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <BSP_TS_GetState+0x15c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	; (800a00c <BSP_TS_GetState+0x160>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	809a      	strh	r2, [r3, #4]
  }
}
 8009fea:	bf00      	nop
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20003ef0 	.word	0x20003ef0
 8009ff8:	ba2e8ba3 	.word	0xba2e8ba3
 8009ffc:	20003ef6 	.word	0x20003ef6
 800a000:	88888889 	.word	0x88888889
 800a004:	20003ef4 	.word	0x20003ef4
 800a008:	20003ef8 	.word	0x20003ef8
 800a00c:	20003efc 	.word	0x20003efc

0800a010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a016:	2300      	movs	r3, #0
 800a018:	607b      	str	r3, [r7, #4]
 800a01a:	4a16      	ldr	r2, [pc, #88]	; (800a074 <HAL_MspInit+0x64>)
 800a01c:	4b15      	ldr	r3, [pc, #84]	; (800a074 <HAL_MspInit+0x64>)
 800a01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a024:	6453      	str	r3, [r2, #68]	; 0x44
 800a026:	4b13      	ldr	r3, [pc, #76]	; (800a074 <HAL_MspInit+0x64>)
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a02e:	607b      	str	r3, [r7, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a032:	2300      	movs	r3, #0
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4a0f      	ldr	r2, [pc, #60]	; (800a074 <HAL_MspInit+0x64>)
 800a038:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <HAL_MspInit+0x64>)
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a040:	6413      	str	r3, [r2, #64]	; 0x40
 800a042:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <HAL_MspInit+0x64>)
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a04e:	2200      	movs	r2, #0
 800a050:	210f      	movs	r1, #15
 800a052:	f06f 0001 	mvn.w	r0, #1
 800a056:	f7f6 ffa7 	bl	8000fa8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800a05a:	2200      	movs	r2, #0
 800a05c:	2105      	movs	r1, #5
 800a05e:	2001      	movs	r0, #1
 800a060:	f7f6 ffa2 	bl	8000fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800a064:	2001      	movs	r0, #1
 800a066:	f7f6 ffbb 	bl	8000fe0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	40023800 	.word	0x40023800

0800a078 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08c      	sub	sp, #48	; 0x30
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800a088:	2200      	movs	r2, #0
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	2036      	movs	r0, #54	; 0x36
 800a08e:	f7f6 ff8b 	bl	8000fa8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800a092:	2036      	movs	r0, #54	; 0x36
 800a094:	f7f6 ffa4 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	4a1f      	ldr	r2, [pc, #124]	; (800a11c <HAL_InitTick+0xa4>)
 800a09e:	4b1f      	ldr	r3, [pc, #124]	; (800a11c <HAL_InitTick+0xa4>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	f043 0310 	orr.w	r3, r3, #16
 800a0a6:	6413      	str	r3, [r2, #64]	; 0x40
 800a0a8:	4b1c      	ldr	r3, [pc, #112]	; (800a11c <HAL_InitTick+0xa4>)
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	f003 0310 	and.w	r3, r3, #16
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a0b4:	f107 0210 	add.w	r2, r7, #16
 800a0b8:	f107 0314 	add.w	r3, r7, #20
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f9 fcba 	bl	8003a38 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a0c4:	f7f9 fc90 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	4a13      	ldr	r2, [pc, #76]	; (800a120 <HAL_InitTick+0xa8>)
 800a0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d6:	0c9b      	lsrs	r3, r3, #18
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <HAL_InitTick+0xac>)
 800a0de:	4a12      	ldr	r2, [pc, #72]	; (800a128 <HAL_InitTick+0xb0>)
 800a0e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800a0e2:	4b10      	ldr	r3, [pc, #64]	; (800a124 <HAL_InitTick+0xac>)
 800a0e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a0ea:	4a0e      	ldr	r2, [pc, #56]	; (800a124 <HAL_InitTick+0xac>)
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <HAL_InitTick+0xac>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <HAL_InitTick+0xac>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a0fc:	4809      	ldr	r0, [pc, #36]	; (800a124 <HAL_InitTick+0xac>)
 800a0fe:	f7fa fc1e 	bl	800493e <HAL_TIM_Base_Init>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a108:	4806      	ldr	r0, [pc, #24]	; (800a124 <HAL_InitTick+0xac>)
 800a10a:	f7fa fc4d 	bl	80049a8 <HAL_TIM_Base_Start_IT>
 800a10e:	4603      	mov	r3, r0
 800a110:	e000      	b.n	800a114 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
}
 800a114:	4618      	mov	r0, r3
 800a116:	3730      	adds	r7, #48	; 0x30
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	40023800 	.word	0x40023800
 800a120:	431bde83 	.word	0x431bde83
 800a124:	200041a8 	.word	0x200041a8
 800a128:	40001000 	.word	0x40001000

0800a12c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a130:	bf00      	nop
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a13a:	b480      	push	{r7}
 800a13c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a13e:	e7fe      	b.n	800a13e <HardFault_Handler+0x4>

0800a140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a144:	e7fe      	b.n	800a144 <MemManage_Handler+0x4>

0800a146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a146:	b480      	push	{r7}
 800a148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a14a:	e7fe      	b.n	800a14a <BusFault_Handler+0x4>

0800a14c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a150:	e7fe      	b.n	800a150 <UsageFault_Handler+0x4>

0800a152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a152:	b480      	push	{r7}
 800a154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a156:	bf00      	nop
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800a164:	f7f8 ffce 	bl	8003104 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800a168:	bf00      	nop
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a170:	4802      	ldr	r0, [pc, #8]	; (800a17c <TIM6_DAC_IRQHandler+0x10>)
 800a172:	f7fa fc3d 	bl	80049f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a176:	bf00      	nop
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	200041a8 	.word	0x200041a8

0800a180 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800a18a:	88fb      	ldrh	r3, [r7, #6]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fa59 	bl	800a644 <stmpe811_GetInstance>
 800a192:	4603      	mov	r3, r0
 800a194:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800a196:	7bfb      	ldrb	r3, [r7, #15]
 800a198:	2bff      	cmp	r3, #255	; 0xff
 800a19a:	d112      	bne.n	800a1c2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800a19c:	2000      	movs	r0, #0
 800a19e:	f000 fa51 	bl	800a644 <stmpe811_GetInstance>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d80a      	bhi.n	800a1c2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	88fa      	ldrh	r2, [r7, #6]
 800a1b0:	b2d1      	uxtb	r1, r2
 800a1b2:	4a06      	ldr	r2, [pc, #24]	; (800a1cc <stmpe811_Init+0x4c>)
 800a1b4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800a1b6:	f7fe ff2a 	bl	800900e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 f807 	bl	800a1d0 <stmpe811_Reset>
    }
  }
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20003f00 	.word	0x20003f00

0800a1d0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800a1da:	88fb      	ldrh	r3, [r7, #6]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2202      	movs	r2, #2
 800a1e0:	2103      	movs	r1, #3
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe ff1f 	bl	8009026 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800a1e8:	200a      	movs	r0, #10
 800a1ea:	f7fe ff59 	bl	80090a0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800a1ee:	88fb      	ldrh	r3, [r7, #6]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2103      	movs	r1, #3
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe ff15 	bl	8009026 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800a1fc:	2002      	movs	r0, #2
 800a1fe:	f7fe ff4f 	bl	80090a0 <IOE_Delay>
}
 800a202:	bf00      	nop
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800a20a:	b590      	push	{r4, r7, lr}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	4603      	mov	r3, r0
 800a212:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800a214:	f7fe fefb 	bl	800900e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800a218:	88fb      	ldrh	r3, [r7, #6]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe ff14 	bl	800904c <IOE_Read>
 800a224:	4603      	mov	r3, r0
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2101      	movs	r1, #1
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe ff0b 	bl	800904c <IOE_Read>
 800a236:	4603      	mov	r3, r0
 800a238:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800a23a:	4323      	orrs	r3, r4
 800a23c:	b21b      	sxth	r3, r3
 800a23e:	b29b      	uxth	r3, r3
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	bd90      	pop	{r4, r7, pc}

0800a248 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2109      	movs	r1, #9
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe fef5 	bl	800904c <IOE_Read>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	f043 0301 	orr.w	r3, r3, #1
 800a26c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	7bfa      	ldrb	r2, [r7, #15]
 800a274:	2109      	movs	r1, #9
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fed5 	bl	8009026 <IOE_Write>
}
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2109      	movs	r1, #9
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fe fed7 	bl	800904c <IOE_Read>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	f023 0301 	bic.w	r3, r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800a2aa:	88fb      	ldrh	r3, [r7, #6]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	7bfa      	ldrb	r2, [r7, #15]
 800a2b0:	2109      	movs	r1, #9
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe feb7 	bl	8009026 <IOE_Write>
    
}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	80fb      	strh	r3, [r7, #6]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800a2d4:	88fb      	ldrh	r3, [r7, #6]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	210a      	movs	r1, #10
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe feb6 	bl	800904c <IOE_Read>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800a2e4:	7bfa      	ldrb	r2, [r7, #15]
 800a2e6:	797b      	ldrb	r3, [r7, #5]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800a2ec:	88fb      	ldrh	r3, [r7, #6]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	7bfa      	ldrb	r2, [r7, #15]
 800a2f2:	210a      	movs	r1, #10
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fe96 	bl	8009026 <IOE_Write>
}
 800a2fa:	bf00      	nop
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	4603      	mov	r3, r0
 800a30a:	460a      	mov	r2, r1
 800a30c:	80fb      	strh	r3, [r7, #6]
 800a30e:	4613      	mov	r3, r2
 800a310:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	210a      	movs	r1, #10
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fe95 	bl	800904c <IOE_Read>
 800a322:	4603      	mov	r3, r0
 800a324:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800a326:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a32a:	43db      	mvns	r3, r3
 800a32c:	b25a      	sxtb	r2, r3
 800a32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a332:	4013      	ands	r3, r2
 800a334:	b25b      	sxtb	r3, r3
 800a336:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	7bfa      	ldrb	r2, [r7, #15]
 800a33e:	210a      	movs	r1, #10
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe fe70 	bl	8009026 <IOE_Write>
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	4603      	mov	r3, r0
 800a356:	460a      	mov	r2, r1
 800a358:	80fb      	strh	r3, [r7, #6]
 800a35a:	4613      	mov	r3, r2
 800a35c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	210b      	movs	r1, #11
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fe71 	bl	800904c <IOE_Read>
 800a36a:	4603      	mov	r3, r0
 800a36c:	461a      	mov	r2, r3
 800a36e:	797b      	ldrb	r3, [r7, #5]
 800a370:	4013      	ands	r3, r2
 800a372:	b2db      	uxtb	r3, r3
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	460a      	mov	r2, r1
 800a386:	80fb      	strh	r3, [r7, #6]
 800a388:	4613      	mov	r3, r2
 800a38a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	797a      	ldrb	r2, [r7, #5]
 800a392:	210b      	movs	r1, #11
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fe46 	bl	8009026 <IOE_Write>
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	6039      	str	r1, [r7, #0]
 800a3ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2117      	movs	r1, #23
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fe fe47 	bl	800904c <IOE_Read>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	b25b      	sxtb	r3, r3
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	b25a      	sxtb	r2, r3
 800a3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	7bfa      	ldrb	r2, [r7, #15]
 800a3da:	2117      	movs	r1, #23
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe fe22 	bl	8009026 <IOE_Write>
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800a3f4:	88fb      	ldrh	r3, [r7, #6]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2104      	movs	r1, #4
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe fe26 	bl	800904c <IOE_Read>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	f023 0304 	bic.w	r3, r3, #4
 800a40a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	2104      	movs	r1, #4
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe fe06 	bl	8009026 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	21f0      	movs	r1, #240	; 0xf0
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff ffbf 	bl	800a3a2 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	7bfa      	ldrb	r2, [r7, #15]
 800a432:	2104      	movs	r1, #4
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fdf6 	bl	8009026 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800a43a:	88fb      	ldrh	r3, [r7, #6]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2249      	movs	r2, #73	; 0x49
 800a440:	2120      	movs	r1, #32
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fdef 	bl	8009026 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800a448:	2002      	movs	r0, #2
 800a44a:	f7fe fe29 	bl	80090a0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2201      	movs	r2, #1
 800a454:	2121      	movs	r1, #33	; 0x21
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fde5 	bl	8009026 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	229a      	movs	r2, #154	; 0x9a
 800a462:	2141      	movs	r1, #65	; 0x41
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fdde 	bl	8009026 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800a46a:	88fb      	ldrh	r3, [r7, #6]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2201      	movs	r2, #1
 800a470:	214a      	movs	r1, #74	; 0x4a
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fdd7 	bl	8009026 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2201      	movs	r2, #1
 800a47e:	214b      	movs	r1, #75	; 0x4b
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fdd0 	bl	8009026 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a486:	88fb      	ldrh	r3, [r7, #6]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2200      	movs	r2, #0
 800a48c:	214b      	movs	r1, #75	; 0x4b
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fdc9 	bl	8009026 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2201      	movs	r2, #1
 800a49a:	2156      	movs	r1, #86	; 0x56
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe fdc2 	bl	8009026 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	2158      	movs	r1, #88	; 0x58
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fdbb 	bl	8009026 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	2140      	movs	r1, #64	; 0x40
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fdb4 	bl	8009026 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800a4be:	88fb      	ldrh	r3, [r7, #6]
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	22ff      	movs	r2, #255	; 0xff
 800a4c4:	210b      	movs	r1, #11
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe fdad 	bl	8009026 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800a4cc:	2002      	movs	r0, #2
 800a4ce:	f7fe fde7 	bl	80090a0 <IOE_Delay>
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2140      	movs	r1, #64	; 0x40
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe fdac 	bl	800904c <IOE_Read>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fa:	2b80      	cmp	r3, #128	; 0x80
 800a4fc:	bf0c      	ite	eq
 800a4fe:	2301      	moveq	r3, #1
 800a500:	2300      	movne	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	214c      	movs	r1, #76	; 0x4c
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe fd9a 	bl	800904c <IOE_Read>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d010      	beq.n	800a540 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800a51e:	2301      	movs	r3, #1
 800a520:	73fb      	strb	r3, [r7, #15]
 800a522:	e00d      	b.n	800a540 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a524:	88fb      	ldrh	r3, [r7, #6]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2201      	movs	r2, #1
 800a52a:	214b      	movs	r1, #75	; 0x4b
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fd7a 	bl	8009026 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2200      	movs	r2, #0
 800a538:	214b      	movs	r1, #75	; 0x4b
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fd73 	bl	8009026 <IOE_Write>
  }
  
  return ret;
 800a540:	7bfb      	ldrb	r3, [r7, #15]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b086      	sub	sp, #24
 800a54e:	af00      	add	r7, sp, #0
 800a550:	4603      	mov	r3, r0
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800a558:	89fb      	ldrh	r3, [r7, #14]
 800a55a:	b2d8      	uxtb	r0, r3
 800a55c:	f107 0210 	add.w	r2, r7, #16
 800a560:	2304      	movs	r3, #4
 800a562:	21d7      	movs	r1, #215	; 0xd7
 800a564:	f7fe fd85 	bl	8009072 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800a568:	7c3b      	ldrb	r3, [r7, #16]
 800a56a:	061a      	lsls	r2, r3, #24
 800a56c:	7c7b      	ldrb	r3, [r7, #17]
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	431a      	orrs	r2, r3
 800a572:	7cbb      	ldrb	r3, [r7, #18]
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	4313      	orrs	r3, r2
 800a578:	7cfa      	ldrb	r2, [r7, #19]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	0d1b      	lsrs	r3, r3, #20
 800a582:	b29a      	uxth	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a598:	89fb      	ldrh	r3, [r7, #14]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2201      	movs	r2, #1
 800a59e:	214b      	movs	r1, #75	; 0x4b
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe fd40 	bl	8009026 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a5a6:	89fb      	ldrh	r3, [r7, #14]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	214b      	movs	r1, #75	; 0x4b
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fd39 	bl	8009026 <IOE_Write>
}
 800a5b4:	bf00      	nop
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800a5c6:	f7fe fd28 	bl	800901a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	211f      	movs	r1, #31
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff fe76 	bl	800a2c0 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fe36 	bl	800a248 <stmpe811_EnableGlobalIT>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7ff fe47 	bl	800a284 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	211f      	movs	r1, #31
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fe81 	bl	800a302 <stmpe811_DisableITSource>
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	211f      	movs	r1, #31
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fe99 	bl	800a34e <stmpe811_ReadGITStatus>
 800a61c:	4603      	mov	r3, r0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	4603      	mov	r3, r0
 800a62e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800a630:	88fb      	ldrh	r3, [r7, #6]
 800a632:	211f      	movs	r1, #31
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff fea1 	bl	800a37c <stmpe811_ClearGlobalIT>
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]
 800a656:	e00b      	b.n	800a670 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800a658:	7bfb      	ldrb	r3, [r7, #15]
 800a65a:	4a0a      	ldr	r2, [pc, #40]	; (800a684 <stmpe811_GetInstance+0x40>)
 800a65c:	5cd3      	ldrb	r3, [r2, r3]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	88fa      	ldrh	r2, [r7, #6]
 800a662:	429a      	cmp	r2, r3
 800a664:	d101      	bne.n	800a66a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	e006      	b.n	800a678 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	3301      	adds	r3, #1
 800a66e:	73fb      	strb	r3, [r7, #15]
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d9f0      	bls.n	800a658 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800a676:	23ff      	movs	r3, #255	; 0xff
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	20003f00 	.word	0x20003f00

0800a688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a688:	b480      	push	{r7}
 800a68a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a68c:	4a16      	ldr	r2, [pc, #88]	; (800a6e8 <SystemInit+0x60>)
 800a68e:	4b16      	ldr	r3, [pc, #88]	; (800a6e8 <SystemInit+0x60>)
 800a690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a69c:	4a13      	ldr	r2, [pc, #76]	; (800a6ec <SystemInit+0x64>)
 800a69e:	4b13      	ldr	r3, [pc, #76]	; (800a6ec <SystemInit+0x64>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f043 0301 	orr.w	r3, r3, #1
 800a6a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a6a8:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <SystemInit+0x64>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a6ae:	4a0f      	ldr	r2, [pc, #60]	; (800a6ec <SystemInit+0x64>)
 800a6b0:	4b0e      	ldr	r3, [pc, #56]	; (800a6ec <SystemInit+0x64>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a6b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a6be:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <SystemInit+0x64>)
 800a6c0:	4a0b      	ldr	r2, [pc, #44]	; (800a6f0 <SystemInit+0x68>)
 800a6c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a6c4:	4a09      	ldr	r2, [pc, #36]	; (800a6ec <SystemInit+0x64>)
 800a6c6:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <SystemInit+0x64>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <SystemInit+0x64>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a6d6:	4b04      	ldr	r3, [pc, #16]	; (800a6e8 <SystemInit+0x60>)
 800a6d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a6dc:	609a      	str	r2, [r3, #8]
#endif
}
 800a6de:	bf00      	nop
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	e000ed00 	.word	0xe000ed00
 800a6ec:	40023800 	.word	0x40023800
 800a6f0:	24003010 	.word	0x24003010

0800a6f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a6f8:	4b11      	ldr	r3, [pc, #68]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a6fa:	4a12      	ldr	r2, [pc, #72]	; (800a744 <MX_USART1_UART_Init+0x50>)
 800a6fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a6fe:	4b10      	ldr	r3, [pc, #64]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a706:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a70e:	2200      	movs	r2, #0
 800a710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a714:	2200      	movs	r2, #0
 800a716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a718:	4b09      	ldr	r3, [pc, #36]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a71a:	220c      	movs	r2, #12
 800a71c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a720:	2200      	movs	r2, #0
 800a722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a726:	2200      	movs	r2, #0
 800a728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a72a:	4805      	ldr	r0, [pc, #20]	; (800a740 <MX_USART1_UART_Init+0x4c>)
 800a72c:	f7fa fb44 	bl	8004db8 <HAL_UART_Init>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a736:	f7fe f8a5 	bl	8008884 <Error_Handler>
  }

}
 800a73a:	bf00      	nop
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	200041e8 	.word	0x200041e8
 800a744:	40011000 	.word	0x40011000

0800a748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a750:	f107 0314 	add.w	r3, r7, #20
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a19      	ldr	r2, [pc, #100]	; (800a7cc <HAL_UART_MspInit+0x84>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d12c      	bne.n	800a7c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	4a18      	ldr	r2, [pc, #96]	; (800a7d0 <HAL_UART_MspInit+0x88>)
 800a770:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <HAL_UART_MspInit+0x88>)
 800a772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a774:	f043 0310 	orr.w	r3, r3, #16
 800a778:	6453      	str	r3, [r2, #68]	; 0x44
 800a77a:	4b15      	ldr	r3, [pc, #84]	; (800a7d0 <HAL_UART_MspInit+0x88>)
 800a77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77e:	f003 0310 	and.w	r3, r3, #16
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
 800a78a:	4a11      	ldr	r2, [pc, #68]	; (800a7d0 <HAL_UART_MspInit+0x88>)
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <HAL_UART_MspInit+0x88>)
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	f043 0301 	orr.w	r3, r3, #1
 800a794:	6313      	str	r3, [r2, #48]	; 0x30
 800a796:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <HAL_UART_MspInit+0x88>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a7a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a7a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a7b4:	2307      	movs	r3, #7
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7b8:	f107 0314 	add.w	r3, r7, #20
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4805      	ldr	r0, [pc, #20]	; (800a7d4 <HAL_UART_MspInit+0x8c>)
 800a7c0:	f7f6 fea6 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a7c4:	bf00      	nop
 800a7c6:	3728      	adds	r7, #40	; 0x28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40011000 	.word	0x40011000
 800a7d0:	40023800 	.word	0x40023800
 800a7d4:	40020000 	.word	0x40020000

0800a7d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a7d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a810 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a7dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a7de:	e003      	b.n	800a7e8 <LoopCopyDataInit>

0800a7e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a7e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a7e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a7e6:	3104      	adds	r1, #4

0800a7e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a7e8:	480b      	ldr	r0, [pc, #44]	; (800a818 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a7ea:	4b0c      	ldr	r3, [pc, #48]	; (800a81c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a7ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a7ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a7f0:	d3f6      	bcc.n	800a7e0 <CopyDataInit>
  ldr  r2, =_sbss
 800a7f2:	4a0b      	ldr	r2, [pc, #44]	; (800a820 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a7f4:	e002      	b.n	800a7fc <LoopFillZerobss>

0800a7f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a7f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a7f8:	f842 3b04 	str.w	r3, [r2], #4

0800a7fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a7fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a800:	d3f9      	bcc.n	800a7f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a802:	f7ff ff41 	bl	800a688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a806:	f000 f811 	bl	800a82c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a80a:	f7fd ff1f 	bl	800864c <main>
  bx  lr    
 800a80e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a810:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800a814:	0800d19c 	.word	0x0800d19c
  ldr  r0, =_sdata
 800a818:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a81c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 800a820:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 800a824:	20004228 	.word	0x20004228

0800a828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a828:	e7fe      	b.n	800a828 <ADC_IRQHandler>
	...

0800a82c <__libc_init_array>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	4e0d      	ldr	r6, [pc, #52]	; (800a864 <__libc_init_array+0x38>)
 800a830:	4c0d      	ldr	r4, [pc, #52]	; (800a868 <__libc_init_array+0x3c>)
 800a832:	1ba4      	subs	r4, r4, r6
 800a834:	10a4      	asrs	r4, r4, #2
 800a836:	2500      	movs	r5, #0
 800a838:	42a5      	cmp	r5, r4
 800a83a:	d109      	bne.n	800a850 <__libc_init_array+0x24>
 800a83c:	4e0b      	ldr	r6, [pc, #44]	; (800a86c <__libc_init_array+0x40>)
 800a83e:	4c0c      	ldr	r4, [pc, #48]	; (800a870 <__libc_init_array+0x44>)
 800a840:	f000 f886 	bl	800a950 <_init>
 800a844:	1ba4      	subs	r4, r4, r6
 800a846:	10a4      	asrs	r4, r4, #2
 800a848:	2500      	movs	r5, #0
 800a84a:	42a5      	cmp	r5, r4
 800a84c:	d105      	bne.n	800a85a <__libc_init_array+0x2e>
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a854:	4798      	blx	r3
 800a856:	3501      	adds	r5, #1
 800a858:	e7ee      	b.n	800a838 <__libc_init_array+0xc>
 800a85a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a85e:	4798      	blx	r3
 800a860:	3501      	adds	r5, #1
 800a862:	e7f2      	b.n	800a84a <__libc_init_array+0x1e>
 800a864:	0800d194 	.word	0x0800d194
 800a868:	0800d194 	.word	0x0800d194
 800a86c:	0800d194 	.word	0x0800d194
 800a870:	0800d198 	.word	0x0800d198

0800a874 <__itoa>:
 800a874:	1e93      	subs	r3, r2, #2
 800a876:	2b22      	cmp	r3, #34	; 0x22
 800a878:	b510      	push	{r4, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	d904      	bls.n	800a888 <__itoa+0x14>
 800a87e:	2300      	movs	r3, #0
 800a880:	700b      	strb	r3, [r1, #0]
 800a882:	461c      	mov	r4, r3
 800a884:	4620      	mov	r0, r4
 800a886:	bd10      	pop	{r4, pc}
 800a888:	2a0a      	cmp	r2, #10
 800a88a:	d109      	bne.n	800a8a0 <__itoa+0x2c>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	da07      	bge.n	800a8a0 <__itoa+0x2c>
 800a890:	232d      	movs	r3, #45	; 0x2d
 800a892:	700b      	strb	r3, [r1, #0]
 800a894:	4240      	negs	r0, r0
 800a896:	2101      	movs	r1, #1
 800a898:	4421      	add	r1, r4
 800a89a:	f000 f819 	bl	800a8d0 <__utoa>
 800a89e:	e7f1      	b.n	800a884 <__itoa+0x10>
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	e7f9      	b.n	800a898 <__itoa+0x24>

0800a8a4 <itoa>:
 800a8a4:	f7ff bfe6 	b.w	800a874 <__itoa>

0800a8a8 <memcpy>:
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	1e43      	subs	r3, r0, #1
 800a8ac:	440a      	add	r2, r1
 800a8ae:	4291      	cmp	r1, r2
 800a8b0:	d100      	bne.n	800a8b4 <memcpy+0xc>
 800a8b2:	bd10      	pop	{r4, pc}
 800a8b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8bc:	e7f7      	b.n	800a8ae <memcpy+0x6>

0800a8be <memset>:
 800a8be:	4402      	add	r2, r0
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d100      	bne.n	800a8c8 <memset+0xa>
 800a8c6:	4770      	bx	lr
 800a8c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a8cc:	e7f9      	b.n	800a8c2 <memset+0x4>
	...

0800a8d0 <__utoa>:
 800a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d2:	4c1e      	ldr	r4, [pc, #120]	; (800a94c <__utoa+0x7c>)
 800a8d4:	b08b      	sub	sp, #44	; 0x2c
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	460f      	mov	r7, r1
 800a8da:	466d      	mov	r5, sp
 800a8dc:	f104 0e20 	add.w	lr, r4, #32
 800a8e0:	6820      	ldr	r0, [r4, #0]
 800a8e2:	6861      	ldr	r1, [r4, #4]
 800a8e4:	462e      	mov	r6, r5
 800a8e6:	c603      	stmia	r6!, {r0, r1}
 800a8e8:	3408      	adds	r4, #8
 800a8ea:	4574      	cmp	r4, lr
 800a8ec:	4635      	mov	r5, r6
 800a8ee:	d1f7      	bne.n	800a8e0 <__utoa+0x10>
 800a8f0:	7921      	ldrb	r1, [r4, #4]
 800a8f2:	7131      	strb	r1, [r6, #4]
 800a8f4:	1e91      	subs	r1, r2, #2
 800a8f6:	6820      	ldr	r0, [r4, #0]
 800a8f8:	6030      	str	r0, [r6, #0]
 800a8fa:	2922      	cmp	r1, #34	; 0x22
 800a8fc:	f04f 0100 	mov.w	r1, #0
 800a900:	d904      	bls.n	800a90c <__utoa+0x3c>
 800a902:	7039      	strb	r1, [r7, #0]
 800a904:	460f      	mov	r7, r1
 800a906:	4638      	mov	r0, r7
 800a908:	b00b      	add	sp, #44	; 0x2c
 800a90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a90c:	1e78      	subs	r0, r7, #1
 800a90e:	4606      	mov	r6, r0
 800a910:	fbb3 f5f2 	udiv	r5, r3, r2
 800a914:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a918:	fb02 3315 	mls	r3, r2, r5, r3
 800a91c:	4473      	add	r3, lr
 800a91e:	1c4c      	adds	r4, r1, #1
 800a920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a924:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a928:	462b      	mov	r3, r5
 800a92a:	b965      	cbnz	r5, 800a946 <__utoa+0x76>
 800a92c:	553d      	strb	r5, [r7, r4]
 800a92e:	187a      	adds	r2, r7, r1
 800a930:	1acc      	subs	r4, r1, r3
 800a932:	42a3      	cmp	r3, r4
 800a934:	dae7      	bge.n	800a906 <__utoa+0x36>
 800a936:	7844      	ldrb	r4, [r0, #1]
 800a938:	7815      	ldrb	r5, [r2, #0]
 800a93a:	f800 5f01 	strb.w	r5, [r0, #1]!
 800a93e:	3301      	adds	r3, #1
 800a940:	f802 4901 	strb.w	r4, [r2], #-1
 800a944:	e7f4      	b.n	800a930 <__utoa+0x60>
 800a946:	4621      	mov	r1, r4
 800a948:	e7e2      	b.n	800a910 <__utoa+0x40>
 800a94a:	bf00      	nop
 800a94c:	0800d164 	.word	0x0800d164

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
