
STERO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a428  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002818  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cdf0  0800cdf0  0001cdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cdf8  0800cdf8  0001cdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cdfc  0800cdfc  0001cdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  0800ce00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  8 .bss          0000418c  2000009c  2000009c  0002009c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004228  20004228  0002009c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002df9b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000589e  00000000  00000000  0004e067  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000020d8  00000000  00000000  00053908  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e20  00000000  00000000  000559e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f710  00000000  00000000  00057800  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000096cf  00000000  00000000  00066f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000705df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000885c  00000000  00000000  0007065c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a5c0 	.word	0x0800a5c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	0800a5c0 	.word	0x0800a5c0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b97a 	b.w	8000d30 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	468c      	mov	ip, r1
 8000a5a:	460d      	mov	r5, r1
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	9e08      	ldr	r6, [sp, #32]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d151      	bne.n	8000b08 <__udivmoddi4+0xb4>
 8000a64:	428a      	cmp	r2, r1
 8000a66:	4617      	mov	r7, r2
 8000a68:	d96d      	bls.n	8000b46 <__udivmoddi4+0xf2>
 8000a6a:	fab2 fe82 	clz	lr, r2
 8000a6e:	f1be 0f00 	cmp.w	lr, #0
 8000a72:	d00b      	beq.n	8000a8c <__udivmoddi4+0x38>
 8000a74:	f1ce 0c20 	rsb	ip, lr, #32
 8000a78:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a7c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a80:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a84:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a88:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a8c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a90:	0c25      	lsrs	r5, r4, #16
 8000a92:	fbbc f8fa 	udiv	r8, ip, sl
 8000a96:	fa1f f987 	uxth.w	r9, r7
 8000a9a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a9e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000aa2:	fb08 f309 	mul.w	r3, r8, r9
 8000aa6:	42ab      	cmp	r3, r5
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x6c>
 8000aaa:	19ed      	adds	r5, r5, r7
 8000aac:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ab0:	f080 8123 	bcs.w	8000cfa <__udivmoddi4+0x2a6>
 8000ab4:	42ab      	cmp	r3, r5
 8000ab6:	f240 8120 	bls.w	8000cfa <__udivmoddi4+0x2a6>
 8000aba:	f1a8 0802 	sub.w	r8, r8, #2
 8000abe:	443d      	add	r5, r7
 8000ac0:	1aed      	subs	r5, r5, r3
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ac8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000acc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad0:	fb00 f909 	mul.w	r9, r0, r9
 8000ad4:	45a1      	cmp	r9, r4
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x98>
 8000ad8:	19e4      	adds	r4, r4, r7
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ade:	f080 810a 	bcs.w	8000cf6 <__udivmoddi4+0x2a2>
 8000ae2:	45a1      	cmp	r9, r4
 8000ae4:	f240 8107 	bls.w	8000cf6 <__udivmoddi4+0x2a2>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	443c      	add	r4, r7
 8000aec:	eba4 0409 	sub.w	r4, r4, r9
 8000af0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000af4:	2100      	movs	r1, #0
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d061      	beq.n	8000bbe <__udivmoddi4+0x16a>
 8000afa:	fa24 f40e 	lsr.w	r4, r4, lr
 8000afe:	2300      	movs	r3, #0
 8000b00:	6034      	str	r4, [r6, #0]
 8000b02:	6073      	str	r3, [r6, #4]
 8000b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d907      	bls.n	8000b1c <__udivmoddi4+0xc8>
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d054      	beq.n	8000bba <__udivmoddi4+0x166>
 8000b10:	2100      	movs	r1, #0
 8000b12:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b16:	4608      	mov	r0, r1
 8000b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1c:	fab3 f183 	clz	r1, r3
 8000b20:	2900      	cmp	r1, #0
 8000b22:	f040 808e 	bne.w	8000c42 <__udivmoddi4+0x1ee>
 8000b26:	42ab      	cmp	r3, r5
 8000b28:	d302      	bcc.n	8000b30 <__udivmoddi4+0xdc>
 8000b2a:	4282      	cmp	r2, r0
 8000b2c:	f200 80fa 	bhi.w	8000d24 <__udivmoddi4+0x2d0>
 8000b30:	1a84      	subs	r4, r0, r2
 8000b32:	eb65 0503 	sbc.w	r5, r5, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	46ac      	mov	ip, r5
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d03f      	beq.n	8000bbe <__udivmoddi4+0x16a>
 8000b3e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	b912      	cbnz	r2, 8000b4e <__udivmoddi4+0xfa>
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b4e:	fab7 fe87 	clz	lr, r7
 8000b52:	f1be 0f00 	cmp.w	lr, #0
 8000b56:	d134      	bne.n	8000bc2 <__udivmoddi4+0x16e>
 8000b58:	1beb      	subs	r3, r5, r7
 8000b5a:	0c3a      	lsrs	r2, r7, #16
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	2101      	movs	r1, #1
 8000b62:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b66:	0c25      	lsrs	r5, r4, #16
 8000b68:	fb02 3318 	mls	r3, r2, r8, r3
 8000b6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b70:	fb0c f308 	mul.w	r3, ip, r8
 8000b74:	42ab      	cmp	r3, r5
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x134>
 8000b78:	19ed      	adds	r5, r5, r7
 8000b7a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x132>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	f200 80d1 	bhi.w	8000d28 <__udivmoddi4+0x2d4>
 8000b86:	4680      	mov	r8, r0
 8000b88:	1aed      	subs	r5, r5, r3
 8000b8a:	b2a3      	uxth	r3, r4
 8000b8c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b90:	fb02 5510 	mls	r5, r2, r0, r5
 8000b94:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b98:	fb0c fc00 	mul.w	ip, ip, r0
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x15c>
 8000ba0:	19e4      	adds	r4, r4, r7
 8000ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x15a>
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	f200 80b8 	bhi.w	8000d1e <__udivmoddi4+0x2ca>
 8000bae:	4618      	mov	r0, r3
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb8:	e79d      	b.n	8000af6 <__udivmoddi4+0xa2>
 8000bba:	4631      	mov	r1, r6
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	f1ce 0420 	rsb	r4, lr, #32
 8000bc6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bca:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bce:	fa20 f804 	lsr.w	r8, r0, r4
 8000bd2:	0c3a      	lsrs	r2, r7, #16
 8000bd4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bd8:	ea48 0803 	orr.w	r8, r8, r3
 8000bdc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000be0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000be4:	fb02 4411 	mls	r4, r2, r1, r4
 8000be8:	fa1f fc87 	uxth.w	ip, r7
 8000bec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bf0:	fb01 f30c 	mul.w	r3, r1, ip
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x1bc>
 8000bfc:	19ed      	adds	r5, r5, r7
 8000bfe:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c02:	f080 808a 	bcs.w	8000d1a <__udivmoddi4+0x2c6>
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	f240 8087 	bls.w	8000d1a <__udivmoddi4+0x2c6>
 8000c0c:	3902      	subs	r1, #2
 8000c0e:	443d      	add	r5, r7
 8000c10:	1aeb      	subs	r3, r5, r3
 8000c12:	fa1f f588 	uxth.w	r5, r8
 8000c16:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c1a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c1e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c22:	fb00 f30c 	mul.w	r3, r0, ip
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x1e6>
 8000c2a:	19ed      	adds	r5, r5, r7
 8000c2c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c30:	d26f      	bcs.n	8000d12 <__udivmoddi4+0x2be>
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d96d      	bls.n	8000d12 <__udivmoddi4+0x2be>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443d      	add	r5, r7
 8000c3a:	1aeb      	subs	r3, r5, r3
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	e78f      	b.n	8000b62 <__udivmoddi4+0x10e>
 8000c42:	f1c1 0720 	rsb	r7, r1, #32
 8000c46:	fa22 f807 	lsr.w	r8, r2, r7
 8000c4a:	408b      	lsls	r3, r1
 8000c4c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c50:	ea48 0303 	orr.w	r3, r8, r3
 8000c54:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c58:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c62:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c66:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c6a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c6e:	fa1f f883 	uxth.w	r8, r3
 8000c72:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c76:	fb09 f408 	mul.w	r4, r9, r8
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c80:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x244>
 8000c86:	18ed      	adds	r5, r5, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	d243      	bcs.n	8000d16 <__udivmoddi4+0x2c2>
 8000c8e:	42ac      	cmp	r4, r5
 8000c90:	d941      	bls.n	8000d16 <__udivmoddi4+0x2c2>
 8000c92:	f1a9 0902 	sub.w	r9, r9, #2
 8000c96:	441d      	add	r5, r3
 8000c98:	1b2d      	subs	r5, r5, r4
 8000c9a:	fa1f fe8e 	uxth.w	lr, lr
 8000c9e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ca2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ca6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000caa:	fb00 f808 	mul.w	r8, r0, r8
 8000cae:	45a0      	cmp	r8, r4
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x26e>
 8000cb2:	18e4      	adds	r4, r4, r3
 8000cb4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cb8:	d229      	bcs.n	8000d0e <__udivmoddi4+0x2ba>
 8000cba:	45a0      	cmp	r8, r4
 8000cbc:	d927      	bls.n	8000d0e <__udivmoddi4+0x2ba>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	441c      	add	r4, r3
 8000cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc6:	eba4 0408 	sub.w	r4, r4, r8
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	454c      	cmp	r4, r9
 8000cd0:	46c6      	mov	lr, r8
 8000cd2:	464d      	mov	r5, r9
 8000cd4:	d315      	bcc.n	8000d02 <__udivmoddi4+0x2ae>
 8000cd6:	d012      	beq.n	8000cfe <__udivmoddi4+0x2aa>
 8000cd8:	b156      	cbz	r6, 8000cf0 <__udivmoddi4+0x29c>
 8000cda:	ebba 030e 	subs.w	r3, sl, lr
 8000cde:	eb64 0405 	sbc.w	r4, r4, r5
 8000ce2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ce6:	40cb      	lsrs	r3, r1
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	40cc      	lsrs	r4, r1
 8000cec:	6037      	str	r7, [r6, #0]
 8000cee:	6074      	str	r4, [r6, #4]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e6f8      	b.n	8000aec <__udivmoddi4+0x98>
 8000cfa:	4690      	mov	r8, r2
 8000cfc:	e6e0      	b.n	8000ac0 <__udivmoddi4+0x6c>
 8000cfe:	45c2      	cmp	sl, r8
 8000d00:	d2ea      	bcs.n	8000cd8 <__udivmoddi4+0x284>
 8000d02:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d06:	eb69 0503 	sbc.w	r5, r9, r3
 8000d0a:	3801      	subs	r0, #1
 8000d0c:	e7e4      	b.n	8000cd8 <__udivmoddi4+0x284>
 8000d0e:	4628      	mov	r0, r5
 8000d10:	e7d7      	b.n	8000cc2 <__udivmoddi4+0x26e>
 8000d12:	4640      	mov	r0, r8
 8000d14:	e791      	b.n	8000c3a <__udivmoddi4+0x1e6>
 8000d16:	4681      	mov	r9, r0
 8000d18:	e7be      	b.n	8000c98 <__udivmoddi4+0x244>
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	e778      	b.n	8000c10 <__udivmoddi4+0x1bc>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	e745      	b.n	8000bb0 <__udivmoddi4+0x15c>
 8000d24:	4608      	mov	r0, r1
 8000d26:	e708      	b.n	8000b3a <__udivmoddi4+0xe6>
 8000d28:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2c:	443d      	add	r5, r7
 8000d2e:	e72b      	b.n	8000b88 <__udivmoddi4+0x134>

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f8f8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f008 ffc6 	bl	8009cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f008 ff98 	bl	8009c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20003f04 	.word	0x20003f04

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20003f04 	.word	0x20003f04

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_Delay+0x40>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3f7      	bcc.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	095b      	lsrs	r3, r3, #5
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	f002 021f 	and.w	r2, r2, #31
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	4909      	ldr	r1, [pc, #36]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	2201      	movs	r2, #1
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f36:	2101      	movs	r1, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	1e59      	subs	r1, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4e 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff63 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb3 	bl	8000ef0 <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff82 	bl	8000e9c <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff56 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e03b      	b.n	8001046 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f005 fbce 	bl	8006784 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6852      	ldr	r2, [r2, #4]
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001010:	f022 0107 	bic.w	r1, r2, #7
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6892      	ldr	r2, [r2, #8]
 8001018:	430a      	orrs	r2, r1
 800101a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800102a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	68c9      	ldr	r1, [r1, #12]
 8001032:	430b      	orrs	r3, r1
 8001034:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af02      	add	r7, sp, #8
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_DMA2D_Start+0x1c>
 8001066:	2302      	movs	r3, #2
 8001068:	e018      	b.n	800109c <HAL_DMA2D_Start+0x4e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2202      	movs	r2, #2
 8001076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f987 	bl	8001398 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d056      	beq.n	800116e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80010c0:	f7ff fe6e 	bl	8000da0 <HAL_GetTick>
 80010c4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80010c6:	e04b      	b.n	8001160 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d023      	beq.n	8001122 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e8:	f043 0202 	orr.w	r2, r3, #2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2221      	movs	r2, #33	; 0x21
 800110c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0a5      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d01a      	beq.n	8001160 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800112a:	f7ff fe39 	bl	8000da0 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	1ad2      	subs	r2, r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d802      	bhi.n	8001140 <HAL_DMA2D_PollForTransfer+0x9c>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10f      	bne.n	8001160 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	f043 0220 	orr.w	r2, r3, #32
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e086      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0ac      	beq.n	80010c8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d061      	beq.n	8001254 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001190:	f7ff fe06 	bl	8000da0 <HAL_GetTick>
 8001194:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001196:	e056      	b.n	8001246 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d02e      	beq.n	8001208 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	f043 0204 	orr.w	r2, r3, #4
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ce:	f043 0202 	orr.w	r2, r3, #2
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2229      	movs	r2, #41	; 0x29
 80011f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2204      	movs	r2, #4
 80011f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e032      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120e:	d01a      	beq.n	8001246 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001210:	f7ff fdc6 	bl	8000da0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d802      	bhi.n	8001226 <HAL_DMA2D_PollForTransfer+0x182>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10f      	bne.n	8001246 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122a:	f043 0220 	orr.w	r2, r3, #32
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e013      	b.n	800126e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0a1      	beq.n	8001198 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2212      	movs	r2, #18
 800125a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_DMA2D_ConfigLayer+0x20>
 8001294:	2302      	movs	r3, #2
 8001296:	e077      	b.n	8001388 <HAL_DMA2D_ConfigLayer+0x110>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	3318      	adds	r3, #24
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_DMA2D_ConfigLayer+0x11c>)
 80012c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d003      	beq.n	80012d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d107      	bne.n	80012e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e005      	b.n	80012f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11f      	bne.n	8001338 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	43d2      	mvns	r2, r2
 8001306:	4011      	ands	r1, r2
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	430a      	orrs	r2, r1
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d003      	beq.n	8001328 <HAL_DMA2D_ConfigLayer+0xb0>
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d126      	bne.n	8001376 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68d2      	ldr	r2, [r2, #12]
 8001330:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
 8001336:	e01e      	b.n	8001376 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	69d1      	ldr	r1, [r2, #28]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	43d2      	mvns	r2, r2
 8001346:	4011      	ands	r1, r2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	430a      	orrs	r2, r1
 800134c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d003      	beq.n	8001368 <HAL_DMA2D_ConfigLayer+0xf0>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d106      	bne.n	8001376 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68d2      	ldr	r2, [r2, #12]
 8001370:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001374:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	ff03000f 	.word	0xff03000f

08001398 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013b0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	0410      	lsls	r0, r2, #16
 80013b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ba:	4302      	orrs	r2, r0
 80013bc:	430a      	orrs	r2, r1
 80013be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013d0:	d174      	bne.n	80014bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80013d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	e053      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	431a      	orrs	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4313      	orrs	r3, r2
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	e048      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d111      	bne.n	800144c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	0cdb      	lsrs	r3, r3, #19
 800142c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	0a9b      	lsrs	r3, r3, #10
 8001432:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	02db      	lsls	r3, r3, #11
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	e032      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d117      	bne.n	8001484 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	0fdb      	lsrs	r3, r3, #31
 8001458:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	0cdb      	lsrs	r3, r3, #19
 800145e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	0adb      	lsrs	r3, r3, #11
 8001464:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	029b      	lsls	r3, r3, #10
 8001474:	431a      	orrs	r2, r3
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	03db      	lsls	r3, r3, #15
 800147a:	431a      	orrs	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
 8001482:	e016      	b.n	80014b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	0f1b      	lsrs	r3, r3, #28
 8001488:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	0d1b      	lsrs	r3, r3, #20
 800148e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	0b1b      	lsrs	r3, r3, #12
 8001494:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	011a      	lsls	r2, r3, #4
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	431a      	orrs	r2, r3
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	031b      	lsls	r3, r3, #12
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80014ba:	e003      	b.n	80014c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	60da      	str	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	372c      	adds	r7, #44	; 0x2c
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e177      	b.n	80017dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8166 	bne.w	80017d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x4a>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b12      	cmp	r3, #18
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	69b9      	ldr	r1, [r7, #24]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d00b      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d007      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80c0 	beq.w	80017d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_GPIO_Init+0x320>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_GPIO_Init+0x324>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_GPIO_Init+0x328>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d037      	beq.n	800170e <HAL_GPIO_Init+0x23e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x32c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d031      	beq.n	800170a <HAL_GPIO_Init+0x23a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a55      	ldr	r2, [pc, #340]	; (8001800 <HAL_GPIO_Init+0x330>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x236>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a54      	ldr	r2, [pc, #336]	; (8001804 <HAL_GPIO_Init+0x334>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x232>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a53      	ldr	r2, [pc, #332]	; (8001808 <HAL_GPIO_Init+0x338>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x22e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_GPIO_Init+0x33c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x22a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <HAL_GPIO_Init+0x340>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a50      	ldr	r2, [pc, #320]	; (8001814 <HAL_GPIO_Init+0x344>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x222>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4f      	ldr	r2, [pc, #316]	; (8001818 <HAL_GPIO_Init+0x348>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x21e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4e      	ldr	r2, [pc, #312]	; (800181c <HAL_GPIO_Init+0x34c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x21a>
 80016e6:	2309      	movs	r3, #9
 80016e8:	e012      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016ea:	230a      	movs	r3, #10
 80016ec:	e010      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016ee:	2308      	movs	r3, #8
 80016f0:	e00e      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00c      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x240>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x240>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x240>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x240>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x240>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4934      	ldr	r1, [pc, #208]	; (80017f4 <HAL_GPIO_Init+0x324>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_GPIO_Init+0x350>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001752:	4a33      	ldr	r2, [pc, #204]	; (8001820 <HAL_GPIO_Init+0x350>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_GPIO_Init+0x350>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177c:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_GPIO_Init+0x350>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_GPIO_Init+0x350>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_GPIO_Init+0x350>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_GPIO_Init+0x350>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_GPIO_Init+0x350>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f ae84 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40021400 	.word	0x40021400
 8001810:	40021800 	.word	0x40021800
 8001814:	40021c00 	.word	0x40021c00
 8001818:	40022000 	.word	0x40022000
 800181c:	40022400 	.word	0x40022400
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e0da      	b.n	80019f6 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	429a      	cmp	r2, r3
 8001858:	f040 80ca 	bne.w	80019f0 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800185c:	4a6b      	ldr	r2, [pc, #428]	; (8001a0c <HAL_GPIO_DeInit+0x1e8>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4013      	ands	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <HAL_GPIO_DeInit+0x1ec>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d037      	beq.n	80018f6 <HAL_GPIO_DeInit+0xd2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a62      	ldr	r2, [pc, #392]	; (8001a14 <HAL_GPIO_DeInit+0x1f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d031      	beq.n	80018f2 <HAL_GPIO_DeInit+0xce>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a61      	ldr	r2, [pc, #388]	; (8001a18 <HAL_GPIO_DeInit+0x1f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d02b      	beq.n	80018ee <HAL_GPIO_DeInit+0xca>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_GPIO_DeInit+0x1f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d025      	beq.n	80018ea <HAL_GPIO_DeInit+0xc6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_GPIO_DeInit+0x1fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01f      	beq.n	80018e6 <HAL_GPIO_DeInit+0xc2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a5e      	ldr	r2, [pc, #376]	; (8001a24 <HAL_GPIO_DeInit+0x200>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_DeInit+0xbe>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <HAL_GPIO_DeInit+0x204>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_DeInit+0xba>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_GPIO_DeInit+0x208>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_DeInit+0xb6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_GPIO_DeInit+0x20c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_DeInit+0xb2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_GPIO_DeInit+0x210>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_DeInit+0xae>
 80018ce:	2309      	movs	r3, #9
 80018d0:	e012      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018d2:	230a      	movs	r3, #10
 80018d4:	e010      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018d6:	2308      	movs	r3, #8
 80018d8:	e00e      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00c      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018de:	2306      	movs	r3, #6
 80018e0:	e00a      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_DeInit+0xd4>
 80018f6:	2300      	movs	r3, #0
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	fa03 f202 	lsl.w	r2, r3, r2
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	429a      	cmp	r2, r3
 8001908:	d132      	bne.n	8001970 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800191a:	483c      	ldr	r0, [pc, #240]	; (8001a0c <HAL_GPIO_DeInit+0x1e8>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	493a      	ldr	r1, [pc, #232]	; (8001a0c <HAL_GPIO_DeInit+0x1e8>)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	0892      	lsrs	r2, r2, #2
 8001926:	3202      	adds	r2, #2
 8001928:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	43d2      	mvns	r2, r2
 8001930:	400a      	ands	r2, r1
 8001932:	3302      	adds	r3, #2
 8001934:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001938:	493f      	ldr	r1, [pc, #252]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	4013      	ands	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001946:	493c      	ldr	r1, [pc, #240]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	4013      	ands	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001954:	4938      	ldr	r1, [pc, #224]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	4013      	ands	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001962:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_GPIO_DeInit+0x214>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	4013      	ands	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2103      	movs	r1, #3
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08d9      	lsrs	r1, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3108      	adds	r1, #8
 8001992:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	200f      	movs	r0, #15
 80019a0:	fa00 f303 	lsl.w	r3, r0, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4019      	ands	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2103      	movs	r1, #3
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	2101      	movs	r1, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2103      	movs	r1, #3
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	f67f af21 	bls.w	8001840 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40022400 	.word	0x40022400
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	401a      	ands	r2, r3
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d104      	bne.n	8001a92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	041a      	lsls	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e10f      	b.n	8001cd6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f005 fc84 	bl	80073d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae8:	f001 ff44 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a7b      	ldr	r2, [pc, #492]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d807      	bhi.n	8001b08 <HAL_I2C_Init+0x64>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a7a      	ldr	r2, [pc, #488]	; (8001ce4 <HAL_I2C_Init+0x240>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e006      	b.n	8001b16 <HAL_I2C_Init+0x72>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <HAL_I2C_Init+0x244>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0db      	b.n	8001cd6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_I2C_Init+0x248>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	6852      	ldr	r2, [r2, #4]
 8001b34:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4863      	ldr	r0, [pc, #396]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001b52:	4283      	cmp	r3, r0
 8001b54:	d802      	bhi.n	8001b5c <HAL_I2C_Init+0xb8>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	e009      	b.n	8001b70 <HAL_I2C_Init+0xcc>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b62:	fb00 f303 	mul.w	r3, r0, r3
 8001b66:	4862      	ldr	r0, [pc, #392]	; (8001cf0 <HAL_I2C_Init+0x24c>)
 8001b68:	fba0 0303 	umull	r0, r3, r0, r3
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	3301      	adds	r3, #1
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4955      	ldr	r1, [pc, #340]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d80d      	bhi.n	8001bac <HAL_I2C_Init+0x108>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e59      	subs	r1, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	bf38      	it	cc
 8001ba8:	2304      	movcc	r3, #4
 8001baa:	e04f      	b.n	8001c4c <HAL_I2C_Init+0x1a8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d111      	bne.n	8001bd8 <HAL_I2C_Init+0x134>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e5c      	subs	r4, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	440b      	add	r3, r1
 8001bc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e012      	b.n	8001bfe <HAL_I2C_Init+0x15a>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e5c      	subs	r4, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	0099      	lsls	r1, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Init+0x162>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e022      	b.n	8001c4c <HAL_I2C_Init+0x1a8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <HAL_I2C_Init+0x188>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e5c      	subs	r4, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	440b      	add	r3, r1
 8001c1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	e00f      	b.n	8001c4c <HAL_I2C_Init+0x1a8>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e5c      	subs	r4, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	0099      	lsls	r1, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	69d0      	ldr	r0, [r2, #28]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6a12      	ldr	r2, [r2, #32]
 8001c66:	4302      	orrs	r2, r0
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	6908      	ldr	r0, [r1, #16]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68c9      	ldr	r1, [r1, #12]
 8001c86:	4301      	orrs	r1, r0
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6950      	ldr	r0, [r2, #20]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6992      	ldr	r2, [r2, #24]
 8001ca2:	4302      	orrs	r2, r0
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	000186a0 	.word	0x000186a0
 8001ce4:	001e847f 	.word	0x001e847f
 8001ce8:	003d08ff 	.word	0x003d08ff
 8001cec:	431bde83 	.word	0x431bde83
 8001cf0:	10624dd3 	.word	0x10624dd3

08001cf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e021      	b.n	8001d4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2224      	movs	r2, #36	; 0x24
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f005 fbc4 	bl	80074ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	817b      	strh	r3, [r7, #10]
 8001d66:	460b      	mov	r3, r1
 8001d68:	813b      	strh	r3, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff f817 	bl	8000da0 <HAL_GetTick>
 8001d72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	f040 80d9 	bne.w	8001f34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2319      	movs	r3, #25
 8001d88:	2201      	movs	r2, #1
 8001d8a:	496d      	ldr	r1, [pc, #436]	; (8001f40 <HAL_I2C_Mem_Write+0x1ec>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fc67 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0cc      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Mem_Write+0x56>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0c5      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1e2>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d007      	beq.n	8001dd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2221      	movs	r2, #33	; 0x21
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_I2C_Mem_Write+0x1f0>)
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e12:	88f8      	ldrh	r0, [r7, #6]
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	8979      	ldrh	r1, [r7, #10]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fac4 	bl	80023b0 <I2C_RequestMemoryWrite>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d052      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e081      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fce8 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d107      	bne.n	8001e5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06b      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_I2C_Mem_Write+0x180>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d017      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1aa      	bne.n	8001e32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fcd4 	bl	800288e <I2C_WaitOnBTFFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d107      	bne.n	8001f04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e016      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	00100002 	.word	0x00100002
 8001f44:	ffff0000 	.word	0xffff0000

08001f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	813b      	strh	r3, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f62:	f7fe ff1d 	bl	8000da0 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	f040 8208 	bne.w	8002386 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2319      	movs	r3, #25
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	497b      	ldr	r1, [pc, #492]	; (800216c <HAL_I2C_Mem_Read+0x224>)
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fb6d 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e1fb      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Mem_Read+0x56>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e1f4      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d007      	beq.n	8001fc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2222      	movs	r2, #34	; 0x22
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a5b      	ldr	r2, [pc, #364]	; (8002170 <HAL_I2C_Mem_Read+0x228>)
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002006:	88f8      	ldrh	r0, [r7, #6]
 8002008:	893a      	ldrh	r2, [r7, #8]
 800200a:	8979      	ldrh	r1, [r7, #10]
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	4603      	mov	r3, r0
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa52 	bl	80024c0 <I2C_RequestMemoryRead>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1b0      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d113      	bne.n	8002056 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e184      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	2b01      	cmp	r3, #1
 800205c:	d11b      	bne.n	8002096 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e164      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	2b02      	cmp	r3, #2
 800209c:	d11b      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	e144      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020ec:	e138      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	f200 80f1 	bhi.w	80022da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d123      	bne.n	8002148 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fc03 	bl	8002910 <I2C_WaitOnRXNEFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e139      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	6912      	ldr	r2, [r2, #16]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002146:	e10b      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b02      	cmp	r3, #2
 800214e:	d14e      	bne.n	80021ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	2200      	movs	r2, #0
 8002158:	4906      	ldr	r1, [pc, #24]	; (8002174 <HAL_I2C_Mem_Read+0x22c>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa80 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e10e      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
 800216a:	bf00      	nop
 800216c:	00100002 	.word	0x00100002
 8002170:	ffff0000 	.word	0xffff0000
 8002174:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6912      	ldr	r2, [r2, #16]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	6912      	ldr	r2, [r2, #16]
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ec:	e0b8      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f4:	2200      	movs	r2, #0
 80021f6:	4966      	ldr	r1, [pc, #408]	; (8002390 <HAL_I2C_Mem_Read+0x448>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fa31 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0bf      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	6912      	ldr	r2, [r2, #16]
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	2200      	movs	r2, #0
 8002252:	494f      	ldr	r1, [pc, #316]	; (8002390 <HAL_I2C_Mem_Read+0x448>)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa03 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e091      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	6912      	ldr	r2, [r2, #16]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	6912      	ldr	r2, [r2, #16]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022d8:	e042      	b.n	8002360 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fb16 	bl	8002910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e04c      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	6912      	ldr	r2, [r2, #16]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d118      	bne.n	8002360 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6912      	ldr	r2, [r2, #16]
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f aec2 	bne.w	80020ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
  }
}
 8002388:	4618      	mov	r0, r3
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	00010004 	.word	0x00010004

08002394 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	817b      	strh	r3, [r7, #10]
 80023c2:	460b      	mov	r3, r1
 80023c4:	813b      	strh	r3, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f93a 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e05e      	b.n	80024b4 <I2C_RequestMemoryWrite+0x104>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	897a      	ldrh	r2, [r7, #10]
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002402:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	6a3a      	ldr	r2, [r7, #32]
 8002408:	492c      	ldr	r1, [pc, #176]	; (80024bc <I2C_RequestMemoryWrite+0x10c>)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f97f 	bl	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <I2C_RequestMemoryWrite+0x6a>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e04c      	b.n	80024b4 <I2C_RequestMemoryWrite+0x104>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	6a39      	ldr	r1, [r7, #32]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f9e9 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <I2C_RequestMemoryWrite+0xac>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <I2C_RequestMemoryWrite+0xa8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002456:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e02b      	b.n	80024b4 <I2C_RequestMemoryWrite+0x104>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <I2C_RequestMemoryWrite+0xbe>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	893a      	ldrh	r2, [r7, #8]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	e021      	b.n	80024b2 <I2C_RequestMemoryWrite+0x102>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	893a      	ldrh	r2, [r7, #8]
 8002474:	0a12      	lsrs	r2, r2, #8
 8002476:	b292      	uxth	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	6a39      	ldr	r1, [r7, #32]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f9c3 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <I2C_RequestMemoryWrite+0xf8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <I2C_RequestMemoryWrite+0xf4>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e005      	b.n	80024b4 <I2C_RequestMemoryWrite+0x104>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	893a      	ldrh	r2, [r7, #8]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00010002 	.word	0x00010002

080024c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2200      	movs	r2, #0
 8002502:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8aa 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e09d      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	897a      	ldrh	r2, [r7, #10]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002522:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	494c      	ldr	r1, [pc, #304]	; (800265c <I2C_RequestMemoryRead+0x19c>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8ef 	bl	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C_RequestMemoryRead+0x7a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08b      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f959 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <I2C_RequestMemoryRead+0xbc>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b04      	cmp	r3, #4
 8002566:	d107      	bne.n	8002578 <I2C_RequestMemoryRead+0xb8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002576:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e06a      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d105      	bne.n	800258e <I2C_RequestMemoryRead+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	893a      	ldrh	r2, [r7, #8]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	e021      	b.n	80025d2 <I2C_RequestMemoryRead+0x112>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	893a      	ldrh	r2, [r7, #8]
 8002594:	0a12      	lsrs	r2, r2, #8
 8002596:	b292      	uxth	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	6a39      	ldr	r1, [r7, #32]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f933 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <I2C_RequestMemoryRead+0x108>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <I2C_RequestMemoryRead+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e044      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	893a      	ldrh	r2, [r7, #8]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f918 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <I2C_RequestMemoryRead+0x13e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <I2C_RequestMemoryRead+0x13a>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e029      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2200      	movs	r2, #0
 8002616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f820 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_RequestMemoryRead+0x16a>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e013      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	897a      	ldrh	r2, [r7, #10]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	4907      	ldr	r1, [pc, #28]	; (800265c <I2C_RequestMemoryRead+0x19c>)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f864 	bl	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryRead+0x190>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <I2C_RequestMemoryRead+0x192>
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002670:	e025      	b.n	80026be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d021      	beq.n	80026be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7fe fb91 	bl	8000da0 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d802      	bhi.n	8002690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e023      	b.n	8002706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10d      	bne.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	e00c      	b.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d0b6      	beq.n	8002672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271c:	e051      	b.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d123      	bne.n	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0204 	orr.w	r2, r3, #4
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e046      	b.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d021      	beq.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7fe fb0f 	bl	8000da0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	1ad2      	subs	r2, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d802      	bhi.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d116      	bne.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e020      	b.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10c      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4013      	ands	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e00b      	b.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	43da      	mvns	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d18d      	bne.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8ce 	bl	80029bc <I2C_IsAcknowledgeFailed>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02d      	b.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d021      	beq.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002832:	f7fe fab5 	bl	8000da0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1ad2      	subs	r2, r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d802      	bhi.n	8002848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d116      	bne.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d1ca      	bne.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800289a:	e02d      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f88d 	bl	80029bc <I2C_IsAcknowledgeFailed>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e02d      	b.n	8002908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d021      	beq.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b4:	f7fe fa74 	bl	8000da0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	1ad2      	subs	r2, r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d802      	bhi.n	80028ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e007      	b.n	8002908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b04      	cmp	r3, #4
 8002904:	d1ca      	bne.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800291c:	e042      	b.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b10      	cmp	r3, #16
 800292a:	d119      	bne.n	8002960 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0210 	mvn.w	r2, #16
 8002934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e029      	b.n	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002960:	f7fe fa1e 	bl	8000da0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	d802      	bhi.n	8002976 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e007      	b.n	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d1b5      	bne.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d2:	d11b      	bne.n	8002a0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d129      	bne.n	8002a84 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a52:	f022 0210 	bic.w	r2, r2, #16
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d12a      	bne.n	8002b02 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002acc:	89fb      	ldrh	r3, [r7, #14]
 8002ace:	f023 030f 	bic.w	r3, r3, #15
 8002ad2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	89fa      	ldrh	r2, [r7, #14]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0bf      	b.n	8002ca2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f005 fb8a 	bl	8008250 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	6992      	ldr	r2, [r2, #24]
 8002b4e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002b52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	6991      	ldr	r1, [r2, #24]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6850      	ldr	r0, [r2, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b6c:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6912      	ldr	r2, [r2, #16]
 8002b72:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b74:	430a      	orrs	r2, r1
 8002b76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <HAL_LTDC_Init+0x19c>)
 8002b84:	400b      	ands	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	6891      	ldr	r1, [r2, #8]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6990      	ldr	r0, [r2, #24]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4302      	orrs	r2, r0
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68d9      	ldr	r1, [r3, #12]
 8002bb0:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <HAL_LTDC_Init+0x19c>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	68d1      	ldr	r1, [r2, #12]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6a10      	ldr	r0, [r2, #32]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4302      	orrs	r2, r0
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6919      	ldr	r1, [r3, #16]
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <HAL_LTDC_Init+0x19c>)
 8002be0:	400b      	ands	r3, r1
 8002be2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	6911      	ldr	r1, [r2, #16]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4302      	orrs	r2, r0
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6959      	ldr	r1, [r3, #20]
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_LTDC_Init+0x19c>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	6951      	ldr	r1, [r2, #20]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4302      	orrs	r2, r0
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c5e:	68b8      	ldr	r0, [r7, #8]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4302      	orrs	r2, r0
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002c6a:	4302      	orrs	r2, r0
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c7a:	f042 0206 	orr.w	r2, r2, #6
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	6992      	ldr	r2, [r2, #24]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	f000f800 	.word	0xf000f800

08002cb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_LTDC_ConfigLayer+0x1a>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e02c      	b.n	8002d24 <HAL_LTDC_ConfigLayer+0x74>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2134      	movs	r1, #52	; 0x34
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4614      	mov	r4, r2
 8002cee:	461d      	mov	r5, r3
 8002cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f83b 	bl	8002d80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}

08002d2c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_LTDC_EnableDither+0x16>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e016      	b.n	8002d70 <HAL_LTDC_EnableDither+0x44>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_LTDC_EnableDither+0x50>)
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_LTDC_EnableDither+0x50>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40016800 	.word	0x40016800

08002d80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	4413      	add	r3, r2
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	01db      	lsls	r3, r3, #7
 8002dac:	4413      	add	r3, r2
 8002dae:	3384      	adds	r3, #132	; 0x84
 8002db0:	461a      	mov	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3384      	adds	r3, #132	; 0x84
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002dc6:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	01db      	lsls	r3, r3, #7
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3384      	adds	r3, #132	; 0x84
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	4413      	add	r3, r2
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e00:	4413      	add	r3, r2
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	01db      	lsls	r3, r3, #7
 8002e10:	4413      	add	r3, r2
 8002e12:	3384      	adds	r3, #132	; 0x84
 8002e14:	461a      	mov	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	01db      	lsls	r3, r3, #7
 8002e20:	440b      	add	r3, r1
 8002e22:	3384      	adds	r3, #132	; 0x84
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	01db      	lsls	r3, r3, #7
 8002e36:	4413      	add	r3, r2
 8002e38:	3384      	adds	r3, #132	; 0x84
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e4a:	4413      	add	r3, r2
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	01db      	lsls	r3, r3, #7
 8002e5e:	4413      	add	r3, r2
 8002e60:	3384      	adds	r3, #132	; 0x84
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	01db      	lsls	r3, r3, #7
 8002e6e:	440b      	add	r3, r1
 8002e70:	3384      	adds	r3, #132	; 0x84
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f023 0307 	bic.w	r3, r3, #7
 8002e78:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	01db      	lsls	r3, r3, #7
 8002e84:	4413      	add	r3, r2
 8002e86:	3384      	adds	r3, #132	; 0x84
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	01db      	lsls	r3, r3, #7
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3384      	adds	r3, #132	; 0x84
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	01db      	lsls	r3, r3, #7
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3384      	adds	r3, #132	; 0x84
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	01db      	lsls	r3, r3, #7
 8002eda:	4413      	add	r3, r2
 8002edc:	3384      	adds	r3, #132	; 0x84
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	01db      	lsls	r3, r3, #7
 8002f00:	4413      	add	r3, r2
 8002f02:	3384      	adds	r3, #132	; 0x84
 8002f04:	461a      	mov	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	01db      	lsls	r3, r3, #7
 8002f10:	440b      	add	r3, r1
 8002f12:	3384      	adds	r3, #132	; 0x84
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f1a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	4413      	add	r3, r2
 8002f28:	3384      	adds	r3, #132	; 0x84
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	01db      	lsls	r3, r3, #7
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3384      	adds	r3, #132	; 0x84
 8002f40:	461a      	mov	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3384      	adds	r3, #132	; 0x84
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	4413      	add	r3, r2
 8002f68:	3384      	adds	r3, #132	; 0x84
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	4413      	add	r3, r2
 8002f84:	3384      	adds	r3, #132	; 0x84
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4413      	add	r3, r2
 8002f94:	3384      	adds	r3, #132	; 0x84
 8002f96:	461a      	mov	r2, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3384      	adds	r3, #132	; 0x84
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e01b      	b.n	8002ff8 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d102      	bne.n	8002fce <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	e014      	b.n	8002ff8 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00b      	beq.n	8002fee <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d007      	beq.n	8002fee <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d003      	beq.n	8002fee <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	d102      	bne.n	8002ff4 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e001      	b.n	8002ff8 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	01db      	lsls	r3, r3, #7
 8003002:	4413      	add	r3, r2
 8003004:	3384      	adds	r3, #132	; 0x84
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	01db      	lsls	r3, r3, #7
 8003012:	440b      	add	r3, r1
 8003014:	3384      	adds	r3, #132	; 0x84
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800301c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	01db      	lsls	r3, r3, #7
 8003028:	4413      	add	r3, r2
 800302a:	3384      	adds	r3, #132	; 0x84
 800302c:	4618      	mov	r0, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1acb      	subs	r3, r1, r3
 8003044:	69f9      	ldr	r1, [r7, #28]
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	3303      	adds	r3, #3
 800304c:	4313      	orrs	r3, r2
 800304e:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	01db      	lsls	r3, r3, #7
 800305a:	4413      	add	r3, r2
 800305c:	3384      	adds	r3, #132	; 0x84
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	01db      	lsls	r3, r3, #7
 800306a:	440b      	add	r3, r1
 800306c:	3384      	adds	r3, #132	; 0x84
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003074:	f023 0307 	bic.w	r3, r3, #7
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	01db      	lsls	r3, r3, #7
 8003084:	4413      	add	r3, r2
 8003086:	3384      	adds	r3, #132	; 0x84
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	01db      	lsls	r3, r3, #7
 800309a:	4413      	add	r3, r2
 800309c:	3384      	adds	r3, #132	; 0x84
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	01db      	lsls	r3, r3, #7
 80030aa:	440b      	add	r3, r1
 80030ac:	3384      	adds	r3, #132	; 0x84
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6013      	str	r3, [r2, #0]
}
 80030b6:	bf00      	nop
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_PWREx_EnableOverDrive+0x90>)
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_PWREx_EnableOverDrive+0x90>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_PWREx_EnableOverDrive+0x90>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_PWREx_EnableOverDrive+0x94>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7fd fe56 	bl	8000da0 <HAL_GetTick>
 80030f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030f6:	e009      	b.n	800310c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030f8:	f7fd fe52 	bl	8000da0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003106:	d901      	bls.n	800310c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e01f      	b.n	800314c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_PWREx_EnableOverDrive+0x98>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d1ee      	bne.n	80030f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_PWREx_EnableOverDrive+0x9c>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003120:	f7fd fe3e 	bl	8000da0 <HAL_GetTick>
 8003124:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003126:	e009      	b.n	800313c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003128:	f7fd fe3a 	bl	8000da0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003136:	d901      	bls.n	800313c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e007      	b.n	800314c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_PWREx_EnableOverDrive+0x98>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003148:	d1ee      	bne.n	8003128 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	420e0040 	.word	0x420e0040
 800315c:	40007000 	.word	0x40007000
 8003160:	420e0044 	.word	0x420e0044

08003164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e22d      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d075      	beq.n	800326e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003182:	4ba3      	ldr	r3, [pc, #652]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b04      	cmp	r3, #4
 800318c:	d00c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318e:	4ba0      	ldr	r3, [pc, #640]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d112      	bne.n	80031c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319a:	4b9d      	ldr	r3, [pc, #628]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	4b99      	ldr	r3, [pc, #612]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d05b      	beq.n	800326c <HAL_RCC_OscConfig+0x108>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d157      	bne.n	800326c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e208      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d106      	bne.n	80031d8 <HAL_RCC_OscConfig+0x74>
 80031ca:	4a91      	ldr	r2, [pc, #580]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	4b90      	ldr	r3, [pc, #576]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e01d      	b.n	8003214 <HAL_RCC_OscConfig+0xb0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x98>
 80031e2:	4a8b      	ldr	r2, [pc, #556]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	4b8a      	ldr	r3, [pc, #552]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4a88      	ldr	r2, [pc, #544]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	4b87      	ldr	r3, [pc, #540]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0xb0>
 80031fc:	4a84      	ldr	r2, [pc, #528]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	4b84      	ldr	r3, [pc, #528]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4a81      	ldr	r2, [pc, #516]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 800320a:	4b81      	ldr	r3, [pc, #516]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fd fdc0 	bl	8000da0 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd fdbc 	bl	8000da0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1cd      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b76      	ldr	r3, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0xc0>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fd fdac 	bl	8000da0 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7fd fda8 	bl	8000da0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1b9      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	4b6c      	ldr	r3, [pc, #432]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0xe8>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d063      	beq.n	8003342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b62      	ldr	r3, [pc, #392]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003292:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_RCC_OscConfig+0x152>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e18d      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	4956      	ldr	r1, [pc, #344]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	e03a      	b.n	8003342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b4f      	ldr	r3, [pc, #316]	; (8003414 <HAL_RCC_OscConfig+0x2b0>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fd fd61 	bl	8000da0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fd fd5d 	bl	8000da0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e16e      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	4b46      	ldr	r3, [pc, #280]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4943      	ldr	r1, [pc, #268]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	4b43      	ldr	r3, [pc, #268]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
 8003314:	e015      	b.n	8003342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <HAL_RCC_OscConfig+0x2b0>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd fd40 	bl	8000da0 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003324:	f7fd fd3c 	bl	8000da0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e14d      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d030      	beq.n	80033b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_RCC_OscConfig+0x2b4>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd fd20 	bl	8000da0 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003364:	f7fd fd1c 	bl	8000da0 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e12d      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x200>
 8003382:	e015      	b.n	80033b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCC_OscConfig+0x2b4>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fd fd09 	bl	8000da0 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003392:	f7fd fd05 	bl	8000da0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e116      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a0 	beq.w	80034fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_OscConfig+0x2b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d121      	bne.n	800343e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x2b8>)
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_RCC_OscConfig+0x2b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003406:	f7fd fccb 	bl	8000da0 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	e011      	b.n	8003432 <HAL_RCC_OscConfig+0x2ce>
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	42470000 	.word	0x42470000
 8003418:	42470e80 	.word	0x42470e80
 800341c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fd fcbe 	bl	8000da0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0cf      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_OscConfig+0x478>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d106      	bne.n	8003454 <HAL_RCC_OscConfig+0x2f0>
 8003446:	4a66      	ldr	r2, [pc, #408]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003448:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	e01c      	b.n	800348e <HAL_RCC_OscConfig+0x32a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10c      	bne.n	8003476 <HAL_RCC_OscConfig+0x312>
 800345c:	4a60      	ldr	r2, [pc, #384]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 800345e:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
 8003468:	4a5d      	ldr	r2, [pc, #372]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 800346a:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0x32a>
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	4a57      	ldr	r2, [pc, #348]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003484:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fd fc83 	bl	8000da0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fd fc7f 	bl	8000da0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e08e      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <HAL_RCC_OscConfig+0x33a>
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fc6d 	bl	8000da0 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fd fc69 	bl	8000da0 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e078      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d064      	beq.n	80035d0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	d05c      	beq.n	80035cc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d141      	bne.n	800359e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <HAL_RCC_OscConfig+0x480>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd fc3e 	bl	8000da0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd fc3a 	bl	8000da0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04b      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003546:	4926      	ldr	r1, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	019b      	lsls	r3, r3, #6
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_RCC_OscConfig+0x480>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fd fc13 	bl	8000da0 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd fc0f 	bl	8000da0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e020      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x41a>
 800359c:	e018      	b.n	80035d0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_RCC_OscConfig+0x480>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fd fbfc 	bl	8000da0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fd fbf8 	bl	8000da0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e009      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCC_OscConfig+0x47c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x448>
 80035ca:	e001      	b.n	80035d0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470060 	.word	0x42470060

080035e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0ca      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035fc:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCC_ClockConfig+0x1b4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 020f 	and.w	r2, r3, #15
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d20c      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b64      	ldr	r3, [pc, #400]	; (800379c <HAL_RCC_ClockConfig+0x1b4>)
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b62      	ldr	r3, [pc, #392]	; (800379c <HAL_RCC_ClockConfig+0x1b4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b6      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003656:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800365e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	494f      	ldr	r1, [pc, #316]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d044      	beq.n	8003708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d119      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07d      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06d      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e065      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4936      	ldr	r1, [pc, #216]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 0203 	bic.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d8:	f7fd fb62 	bl	8000da0 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fd fb5e 	bl	8000da0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e04d      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 020c 	and.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1eb      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_ClockConfig+0x1b4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d90c      	bls.n	8003730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCC_ClockConfig+0x1b4>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCC_ClockConfig+0x1b4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e030      	b.n	8003792 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373c:	4918      	ldr	r1, [pc, #96]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375a:	4911      	ldr	r1, [pc, #68]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800376e:	f000 f81d 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8003772:	4601      	mov	r1, r0
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	fa21 f303 	lsr.w	r3, r1, r3
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800378a:	2000      	movs	r0, #0
 800378c:	f006 fab2 	bl	8009cf4 <HAL_InitTick>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023c00 	.word	0x40023c00
 80037a0:	40023800 	.word	0x40023800
 80037a4:	0800cdb0 	.word	0x0800cdb0
 80037a8:	20000098 	.word	0x20000098

080037ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	b08f      	sub	sp, #60	; 0x3c
 80037b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b8:	2300      	movs	r3, #0
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d007      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x34>
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 80b2 	bne.w	800393e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037da:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80037de:	e0b1      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037e0:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037e4:	e0ae      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e6:	4b5a      	ldr	r3, [pc, #360]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037f0:	4b57      	ldr	r3, [pc, #348]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d04e      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fc:	4b54      	ldr	r3, [pc, #336]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	ea01 0103 	and.w	r1, r1, r3
 8003812:	ea02 0204 	and.w	r2, r2, r4
 8003816:	460b      	mov	r3, r1
 8003818:	4614      	mov	r4, r2
 800381a:	0160      	lsls	r0, r4, #5
 800381c:	6278      	str	r0, [r7, #36]	; 0x24
 800381e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003820:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003824:	6278      	str	r0, [r7, #36]	; 0x24
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800382e:	1a5b      	subs	r3, r3, r1
 8003830:	eb64 0402 	sbc.w	r4, r4, r2
 8003834:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003838:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800383c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003840:	ebb8 0803 	subs.w	r8, r8, r3
 8003844:	eb69 0904 	sbc.w	r9, r9, r4
 8003848:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003860:	eb18 0801 	adds.w	r8, r8, r1
 8003864:	eb49 0902 	adc.w	r9, r9, r2
 8003868:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003880:	4640      	mov	r0, r8
 8003882:	4649      	mov	r1, r9
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	461a      	mov	r2, r3
 800388c:	4623      	mov	r3, r4
 800388e:	f7fd f8c9 	bl	8000a24 <__aeabi_uldivmod>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	e043      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	ea01 0103 	and.w	r1, r1, r3
 80038b0:	ea02 0204 	and.w	r2, r2, r4
 80038b4:	460b      	mov	r3, r1
 80038b6:	4614      	mov	r4, r2
 80038b8:	0160      	lsls	r0, r4, #5
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038cc:	1a5b      	subs	r3, r3, r1
 80038ce:	eb64 0402 	sbc.w	r4, r4, r2
 80038d2:	01a6      	lsls	r6, r4, #6
 80038d4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80038d8:	019d      	lsls	r5, r3, #6
 80038da:	1aed      	subs	r5, r5, r3
 80038dc:	eb66 0604 	sbc.w	r6, r6, r4
 80038e0:	00f3      	lsls	r3, r6, #3
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80038f4:	186d      	adds	r5, r5, r1
 80038f6:	eb46 0602 	adc.w	r6, r6, r2
 80038fa:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80038fe:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8003902:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003906:	4655      	mov	r5, sl
 8003908:	465e      	mov	r6, fp
 800390a:	4628      	mov	r0, r5
 800390c:	4631      	mov	r1, r6
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	f04f 0400 	mov.w	r4, #0
 8003914:	461a      	mov	r2, r3
 8003916:	4623      	mov	r3, r4
 8003918:	f7fd f884 	bl	8000a24 <__aeabi_uldivmod>
 800391c:	4603      	mov	r3, r0
 800391e:	460c      	mov	r4, r1
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	3301      	adds	r3, #1
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8003932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800393c:	e002      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003946:	4618      	mov	r0, r3
 8003948:	373c      	adds	r7, #60	; 0x3c
 800394a:	46bd      	mov	sp, r7
 800394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	007a1200 	.word	0x007a1200

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_GetHCLKFreq+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000098 	.word	0x20000098

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003978:	f7ff fff0 	bl	800395c <HAL_RCC_GetHCLKFreq>
 800397c:	4601      	mov	r1, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4a03      	ldr	r2, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	0800cdc0 	.word	0x0800cdc0

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a0:	f7ff ffdc 	bl	800395c <HAL_RCC_GetHCLKFreq>
 80039a4:	4601      	mov	r1, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0b5b      	lsrs	r3, r3, #13
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4a03      	ldr	r2, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	0800cdc0 	.word	0x0800cdc0

080039c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	220f      	movs	r2, #15
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_RCC_GetClockConfig+0x60>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40023c00 	.word	0x40023c00

08003a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d061      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a50:	4ba3      	ldr	r3, [pc, #652]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a56:	f7fd f9a3 	bl	8000da0 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a5e:	f7fd f99f 	bl	8000da0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e177      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a70:	4b9c      	ldr	r3, [pc, #624]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a88:	4996      	ldr	r1, [pc, #600]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	019a      	lsls	r2, r3, #6
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aa8:	4b8e      	ldr	r3, [pc, #568]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	0f1b      	lsrs	r3, r3, #28
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003ab6:	498b      	ldr	r1, [pc, #556]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	019a      	lsls	r2, r3, #6
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ad0:	4984      	ldr	r1, [pc, #528]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad2:	4b84      	ldr	r3, [pc, #528]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	f023 021f 	bic.w	r2, r3, #31
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ae8:	4b7d      	ldr	r3, [pc, #500]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aee:	f7fd f957 	bl	8000da0 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003af6:	f7fd f953 	bl	8000da0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e12b      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b08:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d079      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b2c:	4b6e      	ldr	r3, [pc, #440]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b32:	f7fd f935 	bl	8000da0 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b3a:	f7fd f931 	bl	8000da0 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e109      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4c:	4b65      	ldr	r3, [pc, #404]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b58:	d0ef      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b66:	4b5f      	ldr	r3, [pc, #380]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	0f1b      	lsrs	r3, r3, #28
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b74:	495b      	ldr	r1, [pc, #364]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	019a      	lsls	r2, r3, #6
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	071b      	lsls	r3, r3, #28
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b8e:	4955      	ldr	r1, [pc, #340]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b90:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01e      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	0e1b      	lsrs	r3, r3, #24
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bc2:	4948      	ldr	r1, [pc, #288]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	019a      	lsls	r2, r3, #6
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bdc:	4941      	ldr	r1, [pc, #260]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf8:	f7fd f8d2 	bl	8000da0 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c00:	f7fd f8ce 	bl	8000da0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0a6      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c12:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1e:	d1ef      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 808d 	beq.w	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c4a:	4a28      	ldr	r2, [pc, #160]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c56:	f7fd f8a3 	bl	8000da0 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fd f89f 	bl	8000da0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e077      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d039      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d032      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d11e      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd f86d 	bl	8000da0 <HAL_GetTick>
 8003cc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e014      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd f869 	bl	8000da0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d90b      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e03f      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003ce0:	42470068 	.word	0x42470068
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470070 	.word	0x42470070
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0e4      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0c:	d10d      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003d0e:	4916      	ldr	r1, [pc, #88]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]
 8003d28:	e005      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003d2a:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d34:	6093      	str	r3, [r2, #8]
 8003d36:	490c      	ldr	r1, [pc, #48]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	4313      	orrs	r3, r2
 8003d46:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d54:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d5c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	424711e0 	.word	0x424711e0

08003d70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e025      	b.n	8003dd0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f002 fde7 	bl	800696c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f001 fa1f 	bl	80051f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	f001 fa8a 	bl	80052da <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d101      	bne.n	8003df4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
 8003df2:	e018      	b.n	8003e26 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 fae7 	bl	80053d8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d104      	bne.n	8003e1c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2205      	movs	r2, #5
 8003e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003e1a:	e003      	b.n	8003e24 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d101      	bne.n	8003e48 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e00e      	b.n	8003e66 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fafa 	bl	8005450 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e055      	b.n	8003f2c <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f004 fc40 	bl	8008720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6851      	ldr	r1, [r2, #4]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6892      	ldr	r2, [r2, #8]
 8003ec4:	4311      	orrs	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68d2      	ldr	r2, [r2, #12]
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6912      	ldr	r2, [r2, #16]
 8003ed0:	4311      	orrs	r1, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6952      	ldr	r2, [r2, #20]
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6992      	ldr	r2, [r2, #24]
 8003edc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	69d2      	ldr	r2, [r2, #28]
 8003ee6:	4311      	orrs	r1, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6a12      	ldr	r2, [r2, #32]
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6992      	ldr	r2, [r2, #24]
 8003efe:	0c12      	lsrs	r2, r2, #16
 8003f00:	f002 0104 	and.w	r1, r2, #4
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	69d2      	ldr	r2, [r2, #28]
 8003f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e01a      	b.n	8003f7c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f004 fc26 	bl	80087b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_SPI_Transmit+0x22>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e11c      	b.n	80041e0 <HAL_SPI_Transmit+0x25c>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fae:	f7fc fef7 	bl	8000da0 <HAL_GetTick>
 8003fb2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc8:	e101      	b.n	80041ce <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Transmit+0x52>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fda:	e0f8      	b.n	80041ce <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004022:	d107      	bne.n	8004034 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004032:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d007      	beq.n	8004052 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405a:	d14b      	bne.n	80040f4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_SPI_Transmit+0xe6>
 8004064:	8afb      	ldrh	r3, [r7, #22]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d13e      	bne.n	80040e8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800408e:	e02b      	b.n	80040e8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d112      	bne.n	80040c4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040a6:	8812      	ldrh	r2, [r2, #0]
 80040a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80040c2:	e011      	b.n	80040e8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c4:	f7fc fe6c 	bl	8000da0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d303      	bcc.n	80040dc <HAL_SPI_Transmit+0x158>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d102      	bne.n	80040e2 <HAL_SPI_Transmit+0x15e>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040e6:	e072      	b.n	80041ce <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ce      	bne.n	8004090 <HAL_SPI_Transmit+0x10c>
 80040f2:	e04c      	b.n	800418e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_SPI_Transmit+0x17e>
 80040fc:	8afb      	ldrh	r3, [r7, #22]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d140      	bne.n	8004184 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004128:	e02c      	b.n	8004184 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d113      	bne.n	8004160 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	86da      	strh	r2, [r3, #54]	; 0x36
 800415e:	e011      	b.n	8004184 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004160:	f7fc fe1e 	bl	8000da0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	1ad2      	subs	r2, r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d303      	bcc.n	8004178 <HAL_SPI_Transmit+0x1f4>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d102      	bne.n	800417e <HAL_SPI_Transmit+0x1fa>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004182:	e024      	b.n	80041ce <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1cd      	bne.n	800412a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fb7b 	bl	800488e <SPI_EndRxTxTransaction>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041de:	7ffb      	ldrb	r3, [r7, #31]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004204:	d112      	bne.n	800422c <HAL_SPI_Receive+0x44>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10e      	bne.n	800422c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2204      	movs	r2, #4
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8e6 	bl	80043f4 <HAL_SPI_TransmitReceive>
 8004228:	4603      	mov	r3, r0
 800422a:	e0df      	b.n	80043ec <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_SPI_Receive+0x52>
 8004236:	2302      	movs	r3, #2
 8004238:	e0d8      	b.n	80043ec <HAL_SPI_Receive+0x204>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004242:	f7fc fdad 	bl	8000da0 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d002      	beq.n	800425a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004258:	e0bf      	b.n	80043da <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_SPI_Receive+0x7e>
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
    goto error;
 800426a:	e0b6      	b.n	80043da <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2204      	movs	r2, #4
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d107      	bne.n	80042c4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	d007      	beq.n	80042e2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d161      	bne.n	80043ae <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042ea:	e02d      	b.n	8004348 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d114      	bne.n	8004324 <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	320c      	adds	r2, #12
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004322:	e011      	b.n	8004348 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004324:	f7fc fd3c 	bl	8000da0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad2      	subs	r2, r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d303      	bcc.n	800433c <HAL_SPI_Receive+0x154>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d102      	bne.n	8004342 <HAL_SPI_Receive+0x15a>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004346:	e048      	b.n	80043da <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1cc      	bne.n	80042ec <HAL_SPI_Receive+0x104>
 8004352:	e031      	b.n	80043b8 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d113      	bne.n	800438a <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	68d2      	ldr	r2, [r2, #12]
 800436c:	b292      	uxth	r2, r2
 800436e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004388:	e011      	b.n	80043ae <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438a:	f7fc fd09 	bl	8000da0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d303      	bcc.n	80043a2 <HAL_SPI_Receive+0x1ba>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d102      	bne.n	80043a8 <HAL_SPI_Receive+0x1c0>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043ac:	e015      	b.n	80043da <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1cd      	bne.n	8004354 <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	6839      	ldr	r1, [r7, #0]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa31 	bl	8004824 <SPI_EndRxTransaction>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_SPI_TransmitReceive+0x26>
 8004416:	2302      	movs	r3, #2
 8004418:	e188      	b.n	800472c <HAL_SPI_TransmitReceive+0x338>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004422:	f7fc fcbd 	bl	8000da0 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004440:	2b01      	cmp	r3, #1
 8004442:	d00f      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x70>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d107      	bne.n	800445c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_SPI_TransmitReceive+0x68>
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004458:	2b04      	cmp	r3, #4
 800445a:	d003      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004462:	e159      	b.n	8004718 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x82>
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800447c:	e14c      	b.n	8004718 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2205      	movs	r2, #5
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	887a      	ldrh	r2, [r7, #2]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	887a      	ldrh	r2, [r7, #2]
 80044ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d007      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d178      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_TransmitReceive+0x10a>
 80044f8:	8b7b      	ldrh	r3, [r7, #26]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d166      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004506:	8812      	ldrh	r2, [r2, #0]
 8004508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004522:	e053      	b.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d11b      	bne.n	800456a <HAL_SPI_TransmitReceive+0x176>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d016      	beq.n	800456a <HAL_SPI_TransmitReceive+0x176>
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d113      	bne.n	800456a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1b8>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	68d2      	ldr	r2, [r2, #12]
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ac:	f7fc fbf8 	bl	8000da0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d307      	bcc.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d003      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045ca:	e0a5      	b.n	8004718 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1a6      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x130>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1a1      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x130>
 80045e0:	e07c      	b.n	80046dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x1fc>
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d16b      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004616:	e057      	b.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d11c      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d114      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d119      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x2ae>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d014      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	68d2      	ldr	r2, [r2, #12]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800469e:	2301      	movs	r3, #1
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046a2:	f7fc fb7d 	bl	8000da0 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d303      	bcc.n	80046ba <HAL_SPI_TransmitReceive+0x2c6>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x2cc>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046c6:	e027      	b.n	8004718 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1a2      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x224>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d19d      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f8d4 	bl	800488e <SPI_EndRxTxTransaction>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046f8:	e00e      	b.n	8004718 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800472c:	4618      	mov	r0, r3
 800472e:	3730      	adds	r7, #48	; 0x30
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004742:	b2db      	uxtb	r3, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004760:	e04c      	b.n	80047fc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d048      	beq.n	80047fc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800476a:	f7fc fb19 	bl	8000da0 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d202      	bcs.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x30>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d13d      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	6852      	ldr	r2, [r2, #4]
 800478a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800478e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004798:	d111      	bne.n	80047be <SPI_WaitFlagStateUntilTimeout+0x6e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a2:	d004      	beq.n	80047ae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ac:	d107      	bne.n	80047be <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	d10f      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e00f      	b.n	800481c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	401a      	ands	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	429a      	cmp	r2, r3
 8004818:	d1a3      	bne.n	8004762 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004838:	d111      	bne.n	800485e <SPI_EndRxTransaction+0x3a>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d004      	beq.n	800484e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d107      	bne.n	800485e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff71 	bl	8004750 <SPI_WaitFlagStateUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e000      	b.n	8004886 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af02      	add	r7, sp, #8
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2180      	movs	r1, #128	; 0x80
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ff53 	bl	8004750 <SPI_WaitFlagStateUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e000      	b.n	80048c2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e01d      	b.n	8004918 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f815 	bl	8004920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f000 f967 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b06      	cmp	r3, #6
 800495c:	d007      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8ee 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8e0 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8f1 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8c4 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8b6 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8c7 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2204      	movs	r2, #4
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f89a 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f88c 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f89d 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f870 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f862 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f873 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0201 	mvn.w	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f003 fdc0 	bl	8008680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f902 	bl	8004d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f838 	bl	8004bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0220 	mvn.w	r2, #32
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8cc 	bl	8004d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a40      	ldr	r2, [pc, #256]	; (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d00f      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3d      	ldr	r2, [pc, #244]	; (8004cf4 <TIM_Base_SetConfig+0x118>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <TIM_Base_SetConfig+0x11c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3b      	ldr	r2, [pc, #236]	; (8004cfc <TIM_Base_SetConfig+0x120>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3a      	ldr	r2, [pc, #232]	; (8004d00 <TIM_Base_SetConfig+0x124>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02b      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3c:	d027      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <TIM_Base_SetConfig+0x118>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d023      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <TIM_Base_SetConfig+0x11c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01f      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <TIM_Base_SetConfig+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01b      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <TIM_Base_SetConfig+0x124>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d017      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <TIM_Base_SetConfig+0x128>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a27      	ldr	r2, [pc, #156]	; (8004d08 <TIM_Base_SetConfig+0x12c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <TIM_Base_SetConfig+0x130>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <TIM_Base_SetConfig+0x134>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a24      	ldr	r2, [pc, #144]	; (8004d14 <TIM_Base_SetConfig+0x138>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <TIM_Base_SetConfig+0x13c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0xf8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <TIM_Base_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d103      	bne.n	8004cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	615a      	str	r2, [r3, #20]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800
 8004d10:	40001800 	.word	0x40001800
 8004d14:	40001c00 	.word	0x40001c00
 8004d18:	40002000 	.word	0x40002000

08004d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e03f      	b.n	8004dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f005 fb24 	bl	800a3b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f829 	bl	8004de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	6912      	ldr	r2, [r2, #16]
 8004d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	6952      	ldr	r2, [r2, #20]
 8004da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e24:	f023 030c 	bic.w	r3, r3, #12
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	6952      	ldr	r2, [r2, #20]
 8004e38:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6992      	ldr	r2, [r2, #24]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4c:	f040 80e4 	bne.w	8005018 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4aab      	ldr	r2, [pc, #684]	; (8005104 <UART_SetConfig+0x324>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <UART_SetConfig+0x84>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4aaa      	ldr	r2, [pc, #680]	; (8005108 <UART_SetConfig+0x328>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d16c      	bne.n	8004f3e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681c      	ldr	r4, [r3, #0]
 8004e68:	f7fe fd98 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009a      	lsls	r2, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	4aa2      	ldr	r2, [pc, #648]	; (800510c <UART_SetConfig+0x32c>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	011d      	lsls	r5, r3, #4
 8004e8c:	f7fe fd86 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009a      	lsls	r2, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ea6:	f7fe fd79 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	4a92      	ldr	r2, [pc, #584]	; (800510c <UART_SetConfig+0x32c>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2264      	movs	r2, #100	; 0x64
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	1af3      	subs	r3, r6, r3
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a8d      	ldr	r2, [pc, #564]	; (800510c <UART_SetConfig+0x32c>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee2:	441d      	add	r5, r3
 8004ee4:	f7fe fd5a 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009a      	lsls	r2, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	fbb2 f6f3 	udiv	r6, r2, r3
 8004efe:	f7fe fd4d 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009a      	lsls	r2, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	4a7c      	ldr	r2, [pc, #496]	; (800510c <UART_SetConfig+0x32c>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	2264      	movs	r2, #100	; 0x64
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	1af3      	subs	r3, r6, r3
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	3332      	adds	r3, #50	; 0x32
 8004f2c:	4a77      	ldr	r2, [pc, #476]	; (800510c <UART_SetConfig+0x32c>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	442b      	add	r3, r5
 8004f3a:	60a3      	str	r3, [r4, #8]
 8004f3c:	e154      	b.n	80051e8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681c      	ldr	r4, [r3, #0]
 8004f42:	f7fe fd17 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009a      	lsls	r2, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	; (800510c <UART_SetConfig+0x32c>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	011d      	lsls	r5, r3, #4
 8004f66:	f7fe fd05 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009a      	lsls	r2, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f80:	f7fe fcf8 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009a      	lsls	r2, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	4a5c      	ldr	r2, [pc, #368]	; (800510c <UART_SetConfig+0x32c>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	2264      	movs	r2, #100	; 0x64
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	1af3      	subs	r3, r6, r3
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	3332      	adds	r3, #50	; 0x32
 8004fae:	4a57      	ldr	r2, [pc, #348]	; (800510c <UART_SetConfig+0x32c>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fbc:	441d      	add	r5, r3
 8004fbe:	f7fe fcd9 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009a      	lsls	r2, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fd8:	f7fe fccc 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009a      	lsls	r2, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	4a46      	ldr	r2, [pc, #280]	; (800510c <UART_SetConfig+0x32c>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	2264      	movs	r2, #100	; 0x64
 8004ffc:	fb02 f303 	mul.w	r3, r2, r3
 8005000:	1af3      	subs	r3, r6, r3
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	3332      	adds	r3, #50	; 0x32
 8005006:	4a41      	ldr	r2, [pc, #260]	; (800510c <UART_SetConfig+0x32c>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	442b      	add	r3, r5
 8005014:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005016:	e0e7      	b.n	80051e8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a39      	ldr	r2, [pc, #228]	; (8005104 <UART_SetConfig+0x324>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <UART_SetConfig+0x24c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a38      	ldr	r2, [pc, #224]	; (8005108 <UART_SetConfig+0x328>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d171      	bne.n	8005110 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681c      	ldr	r4, [r3, #0]
 8005030:	f7fe fcb4 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8005034:	4602      	mov	r2, r0
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009a      	lsls	r2, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	4a30      	ldr	r2, [pc, #192]	; (800510c <UART_SetConfig+0x32c>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	011d      	lsls	r5, r3, #4
 8005054:	f7fe fca2 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8005058:	4602      	mov	r2, r0
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009a      	lsls	r2, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	fbb2 f6f3 	udiv	r6, r2, r3
 800506e:	f7fe fc95 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8005072:	4602      	mov	r2, r0
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009a      	lsls	r2, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	4a20      	ldr	r2, [pc, #128]	; (800510c <UART_SetConfig+0x32c>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2264      	movs	r2, #100	; 0x64
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	1af3      	subs	r3, r6, r3
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	3332      	adds	r3, #50	; 0x32
 800509c:	4a1b      	ldr	r2, [pc, #108]	; (800510c <UART_SetConfig+0x32c>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a8:	441d      	add	r5, r3
 80050aa:	f7fe fc77 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009a      	lsls	r2, r3, #2
 80050b8:	441a      	add	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80050c4:	f7fe fc6a 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009a      	lsls	r2, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	4a0b      	ldr	r2, [pc, #44]	; (800510c <UART_SetConfig+0x32c>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2264      	movs	r2, #100	; 0x64
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	1af3      	subs	r3, r6, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	3332      	adds	r3, #50	; 0x32
 80050f2:	4a06      	ldr	r2, [pc, #24]	; (800510c <UART_SetConfig+0x32c>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	442b      	add	r3, r5
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	e071      	b.n	80051e8 <UART_SetConfig+0x408>
 8005104:	40011000 	.word	0x40011000
 8005108:	40011400 	.word	0x40011400
 800510c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681c      	ldr	r4, [r3, #0]
 8005114:	f7fe fc2e 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8005118:	4602      	mov	r2, r0
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009a      	lsls	r2, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <UART_SetConfig+0x410>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	011d      	lsls	r5, r3, #4
 8005138:	f7fe fc1c 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 800513c:	4602      	mov	r2, r0
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009a      	lsls	r2, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005152:	f7fe fc0f 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8005156:	4602      	mov	r2, r0
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <UART_SetConfig+0x410>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2264      	movs	r2, #100	; 0x64
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	1af3      	subs	r3, r6, r3
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	3332      	adds	r3, #50	; 0x32
 8005180:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <UART_SetConfig+0x410>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518c:	441d      	add	r5, r3
 800518e:	f7fe fbf1 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8005192:	4602      	mov	r2, r0
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009a      	lsls	r2, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051a8:	f7fe fbe4 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009a      	lsls	r2, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	4a0b      	ldr	r2, [pc, #44]	; (80051f0 <UART_SetConfig+0x410>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2264      	movs	r2, #100	; 0x64
 80051cc:	fb02 f303 	mul.w	r3, r2, r3
 80051d0:	1af3      	subs	r3, r6, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a06      	ldr	r2, [pc, #24]	; (80051f0 <UART_SetConfig+0x410>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	442b      	add	r3, r5
 80051e4:	60a3      	str	r3, [r4, #8]
}
 80051e6:	e7ff      	b.n	80051e8 <UART_SetConfig+0x408>
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f0:	51eb851f 	.word	0x51eb851f

080051f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d029      	beq.n	8005262 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800521a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800521e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005228:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800522e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005234:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800523a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005240:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005246:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800524c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005252:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e034      	b.n	80052cc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800526e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005278:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800527e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005292:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005296:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052a0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80052a6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80052ac:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80052b2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80052b8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d02e      	beq.n	8005352 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005300:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	3b01      	subs	r3, #1
 800530e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005310:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	3b01      	subs	r3, #1
 8005318:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800531a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	3b01      	subs	r3, #1
 8005322:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005324:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800532e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	3b01      	subs	r3, #1
 8005336:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005338:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	3b01      	subs	r3, #1
 8005340:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005342:	4313      	orrs	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	e03b      	b.n	80053ca <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800535e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005362:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	3b01      	subs	r3, #1
 800536a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	3b01      	subs	r3, #1
 8005372:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005374:	4313      	orrs	r3, r2
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005388:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	3b01      	subs	r3, #1
 8005396:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005398:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	3b01      	subs	r3, #1
 80053a0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80053a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80053ac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80053b6:	4313      	orrs	r3, r2
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80053f4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80053fe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005410:	f7fb fcc6 	bl	8000da0 <HAL_GetTick>
 8005414:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005416:	e010      	b.n	800543a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d00c      	beq.n	800543a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <FMC_SDRAM_SendCommand+0x5e>
 8005426:	f7fb fcbb 	bl	8000da0 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d901      	bls.n	800543a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e006      	b.n	8005448 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b20      	cmp	r3, #32
 8005444:	d0e8      	beq.n	8005418 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005488:	2b84      	cmp	r3, #132	; 0x84
 800548a:	d005      	beq.n	8005498 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800548c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	3303      	adds	r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005498:	68fb      	ldr	r3, [r7, #12]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054aa:	f000 fe27 	bl	80060fc <vTaskStartScheduler>
  
  return osOK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685c      	ldr	r4, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ca:	b29e      	uxth	r6, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ffcf 	bl	8005476 <makeFreeRtosPriority>
 80054d8:	4602      	mov	r2, r0
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	9200      	str	r2, [sp, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	4632      	mov	r2, r6
 80054e6:	4629      	mov	r1, r5
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 fca9 	bl	8005e40 <xTaskCreate>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005502 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <osDelay+0x16>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	e000      	b.n	800551a <osDelay+0x18>
 8005518:	2301      	movs	r3, #1
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fdba 	bl	8006094 <vTaskDelay>
  
  return osOK;
 8005520:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f103 0208 	add.w	r2, r3, #8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f103 0208 	add.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f103 0208 	add.w	r2, r3, #8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d103      	bne.n	80055ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e00c      	b.n	8005606 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3308      	adds	r3, #8
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e002      	b.n	80055fa <vListInsert+0x2e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	d9f6      	bls.n	80055f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6892      	ldr	r2, [r2, #8]
 8005654:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6852      	ldr	r2, [r2, #4]
 800565e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d103      	bne.n	8005672 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3b04      	subs	r3, #4
 80056a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3b04      	subs	r3, #4
 80056b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 0201 	bic.w	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056c4:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <pxPortInitialiseStack+0x64>)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b14      	subs	r3, #20
 80056ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b04      	subs	r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f06f 0202 	mvn.w	r2, #2
 80056e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b20      	subs	r3, #32
 80056e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	080056fd 	.word	0x080056fd

080056fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <prvTaskExitError+0x50>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d009      	beq.n	8005724 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e7fe      	b.n	8005722 <prvTaskExitError+0x26>
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005736:	bf00      	nop
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0fc      	beq.n	8005738 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000004 	.word	0x20000004

08005750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	20003cd8 	.word	0x20003cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005778:	4808      	ldr	r0, [pc, #32]	; (800579c <prvPortStartFirstTask+0x24>)
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f380 8808 	msr	MSP, r0
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8814 	msr	CONTROL, r0
 800578a:	b662      	cpsie	i
 800578c:	b661      	cpsie	f
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	df00      	svc	0
 8005798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800579a:	bf00      	nop
 800579c:	e000ed08 	.word	0xe000ed08

080057a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057a6:	4b44      	ldr	r3, [pc, #272]	; (80058b8 <xPortStartScheduler+0x118>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a44      	ldr	r2, [pc, #272]	; (80058bc <xPortStartScheduler+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d109      	bne.n	80057c4 <xPortStartScheduler+0x24>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e7fe      	b.n	80057c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <xPortStartScheduler+0x118>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a3d      	ldr	r2, [pc, #244]	; (80058c0 <xPortStartScheduler+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d109      	bne.n	80057e2 <xPortStartScheduler+0x42>
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e7fe      	b.n	80057e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <xPortStartScheduler+0x124>)
 80057e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <xPortStartScheduler+0x128>)
 8005808:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800580a:	4b30      	ldr	r3, [pc, #192]	; (80058cc <xPortStartScheduler+0x12c>)
 800580c:	2207      	movs	r2, #7
 800580e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005810:	e009      	b.n	8005826 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <xPortStartScheduler+0x12c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3b01      	subs	r3, #1
 8005818:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <xPortStartScheduler+0x12c>)
 800581a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b80      	cmp	r3, #128	; 0x80
 8005830:	d0ef      	beq.n	8005812 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005832:	4b26      	ldr	r3, [pc, #152]	; (80058cc <xPortStartScheduler+0x12c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1c3 0307 	rsb	r3, r3, #7
 800583a:	2b04      	cmp	r3, #4
 800583c:	d009      	beq.n	8005852 <xPortStartScheduler+0xb2>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	e7fe      	b.n	8005850 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005852:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <xPortStartScheduler+0x12c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <xPortStartScheduler+0x12c>)
 800585a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <xPortStartScheduler+0x12c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <xPortStartScheduler+0x12c>)
 8005866:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <xPortStartScheduler+0x130>)
 8005872:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <xPortStartScheduler+0x130>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800587a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800587c:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <xPortStartScheduler+0x130>)
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <xPortStartScheduler+0x130>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005886:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005888:	f000 f8d6 	bl	8005a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <xPortStartScheduler+0x134>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005892:	f000 f8f5 	bl	8005a80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005896:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <xPortStartScheduler+0x138>)
 8005898:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <xPortStartScheduler+0x138>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058a2:	f7ff ff69 	bl	8005778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058a6:	f000 fdd5 	bl	8006454 <vTaskSwitchContext>
	prvTaskExitError();
 80058aa:	f7ff ff27 	bl	80056fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed00 	.word	0xe000ed00
 80058bc:	410fc271 	.word	0x410fc271
 80058c0:	410fc270 	.word	0x410fc270
 80058c4:	e000e400 	.word	0xe000e400
 80058c8:	200000b8 	.word	0x200000b8
 80058cc:	200000bc 	.word	0x200000bc
 80058d0:	e000ed20 	.word	0xe000ed20
 80058d4:	20000004 	.word	0x20000004
 80058d8:	e000ef34 	.word	0xe000ef34

080058dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <vPortEnterCritical+0x54>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <vPortEnterCritical+0x54>)
 80058fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <vPortEnterCritical+0x54>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10e      	bne.n	8005924 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <vPortEnterCritical+0x58>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <vPortEnterCritical+0x48>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	e7fe      	b.n	8005922 <vPortEnterCritical+0x46>
	}
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20000004 	.word	0x20000004
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <vPortExitCritical+0x4c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <vPortExitCritical+0x22>
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	e7fe      	b.n	8005958 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <vPortExitCritical+0x4c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <vPortExitCritical+0x4c>)
 8005962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <vPortExitCritical+0x4c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <vPortExitCritical+0x3e>
 800596c:	2300      	movs	r3, #0
 800596e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000004 	.word	0x20000004
	...

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f000 fd48 	bl	8006454 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	20003cd8 	.word	0x20003cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a10:	f000 fc64 	bl	80062dc <xTaskIncrementTick>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <SysTick_Handler+0x3c>)
 8005a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	2300      	movs	r3, #0
 8005a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <vPortSetupTimerInterrupt+0x34>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <vPortSetupTimerInterrupt+0x38>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a48:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <vPortSetupTimerInterrupt+0x3c>)
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <vPortSetupTimerInterrupt+0x40>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	490b      	ldr	r1, [pc, #44]	; (8005a7c <vPortSetupTimerInterrupt+0x44>)
 8005a50:	fba1 1303 	umull	r1, r3, r1, r3
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	3b01      	subs	r3, #1
 8005a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <vPortSetupTimerInterrupt+0x34>)
 8005a5c:	2207      	movs	r2, #7
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	e000e010 	.word	0xe000e010
 8005a70:	e000e018 	.word	0xe000e018
 8005a74:	e000e014 	.word	0xe000e014
 8005a78:	20000098 	.word	0x20000098
 8005a7c:	10624dd3 	.word	0x10624dd3

08005a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a90 <vPortEnableVFP+0x10>
 8005a84:	6801      	ldr	r1, [r0, #0]
 8005a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a8a:	6001      	str	r1, [r0, #0]
 8005a8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a8e:	bf00      	nop
 8005a90:	e000ed88 	.word	0xe000ed88

08005a94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005aa0:	f000 fb72 	bl	8006188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aa4:	4b57      	ldr	r3, [pc, #348]	; (8005c04 <pvPortMalloc+0x170>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005aac:	f000 f90c 	bl	8005cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ab0:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <pvPortMalloc+0x174>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 808c 	bne.w	8005bd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01c      	beq.n	8005afe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f023 0307 	bic.w	r3, r3, #7
 8005adc:	3308      	adds	r3, #8
 8005ade:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <pvPortMalloc+0x6a>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e7fe      	b.n	8005afc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d068      	beq.n	8005bd6 <pvPortMalloc+0x142>
 8005b04:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <pvPortMalloc+0x178>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d863      	bhi.n	8005bd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <pvPortMalloc+0x17c>)
 8005b10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b12:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <pvPortMalloc+0x17c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b18:	e004      	b.n	8005b24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d203      	bcs.n	8005b36 <pvPortMalloc+0xa2>
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f1      	bne.n	8005b1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <pvPortMalloc+0x170>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d04a      	beq.n	8005bd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2208      	movs	r2, #8
 8005b46:	4413      	add	r3, r2
 8005b48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1ad2      	subs	r2, r2, r3
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d91e      	bls.n	8005ba0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <pvPortMalloc+0xf4>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e7fe      	b.n	8005b86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b9a:	69b8      	ldr	r0, [r7, #24]
 8005b9c:	f000 f8f6 	bl	8005d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <pvPortMalloc+0x178>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <pvPortMalloc+0x178>)
 8005bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <pvPortMalloc+0x178>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <pvPortMalloc+0x180>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d203      	bcs.n	8005bc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <pvPortMalloc+0x178>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <pvPortMalloc+0x180>)
 8005bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <pvPortMalloc+0x174>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bd6:	f000 fae5 	bl	80061a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <pvPortMalloc+0x164>
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e7fe      	b.n	8005bf6 <pvPortMalloc+0x162>
	return pvReturn;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3728      	adds	r7, #40	; 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20003cc8 	.word	0x20003cc8
 8005c08:	20003cd4 	.word	0x20003cd4
 8005c0c:	20003ccc 	.word	0x20003ccc
 8005c10:	20003cc0 	.word	0x20003cc0
 8005c14:	20003cd0 	.word	0x20003cd0

08005c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d046      	beq.n	8005cb8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <vPortFree+0xa8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <vPortFree+0x42>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e7fe      	b.n	8005c58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <vPortFree+0x5e>
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	e7fe      	b.n	8005c74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <vPortFree+0xa8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d019      	beq.n	8005cb8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d115      	bne.n	8005cb8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortFree+0xa8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c9c:	f000 fa74 	bl	8006188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <vPortFree+0xac>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4413      	add	r3, r2
 8005caa:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <vPortFree+0xac>)
 8005cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cae:	6938      	ldr	r0, [r7, #16]
 8005cb0:	f000 f86c 	bl	8005d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cb4:	f000 fa76 	bl	80061a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cb8:	bf00      	nop
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20003cd4 	.word	0x20003cd4
 8005cc4:	20003ccc 	.word	0x20003ccc

08005cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cd4:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <prvHeapInit+0xac>)
 8005cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3307      	adds	r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <prvHeapInit+0xac>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <prvHeapInit+0xb0>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <prvHeapInit+0xb0>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d14:	2208      	movs	r2, #8
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <prvHeapInit+0xb4>)
 8005d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <prvHeapInit+0xb4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <prvHeapInit+0xb4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <prvHeapInit+0xb4>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <prvHeapInit+0xb8>)
 8005d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <prvHeapInit+0xbc>)
 8005d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <prvHeapInit+0xc0>)
 8005d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d66:	601a      	str	r2, [r3, #0]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	200000c0 	.word	0x200000c0
 8005d78:	20003cc0 	.word	0x20003cc0
 8005d7c:	20003cc8 	.word	0x20003cc8
 8005d80:	20003cd0 	.word	0x20003cd0
 8005d84:	20003ccc 	.word	0x20003ccc
 8005d88:	20003cd4 	.word	0x20003cd4

08005d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d94:	4b28      	ldr	r3, [pc, #160]	; (8005e38 <prvInsertBlockIntoFreeList+0xac>)
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e002      	b.n	8005da0 <prvInsertBlockIntoFreeList+0x14>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3f7      	bcc.n	8005d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d108      	bne.n	8005dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	441a      	add	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d118      	bne.n	8005e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <prvInsertBlockIntoFreeList+0xb0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d00d      	beq.n	8005e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	441a      	add	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e008      	b.n	8005e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <prvInsertBlockIntoFreeList+0xb0>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e003      	b.n	8005e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d002      	beq.n	8005e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20003cc0 	.word	0x20003cc0
 8005e3c:	20003cc8 	.word	0x20003cc8

08005e40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fe1d 	bl	8005a94 <pvPortMalloc>
 8005e5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e62:	2054      	movs	r0, #84	; 0x54
 8005e64:	f7ff fe16 	bl	8005a94 <pvPortMalloc>
 8005e68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
 8005e76:	e005      	b.n	8005e84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e78:	6978      	ldr	r0, [r7, #20]
 8005e7a:	f7ff fecd 	bl	8005c18 <vPortFree>
 8005e7e:	e001      	b.n	8005e84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d013      	beq.n	8005eb2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	9302      	str	r3, [sp, #8]
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f80e 	bl	8005ec2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea6:	69f8      	ldr	r0, [r7, #28]
 8005ea8:	f000 f88a 	bl	8005fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eac:	2301      	movs	r3, #1
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	e002      	b.n	8005eb8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
	}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005eda:	3b01      	subs	r3, #1
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f023 0307 	bic.w	r3, r3, #7
 8005ee8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d009      	beq.n	8005f08 <prvInitialiseNewTask+0x46>
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e7fe      	b.n	8005f06 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e012      	b.n	8005f34 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3334      	adds	r3, #52	; 0x34
 8005f1e:	460a      	mov	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d9e9      	bls.n	8005f0e <prvInitialiseNewTask+0x4c>
 8005f3a:	e000      	b.n	8005f3e <prvInitialiseNewTask+0x7c>
		{
			break;
 8005f3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	2b06      	cmp	r3, #6
 8005f4a:	d901      	bls.n	8005f50 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f4c:	2306      	movs	r3, #6
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2200      	movs	r2, #0
 8005f60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	3304      	adds	r3, #4
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff faff 	bl	800556a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	3318      	adds	r3, #24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fafa 	bl	800556a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f1c3 0207 	rsb	r2, r3, #7
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2200      	movs	r2, #0
 8005f90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	68f9      	ldr	r1, [r7, #12]
 8005f9e:	69b8      	ldr	r0, [r7, #24]
 8005fa0:	f7ff fb78 	bl	8005694 <pxPortInitialiseStack>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fb6:	bf00      	nop
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc8:	f7ff fc88 	bl	80058dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <prvAddNewTaskToReadyList+0xb8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	4a29      	ldr	r2, [pc, #164]	; (8006078 <prvAddNewTaskToReadyList+0xb8>)
 8005fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fd6:	4b29      	ldr	r3, [pc, #164]	; (800607c <prvAddNewTaskToReadyList+0xbc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fde:	4a27      	ldr	r2, [pc, #156]	; (800607c <prvAddNewTaskToReadyList+0xbc>)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <prvAddNewTaskToReadyList+0xb8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d110      	bne.n	800600e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fec:	f000 faa4 	bl	8006538 <prvInitialiseTaskLists>
 8005ff0:	e00d      	b.n	800600e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <prvAddNewTaskToReadyList+0xc0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <prvAddNewTaskToReadyList+0xbc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	429a      	cmp	r2, r3
 8006006:	d802      	bhi.n	800600e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <prvAddNewTaskToReadyList+0xbc>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800600e:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <prvAddNewTaskToReadyList+0xc4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <prvAddNewTaskToReadyList+0xc4>)
 8006016:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	2201      	movs	r2, #1
 800601e:	409a      	lsls	r2, r3
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <prvAddNewTaskToReadyList+0xc8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4313      	orrs	r3, r2
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <prvAddNewTaskToReadyList+0xc8>)
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <prvAddNewTaskToReadyList+0xcc>)
 8006038:	441a      	add	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3304      	adds	r3, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7ff fa9f 	bl	8005584 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006046:	f7ff fc77 	bl	8005938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <prvAddNewTaskToReadyList+0xc0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00e      	beq.n	8006070 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <prvAddNewTaskToReadyList+0xbc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d207      	bcs.n	8006070 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <prvAddNewTaskToReadyList+0xd0>)
 8006062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20003dd8 	.word	0x20003dd8
 800607c:	20003cd8 	.word	0x20003cd8
 8006080:	20003de4 	.word	0x20003de4
 8006084:	20003df4 	.word	0x20003df4
 8006088:	20003de0 	.word	0x20003de0
 800608c:	20003cdc 	.word	0x20003cdc
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d016      	beq.n	80060d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060a6:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <vTaskDelay+0x60>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <vTaskDelay+0x2e>
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	e7fe      	b.n	80060c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80060c2:	f000 f861 	bl	8006188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060c6:	2100      	movs	r1, #0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fad7 	bl	800667c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060ce:	f000 f869 	bl	80061a4 <xTaskResumeAll>
 80060d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d107      	bne.n	80060ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80060da:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <vTaskDelay+0x64>)
 80060dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20003e00 	.word	0x20003e00
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006102:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <vTaskStartScheduler+0x74>)
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	2300      	movs	r3, #0
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	2300      	movs	r3, #0
 800610c:	2280      	movs	r2, #128	; 0x80
 800610e:	4919      	ldr	r1, [pc, #100]	; (8006174 <vTaskStartScheduler+0x78>)
 8006110:	4819      	ldr	r0, [pc, #100]	; (8006178 <vTaskStartScheduler+0x7c>)
 8006112:	f7ff fe95 	bl	8005e40 <xTaskCreate>
 8006116:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d115      	bne.n	800614a <vTaskStartScheduler+0x4e>
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <vTaskStartScheduler+0x80>)
 8006132:	f04f 32ff 	mov.w	r2, #4294967295
 8006136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <vTaskStartScheduler+0x84>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <vTaskStartScheduler+0x88>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006144:	f7ff fb2c 	bl	80057a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006148:	e00d      	b.n	8006166 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d109      	bne.n	8006166 <vTaskStartScheduler+0x6a>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	607b      	str	r3, [r7, #4]
 8006164:	e7fe      	b.n	8006164 <vTaskStartScheduler+0x68>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20003dfc 	.word	0x20003dfc
 8006174:	0800a5d8 	.word	0x0800a5d8
 8006178:	08006509 	.word	0x08006509
 800617c:	20003df8 	.word	0x20003df8
 8006180:	20003de4 	.word	0x20003de4
 8006184:	20003ddc 	.word	0x20003ddc

08006188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <vTaskSuspendAll+0x18>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	4a03      	ldr	r2, [pc, #12]	; (80061a0 <vTaskSuspendAll+0x18>)
 8006194:	6013      	str	r3, [r2, #0]
}
 8006196:	bf00      	nop
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20003e00 	.word	0x20003e00

080061a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061b2:	4b41      	ldr	r3, [pc, #260]	; (80062b8 <xTaskResumeAll+0x114>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <xTaskResumeAll+0x2a>
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	e7fe      	b.n	80061cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061ce:	f7ff fb85 	bl	80058dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d2:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <xTaskResumeAll+0x114>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a37      	ldr	r2, [pc, #220]	; (80062b8 <xTaskResumeAll+0x114>)
 80061da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061dc:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <xTaskResumeAll+0x114>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d161      	bne.n	80062a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061e4:	4b35      	ldr	r3, [pc, #212]	; (80062bc <xTaskResumeAll+0x118>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05d      	beq.n	80062a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ec:	e02e      	b.n	800624c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061ee:	4b34      	ldr	r3, [pc, #208]	; (80062c0 <xTaskResumeAll+0x11c>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fa1f 	bl	800563e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fa1a 	bl	800563e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	2201      	movs	r2, #1
 8006210:	409a      	lsls	r2, r3
 8006212:	4b2c      	ldr	r3, [pc, #176]	; (80062c4 <xTaskResumeAll+0x120>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4313      	orrs	r3, r2
 8006218:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <xTaskResumeAll+0x120>)
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <xTaskResumeAll+0x124>)
 800622a:	441a      	add	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3304      	adds	r3, #4
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7ff f9a6 	bl	8005584 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4b23      	ldr	r3, [pc, #140]	; (80062cc <xTaskResumeAll+0x128>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006246:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <xTaskResumeAll+0x12c>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800624c:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <xTaskResumeAll+0x11c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1cc      	bne.n	80061ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800625a:	f000 f9e9 	bl	8006630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800625e:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <xTaskResumeAll+0x130>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d010      	beq.n	800628c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800626a:	f000 f837 	bl	80062dc <xTaskIncrementTick>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <xTaskResumeAll+0x12c>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3b01      	subs	r3, #1
 800627e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f1      	bne.n	800626a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <xTaskResumeAll+0x130>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xTaskResumeAll+0x12c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d009      	beq.n	80062a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <xTaskResumeAll+0x134>)
 800629a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062a8:	f7ff fb46 	bl	8005938 <vPortExitCritical>

	return xAlreadyYielded;
 80062ac:	68bb      	ldr	r3, [r7, #8]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20003e00 	.word	0x20003e00
 80062bc:	20003dd8 	.word	0x20003dd8
 80062c0:	20003d98 	.word	0x20003d98
 80062c4:	20003de0 	.word	0x20003de0
 80062c8:	20003cdc 	.word	0x20003cdc
 80062cc:	20003cd8 	.word	0x20003cd8
 80062d0:	20003dec 	.word	0x20003dec
 80062d4:	20003de8 	.word	0x20003de8
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e6:	4b50      	ldr	r3, [pc, #320]	; (8006428 <xTaskIncrementTick+0x14c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 808c 	bne.w	8006408 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f0:	4b4e      	ldr	r3, [pc, #312]	; (800642c <xTaskIncrementTick+0x150>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062f8:	4a4c      	ldr	r2, [pc, #304]	; (800642c <xTaskIncrementTick+0x150>)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d11f      	bne.n	8006344 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006304:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <xTaskIncrementTick+0x154>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <xTaskIncrementTick+0x46>
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	e7fe      	b.n	8006320 <xTaskIncrementTick+0x44>
 8006322:	4b43      	ldr	r3, [pc, #268]	; (8006430 <xTaskIncrementTick+0x154>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	4b42      	ldr	r3, [pc, #264]	; (8006434 <xTaskIncrementTick+0x158>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a40      	ldr	r2, [pc, #256]	; (8006430 <xTaskIncrementTick+0x154>)
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4a40      	ldr	r2, [pc, #256]	; (8006434 <xTaskIncrementTick+0x158>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b40      	ldr	r3, [pc, #256]	; (8006438 <xTaskIncrementTick+0x15c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a3e      	ldr	r2, [pc, #248]	; (8006438 <xTaskIncrementTick+0x15c>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	f000 f976 	bl	8006630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006344:	4b3d      	ldr	r3, [pc, #244]	; (800643c <xTaskIncrementTick+0x160>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	d34d      	bcc.n	80063ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634e:	4b38      	ldr	r3, [pc, #224]	; (8006430 <xTaskIncrementTick+0x154>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <xTaskIncrementTick+0x80>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <xTaskIncrementTick+0x82>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <xTaskIncrementTick+0x160>)
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	601a      	str	r2, [r3, #0]
					break;
 800636a:	e03e      	b.n	80063ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800636c:	4b30      	ldr	r3, [pc, #192]	; (8006430 <xTaskIncrementTick+0x154>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d203      	bcs.n	800638c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006384:	4a2d      	ldr	r2, [pc, #180]	; (800643c <xTaskIncrementTick+0x160>)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6013      	str	r3, [r2, #0]
						break;
 800638a:	e02e      	b.n	80063ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3304      	adds	r3, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff f954 	bl	800563e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	3318      	adds	r3, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f94b 	bl	800563e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	4b23      	ldr	r3, [pc, #140]	; (8006440 <xTaskIncrementTick+0x164>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	4a22      	ldr	r2, [pc, #136]	; (8006440 <xTaskIncrementTick+0x164>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <xTaskIncrementTick+0x168>)
 80063c8:	441a      	add	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7ff f8d7 	bl	8005584 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063da:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <xTaskIncrementTick+0x16c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d3b4      	bcc.n	800634e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e8:	e7b1      	b.n	800634e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <xTaskIncrementTick+0x16c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4914      	ldr	r1, [pc, #80]	; (8006444 <xTaskIncrementTick+0x168>)
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d907      	bls.n	8006412 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006402:	2301      	movs	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e004      	b.n	8006412 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006408:	4b10      	ldr	r3, [pc, #64]	; (800644c <xTaskIncrementTick+0x170>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	4a0f      	ldr	r2, [pc, #60]	; (800644c <xTaskIncrementTick+0x170>)
 8006410:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006412:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <xTaskIncrementTick+0x174>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800641a:	2301      	movs	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20003e00 	.word	0x20003e00
 800642c:	20003ddc 	.word	0x20003ddc
 8006430:	20003d90 	.word	0x20003d90
 8006434:	20003d94 	.word	0x20003d94
 8006438:	20003df0 	.word	0x20003df0
 800643c:	20003df8 	.word	0x20003df8
 8006440:	20003de0 	.word	0x20003de0
 8006444:	20003cdc 	.word	0x20003cdc
 8006448:	20003cd8 	.word	0x20003cd8
 800644c:	20003de8 	.word	0x20003de8
 8006450:	20003dec 	.word	0x20003dec

08006454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <vTaskSwitchContext+0xa0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006462:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <vTaskSwitchContext+0xa4>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006468:	e03e      	b.n	80064e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800646a:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <vTaskSwitchContext+0xa4>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006470:	4b22      	ldr	r3, [pc, #136]	; (80064fc <vTaskSwitchContext+0xa8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	fab3 f383 	clz	r3, r3
 800647c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	f1c3 031f 	rsb	r3, r3, #31
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	491e      	ldr	r1, [pc, #120]	; (8006500 <vTaskSwitchContext+0xac>)
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	e7fe      	b.n	80064ac <vTaskSwitchContext+0x58>
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <vTaskSwitchContext+0xac>)
 80064ba:	4413      	add	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3308      	adds	r3, #8
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d104      	bne.n	80064de <vTaskSwitchContext+0x8a>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4a07      	ldr	r2, [pc, #28]	; (8006504 <vTaskSwitchContext+0xb0>)
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20003e00 	.word	0x20003e00
 80064f8:	20003dec 	.word	0x20003dec
 80064fc:	20003de0 	.word	0x20003de0
 8006500:	20003cdc 	.word	0x20003cdc
 8006504:	20003cd8 	.word	0x20003cd8

08006508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006510:	f000 f852 	bl	80065b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <prvIdleTask+0x28>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d9f9      	bls.n	8006510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <prvIdleTask+0x2c>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800652c:	e7f0      	b.n	8006510 <prvIdleTask+0x8>
 800652e:	bf00      	nop
 8006530:	20003cdc 	.word	0x20003cdc
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800653e:	2300      	movs	r3, #0
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	e00c      	b.n	800655e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <prvInitialiseTaskLists+0x60>)
 8006550:	4413      	add	r3, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe ffe9 	bl	800552a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3301      	adds	r3, #1
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b06      	cmp	r3, #6
 8006562:	d9ef      	bls.n	8006544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006564:	480d      	ldr	r0, [pc, #52]	; (800659c <prvInitialiseTaskLists+0x64>)
 8006566:	f7fe ffe0 	bl	800552a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800656a:	480d      	ldr	r0, [pc, #52]	; (80065a0 <prvInitialiseTaskLists+0x68>)
 800656c:	f7fe ffdd 	bl	800552a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006570:	480c      	ldr	r0, [pc, #48]	; (80065a4 <prvInitialiseTaskLists+0x6c>)
 8006572:	f7fe ffda 	bl	800552a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006576:	480c      	ldr	r0, [pc, #48]	; (80065a8 <prvInitialiseTaskLists+0x70>)
 8006578:	f7fe ffd7 	bl	800552a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800657c:	480b      	ldr	r0, [pc, #44]	; (80065ac <prvInitialiseTaskLists+0x74>)
 800657e:	f7fe ffd4 	bl	800552a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <prvInitialiseTaskLists+0x78>)
 8006584:	4a05      	ldr	r2, [pc, #20]	; (800659c <prvInitialiseTaskLists+0x64>)
 8006586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <prvInitialiseTaskLists+0x7c>)
 800658a:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <prvInitialiseTaskLists+0x68>)
 800658c:	601a      	str	r2, [r3, #0]
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20003cdc 	.word	0x20003cdc
 800659c:	20003d68 	.word	0x20003d68
 80065a0:	20003d7c 	.word	0x20003d7c
 80065a4:	20003d98 	.word	0x20003d98
 80065a8:	20003dac 	.word	0x20003dac
 80065ac:	20003dc4 	.word	0x20003dc4
 80065b0:	20003d90 	.word	0x20003d90
 80065b4:	20003d94 	.word	0x20003d94

080065b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065be:	e019      	b.n	80065f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065c0:	f7ff f98c 	bl	80058dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <prvCheckTasksWaitingTermination+0x4c>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff f834 	bl	800563e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065d6:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <prvCheckTasksWaitingTermination+0x50>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3b01      	subs	r3, #1
 80065dc:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <prvCheckTasksWaitingTermination+0x50>)
 80065de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <prvCheckTasksWaitingTermination+0x54>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4a09      	ldr	r2, [pc, #36]	; (800660c <prvCheckTasksWaitingTermination+0x54>)
 80065e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065ea:	f7ff f9a5 	bl	8005938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f80e 	bl	8006610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <prvCheckTasksWaitingTermination+0x54>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e1      	bne.n	80065c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20003dac 	.word	0x20003dac
 8006608:	20003dd8 	.word	0x20003dd8
 800660c:	20003dc0 	.word	0x20003dc0

08006610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fafb 	bl	8005c18 <vPortFree>
			vPortFree( pxTCB );
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff faf8 	bl	8005c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006636:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <prvResetNextTaskUnblockTime+0x44>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <prvResetNextTaskUnblockTime+0x14>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <prvResetNextTaskUnblockTime+0x16>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800664a:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <prvResetNextTaskUnblockTime+0x48>)
 800664c:	f04f 32ff 	mov.w	r2, #4294967295
 8006650:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006652:	e008      	b.n	8006666 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <prvResetNextTaskUnblockTime+0x44>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4a05      	ldr	r2, [pc, #20]	; (8006678 <prvResetNextTaskUnblockTime+0x48>)
 8006664:	6013      	str	r3, [r2, #0]
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20003d90 	.word	0x20003d90
 8006678:	20003df8 	.word	0x20003df8

0800667c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006686:	4b29      	ldr	r3, [pc, #164]	; (800672c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800668c:	4b28      	ldr	r3, [pc, #160]	; (8006730 <prvAddCurrentTaskToDelayedList+0xb4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe ffd3 	bl	800563e <uxListRemove>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	2201      	movs	r2, #1
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43da      	mvns	r2, r3
 80066ac:	4b21      	ldr	r3, [pc, #132]	; (8006734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4013      	ands	r3, r2
 80066b2:	4a20      	ldr	r2, [pc, #128]	; (8006734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d10a      	bne.n	80066d4 <prvAddCurrentTaskToDelayedList+0x58>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c4:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	481a      	ldr	r0, [pc, #104]	; (8006738 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066ce:	f7fe ff59 	bl	8005584 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066d2:	e026      	b.n	8006722 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066dc:	4b14      	ldr	r3, [pc, #80]	; (8006730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d209      	bcs.n	8006700 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe ff67 	bl	80055cc <vListInsert>
}
 80066fe:	e010      	b.n	8006722 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f7fe ff5d 	bl	80055cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d202      	bcs.n	8006722 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800671c:	4a09      	ldr	r2, [pc, #36]	; (8006744 <prvAddCurrentTaskToDelayedList+0xc8>)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6013      	str	r3, [r2, #0]
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20003ddc 	.word	0x20003ddc
 8006730:	20003cd8 	.word	0x20003cd8
 8006734:	20003de0 	.word	0x20003de0
 8006738:	20003dc4 	.word	0x20003dc4
 800673c:	20003d94 	.word	0x20003d94
 8006740:	20003d90 	.word	0x20003d90
 8006744:	20003df8 	.word	0x20003df8

08006748 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <MX_DMA2D_Init+0x34>)
 800674e:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <MX_DMA2D_Init+0x38>)
 8006750:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <MX_DMA2D_Init+0x34>)
 8006754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006758:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800675a:	4b08      	ldr	r3, [pc, #32]	; (800677c <MX_DMA2D_Init+0x34>)
 800675c:	2200      	movs	r2, #0
 800675e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <MX_DMA2D_Init+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006766:	4805      	ldr	r0, [pc, #20]	; (800677c <MX_DMA2D_Init+0x34>)
 8006768:	f7fa fc28 	bl	8000fbc <HAL_DMA2D_Init>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8006772:	f001 ff97 	bl	80086a4 <Error_Handler>
  }

}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20003f08 	.word	0x20003f08
 8006780:	4002b000 	.word	0x4002b000

08006784 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a0b      	ldr	r2, [pc, #44]	; (80067c0 <HAL_DMA2D_MspInit+0x3c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10d      	bne.n	80067b2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <HAL_DMA2D_MspInit+0x40>)
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <HAL_DMA2D_MspInit+0x40>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067a4:	6313      	str	r3, [r2, #48]	; 0x30
 80067a6:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <HAL_DMA2D_MspInit+0x40>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	4002b000 	.word	0x4002b000
 80067c4:	40023800 	.word	0x40023800

080067c8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80067ce:	4b1f      	ldr	r3, [pc, #124]	; (800684c <MX_FMC_Init+0x84>)
 80067d0:	4a1f      	ldr	r2, [pc, #124]	; (8006850 <MX_FMC_Init+0x88>)
 80067d2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <MX_FMC_Init+0x84>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80067da:	4b1c      	ldr	r3, [pc, #112]	; (800684c <MX_FMC_Init+0x84>)
 80067dc:	2200      	movs	r2, #0
 80067de:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80067e0:	4b1a      	ldr	r3, [pc, #104]	; (800684c <MX_FMC_Init+0x84>)
 80067e2:	2204      	movs	r2, #4
 80067e4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80067e6:	4b19      	ldr	r3, [pc, #100]	; (800684c <MX_FMC_Init+0x84>)
 80067e8:	2210      	movs	r2, #16
 80067ea:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <MX_FMC_Init+0x84>)
 80067ee:	2240      	movs	r2, #64	; 0x40
 80067f0:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <MX_FMC_Init+0x84>)
 80067f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80067f8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80067fa:	4b14      	ldr	r3, [pc, #80]	; (800684c <MX_FMC_Init+0x84>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8006800:	4b12      	ldr	r3, [pc, #72]	; (800684c <MX_FMC_Init+0x84>)
 8006802:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006806:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006808:	4b10      	ldr	r3, [pc, #64]	; (800684c <MX_FMC_Init+0x84>)
 800680a:	2200      	movs	r2, #0
 800680c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <MX_FMC_Init+0x84>)
 8006810:	2200      	movs	r2, #0
 8006812:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006814:	2302      	movs	r3, #2
 8006816:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006818:	2307      	movs	r3, #7
 800681a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800681c:	2304      	movs	r3, #4
 800681e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006820:	2307      	movs	r3, #7
 8006822:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006824:	2303      	movs	r3, #3
 8006826:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006828:	2302      	movs	r3, #2
 800682a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800682c:	2302      	movs	r3, #2
 800682e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4805      	ldr	r0, [pc, #20]	; (800684c <MX_FMC_Init+0x84>)
 8006836:	f7fd fa9b 	bl	8003d70 <HAL_SDRAM_Init>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <MX_FMC_Init+0x7c>
  {
    Error_Handler( );
 8006840:	f001 ff30 	bl	80086a4 <Error_Handler>
  }

}
 8006844:	bf00      	nop
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20003f48 	.word	0x20003f48
 8006850:	a0000140 	.word	0xa0000140

08006854 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800685a:	4b3c      	ldr	r3, [pc, #240]	; (800694c <HAL_FMC_MspInit+0xf8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d16f      	bne.n	8006942 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8006862:	4b3a      	ldr	r3, [pc, #232]	; (800694c <HAL_FMC_MspInit+0xf8>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006868:	2300      	movs	r3, #0
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4a38      	ldr	r2, [pc, #224]	; (8006950 <HAL_FMC_MspInit+0xfc>)
 800686e:	4b38      	ldr	r3, [pc, #224]	; (8006950 <HAL_FMC_MspInit+0xfc>)
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	6393      	str	r3, [r2, #56]	; 0x38
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <HAL_FMC_MspInit+0xfc>)
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	603b      	str	r3, [r7, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006884:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006888:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688a:	2302      	movs	r3, #2
 800688c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006892:	2303      	movs	r3, #3
 8006894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006896:	230c      	movs	r3, #12
 8006898:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	4619      	mov	r1, r3
 800689e:	482d      	ldr	r0, [pc, #180]	; (8006954 <HAL_FMC_MspInit+0x100>)
 80068a0:	f7fa fe16 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80068a4:	2301      	movs	r3, #1
 80068a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068a8:	2302      	movs	r3, #2
 80068aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068b0:	2303      	movs	r3, #3
 80068b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068b4:	230c      	movs	r3, #12
 80068b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	4619      	mov	r1, r3
 80068bc:	4826      	ldr	r0, [pc, #152]	; (8006958 <HAL_FMC_MspInit+0x104>)
 80068be:	f7fa fe07 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80068c2:	f248 1333 	movw	r3, #33075	; 0x8133
 80068c6:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c8:	2302      	movs	r3, #2
 80068ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d0:	2303      	movs	r3, #3
 80068d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068d4:	230c      	movs	r3, #12
 80068d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068d8:	1d3b      	adds	r3, r7, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	481f      	ldr	r0, [pc, #124]	; (800695c <HAL_FMC_MspInit+0x108>)
 80068de:	f7fa fdf7 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80068e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80068e6:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e8:	2302      	movs	r3, #2
 80068ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f0:	2303      	movs	r3, #3
 80068f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068f4:	230c      	movs	r3, #12
 80068f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4818      	ldr	r0, [pc, #96]	; (8006960 <HAL_FMC_MspInit+0x10c>)
 80068fe:	f7fa fde7 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006902:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006906:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006908:	2302      	movs	r3, #2
 800690a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006910:	2303      	movs	r3, #3
 8006912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006914:	230c      	movs	r3, #12
 8006916:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006918:	1d3b      	adds	r3, r7, #4
 800691a:	4619      	mov	r1, r3
 800691c:	4811      	ldr	r0, [pc, #68]	; (8006964 <HAL_FMC_MspInit+0x110>)
 800691e:	f7fa fdd7 	bl	80014d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006922:	2360      	movs	r3, #96	; 0x60
 8006924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006926:	2302      	movs	r3, #2
 8006928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692e:	2303      	movs	r3, #3
 8006930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006932:	230c      	movs	r3, #12
 8006934:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	4619      	mov	r1, r3
 800693a:	480b      	ldr	r0, [pc, #44]	; (8006968 <HAL_FMC_MspInit+0x114>)
 800693c:	f7fa fdc8 	bl	80014d0 <HAL_GPIO_Init>
 8006940:	e000      	b.n	8006944 <HAL_FMC_MspInit+0xf0>
    return;
 8006942:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20003e04 	.word	0x20003e04
 8006950:	40023800 	.word	0x40023800
 8006954:	40021400 	.word	0x40021400
 8006958:	40020800 	.word	0x40020800
 800695c:	40021800 	.word	0x40021800
 8006960:	40021000 	.word	0x40021000
 8006964:	40020c00 	.word	0x40020c00
 8006968:	40020400 	.word	0x40020400

0800696c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006974:	f7ff ff6e 	bl	8006854 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b094      	sub	sp, #80	; 0x50
 8006984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	ts_struct = &struktura;
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <MX_FREERTOS_Init+0xb4>)
 8006988:	4a2b      	ldr	r2, [pc, #172]	; (8006a38 <MX_FREERTOS_Init+0xb8>)
 800698a:	601a      	str	r2, [r3, #0]
	ts_init(ts_struct);
 800698c:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <MX_FREERTOS_Init+0xb4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fe63 	bl	800865c <ts_init>
	initMenu(ts_struct, globalClassHandler);
 8006996:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <MX_FREERTOS_Init+0xb4>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <MX_FREERTOS_Init+0xbc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f000 ff4b 	bl	800783c <initMenu>
		/* definition and creation of mpuTask */
		osThreadDef(mpuTask, StartDefaultTask, osPriorityNormal, 0, 128);
		//empty thread

		/* definition and creation of lcdTask */
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityHigh, 0, 128);
 80069a6:	4b26      	ldr	r3, [pc, #152]	; (8006a40 <MX_FREERTOS_Init+0xc0>)
 80069a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80069ac:	461d      	mov	r5, r3
 80069ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	6023      	str	r3, [r4, #0]
		lcdTaskHandle = osThreadCreate(osThread(LCD_handling), NULL);
 80069b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe fd79 	bl	80054b4 <osThreadCreate>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4b1f      	ldr	r3, [pc, #124]	; (8006a44 <MX_FREERTOS_Init+0xc4>)
 80069c6:	601a      	str	r2, [r3, #0]

		/* definition and creation of touchTask */
		osThreadDef(TS_handling, StartTS_handling, osPriorityNormal, 0, 128);
 80069c8:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <MX_FREERTOS_Init+0xc8>)
 80069ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80069ce:	461d      	mov	r5, r3
 80069d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	6023      	str	r3, [r4, #0]
		touchTaskHandle = osThreadCreate(osThread(TS_handling), NULL);
 80069d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fd68 	bl	80054b4 <osThreadCreate>
 80069e4:	4602      	mov	r2, r0
 80069e6:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <MX_FREERTOS_Init+0xcc>)
 80069e8:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(MPU_handling, StartMPU_handling, osPriorityNormal, 0, 128);
 80069ea:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <MX_FREERTOS_Init+0xd0>)
 80069ec:	f107 0414 	add.w	r4, r7, #20
 80069f0:	461d      	mov	r5, r3
 80069f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	6023      	str	r3, [r4, #0]
		mpuTaskHandle = osThreadCreate(osThread(MPU_handling), NULL);
 80069fa:	f107 0314 	add.w	r3, r7, #20
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fd57 	bl	80054b4 <osThreadCreate>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <MX_FREERTOS_Init+0xd4>)
 8006a0a:	601a      	str	r2, [r3, #0]

		/* definition and creation of mpuTask */
		osThreadDef(GAME_master, StartGAME_master, osPriorityNormal, 0, 128);
 8006a0c:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <MX_FREERTOS_Init+0xd8>)
 8006a0e:	463c      	mov	r4, r7
 8006a10:	461d      	mov	r5, r3
 8006a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	6023      	str	r3, [r4, #0]
		gameTaskHandle = osThreadCreate(osThread(GAME_master), NULL);
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fd48 	bl	80054b4 <osThreadCreate>
 8006a24:	4602      	mov	r2, r0
 8006a26:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <MX_FREERTOS_Init+0xdc>)
 8006a28:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8006a2a:	bf00      	nop
 8006a2c:	3750      	adds	r7, #80	; 0x50
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bdb0      	pop	{r4, r5, r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20003fa0 	.word	0x20003fa0
 8006a38:	20003f80 	.word	0x20003f80
 8006a3c:	20003f90 	.word	0x20003f90
 8006a40:	0800a5f0 	.word	0x0800a5f0
 8006a44:	20003f9c 	.word	0x20003f9c
 8006a48:	0800a610 	.word	0x0800a610
 8006a4c:	20003f7c 	.word	0x20003f7c
 8006a50:	0800a634 	.word	0x0800a634
 8006a54:	20003f8c 	.word	0x20003f8c
 8006a58:	0800a654 	.word	0x0800a654
 8006a5c:	20003f98 	.word	0x20003f98

08006a60 <StartLCD_handling>:
 * @brief Function implementing the lcdTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartLCD_handling(void const * argument) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006a68:	2001      	movs	r0, #1
 8006a6a:	f7fe fd4a 	bl	8005502 <osDelay>
		if (HAL_GetTick() - startTime >= 50) {
 8006a6e:	f7fa f997 	bl	8000da0 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <StartLCD_handling+0x40>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b31      	cmp	r3, #49	; 0x31
 8006a7c:	d9f4      	bls.n	8006a68 <StartLCD_handling+0x8>
			flagTouch = 0; //wyzerowanie flagi
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <StartLCD_handling+0x44>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]

			Display(globalClassHandler);
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <StartLCD_handling+0x48>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 ff37 	bl	80078fc <Display>
			Service();
 8006a8e:	f000 ff59 	bl	8007944 <Service>
			startTime = HAL_GetTick(); //eliminacja drgan
 8006a92:	f7fa f985 	bl	8000da0 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b01      	ldr	r3, [pc, #4]	; (8006aa0 <StartLCD_handling+0x40>)
 8006a9a:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8006a9c:	e7e4      	b.n	8006a68 <StartLCD_handling+0x8>
 8006a9e:	bf00      	nop
 8006aa0:	20003fa4 	.word	0x20003fa4
 8006aa4:	20003e2c 	.word	0x20003e2c
 8006aa8:	20003f90 	.word	0x20003f90

08006aac <StartTS_handling>:
 * @brief Function implementing the touchTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTS_handling(void const * argument) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f7fe fd24 	bl	8005502 <osDelay>
		BSP_TS_GetState(ts_struct);
 8006aba:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <StartTS_handling+0x40>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f003 f83a 	bl	8009b38 <BSP_TS_GetState>
		if (ts_struct->TouchDetected) {
 8006ac4:	4b09      	ldr	r3, [pc, #36]	; (8006aec <StartTS_handling+0x40>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <StartTS_handling+0x30>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ad4:	4806      	ldr	r0, [pc, #24]	; (8006af0 <StartTS_handling+0x44>)
 8006ad6:	f7fa ffb1 	bl	8001a3c <HAL_GPIO_WritePin>
 8006ada:	e7eb      	b.n	8006ab4 <StartTS_handling+0x8>
		}
		else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006adc:	2200      	movs	r2, #0
 8006ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ae2:	4803      	ldr	r0, [pc, #12]	; (8006af0 <StartTS_handling+0x44>)
 8006ae4:	f7fa ffaa 	bl	8001a3c <HAL_GPIO_WritePin>
		osDelay(1);
 8006ae8:	e7e4      	b.n	8006ab4 <StartTS_handling+0x8>
 8006aea:	bf00      	nop
 8006aec:	20003fa0 	.word	0x20003fa0
 8006af0:	40021800 	.word	0x40021800

08006af4 <StartMPU_handling>:
	}
	/* USER CODE END StartTask03 */
}

/* USER CODE END Header_StartDefaultTask */
void StartMPU_handling(void const * argument) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for (;;) {
		read_gyro(&current_x, &current_y, &current_z);
 8006afc:	4a04      	ldr	r2, [pc, #16]	; (8006b10 <StartMPU_handling+0x1c>)
 8006afe:	4905      	ldr	r1, [pc, #20]	; (8006b14 <StartMPU_handling+0x20>)
 8006b00:	4805      	ldr	r0, [pc, #20]	; (8006b18 <StartMPU_handling+0x24>)
 8006b02:	f000 fa71 	bl	8006fe8 <read_gyro>
		//printf("X-Axis: %d ", x);
		//printf("Y-Axis: %d ", y);
		//printf("Z-Axis: %d\r\n", z);
		osDelay(10);
 8006b06:	200a      	movs	r0, #10
 8006b08:	f7fe fcfb 	bl	8005502 <osDelay>
		read_gyro(&current_x, &current_y, &current_z);
 8006b0c:	e7f6      	b.n	8006afc <StartMPU_handling+0x8>
 8006b0e:	bf00      	nop
 8006b10:	20003e1c 	.word	0x20003e1c
 8006b14:	20003e18 	.word	0x20003e18
 8006b18:	20003e14 	.word	0x20003e14

08006b1c <StartGAME_master>:
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE END Header_StartDefaultTask */
void StartGAME_master(void const * argument) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006b24:	2001      	movs	r0, #1
 8006b26:	f7fe fcec 	bl	8005502 <osDelay>
		if (HAL_GetTick() - startTimeAntiWindupSystem >= 100) {
 8006b2a:	f7fa f939 	bl	8000da0 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b42      	ldr	r3, [pc, #264]	; (8006c3c <StartGAME_master+0x120>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b63      	cmp	r3, #99	; 0x63
 8006b38:	d9f4      	bls.n	8006b24 <StartGAME_master+0x8>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8006b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b3e:	4840      	ldr	r0, [pc, #256]	; (8006c40 <StartGAME_master+0x124>)
 8006b40:	f7fa ff95 	bl	8001a6e <HAL_GPIO_TogglePin>
			if(current_x - previous_x > 2) x = x + current_x - previous_x;
 8006b44:	4b3f      	ldr	r3, [pc, #252]	; (8006c44 <StartGAME_master+0x128>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b3f      	ldr	r3, [pc, #252]	; (8006c48 <StartGAME_master+0x12c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	dd09      	ble.n	8006b66 <StartGAME_master+0x4a>
 8006b52:	4b3e      	ldr	r3, [pc, #248]	; (8006c4c <StartGAME_master+0x130>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b3b      	ldr	r3, [pc, #236]	; (8006c44 <StartGAME_master+0x128>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <StartGAME_master+0x12c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <StartGAME_master+0x130>)
 8006b64:	6013      	str	r3, [r2, #0]
			if(current_x - previous_x < -2) x = x + current_x - previous_x;
 8006b66:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <StartGAME_master+0x128>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <StartGAME_master+0x12c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f113 0f02 	cmn.w	r3, #2
 8006b74:	da09      	bge.n	8006b8a <StartGAME_master+0x6e>
 8006b76:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <StartGAME_master+0x130>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b32      	ldr	r3, [pc, #200]	; (8006c44 <StartGAME_master+0x128>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	441a      	add	r2, r3
 8006b80:	4b31      	ldr	r3, [pc, #196]	; (8006c48 <StartGAME_master+0x12c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	4a31      	ldr	r2, [pc, #196]	; (8006c4c <StartGAME_master+0x130>)
 8006b88:	6013      	str	r3, [r2, #0]

			if(current_y - previous_y > 2) y = y + current_y - previous_y;
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <StartGAME_master+0x134>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b31      	ldr	r3, [pc, #196]	; (8006c54 <StartGAME_master+0x138>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	dd09      	ble.n	8006bac <StartGAME_master+0x90>
 8006b98:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <StartGAME_master+0x13c>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <StartGAME_master+0x134>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	441a      	add	r2, r3
 8006ba2:	4b2c      	ldr	r3, [pc, #176]	; (8006c54 <StartGAME_master+0x138>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	4a2b      	ldr	r2, [pc, #172]	; (8006c58 <StartGAME_master+0x13c>)
 8006baa:	6013      	str	r3, [r2, #0]
			if(current_y - previous_y < -2) y = y + current_y - previous_y;
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <StartGAME_master+0x134>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <StartGAME_master+0x138>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f113 0f02 	cmn.w	r3, #2
 8006bba:	da09      	bge.n	8006bd0 <StartGAME_master+0xb4>
 8006bbc:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <StartGAME_master+0x13c>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <StartGAME_master+0x134>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <StartGAME_master+0x138>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	4a22      	ldr	r2, [pc, #136]	; (8006c58 <StartGAME_master+0x13c>)
 8006bce:	6013      	str	r3, [r2, #0]

			if(current_z - previous_z > 2) z = z + current_z - previous_z;
 8006bd0:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <StartGAME_master+0x140>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <StartGAME_master+0x144>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	dd09      	ble.n	8006bf2 <StartGAME_master+0xd6>
 8006bde:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <StartGAME_master+0x148>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <StartGAME_master+0x140>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	441a      	add	r2, r3
 8006be8:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <StartGAME_master+0x144>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <StartGAME_master+0x148>)
 8006bf0:	6013      	str	r3, [r2, #0]
			if(current_z - previous_z < -2) z = z + current_z - previous_z;
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <StartGAME_master+0x140>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <StartGAME_master+0x144>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f113 0f02 	cmn.w	r3, #2
 8006c00:	da09      	bge.n	8006c16 <StartGAME_master+0xfa>
 8006c02:	4b18      	ldr	r3, [pc, #96]	; (8006c64 <StartGAME_master+0x148>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <StartGAME_master+0x140>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <StartGAME_master+0x144>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a14      	ldr	r2, [pc, #80]	; (8006c64 <StartGAME_master+0x148>)
 8006c14:	6013      	str	r3, [r2, #0]

			startTimeAntiWindupSystem = HAL_GetTick();
 8006c16:	f7fa f8c3 	bl	8000da0 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <StartGAME_master+0x120>)
 8006c1e:	601a      	str	r2, [r3, #0]
			previous_x = current_x;
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <StartGAME_master+0x128>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <StartGAME_master+0x12c>)
 8006c26:	6013      	str	r3, [r2, #0]
			previous_y = current_y;
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <StartGAME_master+0x134>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a09      	ldr	r2, [pc, #36]	; (8006c54 <StartGAME_master+0x138>)
 8006c2e:	6013      	str	r3, [r2, #0]
			previous_z = current_z;
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <StartGAME_master+0x140>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <StartGAME_master+0x144>)
 8006c36:	6013      	str	r3, [r2, #0]
		osDelay(1);
 8006c38:	e774      	b.n	8006b24 <StartGAME_master+0x8>
 8006c3a:	bf00      	nop
 8006c3c:	20003f94 	.word	0x20003f94
 8006c40:	40021800 	.word	0x40021800
 8006c44:	20003e14 	.word	0x20003e14
 8006c48:	20003e20 	.word	0x20003e20
 8006c4c:	20003e08 	.word	0x20003e08
 8006c50:	20003e18 	.word	0x20003e18
 8006c54:	20003e24 	.word	0x20003e24
 8006c58:	20003e0c 	.word	0x20003e0c
 8006c5c:	20003e1c 	.word	0x20003e1c
 8006c60:	20003e28 	.word	0x20003e28
 8006c64:	20003e10 	.word	0x20003e10

08006c68 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08e      	sub	sp, #56	; 0x38
 8006c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	623b      	str	r3, [r7, #32]
 8006c82:	4a89      	ldr	r2, [pc, #548]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006c84:	4b88      	ldr	r3, [pc, #544]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f043 0304 	orr.w	r3, r3, #4
 8006c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8e:	4b86      	ldr	r3, [pc, #536]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	4a82      	ldr	r2, [pc, #520]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006ca0:	4b81      	ldr	r3, [pc, #516]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	f043 0320 	orr.w	r3, r3, #32
 8006ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8006caa:	4b7f      	ldr	r3, [pc, #508]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	4a7b      	ldr	r2, [pc, #492]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cbc:	4b7a      	ldr	r3, [pc, #488]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc6:	4b78      	ldr	r3, [pc, #480]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	4a74      	ldr	r2, [pc, #464]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cd8:	4b73      	ldr	r3, [pc, #460]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce2:	4b71      	ldr	r3, [pc, #452]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	4a6d      	ldr	r2, [pc, #436]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f043 0302 	orr.w	r3, r3, #2
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfe:	4b6a      	ldr	r3, [pc, #424]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	4a66      	ldr	r2, [pc, #408]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d10:	4b65      	ldr	r3, [pc, #404]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d18:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1a:	4b63      	ldr	r3, [pc, #396]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	4a5f      	ldr	r2, [pc, #380]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d2c:	4b5e      	ldr	r3, [pc, #376]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f043 0310 	orr.w	r3, r3, #16
 8006d34:	6313      	str	r3, [r2, #48]	; 0x30
 8006d36:	4b5c      	ldr	r3, [pc, #368]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	4a58      	ldr	r2, [pc, #352]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d48:	4b57      	ldr	r3, [pc, #348]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f043 0308 	orr.w	r3, r3, #8
 8006d50:	6313      	str	r3, [r2, #48]	; 0x30
 8006d52:	4b55      	ldr	r3, [pc, #340]	; (8006ea8 <MX_GPIO_Init+0x240>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2116      	movs	r1, #22
 8006d62:	4852      	ldr	r0, [pc, #328]	; (8006eac <MX_GPIO_Init+0x244>)
 8006d64:	f7fa fe6a 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	4850      	ldr	r0, [pc, #320]	; (8006eb0 <MX_GPIO_Init+0x248>)
 8006d6e:	f7fa fe65 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006d78:	484e      	ldr	r0, [pc, #312]	; (8006eb4 <MX_GPIO_Init+0x24c>)
 8006d7a:	f7fa fe5f 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006d84:	484c      	ldr	r0, [pc, #304]	; (8006eb8 <MX_GPIO_Init+0x250>)
 8006d86:	f7fa fe59 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8006d8a:	2316      	movs	r3, #22
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d96:	2300      	movs	r3, #0
 8006d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4842      	ldr	r0, [pc, #264]	; (8006eac <MX_GPIO_Init+0x244>)
 8006da2:	f7fa fb95 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8006da6:	f248 0307 	movw	r3, #32775	; 0x8007
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006dac:	4b43      	ldr	r3, [pc, #268]	; (8006ebc <MX_GPIO_Init+0x254>)
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db8:	4619      	mov	r1, r3
 8006dba:	483d      	ldr	r0, [pc, #244]	; (8006eb0 <MX_GPIO_Init+0x248>)
 8006dbc:	f7fa fb88 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4836      	ldr	r0, [pc, #216]	; (8006eb0 <MX_GPIO_Init+0x248>)
 8006dd8:	f7fa fb7a 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8006ddc:	2320      	movs	r3, #32
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006de0:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <MX_GPIO_Init+0x254>)
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8006de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dec:	4619      	mov	r1, r3
 8006dee:	482f      	ldr	r0, [pc, #188]	; (8006eac <MX_GPIO_Init+0x244>)
 8006df0:	f7fa fb6e 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006df4:	2304      	movs	r3, #4
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e04:	4619      	mov	r1, r3
 8006e06:	482e      	ldr	r0, [pc, #184]	; (8006ec0 <MX_GPIO_Init+0x258>)
 8006e08:	f7fa fb62 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006e0c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e12:	2302      	movs	r3, #2
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006e1e:	230c      	movs	r3, #12
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e26:	4619      	mov	r1, r3
 8006e28:	4825      	ldr	r0, [pc, #148]	; (8006ec0 <MX_GPIO_Init+0x258>)
 8006e2a:	f7fa fb51 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e34:	2300      	movs	r3, #0
 8006e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e40:	4619      	mov	r1, r3
 8006e42:	481f      	ldr	r0, [pc, #124]	; (8006ec0 <MX_GPIO_Init+0x258>)
 8006e44:	f7fa fb44 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8006e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4815      	ldr	r0, [pc, #84]	; (8006eb4 <MX_GPIO_Init+0x24c>)
 8006e5e:	f7fa fb37 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8006e62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e70:	2300      	movs	r3, #0
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e78:	4619      	mov	r1, r3
 8006e7a:	480e      	ldr	r0, [pc, #56]	; (8006eb4 <MX_GPIO_Init+0x24c>)
 8006e7c:	f7fa fb28 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8006e80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e86:	2301      	movs	r3, #1
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e96:	4619      	mov	r1, r3
 8006e98:	4807      	ldr	r0, [pc, #28]	; (8006eb8 <MX_GPIO_Init+0x250>)
 8006e9a:	f7fa fb19 	bl	80014d0 <HAL_GPIO_Init>

}
 8006e9e:	bf00      	nop
 8006ea0:	3738      	adds	r7, #56	; 0x38
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40020800 	.word	0x40020800
 8006eb0:	40020000 	.word	0x40020000
 8006eb4:	40020c00 	.word	0x40020c00
 8006eb8:	40021800 	.word	0x40021800
 8006ebc:	10120000 	.word	0x10120000
 8006ec0:	40020400 	.word	0x40020400

08006ec4 <writegyro>:
#include "spi.h"
#include "gyro.h"
#include "FreeRTOS.h"
#include "task.h"

void writegyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	f107 0e08 	add.w	lr, r7, #8
 8006ece:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    taskENTER_CRITICAL();
 8006ed2:	f7fe fd03 	bl	80058dc <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4810      	ldr	r0, [pc, #64]	; (8006f1c <writegyro+0x58>)
 8006edc:	f7fa fdae 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006ee0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006ee4:	2332      	movs	r3, #50	; 0x32
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f107 0008 	add.w	r0, r7, #8
 8006eec:	f7fd f84a 	bl	8003f84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI, &data, 1, 50);
 8006ef0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006ef4:	2332      	movs	r3, #50	; 0x32
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f107 0008 	add.w	r0, r7, #8
 8006efc:	f7fd f842 	bl	8003f84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006f00:	2201      	movs	r2, #1
 8006f02:	2102      	movs	r1, #2
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <writegyro+0x58>)
 8006f06:	f7fa fd99 	bl	8001a3c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006f0a:	f7fe fd15 	bl	8005938 <vPortExitCritical>
}
 8006f0e:	bf00      	nop
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f16:	b004      	add	sp, #16
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40020800 	.word	0x40020800

08006f20 <readgyro>:

uint8_t readgyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8006f20:	b084      	sub	sp, #16
 8006f22:	b580      	push	{r7, lr}
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	f107 0e08 	add.w	lr, r7, #8
 8006f2a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	address = address | 0x80;
 8006f2e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006f32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    taskENTER_CRITICAL();
 8006f3c:	f7fe fcce 	bl	80058dc <vPortEnterCritical>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8006f40:	2200      	movs	r2, #0
 8006f42:	2102      	movs	r1, #2
 8006f44:	4810      	ldr	r0, [pc, #64]	; (8006f88 <readgyro+0x68>)
 8006f46:	f7fa fd79 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 8006f4a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006f4e:	2332      	movs	r3, #50	; 0x32
 8006f50:	2201      	movs	r2, #1
 8006f52:	f107 0008 	add.w	r0, r7, #8
 8006f56:	f7fd f815 	bl	8003f84 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI, &data, 1, 50);
 8006f5a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006f5e:	2332      	movs	r3, #50	; 0x32
 8006f60:	2201      	movs	r2, #1
 8006f62:	f107 0008 	add.w	r0, r7, #8
 8006f66:	f7fd f93f 	bl	80041e8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	4806      	ldr	r0, [pc, #24]	; (8006f88 <readgyro+0x68>)
 8006f70:	f7fa fd64 	bl	8001a3c <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8006f74:	f7fe fce0 	bl	8005938 <vPortExitCritical>

	return data;
 8006f78:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f84:	b004      	add	sp, #16
 8006f86:	4770      	bx	lr
 8006f88:	40020800 	.word	0x40020800

08006f8c <gyro_init>:

void gyro_init() {
 8006f8c:	b590      	push	{r4, r7, lr}
 8006f8e:	b095      	sub	sp, #84	; 0x54
 8006f90:	af14      	add	r7, sp, #80	; 0x50
	writegyro(hspi5, 0x20, 0x0F);
 8006f92:	4c13      	ldr	r4, [pc, #76]	; (8006fe0 <gyro_init+0x54>)
 8006f94:	230f      	movs	r3, #15
 8006f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f98:	2320      	movs	r3, #32
 8006f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f9c:	4668      	mov	r0, sp
 8006f9e:	f104 0310 	add.w	r3, r4, #16
 8006fa2:	2248      	movs	r2, #72	; 0x48
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f003 fab7 	bl	800a518 <memcpy>
 8006faa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006fae:	f7ff ff89 	bl	8006ec4 <writegyro>
	writegyro(hspi5, 0x23, 0x30);
 8006fb2:	4c0b      	ldr	r4, [pc, #44]	; (8006fe0 <gyro_init+0x54>)
 8006fb4:	2330      	movs	r3, #48	; 0x30
 8006fb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fb8:	2323      	movs	r3, #35	; 0x23
 8006fba:	9312      	str	r3, [sp, #72]	; 0x48
 8006fbc:	4668      	mov	r0, sp
 8006fbe:	f104 0310 	add.w	r3, r4, #16
 8006fc2:	2248      	movs	r2, #72	; 0x48
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f003 faa7 	bl	800a518 <memcpy>
 8006fca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006fce:	f7ff ff79 	bl	8006ec4 <writegyro>
	HAL_Delay(100);
 8006fd2:	2064      	movs	r0, #100	; 0x64
 8006fd4:	f7f9 fef0 	bl	8000db8 <HAL_Delay>
}
 8006fd8:	bf00      	nop
 8006fda:	3704      	adds	r7, #4
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}
 8006fe0:	200040f4 	.word	0x200040f4
 8006fe4:	00000000 	.word	0x00000000

08006fe8 <read_gyro>:

void read_gyro(int *gyrox, int *gyroy, int *gyroz) {
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b09d      	sub	sp, #116	; 0x74
 8006fec:	af14      	add	r7, sp, #80	; 0x50
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
	static char datax[2] = { 0 };
	static char datay[2] = { 0 };
	static char dataz[2] = { 0 };
	float xgyro = 0;
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
	float ygyro = 0;
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
	float zgyro = 0;
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
	static float delta[3] = { 0 };
	static float current[3] = { 0 };
	static float time_delay = 10;

	datax[0] = readgyro(hspi5, 0x28, datax[0]);
 8007006:	4bca      	ldr	r3, [pc, #808]	; (8007330 <read_gyro+0x348>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	4cca      	ldr	r4, [pc, #808]	; (8007334 <read_gyro+0x34c>)
 800700c:	9313      	str	r3, [sp, #76]	; 0x4c
 800700e:	2328      	movs	r3, #40	; 0x28
 8007010:	9312      	str	r3, [sp, #72]	; 0x48
 8007012:	4668      	mov	r0, sp
 8007014:	f104 0310 	add.w	r3, r4, #16
 8007018:	2248      	movs	r2, #72	; 0x48
 800701a:	4619      	mov	r1, r3
 800701c:	f003 fa7c 	bl	800a518 <memcpy>
 8007020:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007024:	f7ff ff7c 	bl	8006f20 <readgyro>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	4bc0      	ldr	r3, [pc, #768]	; (8007330 <read_gyro+0x348>)
 800702e:	701a      	strb	r2, [r3, #0]
	datax[1] = readgyro(hspi5, 0x29, datax[1]);
 8007030:	4bbf      	ldr	r3, [pc, #764]	; (8007330 <read_gyro+0x348>)
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	4cbf      	ldr	r4, [pc, #764]	; (8007334 <read_gyro+0x34c>)
 8007036:	9313      	str	r3, [sp, #76]	; 0x4c
 8007038:	2329      	movs	r3, #41	; 0x29
 800703a:	9312      	str	r3, [sp, #72]	; 0x48
 800703c:	4668      	mov	r0, sp
 800703e:	f104 0310 	add.w	r3, r4, #16
 8007042:	2248      	movs	r2, #72	; 0x48
 8007044:	4619      	mov	r1, r3
 8007046:	f003 fa67 	bl	800a518 <memcpy>
 800704a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800704e:	f7ff ff67 	bl	8006f20 <readgyro>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	4bb6      	ldr	r3, [pc, #728]	; (8007330 <read_gyro+0x348>)
 8007058:	705a      	strb	r2, [r3, #1]

	datay[0] = readgyro(hspi5, 0x2A, datay[0]);
 800705a:	4bb7      	ldr	r3, [pc, #732]	; (8007338 <read_gyro+0x350>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4cb5      	ldr	r4, [pc, #724]	; (8007334 <read_gyro+0x34c>)
 8007060:	9313      	str	r3, [sp, #76]	; 0x4c
 8007062:	232a      	movs	r3, #42	; 0x2a
 8007064:	9312      	str	r3, [sp, #72]	; 0x48
 8007066:	4668      	mov	r0, sp
 8007068:	f104 0310 	add.w	r3, r4, #16
 800706c:	2248      	movs	r2, #72	; 0x48
 800706e:	4619      	mov	r1, r3
 8007070:	f003 fa52 	bl	800a518 <memcpy>
 8007074:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007078:	f7ff ff52 	bl	8006f20 <readgyro>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	4bad      	ldr	r3, [pc, #692]	; (8007338 <read_gyro+0x350>)
 8007082:	701a      	strb	r2, [r3, #0]
	datay[1] = readgyro(hspi5, 0x2B, datay[1]);
 8007084:	4bac      	ldr	r3, [pc, #688]	; (8007338 <read_gyro+0x350>)
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	4caa      	ldr	r4, [pc, #680]	; (8007334 <read_gyro+0x34c>)
 800708a:	9313      	str	r3, [sp, #76]	; 0x4c
 800708c:	232b      	movs	r3, #43	; 0x2b
 800708e:	9312      	str	r3, [sp, #72]	; 0x48
 8007090:	4668      	mov	r0, sp
 8007092:	f104 0310 	add.w	r3, r4, #16
 8007096:	2248      	movs	r2, #72	; 0x48
 8007098:	4619      	mov	r1, r3
 800709a:	f003 fa3d 	bl	800a518 <memcpy>
 800709e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070a2:	f7ff ff3d 	bl	8006f20 <readgyro>
 80070a6:	4603      	mov	r3, r0
 80070a8:	461a      	mov	r2, r3
 80070aa:	4ba3      	ldr	r3, [pc, #652]	; (8007338 <read_gyro+0x350>)
 80070ac:	705a      	strb	r2, [r3, #1]

	dataz[0] = readgyro(hspi5, 0x2C, dataz[0]);
 80070ae:	4ba3      	ldr	r3, [pc, #652]	; (800733c <read_gyro+0x354>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	4ca0      	ldr	r4, [pc, #640]	; (8007334 <read_gyro+0x34c>)
 80070b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80070b6:	232c      	movs	r3, #44	; 0x2c
 80070b8:	9312      	str	r3, [sp, #72]	; 0x48
 80070ba:	4668      	mov	r0, sp
 80070bc:	f104 0310 	add.w	r3, r4, #16
 80070c0:	2248      	movs	r2, #72	; 0x48
 80070c2:	4619      	mov	r1, r3
 80070c4:	f003 fa28 	bl	800a518 <memcpy>
 80070c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070cc:	f7ff ff28 	bl	8006f20 <readgyro>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	4b99      	ldr	r3, [pc, #612]	; (800733c <read_gyro+0x354>)
 80070d6:	701a      	strb	r2, [r3, #0]
	dataz[1] = readgyro(hspi5, 0x2D, dataz[1]);
 80070d8:	4b98      	ldr	r3, [pc, #608]	; (800733c <read_gyro+0x354>)
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	4c95      	ldr	r4, [pc, #596]	; (8007334 <read_gyro+0x34c>)
 80070de:	9313      	str	r3, [sp, #76]	; 0x4c
 80070e0:	232d      	movs	r3, #45	; 0x2d
 80070e2:	9312      	str	r3, [sp, #72]	; 0x48
 80070e4:	4668      	mov	r0, sp
 80070e6:	f104 0310 	add.w	r3, r4, #16
 80070ea:	2248      	movs	r2, #72	; 0x48
 80070ec:	4619      	mov	r1, r3
 80070ee:	f003 fa13 	bl	800a518 <memcpy>
 80070f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80070f6:	f7ff ff13 	bl	8006f20 <readgyro>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b8f      	ldr	r3, [pc, #572]	; (800733c <read_gyro+0x354>)
 8007100:	705a      	strb	r2, [r3, #1]

	xgyro = datax[1] * 256 + datax[0];
 8007102:	4b8b      	ldr	r3, [pc, #556]	; (8007330 <read_gyro+0x348>)
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	4a89      	ldr	r2, [pc, #548]	; (8007330 <read_gyro+0x348>)
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	4413      	add	r3, r2
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
	if (xgyro > 32767) {
 800711a:	edd7 7a07 	vldr	s15, [r7, #28]
 800711e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8007340 <read_gyro+0x358>
 8007122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	dd07      	ble.n	800713c <read_gyro+0x154>
		xgyro -= 65536;
 800712c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007130:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007344 <read_gyro+0x35c>
 8007134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	ygyro = datay[1] * 256 + datay[0];
 800713c:	4b7e      	ldr	r3, [pc, #504]	; (8007338 <read_gyro+0x350>)
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	4a7d      	ldr	r2, [pc, #500]	; (8007338 <read_gyro+0x350>)
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	4413      	add	r3, r2
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007150:	edc7 7a06 	vstr	s15, [r7, #24]
	if (ygyro > 32767) {
 8007154:	edd7 7a06 	vldr	s15, [r7, #24]
 8007158:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8007340 <read_gyro+0x358>
 800715c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007164:	dd07      	ble.n	8007176 <read_gyro+0x18e>
		ygyro -= 65536;
 8007166:	edd7 7a06 	vldr	s15, [r7, #24]
 800716a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007344 <read_gyro+0x35c>
 800716e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007172:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	zgyro = dataz[1] * 256 + dataz[0];
 8007176:	4b71      	ldr	r3, [pc, #452]	; (800733c <read_gyro+0x354>)
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	4a6f      	ldr	r2, [pc, #444]	; (800733c <read_gyro+0x354>)
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	4413      	add	r3, r2
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (zgyro > 32767) {
 800718e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007192:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007340 <read_gyro+0x358>
 8007196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	dd07      	ble.n	80071b0 <read_gyro+0x1c8>
		zgyro -= 65536;
 80071a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80071a4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007344 <read_gyro+0x35c>
 80071a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071ac:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	xgyro -= 29;
 80071b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80071b4:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80071b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071bc:	edc7 7a07 	vstr	s15, [r7, #28]
	ygyro -= 8;
 80071c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80071c4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80071c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071cc:	edc7 7a06 	vstr	s15, [r7, #24]
	zgyro += 12;
 80071d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80071d4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80071d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071dc:	edc7 7a05 	vstr	s15, [r7, #20]
	xgyro *= 0.07;
 80071e0:	69f8      	ldr	r0, [r7, #28]
 80071e2:	f7f9 f969 	bl	80004b8 <__aeabi_f2d>
 80071e6:	a350      	add	r3, pc, #320	; (adr r3, 8007328 <read_gyro+0x340>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 f9b8 	bl	8000560 <__aeabi_dmul>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4618      	mov	r0, r3
 80071f6:	4621      	mov	r1, r4
 80071f8:	f7f9 fbc4 	bl	8000984 <__aeabi_d2f>
 80071fc:	4603      	mov	r3, r0
 80071fe:	61fb      	str	r3, [r7, #28]
	ygyro *= 0.07;
 8007200:	69b8      	ldr	r0, [r7, #24]
 8007202:	f7f9 f959 	bl	80004b8 <__aeabi_f2d>
 8007206:	a348      	add	r3, pc, #288	; (adr r3, 8007328 <read_gyro+0x340>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f9a8 	bl	8000560 <__aeabi_dmul>
 8007210:	4603      	mov	r3, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4618      	mov	r0, r3
 8007216:	4621      	mov	r1, r4
 8007218:	f7f9 fbb4 	bl	8000984 <__aeabi_d2f>
 800721c:	4603      	mov	r3, r0
 800721e:	61bb      	str	r3, [r7, #24]
	zgyro *= 0.07;
 8007220:	6978      	ldr	r0, [r7, #20]
 8007222:	f7f9 f949 	bl	80004b8 <__aeabi_f2d>
 8007226:	a340      	add	r3, pc, #256	; (adr r3, 8007328 <read_gyro+0x340>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 f998 	bl	8000560 <__aeabi_dmul>
 8007230:	4603      	mov	r3, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4618      	mov	r0, r3
 8007236:	4621      	mov	r1, r4
 8007238:	f7f9 fba4 	bl	8000984 <__aeabi_d2f>
 800723c:	4603      	mov	r3, r0
 800723e:	617b      	str	r3, [r7, #20]

	delta[0] = xgyro * (time_delay);
 8007240:	4b41      	ldr	r3, [pc, #260]	; (8007348 <read_gyro+0x360>)
 8007242:	ed93 7a00 	vldr	s14, [r3]
 8007246:	edd7 7a07 	vldr	s15, [r7, #28]
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	4b3f      	ldr	r3, [pc, #252]	; (800734c <read_gyro+0x364>)
 8007250:	edc3 7a00 	vstr	s15, [r3]
	current[0] += delta[0];
 8007254:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <read_gyro+0x368>)
 8007256:	ed93 7a00 	vldr	s14, [r3]
 800725a:	4b3c      	ldr	r3, [pc, #240]	; (800734c <read_gyro+0x364>)
 800725c:	edd3 7a00 	vldr	s15, [r3]
 8007260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007264:	4b3a      	ldr	r3, [pc, #232]	; (8007350 <read_gyro+0x368>)
 8007266:	edc3 7a00 	vstr	s15, [r3]

	delta[1] = ygyro * (time_delay);
 800726a:	4b37      	ldr	r3, [pc, #220]	; (8007348 <read_gyro+0x360>)
 800726c:	ed93 7a00 	vldr	s14, [r3]
 8007270:	edd7 7a06 	vldr	s15, [r7, #24]
 8007274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007278:	4b34      	ldr	r3, [pc, #208]	; (800734c <read_gyro+0x364>)
 800727a:	edc3 7a01 	vstr	s15, [r3, #4]
	current[1] += delta[1];
 800727e:	4b34      	ldr	r3, [pc, #208]	; (8007350 <read_gyro+0x368>)
 8007280:	ed93 7a01 	vldr	s14, [r3, #4]
 8007284:	4b31      	ldr	r3, [pc, #196]	; (800734c <read_gyro+0x364>)
 8007286:	edd3 7a01 	vldr	s15, [r3, #4]
 800728a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800728e:	4b30      	ldr	r3, [pc, #192]	; (8007350 <read_gyro+0x368>)
 8007290:	edc3 7a01 	vstr	s15, [r3, #4]

	delta[2] = zgyro * (time_delay);
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <read_gyro+0x360>)
 8007296:	ed93 7a00 	vldr	s14, [r3]
 800729a:	edd7 7a05 	vldr	s15, [r7, #20]
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	4b2a      	ldr	r3, [pc, #168]	; (800734c <read_gyro+0x364>)
 80072a4:	edc3 7a02 	vstr	s15, [r3, #8]
	current[2] += delta[2];
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <read_gyro+0x368>)
 80072aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80072ae:	4b27      	ldr	r3, [pc, #156]	; (800734c <read_gyro+0x364>)
 80072b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80072b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <read_gyro+0x368>)
 80072ba:	edc3 7a02 	vstr	s15, [r3, #8]

	*gyrox = ((int) current[0])/182/6;
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <read_gyro+0x368>)
 80072c0:	edd3 7a00 	vldr	s15, [r3]
 80072c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072c8:	ee17 3a90 	vmov	r3, s15
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <read_gyro+0x36c>)
 80072ce:	fb82 1203 	smull	r1, r2, r2, r3
 80072d2:	441a      	add	r2, r3
 80072d4:	1292      	asrs	r2, r2, #10
 80072d6:	17db      	asrs	r3, r3, #31
 80072d8:	1ad2      	subs	r2, r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]
	*gyroy = ((int) current[1])/182/6;
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <read_gyro+0x368>)
 80072e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80072e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e8:	ee17 3a90 	vmov	r3, s15
 80072ec:	4a19      	ldr	r2, [pc, #100]	; (8007354 <read_gyro+0x36c>)
 80072ee:	fb82 1203 	smull	r1, r2, r2, r3
 80072f2:	441a      	add	r2, r3
 80072f4:	1292      	asrs	r2, r2, #10
 80072f6:	17db      	asrs	r3, r3, #31
 80072f8:	1ad2      	subs	r2, r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	601a      	str	r2, [r3, #0]
	*gyroz = ((int) current[2])/182/6;
 80072fe:	4b14      	ldr	r3, [pc, #80]	; (8007350 <read_gyro+0x368>)
 8007300:	edd3 7a02 	vldr	s15, [r3, #8]
 8007304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007308:	ee17 3a90 	vmov	r3, s15
 800730c:	4a11      	ldr	r2, [pc, #68]	; (8007354 <read_gyro+0x36c>)
 800730e:	fb82 1203 	smull	r1, r2, r2, r3
 8007312:	441a      	add	r2, r3
 8007314:	1292      	asrs	r2, r2, #10
 8007316:	17db      	asrs	r3, r3, #31
 8007318:	1ad2      	subs	r2, r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	1eb851ec 	.word	0x1eb851ec
 800732c:	3fb1eb85 	.word	0x3fb1eb85
 8007330:	20003e30 	.word	0x20003e30
 8007334:	200040f4 	.word	0x200040f4
 8007338:	20003e34 	.word	0x20003e34
 800733c:	20003e38 	.word	0x20003e38
 8007340:	46fffe00 	.word	0x46fffe00
 8007344:	47800000 	.word	0x47800000
 8007348:	20000018 	.word	0x20000018
 800734c:	20003e3c 	.word	0x20003e3c
 8007350:	20003e48 	.word	0x20003e48
 8007354:	f00f00f1 	.word	0xf00f00f1

08007358 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <MX_I2C3_Init+0x74>)
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <MX_I2C3_Init+0x78>)
 8007360:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <MX_I2C3_Init+0x74>)
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <MX_I2C3_Init+0x7c>)
 8007366:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007368:	4b18      	ldr	r3, [pc, #96]	; (80073cc <MX_I2C3_Init+0x74>)
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <MX_I2C3_Init+0x74>)
 8007370:	2200      	movs	r2, #0
 8007372:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <MX_I2C3_Init+0x74>)
 8007376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800737a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <MX_I2C3_Init+0x74>)
 800737e:	2200      	movs	r2, #0
 8007380:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <MX_I2C3_Init+0x74>)
 8007384:	2200      	movs	r2, #0
 8007386:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007388:	4b10      	ldr	r3, [pc, #64]	; (80073cc <MX_I2C3_Init+0x74>)
 800738a:	2200      	movs	r2, #0
 800738c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <MX_I2C3_Init+0x74>)
 8007390:	2200      	movs	r2, #0
 8007392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007394:	480d      	ldr	r0, [pc, #52]	; (80073cc <MX_I2C3_Init+0x74>)
 8007396:	f7fa fb85 	bl	8001aa4 <HAL_I2C_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80073a0:	f001 f980 	bl	80086a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80073a4:	2100      	movs	r1, #0
 80073a6:	4809      	ldr	r0, [pc, #36]	; (80073cc <MX_I2C3_Init+0x74>)
 80073a8:	f7fb fb37 	bl	8002a1a <HAL_I2CEx_ConfigAnalogFilter>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80073b2:	f001 f977 	bl	80086a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80073b6:	2100      	movs	r1, #0
 80073b8:	4804      	ldr	r0, [pc, #16]	; (80073cc <MX_I2C3_Init+0x74>)
 80073ba:	f7fb fb6a 	bl	8002a92 <HAL_I2CEx_ConfigDigitalFilter>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80073c4:	f001 f96e 	bl	80086a4 <Error_Handler>
  }

}
 80073c8:	bf00      	nop
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20003fa8 	.word	0x20003fa8
 80073d0:	40005c00 	.word	0x40005c00
 80073d4:	000186a0 	.word	0x000186a0

080073d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	609a      	str	r2, [r3, #8]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a29      	ldr	r2, [pc, #164]	; (800749c <HAL_I2C_MspInit+0xc4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d14b      	bne.n	8007492 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	6313      	str	r3, [r2, #48]	; 0x30
 800740a:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6313      	str	r3, [r2, #48]	; 0x30
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8007432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007438:	2312      	movs	r3, #18
 800743a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800743c:	2301      	movs	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007440:	2300      	movs	r3, #0
 8007442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007444:	2304      	movs	r3, #4
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8007448:	f107 0314 	add.w	r3, r7, #20
 800744c:	4619      	mov	r1, r3
 800744e:	4815      	ldr	r0, [pc, #84]	; (80074a4 <HAL_I2C_MspInit+0xcc>)
 8007450:	f7fa f83e 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8007454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800745a:	2312      	movs	r3, #18
 800745c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800745e:	2301      	movs	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007466:	2304      	movs	r3, #4
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	4619      	mov	r1, r3
 8007470:	480d      	ldr	r0, [pc, #52]	; (80074a8 <HAL_I2C_MspInit+0xd0>)
 8007472:	f7fa f82d 	bl	80014d0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007484:	6413      	str	r3, [r2, #64]	; 0x40
 8007486:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <HAL_I2C_MspInit+0xc8>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007492:	bf00      	nop
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40005c00 	.word	0x40005c00
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40020800 	.word	0x40020800
 80074a8:	40020000 	.word	0x40020000

080074ac <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a0b      	ldr	r2, [pc, #44]	; (80074e8 <HAL_I2C_MspDeInit+0x3c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10f      	bne.n	80074de <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80074be:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <HAL_I2C_MspDeInit+0x40>)
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <HAL_I2C_MspDeInit+0x40>)
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074c8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80074ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ce:	4808      	ldr	r0, [pc, #32]	; (80074f0 <HAL_I2C_MspDeInit+0x44>)
 80074d0:	f7fa f9a8 	bl	8001824 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80074d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074d8:	4806      	ldr	r0, [pc, #24]	; (80074f4 <HAL_I2C_MspDeInit+0x48>)
 80074da:	f7fa f9a3 	bl	8001824 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40005c00 	.word	0x40005c00
 80074ec:	40023800 	.word	0x40023800
 80074f0:	40020800 	.word	0x40020800
 80074f4:	40020000 	.word	0x40020000

080074f8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80074fc:	f001 fb9e 	bl	8008c3c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8007500:	20ca      	movs	r0, #202	; 0xca
 8007502:	f000 f95d 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8007506:	20c3      	movs	r0, #195	; 0xc3
 8007508:	f000 f967 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800750c:	2008      	movs	r0, #8
 800750e:	f000 f964 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8007512:	2050      	movs	r0, #80	; 0x50
 8007514:	f000 f961 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8007518:	20cf      	movs	r0, #207	; 0xcf
 800751a:	f000 f951 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800751e:	2000      	movs	r0, #0
 8007520:	f000 f95b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8007524:	20c1      	movs	r0, #193	; 0xc1
 8007526:	f000 f958 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800752a:	2030      	movs	r0, #48	; 0x30
 800752c:	f000 f955 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8007530:	20ed      	movs	r0, #237	; 0xed
 8007532:	f000 f945 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8007536:	2064      	movs	r0, #100	; 0x64
 8007538:	f000 f94f 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800753c:	2003      	movs	r0, #3
 800753e:	f000 f94c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8007542:	2012      	movs	r0, #18
 8007544:	f000 f949 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8007548:	2081      	movs	r0, #129	; 0x81
 800754a:	f000 f946 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800754e:	20e8      	movs	r0, #232	; 0xe8
 8007550:	f000 f936 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8007554:	2085      	movs	r0, #133	; 0x85
 8007556:	f000 f940 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800755a:	2000      	movs	r0, #0
 800755c:	f000 f93d 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007560:	2078      	movs	r0, #120	; 0x78
 8007562:	f000 f93a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8007566:	20cb      	movs	r0, #203	; 0xcb
 8007568:	f000 f92a 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800756c:	2039      	movs	r0, #57	; 0x39
 800756e:	f000 f934 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8007572:	202c      	movs	r0, #44	; 0x2c
 8007574:	f000 f931 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007578:	2000      	movs	r0, #0
 800757a:	f000 f92e 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800757e:	2034      	movs	r0, #52	; 0x34
 8007580:	f000 f92b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8007584:	2002      	movs	r0, #2
 8007586:	f000 f928 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800758a:	20f7      	movs	r0, #247	; 0xf7
 800758c:	f000 f918 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8007590:	2020      	movs	r0, #32
 8007592:	f000 f922 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8007596:	20ea      	movs	r0, #234	; 0xea
 8007598:	f000 f912 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800759c:	2000      	movs	r0, #0
 800759e:	f000 f91c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80075a2:	2000      	movs	r0, #0
 80075a4:	f000 f919 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80075a8:	20b1      	movs	r0, #177	; 0xb1
 80075aa:	f000 f909 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80075ae:	2000      	movs	r0, #0
 80075b0:	f000 f913 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80075b4:	201b      	movs	r0, #27
 80075b6:	f000 f910 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80075ba:	20b6      	movs	r0, #182	; 0xb6
 80075bc:	f000 f900 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80075c0:	200a      	movs	r0, #10
 80075c2:	f000 f90a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80075c6:	20a2      	movs	r0, #162	; 0xa2
 80075c8:	f000 f907 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80075cc:	20c0      	movs	r0, #192	; 0xc0
 80075ce:	f000 f8f7 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80075d2:	2010      	movs	r0, #16
 80075d4:	f000 f901 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80075d8:	20c1      	movs	r0, #193	; 0xc1
 80075da:	f000 f8f1 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80075de:	2010      	movs	r0, #16
 80075e0:	f000 f8fb 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80075e4:	20c5      	movs	r0, #197	; 0xc5
 80075e6:	f000 f8eb 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80075ea:	2045      	movs	r0, #69	; 0x45
 80075ec:	f000 f8f5 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80075f0:	2015      	movs	r0, #21
 80075f2:	f000 f8f2 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80075f6:	20c7      	movs	r0, #199	; 0xc7
 80075f8:	f000 f8e2 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80075fc:	2090      	movs	r0, #144	; 0x90
 80075fe:	f000 f8ec 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8007602:	2036      	movs	r0, #54	; 0x36
 8007604:	f000 f8dc 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8007608:	20c8      	movs	r0, #200	; 0xc8
 800760a:	f000 f8e6 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800760e:	20f2      	movs	r0, #242	; 0xf2
 8007610:	f000 f8d6 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007614:	2000      	movs	r0, #0
 8007616:	f000 f8e0 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800761a:	20b0      	movs	r0, #176	; 0xb0
 800761c:	f000 f8d0 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8007620:	20c2      	movs	r0, #194	; 0xc2
 8007622:	f000 f8da 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8007626:	20b6      	movs	r0, #182	; 0xb6
 8007628:	f000 f8ca 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800762c:	200a      	movs	r0, #10
 800762e:	f000 f8d4 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8007632:	20a7      	movs	r0, #167	; 0xa7
 8007634:	f000 f8d1 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8007638:	2027      	movs	r0, #39	; 0x27
 800763a:	f000 f8ce 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800763e:	2004      	movs	r0, #4
 8007640:	f000 f8cb 	bl	80077da <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8007644:	202a      	movs	r0, #42	; 0x2a
 8007646:	f000 f8bb 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800764a:	2000      	movs	r0, #0
 800764c:	f000 f8c5 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007650:	2000      	movs	r0, #0
 8007652:	f000 f8c2 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007656:	2000      	movs	r0, #0
 8007658:	f000 f8bf 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800765c:	20ef      	movs	r0, #239	; 0xef
 800765e:	f000 f8bc 	bl	80077da <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8007662:	202b      	movs	r0, #43	; 0x2b
 8007664:	f000 f8ac 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007668:	2000      	movs	r0, #0
 800766a:	f000 f8b6 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800766e:	2000      	movs	r0, #0
 8007670:	f000 f8b3 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8007674:	2001      	movs	r0, #1
 8007676:	f000 f8b0 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800767a:	203f      	movs	r0, #63	; 0x3f
 800767c:	f000 f8ad 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8007680:	20f6      	movs	r0, #246	; 0xf6
 8007682:	f000 f89d 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007686:	2001      	movs	r0, #1
 8007688:	f000 f8a7 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800768c:	2000      	movs	r0, #0
 800768e:	f000 f8a4 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8007692:	2006      	movs	r0, #6
 8007694:	f000 f8a1 	bl	80077da <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8007698:	202c      	movs	r0, #44	; 0x2c
 800769a:	f000 f891 	bl	80077c0 <ili9341_WriteReg>
  LCD_Delay(200);
 800769e:	20c8      	movs	r0, #200	; 0xc8
 80076a0:	f001 fbba 	bl	8008e18 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80076a4:	2026      	movs	r0, #38	; 0x26
 80076a6:	f000 f88b 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80076aa:	2001      	movs	r0, #1
 80076ac:	f000 f895 	bl	80077da <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80076b0:	20e0      	movs	r0, #224	; 0xe0
 80076b2:	f000 f885 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80076b6:	200f      	movs	r0, #15
 80076b8:	f000 f88f 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80076bc:	2029      	movs	r0, #41	; 0x29
 80076be:	f000 f88c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80076c2:	2024      	movs	r0, #36	; 0x24
 80076c4:	f000 f889 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80076c8:	200c      	movs	r0, #12
 80076ca:	f000 f886 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80076ce:	200e      	movs	r0, #14
 80076d0:	f000 f883 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80076d4:	2009      	movs	r0, #9
 80076d6:	f000 f880 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80076da:	204e      	movs	r0, #78	; 0x4e
 80076dc:	f000 f87d 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80076e0:	2078      	movs	r0, #120	; 0x78
 80076e2:	f000 f87a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80076e6:	203c      	movs	r0, #60	; 0x3c
 80076e8:	f000 f877 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80076ec:	2009      	movs	r0, #9
 80076ee:	f000 f874 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80076f2:	2013      	movs	r0, #19
 80076f4:	f000 f871 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80076f8:	2005      	movs	r0, #5
 80076fa:	f000 f86e 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80076fe:	2017      	movs	r0, #23
 8007700:	f000 f86b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007704:	2011      	movs	r0, #17
 8007706:	f000 f868 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800770a:	2000      	movs	r0, #0
 800770c:	f000 f865 	bl	80077da <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8007710:	20e1      	movs	r0, #225	; 0xe1
 8007712:	f000 f855 	bl	80077c0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007716:	2000      	movs	r0, #0
 8007718:	f000 f85f 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800771c:	2016      	movs	r0, #22
 800771e:	f000 f85c 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8007722:	201b      	movs	r0, #27
 8007724:	f000 f859 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8007728:	2004      	movs	r0, #4
 800772a:	f000 f856 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800772e:	2011      	movs	r0, #17
 8007730:	f000 f853 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8007734:	2007      	movs	r0, #7
 8007736:	f000 f850 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800773a:	2031      	movs	r0, #49	; 0x31
 800773c:	f000 f84d 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8007740:	2033      	movs	r0, #51	; 0x33
 8007742:	f000 f84a 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8007746:	2042      	movs	r0, #66	; 0x42
 8007748:	f000 f847 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800774c:	2005      	movs	r0, #5
 800774e:	f000 f844 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007752:	200c      	movs	r0, #12
 8007754:	f000 f841 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8007758:	200a      	movs	r0, #10
 800775a:	f000 f83e 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800775e:	2028      	movs	r0, #40	; 0x28
 8007760:	f000 f83b 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8007764:	202f      	movs	r0, #47	; 0x2f
 8007766:	f000 f838 	bl	80077da <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800776a:	200f      	movs	r0, #15
 800776c:	f000 f835 	bl	80077da <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8007770:	2011      	movs	r0, #17
 8007772:	f000 f825 	bl	80077c0 <ili9341_WriteReg>
  LCD_Delay(200);
 8007776:	20c8      	movs	r0, #200	; 0xc8
 8007778:	f001 fb4e 	bl	8008e18 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800777c:	2029      	movs	r0, #41	; 0x29
 800777e:	f000 f81f 	bl	80077c0 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8007782:	202c      	movs	r0, #44	; 0x2c
 8007784:	f000 f81c 	bl	80077c0 <ili9341_WriteReg>
}
 8007788:	bf00      	nop
 800778a:	bd80      	pop	{r7, pc}

0800778c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8007790:	f001 fa54 	bl	8008c3c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8007794:	2103      	movs	r1, #3
 8007796:	20d3      	movs	r0, #211	; 0xd3
 8007798:	f000 f82c 	bl	80077f4 <ili9341_ReadData>
 800779c:	4603      	mov	r3, r0
 800779e:	b29b      	uxth	r3, r3
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80077a8:	2029      	movs	r0, #41	; 0x29
 80077aa:	f000 f809 	bl	80077c0 <ili9341_WriteReg>
}
 80077ae:	bf00      	nop
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80077b6:	2028      	movs	r0, #40	; 0x28
 80077b8:	f000 f802 	bl	80077c0 <ili9341_WriteReg>
}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}

080077c0 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 facf 	bl	8008d70 <LCD_IO_WriteReg>
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	4603      	mov	r3, r0
 80077e2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 faa0 	bl	8008d2c <LCD_IO_WriteData>
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	460a      	mov	r2, r1
 80077fe:	80fb      	strh	r3, [r7, #6]
 8007800:	4613      	mov	r3, r2
 8007802:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8007804:	797a      	ldrb	r2, [r7, #5]
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fad2 	bl	8008db4 <LCD_IO_ReadData>
 8007810:	4603      	mov	r3, r0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800781e:	23f0      	movs	r3, #240	; 0xf0
}
 8007820:	4618      	mov	r0, r3
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800782a:	b480      	push	{r7}
 800782c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800782e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8007832:	4618      	mov	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <initMenu>:
 */
uint16_t xpos = 100;
uint16_t ypos = 100;


void initMenu(TS_StateTypeDef* str, globalClass* globalClassHandler) {
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	localstr = str;
 8007846:	4a06      	ldr	r2, [pc, #24]	; (8007860 <initMenu+0x24>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6013      	str	r3, [r2, #0]
	localClassHandler = globalClassHandler;
 800784c:	4a05      	ldr	r2, [pc, #20]	; (8007864 <initMenu+0x28>)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6013      	str	r3, [r2, #0]
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20003ffc 	.word	0x20003ffc
 8007864:	20004000 	.word	0x20004000

08007868 <screenRefresh>:

void screenRefresh(void) {
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
	BSP_LCD_SelectLayer(1);
 800786c:	2001      	movs	r0, #1
 800786e:	f001 fbe1 	bl	8009034 <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8007872:	4808      	ldr	r0, [pc, #32]	; (8007894 <screenRefresh+0x2c>)
 8007874:	f001 fc20 	bl	80090b8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	f001 fc02 	bl	8009084 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	f001 fc32 	bl	80090ec <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font24);
 8007888:	4802      	ldr	r0, [pc, #8]	; (8007894 <screenRefresh+0x2c>)
 800788a:	f001 fc15 	bl	80090b8 <BSP_LCD_SetFont>
}
 800788e:	bf00      	nop
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000010 	.word	0x20000010

08007898 <DrawButton>:

void DrawButton(char* text, uint8_t line_number) {
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80078a4:	4813      	ldr	r0, [pc, #76]	; (80078f4 <DrawButton+0x5c>)
 80078a6:	f001 fbd5 	bl	8009054 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(20, line_number, BSP_LCD_GetXSize()-40, 44);
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	b29c      	uxth	r4, r3
 80078ae:	f001 fb43 	bl	8008f38 <BSP_LCD_GetXSize>
 80078b2:	4603      	mov	r3, r0
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b28      	subs	r3, #40	; 0x28
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	232c      	movs	r3, #44	; 0x2c
 80078bc:	4621      	mov	r1, r4
 80078be:	2014      	movs	r0, #20
 80078c0:	f001 fe6c 	bl	800959c <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 80078c4:	480b      	ldr	r0, [pc, #44]	; (80078f4 <DrawButton+0x5c>)
 80078c6:	f001 fbdd 	bl	8009084 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	f001 fbc1 	bl	8009054 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 80078d2:	4809      	ldr	r0, [pc, #36]	; (80078f8 <DrawButton+0x60>)
 80078d4:	f001 fbf0 	bl	80090b8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, line_number + 14, (uint8_t*)text,
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	330e      	adds	r3, #14
 80078de:	b299      	uxth	r1, r3
 80078e0:	2301      	movs	r3, #1
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	2000      	movs	r0, #0
 80078e6:	f001 fc6f 	bl	80091c8 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd90      	pop	{r4, r7, pc}
 80078f2:	bf00      	nop
 80078f4:	ff000080 	.word	0xff000080
 80078f8:	20000008 	.word	0x20000008

080078fc <Display>:

void Display(void) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
	if (page == 0) Display_Intro();
 8007900:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <Display+0x44>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <Display+0x10>
 8007908:	f000 f83a 	bl	8007980 <Display_Intro>
	if (page == 1) Display_Menu();
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <Display+0x44>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <Display+0x1c>
 8007914:	f000 f956 	bl	8007bc4 <Display_Menu>
	if (page == 2) Display_Start();
 8007918:	4b09      	ldr	r3, [pc, #36]	; (8007940 <Display+0x44>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d101      	bne.n	8007924 <Display+0x28>
 8007920:	f000 f9a0 	bl	8007c64 <Display_Start>
	if (page == 3) Display_Odczyty();
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <Display+0x44>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d101      	bne.n	8007930 <Display+0x34>
 800792c:	f000 f9f2 	bl	8007d14 <Display_Odczyty>
	if (page == 4) Display_Onas();
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <Display+0x44>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d101      	bne.n	800793c <Display+0x40>
 8007938:	f000 fa9e 	bl	8007e78 <Display_Onas>
}
 800793c:	bf00      	nop
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20003e5c 	.word	0x20003e5c

08007944 <Service>:

void Service(void) {
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
	if (page == 1) menuService();
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <Service+0x38>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <Service+0x10>
 8007950:	f000 fad0 	bl	8007ef4 <menuService>
	if (page == 2) startService();
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <Service+0x38>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d101      	bne.n	8007960 <Service+0x1c>
 800795c:	f000 fb5e 	bl	800801c <startService>
	if (page == 3) odczytyService();
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <Service+0x38>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d101      	bne.n	800796c <Service+0x28>
 8007968:	f000 fb74 	bl	8008054 <odczytyService>
	if (page == 4) onasService();
 800796c:	4b03      	ldr	r3, [pc, #12]	; (800797c <Service+0x38>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d101      	bne.n	8007978 <Service+0x34>
 8007974:	f000 fb96 	bl	80080a4 <onasService>
}
 8007978:	bf00      	nop
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20003e5c 	.word	0x20003e5c

08007980 <Display_Intro>:

void Display_Intro(void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
	if(switchingINTRO_flag == 0) {
 8007986:	4b89      	ldr	r3, [pc, #548]	; (8007bac <Display_Intro+0x22c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 810a 	bne.w	8007ba4 <Display_Intro+0x224>
		switchingINTRO_flag = 1;
 8007990:	4b86      	ldr	r3, [pc, #536]	; (8007bac <Display_Intro+0x22c>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007996:	f7ff ff67 	bl	8007868 <screenRefresh>
		int waitTime = 500;
 800799a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800799e:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80079a0:	4883      	ldr	r0, [pc, #524]	; (8007bb0 <Display_Intro+0x230>)
 80079a2:	f001 fb57 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	f001 fb6b 	bl	8009084 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"LABIRINTH", CENTER_MODE);
 80079ae:	2301      	movs	r3, #1
 80079b0:	4a80      	ldr	r2, [pc, #512]	; (8007bb4 <Display_Intro+0x234>)
 80079b2:	2150      	movs	r1, #80	; 0x50
 80079b4:	2000      	movs	r0, #0
 80079b6:	f001 fc07 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 110, (uint8_t*)"GAME", CENTER_MODE);
 80079ba:	2301      	movs	r3, #1
 80079bc:	4a7e      	ldr	r2, [pc, #504]	; (8007bb8 <Display_Intro+0x238>)
 80079be:	216e      	movs	r1, #110	; 0x6e
 80079c0:	2000      	movs	r0, #0
 80079c2:	f001 fc01 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80079c6:	487a      	ldr	r0, [pc, #488]	; (8007bb0 <Display_Intro+0x230>)
 80079c8:	f001 fb44 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 80079cc:	2314      	movs	r3, #20
 80079ce:	2214      	movs	r2, #20
 80079d0:	2196      	movs	r1, #150	; 0x96
 80079d2:	2050      	movs	r0, #80	; 0x50
 80079d4:	f001 fde2 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 180, 20, 20);
 80079d8:	2314      	movs	r3, #20
 80079da:	2214      	movs	r2, #20
 80079dc:	21b4      	movs	r1, #180	; 0xb4
 80079de:	2050      	movs	r0, #80	; 0x50
 80079e0:	f001 fddc 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_FillRect(80, 210, 20, 20);
 80079e4:	2314      	movs	r3, #20
 80079e6:	2214      	movs	r2, #20
 80079e8:	21d2      	movs	r1, #210	; 0xd2
 80079ea:	2050      	movs	r0, #80	; 0x50
 80079ec:	f001 fdd6 	bl	800959c <BSP_LCD_FillRect>

		BSP_LCD_FillRect(110, 150, 20, 20);
 80079f0:	2314      	movs	r3, #20
 80079f2:	2214      	movs	r2, #20
 80079f4:	2196      	movs	r1, #150	; 0x96
 80079f6:	206e      	movs	r0, #110	; 0x6e
 80079f8:	f001 fdd0 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 180, 20, 20);
 80079fc:	2314      	movs	r3, #20
 80079fe:	2214      	movs	r2, #20
 8007a00:	21b4      	movs	r1, #180	; 0xb4
 8007a02:	206e      	movs	r0, #110	; 0x6e
 8007a04:	f001 fdca 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_FillRect(110, 210, 20, 20);
 8007a08:	2314      	movs	r3, #20
 8007a0a:	2214      	movs	r2, #20
 8007a0c:	21d2      	movs	r1, #210	; 0xd2
 8007a0e:	206e      	movs	r0, #110	; 0x6e
 8007a10:	f001 fdc4 	bl	800959c <BSP_LCD_FillRect>

		BSP_LCD_FillRect(140, 150, 20, 20);
 8007a14:	2314      	movs	r3, #20
 8007a16:	2214      	movs	r2, #20
 8007a18:	2196      	movs	r1, #150	; 0x96
 8007a1a:	208c      	movs	r0, #140	; 0x8c
 8007a1c:	f001 fdbe 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007a20:	2314      	movs	r3, #20
 8007a22:	2214      	movs	r2, #20
 8007a24:	21b4      	movs	r1, #180	; 0xb4
 8007a26:	208c      	movs	r0, #140	; 0x8c
 8007a28:	f001 fdb8 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007a2c:	2314      	movs	r3, #20
 8007a2e:	2214      	movs	r2, #20
 8007a30:	21d2      	movs	r1, #210	; 0xd2
 8007a32:	208c      	movs	r0, #140	; 0x8c
 8007a34:	f001 fdb2 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8007a38:	485d      	ldr	r0, [pc, #372]	; (8007bb0 <Display_Intro+0x230>)
 8007a3a:	f001 fb23 	bl	8009084 <BSP_LCD_SetBackColor>
		//Loading module
		HAL_Delay(waitTime);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7f9 f9b9 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a46:	485d      	ldr	r0, [pc, #372]	; (8007bbc <Display_Intro+0x23c>)
 8007a48:	f001 fb04 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 150, 20, 20);
 8007a4c:	2314      	movs	r3, #20
 8007a4e:	2214      	movs	r2, #20
 8007a50:	2196      	movs	r1, #150	; 0x96
 8007a52:	2050      	movs	r0, #80	; 0x50
 8007a54:	f001 fda2 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a58:	4858      	ldr	r0, [pc, #352]	; (8007bbc <Display_Intro+0x23c>)
 8007a5a:	f001 fb13 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f9 f9a9 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a66:	4855      	ldr	r0, [pc, #340]	; (8007bbc <Display_Intro+0x23c>)
 8007a68:	f001 faf4 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 180, 20, 20);
 8007a6c:	2314      	movs	r3, #20
 8007a6e:	2214      	movs	r2, #20
 8007a70:	21b4      	movs	r1, #180	; 0xb4
 8007a72:	2050      	movs	r0, #80	; 0x50
 8007a74:	f001 fd92 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a78:	4850      	ldr	r0, [pc, #320]	; (8007bbc <Display_Intro+0x23c>)
 8007a7a:	f001 fb03 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7f9 f999 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007a86:	484d      	ldr	r0, [pc, #308]	; (8007bbc <Display_Intro+0x23c>)
 8007a88:	f001 fae4 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(80, 210, 20, 20);
 8007a8c:	2314      	movs	r3, #20
 8007a8e:	2214      	movs	r2, #20
 8007a90:	21d2      	movs	r1, #210	; 0xd2
 8007a92:	2050      	movs	r0, #80	; 0x50
 8007a94:	f001 fd82 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007a98:	4848      	ldr	r0, [pc, #288]	; (8007bbc <Display_Intro+0x23c>)
 8007a9a:	f001 faf3 	bl	8009084 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7f9 f989 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007aa6:	4845      	ldr	r0, [pc, #276]	; (8007bbc <Display_Intro+0x23c>)
 8007aa8:	f001 fad4 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 210, 20, 20);
 8007aac:	2314      	movs	r3, #20
 8007aae:	2214      	movs	r2, #20
 8007ab0:	21d2      	movs	r1, #210	; 0xd2
 8007ab2:	206e      	movs	r0, #110	; 0x6e
 8007ab4:	f001 fd72 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007ab8:	4840      	ldr	r0, [pc, #256]	; (8007bbc <Display_Intro+0x23c>)
 8007aba:	f001 fae3 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7f9 f979 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ac6:	483d      	ldr	r0, [pc, #244]	; (8007bbc <Display_Intro+0x23c>)
 8007ac8:	f001 fac4 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 210, 20, 20);
 8007acc:	2314      	movs	r3, #20
 8007ace:	2214      	movs	r2, #20
 8007ad0:	21d2      	movs	r1, #210	; 0xd2
 8007ad2:	208c      	movs	r0, #140	; 0x8c
 8007ad4:	f001 fd62 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007ad8:	4838      	ldr	r0, [pc, #224]	; (8007bbc <Display_Intro+0x23c>)
 8007ada:	f001 fad3 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 f969 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ae6:	4835      	ldr	r0, [pc, #212]	; (8007bbc <Display_Intro+0x23c>)
 8007ae8:	f001 fab4 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 180, 20, 20);
 8007aec:	2314      	movs	r3, #20
 8007aee:	2214      	movs	r2, #20
 8007af0:	21b4      	movs	r1, #180	; 0xb4
 8007af2:	208c      	movs	r0, #140	; 0x8c
 8007af4:	f001 fd52 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007af8:	4830      	ldr	r0, [pc, #192]	; (8007bbc <Display_Intro+0x23c>)
 8007afa:	f001 fac3 	bl	8009084 <BSP_LCD_SetBackColor>

		HAL_Delay(waitTime);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f9 f959 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b06:	482d      	ldr	r0, [pc, #180]	; (8007bbc <Display_Intro+0x23c>)
 8007b08:	f001 faa4 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(140, 150, 20, 20);
 8007b0c:	2314      	movs	r3, #20
 8007b0e:	2214      	movs	r2, #20
 8007b10:	2196      	movs	r1, #150	; 0x96
 8007b12:	208c      	movs	r0, #140	; 0x8c
 8007b14:	f001 fd42 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b18:	4828      	ldr	r0, [pc, #160]	; (8007bbc <Display_Intro+0x23c>)
 8007b1a:	f001 fab3 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7f9 f949 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b26:	4825      	ldr	r0, [pc, #148]	; (8007bbc <Display_Intro+0x23c>)
 8007b28:	f001 fa94 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 150, 20, 20);
 8007b2c:	2314      	movs	r3, #20
 8007b2e:	2214      	movs	r2, #20
 8007b30:	2196      	movs	r1, #150	; 0x96
 8007b32:	206e      	movs	r0, #110	; 0x6e
 8007b34:	f001 fd32 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b38:	4820      	ldr	r0, [pc, #128]	; (8007bbc <Display_Intro+0x23c>)
 8007b3a:	f001 faa3 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f9 f939 	bl	8000db8 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007b46:	481d      	ldr	r0, [pc, #116]	; (8007bbc <Display_Intro+0x23c>)
 8007b48:	f001 fa84 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(110, 180, 20, 20);
 8007b4c:	2314      	movs	r3, #20
 8007b4e:	2214      	movs	r2, #20
 8007b50:	21b4      	movs	r1, #180	; 0xb4
 8007b52:	206e      	movs	r0, #110	; 0x6e
 8007b54:	f001 fd22 	bl	800959c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007b58:	4818      	ldr	r0, [pc, #96]	; (8007bbc <Display_Intro+0x23c>)
 8007b5a:	f001 fa93 	bl	8009084 <BSP_LCD_SetBackColor>
		HAL_Delay(waitTime);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 f929 	bl	8000db8 <HAL_Delay>

		for(int i=80; i>=20; i--)
 8007b66:	2350      	movs	r3, #80	; 0x50
 8007b68:	607b      	str	r3, [r7, #4]
 8007b6a:	e015      	b.n	8007b98 <Display_Intro+0x218>
		{
			screenRefresh();
 8007b6c:	f7ff fe7c 	bl	8007868 <screenRefresh>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007b70:	480f      	ldr	r0, [pc, #60]	; (8007bb0 <Display_Intro+0x230>)
 8007b72:	f001 fa6f 	bl	8009054 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	f001 fa83 	bl	8009084 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, i, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	b299      	uxth	r1, r3
 8007b82:	2301      	movs	r3, #1
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <Display_Intro+0x234>)
 8007b86:	2000      	movs	r0, #0
 8007b88:	f001 fb1e 	bl	80091c8 <BSP_LCD_DisplayStringAt>
			HAL_Delay(15);
 8007b8c:	200f      	movs	r0, #15
 8007b8e:	f7f9 f913 	bl	8000db8 <HAL_Delay>
		for(int i=80; i>=20; i--)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b13      	cmp	r3, #19
 8007b9c:	dce6      	bgt.n	8007b6c <Display_Intro+0x1ec>
		}
		page = 1;
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <Display_Intro+0x240>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20003e54 	.word	0x20003e54
 8007bb0:	ff000080 	.word	0xff000080
 8007bb4:	0800a670 	.word	0x0800a670
 8007bb8:	0800a67c 	.word	0x0800a67c
 8007bbc:	ffff0000 	.word	0xffff0000
 8007bc0:	20003e5c 	.word	0x20003e5c

08007bc4 <Display_Menu>:

void Display_Menu(void) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
	if(switchingMENU_flag == 1) {
 8007bc8:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <Display_Menu+0x4c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d11d      	bne.n	8007c0c <Display_Menu+0x48>
		switchingMENU_flag = 0;
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <Display_Menu+0x4c>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007bd6:	f7ff fe47 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007bda:	480e      	ldr	r0, [pc, #56]	; (8007c14 <Display_Menu+0x50>)
 8007bdc:	f001 fa3a 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	f001 fa4e 	bl	8009084 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"LABIRINTH", CENTER_MODE);
 8007be8:	2301      	movs	r3, #1
 8007bea:	4a0b      	ldr	r2, [pc, #44]	; (8007c18 <Display_Menu+0x54>)
 8007bec:	2114      	movs	r1, #20
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f001 faea 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		DrawButton("START",60);
 8007bf4:	213c      	movs	r1, #60	; 0x3c
 8007bf6:	4809      	ldr	r0, [pc, #36]	; (8007c1c <Display_Menu+0x58>)
 8007bf8:	f7ff fe4e 	bl	8007898 <DrawButton>
		DrawButton("ODCZYTY",120);
 8007bfc:	2178      	movs	r1, #120	; 0x78
 8007bfe:	4808      	ldr	r0, [pc, #32]	; (8007c20 <Display_Menu+0x5c>)
 8007c00:	f7ff fe4a 	bl	8007898 <DrawButton>
		DrawButton("O NAS",180);
 8007c04:	21b4      	movs	r1, #180	; 0xb4
 8007c06:	4807      	ldr	r0, [pc, #28]	; (8007c24 <Display_Menu+0x60>)
 8007c08:	f7ff fe46 	bl	8007898 <DrawButton>
	}
}
 8007c0c:	bf00      	nop
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000054 	.word	0x20000054
 8007c14:	ff000080 	.word	0xff000080
 8007c18:	0800a670 	.word	0x0800a670
 8007c1c:	0800a684 	.word	0x0800a684
 8007c20:	0800a68c 	.word	0x0800a68c
 8007c24:	0800a694 	.word	0x0800a694

08007c28 <drawWall>:
		}
	}
}


void drawWall(uint32_t x_value, uint32_t y_value, uint32_t width_value, uint32_t height_value) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007c36:	480a      	ldr	r0, [pc, #40]	; (8007c60 <drawWall+0x38>)
 8007c38:	f001 fa0c 	bl	8009054 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x_value, y_value, width_value, height_value);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	b298      	uxth	r0, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	b299      	uxth	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f001 fca6 	bl	800959c <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8007c50:	4803      	ldr	r0, [pc, #12]	; (8007c60 <drawWall+0x38>)
 8007c52:	f001 fa17 	bl	8009084 <BSP_LCD_SetBackColor>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	ff000080 	.word	0xff000080

08007c64 <Display_Start>:

void Display_Start(void) {
 8007c64:	b598      	push	{r3, r4, r7, lr}
 8007c66:	af00      	add	r7, sp, #0
	if(switchingSTART_flag == 1) {
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <Display_Start+0x9c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d145      	bne.n	8007cfc <Display_Start+0x98>
		switchingSTART_flag = 0;
 8007c70:	4b23      	ldr	r3, [pc, #140]	; (8007d00 <Display_Start+0x9c>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007c76:	f7ff fdf7 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007c7a:	4822      	ldr	r0, [pc, #136]	; (8007d04 <Display_Start+0xa0>)
 8007c7c:	f001 f9ea 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	f001 f9fe 	bl	8009084 <BSP_LCD_SetBackColor>

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007c88:	481f      	ldr	r0, [pc, #124]	; (8007d08 <Display_Start+0xa4>)
 8007c8a:	f001 f9e3 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(xpos, ypos, 10);
 8007c8e:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <Display_Start+0xa8>)
 8007c90:	8818      	ldrh	r0, [r3, #0]
 8007c92:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <Display_Start+0xac>)
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	220a      	movs	r2, #10
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f001 fcd9 	bl	8009650 <BSP_LCD_FillCircle>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007c9e:	481a      	ldr	r0, [pc, #104]	; (8007d08 <Display_Start+0xa4>)
 8007ca0:	f001 f9f0 	bl	8009084 <BSP_LCD_SetBackColor>

		drawWall(0,0,10,BSP_LCD_GetYSize()-50);
 8007ca4:	f001 f954 	bl	8008f50 <BSP_LCD_GetYSize>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	3b32      	subs	r3, #50	; 0x32
 8007cac:	220a      	movs	r2, #10
 8007cae:	2100      	movs	r1, #0
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f7ff ffb9 	bl	8007c28 <drawWall>
		drawWall(BSP_LCD_GetXSize()-10,0,10,BSP_LCD_GetYSize()-50);
 8007cb6:	f001 f93f 	bl	8008f38 <BSP_LCD_GetXSize>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f1a3 040a 	sub.w	r4, r3, #10
 8007cc0:	f001 f946 	bl	8008f50 <BSP_LCD_GetYSize>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	3b32      	subs	r3, #50	; 0x32
 8007cc8:	220a      	movs	r2, #10
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f7ff ffab 	bl	8007c28 <drawWall>
		drawWall(0,0,BSP_LCD_GetXSize(),10);
 8007cd2:	f001 f931 	bl	8008f38 <BSP_LCD_GetXSize>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	230a      	movs	r3, #10
 8007cda:	2100      	movs	r1, #0
 8007cdc:	2000      	movs	r0, #0
 8007cde:	f7ff ffa3 	bl	8007c28 <drawWall>
		drawWall(0,BSP_LCD_GetYSize()-50,BSP_LCD_GetXSize(),10);
 8007ce2:	f001 f935 	bl	8008f50 <BSP_LCD_GetYSize>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 8007cec:	f001 f924 	bl	8008f38 <BSP_LCD_GetXSize>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	230a      	movs	r3, #10
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f7ff ff96 	bl	8007c28 <drawWall>
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	bd98      	pop	{r3, r4, r7, pc}
 8007d00:	20000058 	.word	0x20000058
 8007d04:	ff000080 	.word	0xff000080
 8007d08:	ffff0000 	.word	0xffff0000
 8007d0c:	20000064 	.word	0x20000064
 8007d10:	20000066 	.word	0x20000066

08007d14 <Display_Odczyty>:

void Display_Odczyty(void) {
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b091      	sub	sp, #68	; 0x44
 8007d18:	af00      	add	r7, sp, #0
	if(switchingODCZYTY_flag == 1) {
 8007d1a:	4b4b      	ldr	r3, [pc, #300]	; (8007e48 <Display_Odczyty+0x134>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d11a      	bne.n	8007d58 <Display_Odczyty+0x44>
		screenRefresh();
 8007d22:	f7ff fda1 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007d26:	4849      	ldr	r0, [pc, #292]	; (8007e4c <Display_Odczyty+0x138>)
 8007d28:	f001 f994 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	f001 f9a8 	bl	8009084 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"ODCZYTY MPU", CENTER_MODE);
 8007d34:	2301      	movs	r3, #1
 8007d36:	4a46      	ldr	r2, [pc, #280]	; (8007e50 <Display_Odczyty+0x13c>)
 8007d38:	2114      	movs	r1, #20
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f001 fa44 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007d40:	21fa      	movs	r1, #250	; 0xfa
 8007d42:	4844      	ldr	r0, [pc, #272]	; (8007e54 <Display_Odczyty+0x140>)
 8007d44:	f7ff fda8 	bl	8007898 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007d48:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d4c:	f001 f982 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	f001 f996 	bl	8009084 <BSP_LCD_SetBackColor>
	}
	if(refreshODCZYTY_flag == 1 || switchingODCZYTY_flag == 1) {
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <Display_Odczyty+0x144>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d003      	beq.n	8007d68 <Display_Odczyty+0x54>
 8007d60:	4b39      	ldr	r3, [pc, #228]	; (8007e48 <Display_Odczyty+0x134>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d16b      	bne.n	8007e40 <Display_Odczyty+0x12c>
		switchingODCZYTY_flag = 0;
 8007d68:	4b37      	ldr	r3, [pc, #220]	; (8007e48 <Display_Odczyty+0x134>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
		uint8_t refreshLine[14] = "              ";
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <Display_Odczyty+0x148>)
 8007d70:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d76:	c407      	stmia	r4!, {r0, r1, r2}
 8007d78:	8023      	strh	r3, [r4, #0]
		uint8_t xaxis[14] = "X ASIX: ";
 8007d7a:	4a39      	ldr	r2, [pc, #228]	; (8007e60 <Display_Odczyty+0x14c>)
 8007d7c:	f107 0320 	add.w	r3, r7, #32
 8007d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d82:	c303      	stmia	r3!, {r0, r1}
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	711a      	strb	r2, [r3, #4]
		uint8_t yaxis[14] = "Y ASIX: ";
 8007d90:	4a34      	ldr	r2, [pc, #208]	; (8007e64 <Display_Odczyty+0x150>)
 8007d92:	f107 0310 	add.w	r3, r7, #16
 8007d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d98:	c303      	stmia	r3!, {r0, r1}
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	f107 0319 	add.w	r3, r7, #25
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	711a      	strb	r2, [r3, #4]
		uint8_t zaxis[14] = "Z ASIX: ";
 8007da6:	4a30      	ldr	r2, [pc, #192]	; (8007e68 <Display_Odczyty+0x154>)
 8007da8:	463b      	mov	r3, r7
 8007daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dac:	c303      	stmia	r3!, {r0, r1}
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	f107 0309 	add.w	r3, r7, #9
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	711a      	strb	r2, [r3, #4]
		itoa(x, &xaxis[8], 10);
 8007dba:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <Display_Odczyty+0x158>)
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	f107 0320 	add.w	r3, r7, #32
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	f002 fba4 	bl	800a514 <itoa>
		itoa(y, &yaxis[8], 10);
 8007dcc:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <Display_Odczyty+0x15c>)
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	f107 0310 	add.w	r3, r7, #16
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f002 fb9b 	bl	800a514 <itoa>
		itoa(z, &zaxis[8], 10);
 8007dde:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <Display_Odczyty+0x160>)
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	463b      	mov	r3, r7
 8007de4:	3308      	adds	r3, #8
 8007de6:	220a      	movs	r2, #10
 8007de8:	4619      	mov	r1, r3
 8007dea:	f002 fb93 	bl	800a514 <itoa>
		BSP_LCD_DisplayStringAt(0, 60, refreshLine, CENTER_MODE);
 8007dee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007df2:	2301      	movs	r3, #1
 8007df4:	213c      	movs	r1, #60	; 0x3c
 8007df6:	2000      	movs	r0, #0
 8007df8:	f001 f9e6 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 60, xaxis, CENTER_MODE);
 8007dfc:	f107 0220 	add.w	r2, r7, #32
 8007e00:	2301      	movs	r3, #1
 8007e02:	213c      	movs	r1, #60	; 0x3c
 8007e04:	2000      	movs	r0, #0
 8007e06:	f001 f9df 	bl	80091c8 <BSP_LCD_DisplayStringAt>

		BSP_LCD_DisplayStringAt(0, 100, refreshLine, CENTER_MODE);
 8007e0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e0e:	2301      	movs	r3, #1
 8007e10:	2164      	movs	r1, #100	; 0x64
 8007e12:	2000      	movs	r0, #0
 8007e14:	f001 f9d8 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 100, yaxis, CENTER_MODE);
 8007e18:	f107 0210 	add.w	r2, r7, #16
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	2164      	movs	r1, #100	; 0x64
 8007e20:	2000      	movs	r0, #0
 8007e22:	f001 f9d1 	bl	80091c8 <BSP_LCD_DisplayStringAt>

		BSP_LCD_DisplayStringAt(0, 140, refreshLine, CENTER_MODE);
 8007e26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	218c      	movs	r1, #140	; 0x8c
 8007e2e:	2000      	movs	r0, #0
 8007e30:	f001 f9ca 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 140, zaxis, CENTER_MODE);
 8007e34:	463a      	mov	r2, r7
 8007e36:	2301      	movs	r3, #1
 8007e38:	218c      	movs	r1, #140	; 0x8c
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f001 f9c4 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		}
}
 8007e40:	bf00      	nop
 8007e42:	3744      	adds	r7, #68	; 0x44
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	2000005c 	.word	0x2000005c
 8007e4c:	ff000080 	.word	0xff000080
 8007e50:	0800a69c 	.word	0x0800a69c
 8007e54:	0800a6a8 	.word	0x0800a6a8
 8007e58:	20003e58 	.word	0x20003e58
 8007e5c:	0800a6b0 	.word	0x0800a6b0
 8007e60:	0800a6c0 	.word	0x0800a6c0
 8007e64:	0800a6d0 	.word	0x0800a6d0
 8007e68:	0800a6e0 	.word	0x0800a6e0
 8007e6c:	20003e08 	.word	0x20003e08
 8007e70:	20003e0c 	.word	0x20003e0c
 8007e74:	20003e10 	.word	0x20003e10

08007e78 <Display_Onas>:


void Display_Onas(void) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
	if(switchingONAS_flag == 1) {
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <Display_Onas+0x64>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d129      	bne.n	8007ed8 <Display_Onas+0x60>
		switchingONAS_flag = 0;
 8007e84:	4b15      	ldr	r3, [pc, #84]	; (8007edc <Display_Onas+0x64>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
		screenRefresh();
 8007e8a:	f7ff fced 	bl	8007868 <screenRefresh>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007e8e:	4814      	ldr	r0, [pc, #80]	; (8007ee0 <Display_Onas+0x68>)
 8007e90:	f001 f8e0 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	f001 f8f4 	bl	8009084 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"Autorzy", CENTER_MODE);
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4a11      	ldr	r2, [pc, #68]	; (8007ee4 <Display_Onas+0x6c>)
 8007ea0:	2114      	movs	r1, #20
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f001 f990 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8007ea8:	21fa      	movs	r1, #250	; 0xfa
 8007eaa:	480f      	ldr	r0, [pc, #60]	; (8007ee8 <Display_Onas+0x70>)
 8007eac:	f7ff fcf4 	bl	8007898 <DrawButton>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007eb0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007eb4:	f001 f8ce 	bl	8009054 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	f001 f8e2 	bl	8009084 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"Adam Krzykala", CENTER_MODE);
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <Display_Onas+0x74>)
 8007ec4:	213c      	movs	r1, #60	; 0x3c
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f001 f97e 	bl	80091c8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Szymon Rajca", CENTER_MODE);
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4a08      	ldr	r2, [pc, #32]	; (8007ef0 <Display_Onas+0x78>)
 8007ed0:	2150      	movs	r1, #80	; 0x50
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	f001 f978 	bl	80091c8 <BSP_LCD_DisplayStringAt>

	}
}
 8007ed8:	bf00      	nop
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000060 	.word	0x20000060
 8007ee0:	ff000080 	.word	0xff000080
 8007ee4:	0800a6f0 	.word	0x0800a6f0
 8007ee8:	0800a6a8 	.word	0x0800a6a8
 8007eec:	0800a6f8 	.word	0x0800a6f8
 8007ef0:	0800a708 	.word	0x0800a708

08007ef4 <menuService>:


void menuService(void) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8007ef8:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <menuService+0x8c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d03b      	beq.n	8007f7a <menuService+0x86>
		if (localstr->Y >= 60 && localstr->Y <= 104)
 8007f02:	4b1f      	ldr	r3, [pc, #124]	; (8007f80 <menuService+0x8c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	889b      	ldrh	r3, [r3, #4]
 8007f08:	2b3b      	cmp	r3, #59	; 0x3b
 8007f0a:	d90d      	bls.n	8007f28 <menuService+0x34>
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <menuService+0x8c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	889b      	ldrh	r3, [r3, #4]
 8007f12:	2b68      	cmp	r3, #104	; 0x68
 8007f14:	d808      	bhi.n	8007f28 <menuService+0x34>
				{

			page = 2;
 8007f16:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <menuService+0x90>)
 8007f18:	2202      	movs	r2, #2
 8007f1a:	601a      	str	r2, [r3, #0]
			switchingSTART_flag = 1;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <menuService+0x94>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007f22:	2032      	movs	r0, #50	; 0x32
 8007f24:	f7f8 ff48 	bl	8000db8 <HAL_Delay>
		}
		if (localstr->Y >= 120 && localstr->Y <= 164)
 8007f28:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <menuService+0x8c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	889b      	ldrh	r3, [r3, #4]
 8007f2e:	2b77      	cmp	r3, #119	; 0x77
 8007f30:	d910      	bls.n	8007f54 <menuService+0x60>
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <menuService+0x8c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	889b      	ldrh	r3, [r3, #4]
 8007f38:	2ba4      	cmp	r3, #164	; 0xa4
 8007f3a:	d80b      	bhi.n	8007f54 <menuService+0x60>
						{

			page = 3;
 8007f3c:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <menuService+0x90>)
 8007f3e:	2203      	movs	r2, #3
 8007f40:	601a      	str	r2, [r3, #0]
			switchingODCZYTY_flag = 1;
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <menuService+0x98>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
			refreshODCZYTY_flag = 1;
 8007f48:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <menuService+0x9c>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007f4e:	2032      	movs	r0, #50	; 0x32
 8007f50:	f7f8 ff32 	bl	8000db8 <HAL_Delay>
				}
		if (localstr->Y >= 180 && localstr->Y <= 224)
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <menuService+0x8c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	2bb3      	cmp	r3, #179	; 0xb3
 8007f5c:	d90d      	bls.n	8007f7a <menuService+0x86>
 8007f5e:	4b08      	ldr	r3, [pc, #32]	; (8007f80 <menuService+0x8c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	889b      	ldrh	r3, [r3, #4]
 8007f64:	2be0      	cmp	r3, #224	; 0xe0
 8007f66:	d808      	bhi.n	8007f7a <menuService+0x86>
						{

			page = 4;
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <menuService+0x90>)
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	601a      	str	r2, [r3, #0]
			switchingONAS_flag = 1;
 8007f6e:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <menuService+0xa0>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8007f74:	2032      	movs	r0, #50	; 0x32
 8007f76:	f7f8 ff1f 	bl	8000db8 <HAL_Delay>
				}
	}
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20003ffc 	.word	0x20003ffc
 8007f84:	20003e5c 	.word	0x20003e5c
 8007f88:	20000058 	.word	0x20000058
 8007f8c:	2000005c 	.word	0x2000005c
 8007f90:	20003e58 	.word	0x20003e58
 8007f94:	20000060 	.word	0x20000060

08007f98 <changeBallPosition>:

void changeBallPosition() {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	f001 f858 	bl	8009054 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(xpos-12, ypos-12, 24, 24);
 8007fa4:	4b18      	ldr	r3, [pc, #96]	; (8008008 <changeBallPosition+0x70>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	3b0c      	subs	r3, #12
 8007faa:	b298      	uxth	r0, r3
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <changeBallPosition+0x74>)
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	3b0c      	subs	r3, #12
 8007fb2:	b299      	uxth	r1, r3
 8007fb4:	2318      	movs	r3, #24
 8007fb6:	2218      	movs	r2, #24
 8007fb8:	f001 faf0 	bl	800959c <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	f001 f860 	bl	8009084 <BSP_LCD_SetBackColor>
	xpos += y;
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <changeBallPosition+0x78>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <changeBallPosition+0x70>)
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	4413      	add	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <changeBallPosition+0x70>)
 8007fd4:	801a      	strh	r2, [r3, #0]
	ypos += x;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <changeBallPosition+0x7c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <changeBallPosition+0x74>)
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <changeBallPosition+0x74>)
 8007fe6:	801a      	strh	r2, [r3, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007fe8:	480b      	ldr	r0, [pc, #44]	; (8008018 <changeBallPosition+0x80>)
 8007fea:	f001 f833 	bl	8009054 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(xpos, ypos, 10);
 8007fee:	4b06      	ldr	r3, [pc, #24]	; (8008008 <changeBallPosition+0x70>)
 8007ff0:	8818      	ldrh	r0, [r3, #0]
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <changeBallPosition+0x74>)
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f001 fb29 	bl	8009650 <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8007ffe:	4806      	ldr	r0, [pc, #24]	; (8008018 <changeBallPosition+0x80>)
 8008000:	f001 f840 	bl	8009084 <BSP_LCD_SetBackColor>
	//collisionDetection();
}
 8008004:	bf00      	nop
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000064 	.word	0x20000064
 800800c:	20000066 	.word	0x20000066
 8008010:	20003e0c 	.word	0x20003e0c
 8008014:	20003e08 	.word	0x20003e08
 8008018:	ffff0000 	.word	0xffff0000

0800801c <startService>:

void startService(void) {
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8008020:	4b08      	ldr	r3, [pc, #32]	; (8008044 <startService+0x28>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d008      	beq.n	800803c <startService+0x20>
		x = 0;
 800802a:	4b07      	ldr	r3, [pc, #28]	; (8008048 <startService+0x2c>)
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
		y = 0;
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <startService+0x30>)
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
		z = 0;
 8008036:	4b06      	ldr	r3, [pc, #24]	; (8008050 <startService+0x34>)
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
	}
	changeBallPosition();
 800803c:	f7ff ffac 	bl	8007f98 <changeBallPosition>
}
 8008040:	bf00      	nop
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20003ffc 	.word	0x20003ffc
 8008048:	20003e08 	.word	0x20003e08
 800804c:	20003e0c 	.word	0x20003e0c
 8008050:	20003e10 	.word	0x20003e10

08008054 <odczytyService>:

void odczytyService(void) {
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 8008058:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <odczytyService+0x40>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d016      	beq.n	8008090 <odczytyService+0x3c>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <odczytyService+0x40>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	889b      	ldrh	r3, [r3, #4]
 8008068:	2bf9      	cmp	r3, #249	; 0xf9
 800806a:	d911      	bls.n	8008090 <odczytyService+0x3c>
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <odczytyService+0x40>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	889b      	ldrh	r3, [r3, #4]
 8008072:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8008076:	d80b      	bhi.n	8008090 <odczytyService+0x3c>
				{
			refreshODCZYTY_flag = 0;
 8008078:	4b07      	ldr	r3, [pc, #28]	; (8008098 <odczytyService+0x44>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
			page = 1;
 800807e:	4b07      	ldr	r3, [pc, #28]	; (800809c <odczytyService+0x48>)
 8008080:	2201      	movs	r2, #1
 8008082:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <odczytyService+0x4c>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 800808a:	2032      	movs	r0, #50	; 0x32
 800808c:	f7f8 fe94 	bl	8000db8 <HAL_Delay>
		}
	}

}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20003ffc 	.word	0x20003ffc
 8008098:	20003e58 	.word	0x20003e58
 800809c:	20003e5c 	.word	0x20003e5c
 80080a0:	20000054 	.word	0x20000054

080080a4 <onasService>:

void onasService(void) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
	if (localstr->TouchDetected) {
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <onasService+0x3c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d013      	beq.n	80080da <onasService+0x36>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <onasService+0x3c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	889b      	ldrh	r3, [r3, #4]
 80080b8:	2bf9      	cmp	r3, #249	; 0xf9
 80080ba:	d90e      	bls.n	80080da <onasService+0x36>
 80080bc:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <onasService+0x3c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	889b      	ldrh	r3, [r3, #4]
 80080c2:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80080c6:	d808      	bhi.n	80080da <onasService+0x36>
				{
			page = 1;
 80080c8:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <onasService+0x40>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <onasService+0x44>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80080d4:	2032      	movs	r0, #50	; 0x32
 80080d6:	f7f8 fe6f 	bl	8000db8 <HAL_Delay>
		}
	}
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20003ffc 	.word	0x20003ffc
 80080e4:	20003e5c 	.word	0x20003e5c
 80080e8:	20000054 	.word	0x20000054

080080ec <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b09a      	sub	sp, #104	; 0x68
 80080f0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80080f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080f6:	2234      	movs	r2, #52	; 0x34
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f002 fa17 	bl	800a52e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8008100:	463b      	mov	r3, r7
 8008102:	2234      	movs	r2, #52	; 0x34
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f002 fa11 	bl	800a52e <memset>

  hltdc.Instance = LTDC;
 800810c:	4b4e      	ldr	r3, [pc, #312]	; (8008248 <MX_LTDC_Init+0x15c>)
 800810e:	4a4f      	ldr	r2, [pc, #316]	; (800824c <MX_LTDC_Init+0x160>)
 8008110:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008112:	4b4d      	ldr	r3, [pc, #308]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008114:	2200      	movs	r2, #0
 8008116:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008118:	4b4b      	ldr	r3, [pc, #300]	; (8008248 <MX_LTDC_Init+0x15c>)
 800811a:	2200      	movs	r2, #0
 800811c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800811e:	4b4a      	ldr	r3, [pc, #296]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008120:	2200      	movs	r2, #0
 8008122:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008124:	4b48      	ldr	r3, [pc, #288]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008126:	2200      	movs	r2, #0
 8008128:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800812a:	4b47      	ldr	r3, [pc, #284]	; (8008248 <MX_LTDC_Init+0x15c>)
 800812c:	2207      	movs	r2, #7
 800812e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8008130:	4b45      	ldr	r3, [pc, #276]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008132:	2203      	movs	r2, #3
 8008134:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8008136:	4b44      	ldr	r3, [pc, #272]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008138:	220e      	movs	r2, #14
 800813a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800813c:	4b42      	ldr	r3, [pc, #264]	; (8008248 <MX_LTDC_Init+0x15c>)
 800813e:	2205      	movs	r2, #5
 8008140:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 8008142:	4b41      	ldr	r3, [pc, #260]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008144:	f240 1225 	movw	r2, #293	; 0x125
 8008148:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 800814a:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <MX_LTDC_Init+0x15c>)
 800814c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008150:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 8008152:	4b3d      	ldr	r3, [pc, #244]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008154:	f240 122b 	movw	r2, #299	; 0x12b
 8008158:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 800815a:	4b3b      	ldr	r3, [pc, #236]	; (8008248 <MX_LTDC_Init+0x15c>)
 800815c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8008160:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8008162:	4b39      	ldr	r3, [pc, #228]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800816a:	4b37      	ldr	r3, [pc, #220]	; (8008248 <MX_LTDC_Init+0x15c>)
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8008172:	4b35      	ldr	r3, [pc, #212]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800817a:	4833      	ldr	r0, [pc, #204]	; (8008248 <MX_LTDC_Init+0x15c>)
 800817c:	f7fa fcc8 	bl	8002b10 <HAL_LTDC_Init>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8008186:	f000 fa8d 	bl	80086a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800819a:	2300      	movs	r3, #0
 800819c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80081a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081aa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80081ac:	2305      	movs	r3, #5
 80081ae:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80081ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081d2:	2200      	movs	r2, #0
 80081d4:	4619      	mov	r1, r3
 80081d6:	481c      	ldr	r0, [pc, #112]	; (8008248 <MX_LTDC_Init+0x15c>)
 80081d8:	f7fa fd6a 	bl	8002cb0 <HAL_LTDC_ConfigLayer>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80081e2:	f000 fa5f 	bl	80086a4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008206:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8008208:	2305      	movs	r3, #5
 800820a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800822a:	463b      	mov	r3, r7
 800822c:	2201      	movs	r2, #1
 800822e:	4619      	mov	r1, r3
 8008230:	4805      	ldr	r0, [pc, #20]	; (8008248 <MX_LTDC_Init+0x15c>)
 8008232:	f7fa fd3d 	bl	8002cb0 <HAL_LTDC_ConfigLayer>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800823c:	f000 fa32 	bl	80086a4 <Error_Handler>
  }

}
 8008240:	bf00      	nop
 8008242:	3768      	adds	r7, #104	; 0x68
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20004004 	.word	0x20004004
 800824c:	40016800 	.word	0x40016800

08008250 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08e      	sub	sp, #56	; 0x38
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	605a      	str	r2, [r3, #4]
 8008262:	609a      	str	r2, [r3, #8]
 8008264:	60da      	str	r2, [r3, #12]
 8008266:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a77      	ldr	r2, [pc, #476]	; (800844c <HAL_LTDC_MspInit+0x1fc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	f040 80e8 	bne.w	8008444 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008274:	2300      	movs	r3, #0
 8008276:	623b      	str	r3, [r7, #32]
 8008278:	4a75      	ldr	r2, [pc, #468]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 800827a:	4b75      	ldr	r3, [pc, #468]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008282:	6453      	str	r3, [r2, #68]	; 0x44
 8008284:	4b72      	ldr	r3, [pc, #456]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008290:	2300      	movs	r3, #0
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	4a6e      	ldr	r2, [pc, #440]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008296:	4b6e      	ldr	r3, [pc, #440]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	f043 0320 	orr.w	r3, r3, #32
 800829e:	6313      	str	r3, [r2, #48]	; 0x30
 80082a0:	4b6b      	ldr	r3, [pc, #428]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	f003 0320 	and.w	r3, r3, #32
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ac:	2300      	movs	r3, #0
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	4a67      	ldr	r2, [pc, #412]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082b2:	4b67      	ldr	r3, [pc, #412]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b6:	f043 0301 	orr.w	r3, r3, #1
 80082ba:	6313      	str	r3, [r2, #48]	; 0x30
 80082bc:	4b64      	ldr	r3, [pc, #400]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	4a60      	ldr	r2, [pc, #384]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082ce:	4b60      	ldr	r3, [pc, #384]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	f043 0302 	orr.w	r3, r3, #2
 80082d6:	6313      	str	r3, [r2, #48]	; 0x30
 80082d8:	4b5d      	ldr	r3, [pc, #372]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	4a59      	ldr	r2, [pc, #356]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082ea:	4b59      	ldr	r3, [pc, #356]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f2:	6313      	str	r3, [r2, #48]	; 0x30
 80082f4:	4b56      	ldr	r3, [pc, #344]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	4a52      	ldr	r2, [pc, #328]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008306:	4b52      	ldr	r3, [pc, #328]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	f043 0304 	orr.w	r3, r3, #4
 800830e:	6313      	str	r3, [r2, #48]	; 0x30
 8008310:	4b4f      	ldr	r3, [pc, #316]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800831c:	2300      	movs	r3, #0
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	4a4b      	ldr	r2, [pc, #300]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008322:	4b4b      	ldr	r3, [pc, #300]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	f043 0308 	orr.w	r3, r3, #8
 800832a:	6313      	str	r3, [r2, #48]	; 0x30
 800832c:	4b48      	ldr	r3, [pc, #288]	; (8008450 <HAL_LTDC_MspInit+0x200>)
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	60bb      	str	r3, [r7, #8]
 8008336:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8008338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833e:	2302      	movs	r3, #2
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008342:	2300      	movs	r3, #0
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008346:	2300      	movs	r3, #0
 8008348:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800834a:	230e      	movs	r3, #14
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800834e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008352:	4619      	mov	r1, r3
 8008354:	483f      	ldr	r0, [pc, #252]	; (8008454 <HAL_LTDC_MspInit+0x204>)
 8008356:	f7f9 f8bb 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800835a:	f641 0358 	movw	r3, #6232	; 0x1858
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008360:	2302      	movs	r3, #2
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008364:	2300      	movs	r3, #0
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008368:	2300      	movs	r3, #0
 800836a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800836c:	230e      	movs	r3, #14
 800836e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008374:	4619      	mov	r1, r3
 8008376:	4838      	ldr	r0, [pc, #224]	; (8008458 <HAL_LTDC_MspInit+0x208>)
 8008378:	f7f9 f8aa 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800837c:	2303      	movs	r3, #3
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008380:	2302      	movs	r3, #2
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008384:	2300      	movs	r3, #0
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008388:	2300      	movs	r3, #0
 800838a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800838c:	2309      	movs	r3, #9
 800838e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008394:	4619      	mov	r1, r3
 8008396:	4831      	ldr	r0, [pc, #196]	; (800845c <HAL_LTDC_MspInit+0x20c>)
 8008398:	f7f9 f89a 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800839c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a2:	2302      	movs	r3, #2
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083aa:	2300      	movs	r3, #0
 80083ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80083ae:	230e      	movs	r3, #14
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b6:	4619      	mov	r1, r3
 80083b8:	4828      	ldr	r0, [pc, #160]	; (800845c <HAL_LTDC_MspInit+0x20c>)
 80083ba:	f7f9 f889 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80083be:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c4:	2302      	movs	r3, #2
 80083c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083cc:	2300      	movs	r3, #0
 80083ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80083d0:	230e      	movs	r3, #14
 80083d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80083d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083d8:	4619      	mov	r1, r3
 80083da:	4821      	ldr	r0, [pc, #132]	; (8008460 <HAL_LTDC_MspInit+0x210>)
 80083dc:	f7f9 f878 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80083e0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e6:	2302      	movs	r3, #2
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ee:	2300      	movs	r3, #0
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80083f2:	230e      	movs	r3, #14
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083fa:	4619      	mov	r1, r3
 80083fc:	4819      	ldr	r0, [pc, #100]	; (8008464 <HAL_LTDC_MspInit+0x214>)
 80083fe:	f7f9 f867 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8008402:	2348      	movs	r3, #72	; 0x48
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008406:	2302      	movs	r3, #2
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800840a:	2300      	movs	r3, #0
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840e:	2300      	movs	r3, #0
 8008410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008412:	230e      	movs	r3, #14
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800841a:	4619      	mov	r1, r3
 800841c:	4812      	ldr	r0, [pc, #72]	; (8008468 <HAL_LTDC_MspInit+0x218>)
 800841e:	f7f9 f857 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8008422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008428:	2302      	movs	r3, #2
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800842c:	2300      	movs	r3, #0
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008430:	2300      	movs	r3, #0
 8008432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008434:	2309      	movs	r3, #9
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800843c:	4619      	mov	r1, r3
 800843e:	4808      	ldr	r0, [pc, #32]	; (8008460 <HAL_LTDC_MspInit+0x210>)
 8008440:	f7f9 f846 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8008444:	bf00      	nop
 8008446:	3738      	adds	r7, #56	; 0x38
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40016800 	.word	0x40016800
 8008450:	40023800 	.word	0x40023800
 8008454:	40021400 	.word	0x40021400
 8008458:	40020000 	.word	0x40020000
 800845c:	40020400 	.word	0x40020400
 8008460:	40021800 	.word	0x40021800
 8008464:	40020800 	.word	0x40020800
 8008468:	40020c00 	.word	0x40020c00

0800846c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008470:	f7f8 fc60 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008474:	f000 f822 	bl	80084bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initPointers(&hdma2d, &hltdc, &hsdram1);
 8008478:	4a0d      	ldr	r2, [pc, #52]	; (80084b0 <main+0x44>)
 800847a:	490e      	ldr	r1, [pc, #56]	; (80084b4 <main+0x48>)
 800847c:	480e      	ldr	r0, [pc, #56]	; (80084b8 <main+0x4c>)
 800847e:	f000 f8a7 	bl	80085d0 <initPointers>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008482:	f7fe fbf1 	bl	8006c68 <MX_GPIO_Init>
  MX_LTDC_Init();
 8008486:	f7ff fe31 	bl	80080ec <MX_LTDC_Init>
  MX_FMC_Init();
 800848a:	f7fe f99d 	bl	80067c8 <MX_FMC_Init>
  MX_DMA2D_Init();
 800848e:	f7fe f95b 	bl	8006748 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8008492:	f7fe ff61 	bl	8007358 <MX_I2C3_Init>
  MX_SPI5_Init();
 8008496:	f000 f90d 	bl	80086b4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800849a:	f001 ff63 	bl	800a364 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  gyro_init();
 800849e:	f7fe fd75 	bl	8006f8c <gyro_init>
  ltdc_finishConfig();
 80084a2:	f000 f8bd 	bl	8008620 <ltdc_finishConfig>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80084a6:	f7fe fa6b 	bl	8006980 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80084aa:	f7fc fffc 	bl	80054a6 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80084ae:	e7fe      	b.n	80084ae <main+0x42>
 80084b0:	20003f48 	.word	0x20003f48
 80084b4:	20004004 	.word	0x20004004
 80084b8:	20003f08 	.word	0x20003f08

080084bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b0a0      	sub	sp, #128	; 0x80
 80084c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084c6:	2230      	movs	r2, #48	; 0x30
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f002 f82f 	bl	800a52e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	2230      	movs	r2, #48	; 0x30
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f002 f820 	bl	800a52e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80084ee:	2300      	movs	r3, #0
 80084f0:	60bb      	str	r3, [r7, #8]
 80084f2:	4a35      	ldr	r2, [pc, #212]	; (80085c8 <SystemClock_Config+0x10c>)
 80084f4:	4b34      	ldr	r3, [pc, #208]	; (80085c8 <SystemClock_Config+0x10c>)
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fc:	6413      	str	r3, [r2, #64]	; 0x40
 80084fe:	4b32      	ldr	r3, [pc, #200]	; (80085c8 <SystemClock_Config+0x10c>)
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008506:	60bb      	str	r3, [r7, #8]
 8008508:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800850a:	2300      	movs	r3, #0
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	4a2f      	ldr	r2, [pc, #188]	; (80085cc <SystemClock_Config+0x110>)
 8008510:	4b2e      	ldr	r3, [pc, #184]	; (80085cc <SystemClock_Config+0x110>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	4b2c      	ldr	r3, [pc, #176]	; (80085cc <SystemClock_Config+0x110>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008526:	2301      	movs	r3, #1
 8008528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800852a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800852e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008530:	2302      	movs	r3, #2
 8008532:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008538:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800853a:	2304      	movs	r3, #4
 800853c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800853e:	23b4      	movs	r3, #180	; 0xb4
 8008540:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008542:	2302      	movs	r3, #2
 8008544:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008546:	2307      	movs	r3, #7
 8008548:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800854a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800854e:	4618      	mov	r0, r3
 8008550:	f7fa fe08 	bl	8003164 <HAL_RCC_OscConfig>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800855a:	f000 f8a3 	bl	80086a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800855e:	f7fa fdb1 	bl	80030c4 <HAL_PWREx_EnableOverDrive>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8008568:	f000 f89c 	bl	80086a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800856c:	230f      	movs	r3, #15
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008570:	2302      	movs	r3, #2
 8008572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008574:	2300      	movs	r3, #0
 8008576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008578:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800857c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800857e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008582:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008588:	2105      	movs	r1, #5
 800858a:	4618      	mov	r0, r3
 800858c:	f7fb f82c 	bl	80035e8 <HAL_RCC_ClockConfig>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8008596:	f000 f885 	bl	80086a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800859a:	2308      	movs	r3, #8
 800859c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800859e:	23c0      	movs	r3, #192	; 0xc0
 80085a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80085a2:	2304      	movs	r3, #4
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80085a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fb fa39 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80085bc:	f000 f872 	bl	80086a4 <Error_Handler>
  }
}
 80085c0:	bf00      	nop
 80085c2:	3780      	adds	r7, #128	; 0x80
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40023800 	.word	0x40023800
 80085cc:	40007000 	.word	0x40007000

080085d0 <initPointers>:

uint8_t tickBuffer[50];
uint8_t tickSize;

void initPointers(DMA2D_HandleTypeDef* arg_hdma2d,
		LTDC_HandleTypeDef* arg_hltdc, SDRAM_HandleTypeDef* arg_hsdram1) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
	p_hdma2d = arg_hdma2d;
 80085dc:	4a0d      	ldr	r2, [pc, #52]	; (8008614 <initPointers+0x44>)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6013      	str	r3, [r2, #0]
	p_hltdc = arg_hltdc;
 80085e2:	4a0d      	ldr	r2, [pc, #52]	; (8008618 <initPointers+0x48>)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6013      	str	r3, [r2, #0]
	p_hsdram1 = arg_hsdram1;
 80085e8:	4a0c      	ldr	r2, [pc, #48]	; (800861c <initPointers+0x4c>)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6013      	str	r3, [r2, #0]

	LTDCSetup(p_hltdc);
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <initPointers+0x48>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fc70 	bl	8008ed8 <LTDCSetup>
	RAMSetup(p_hsdram1);
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <initPointers+0x4c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 f9e7 	bl	80099d0 <RAMSetup>
	DMASetup(p_hdma2d);
 8008602:	4b04      	ldr	r3, [pc, #16]	; (8008614 <initPointers+0x44>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fc76 	bl	8008ef8 <DMASetup>
}
 800860c:	bf00      	nop
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200040ec 	.word	0x200040ec
 8008618:	200040f0 	.word	0x200040f0
 800861c:	200040b0 	.word	0x200040b0

08008620 <ltdc_finishConfig>:

void fmc_finishConfig() {
	p_hsdram1->Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
}

void ltdc_finishConfig() {
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
	initILI9341();
 8008624:	f000 fc78 	bl	8008f18 <initILI9341>
	RAMSetup(p_hsdram1);
 8008628:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <ltdc_finishConfig+0x34>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f9cf 	bl	80099d0 <RAMSetup>
	/* Initialize the SDRAM */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008632:	f240 506a 	movw	r0, #1386	; 0x56a
 8008636:	f001 f9db 	bl	80099f0 <BSP_SDRAM_Initialization_sequence>
	/* Set the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800863a:	4807      	ldr	r0, [pc, #28]	; (8008658 <ltdc_finishConfig+0x38>)
 800863c:	f000 fd3c 	bl	80090b8 <BSP_LCD_SetFont>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8008640:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008644:	2001      	movs	r0, #1
 8008646:	f000 fc8f 	bl	8008f68 <BSP_LCD_LayerDefaultInit>
	HAL_Delay(100);
 800864a:	2064      	movs	r0, #100	; 0x64
 800864c:	f7f8 fbb4 	bl	8000db8 <HAL_Delay>
}
 8008650:	bf00      	nop
 8008652:	bd80      	pop	{r7, pc}
 8008654:	200040b0 	.word	0x200040b0
 8008658:	20000010 	.word	0x20000010

0800865c <ts_init>:
void ts_init(TS_StateTypeDef* struktura) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	BSP_TS_Init(1000, 1000);
 8008664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800866c:	f001 fa2a 	bl	8009ac4 <BSP_TS_Init>
	BSP_TS_GetState(struktura);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fa61 	bl	8009b38 <BSP_TS_GetState>

}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a04      	ldr	r2, [pc, #16]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d101      	bne.n	8008696 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008692:	f7f8 fb71 	bl	8000d78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40001000 	.word	0x40001000

080086a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80086a8:	bf00      	nop
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
	...

080086b4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80086b8:	4b17      	ldr	r3, [pc, #92]	; (8008718 <MX_SPI5_Init+0x64>)
 80086ba:	4a18      	ldr	r2, [pc, #96]	; (800871c <MX_SPI5_Init+0x68>)
 80086bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <MX_SPI5_Init+0x64>)
 80086c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80086c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <MX_SPI5_Init+0x64>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80086cc:	4b12      	ldr	r3, [pc, #72]	; (8008718 <MX_SPI5_Init+0x64>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <MX_SPI5_Init+0x64>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086d8:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <MX_SPI5_Init+0x64>)
 80086da:	2200      	movs	r2, #0
 80086dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80086de:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <MX_SPI5_Init+0x64>)
 80086e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <MX_SPI5_Init+0x64>)
 80086e8:	2218      	movs	r2, #24
 80086ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <MX_SPI5_Init+0x64>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <MX_SPI5_Init+0x64>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086f8:	4b07      	ldr	r3, [pc, #28]	; (8008718 <MX_SPI5_Init+0x64>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <MX_SPI5_Init+0x64>)
 8008700:	220a      	movs	r2, #10
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008704:	4804      	ldr	r0, [pc, #16]	; (8008718 <MX_SPI5_Init+0x64>)
 8008706:	f7fb fbb2 	bl	8003e6e <HAL_SPI_Init>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008710:	f7ff ffc8 	bl	80086a4 <Error_Handler>
  }

}
 8008714:	bf00      	nop
 8008716:	bd80      	pop	{r7, pc}
 8008718:	200040f4 	.word	0x200040f4
 800871c:	40015000 	.word	0x40015000

08008720 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	; 0x28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	609a      	str	r2, [r3, #8]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <HAL_SPI_MspInit+0x84>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d12c      	bne.n	800879c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	4a18      	ldr	r2, [pc, #96]	; (80087a8 <HAL_SPI_MspInit+0x88>)
 8008748:	4b17      	ldr	r3, [pc, #92]	; (80087a8 <HAL_SPI_MspInit+0x88>)
 800874a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008750:	6453      	str	r3, [r2, #68]	; 0x44
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <HAL_SPI_MspInit+0x88>)
 8008754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	4a11      	ldr	r2, [pc, #68]	; (80087a8 <HAL_SPI_MspInit+0x88>)
 8008764:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <HAL_SPI_MspInit+0x88>)
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	f043 0320 	orr.w	r3, r3, #32
 800876c:	6313      	str	r3, [r2, #48]	; 0x30
 800876e:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <HAL_SPI_MspInit+0x88>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800877a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800877e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008780:	2302      	movs	r3, #2
 8008782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008788:	2300      	movs	r3, #0
 800878a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800878c:	2305      	movs	r3, #5
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008790:	f107 0314 	add.w	r3, r7, #20
 8008794:	4619      	mov	r1, r3
 8008796:	4805      	ldr	r0, [pc, #20]	; (80087ac <HAL_SPI_MspInit+0x8c>)
 8008798:	f7f8 fe9a 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800879c:	bf00      	nop
 800879e:	3728      	adds	r7, #40	; 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40015000 	.word	0x40015000
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40021400 	.word	0x40021400

080087b0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <HAL_SPI_MspDeInit+0x30>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d10a      	bne.n	80087d8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80087c2:	4a08      	ldr	r2, [pc, #32]	; (80087e4 <HAL_SPI_MspDeInit+0x34>)
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <HAL_SPI_MspDeInit+0x34>)
 80087c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80087cc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80087ce:	f44f 7160 	mov.w	r1, #896	; 0x380
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <HAL_SPI_MspDeInit+0x38>)
 80087d4:	f7f9 f826 	bl	8001824 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	40015000 	.word	0x40015000
 80087e4:	40023800 	.word	0x40023800
 80087e8:	40021400 	.word	0x40021400

080087ec <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a33      	ldr	r2, [pc, #204]	; (80088c8 <I2Cx_MspInit+0xdc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d15f      	bne.n	80088be <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	4a32      	ldr	r2, [pc, #200]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008804:	4b31      	ldr	r3, [pc, #196]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	f043 0304 	orr.w	r3, r3, #4
 800880c:	6313      	str	r3, [r2, #48]	; 0x30
 800880e:	4b2f      	ldr	r3, [pc, #188]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008820:	4b2a      	ldr	r3, [pc, #168]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	6313      	str	r3, [r2, #48]	; 0x30
 800882a:	4b28      	ldr	r3, [pc, #160]	; (80088cc <I2Cx_MspInit+0xe0>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8008836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800883a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800883c:	2312      	movs	r3, #18
 800883e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8008844:	2302      	movs	r3, #2
 8008846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008848:	2304      	movs	r3, #4
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800884c:	f107 0314 	add.w	r3, r7, #20
 8008850:	4619      	mov	r1, r3
 8008852:	481f      	ldr	r0, [pc, #124]	; (80088d0 <I2Cx_MspInit+0xe4>)
 8008854:	f7f8 fe3c 	bl	80014d0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8008858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800885c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800885e:	f107 0314 	add.w	r3, r7, #20
 8008862:	4619      	mov	r1, r3
 8008864:	481b      	ldr	r0, [pc, #108]	; (80088d4 <I2Cx_MspInit+0xe8>)
 8008866:	f7f8 fe33 	bl	80014d0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800886a:	2300      	movs	r3, #0
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	4a17      	ldr	r2, [pc, #92]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008870:	4b16      	ldr	r3, [pc, #88]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008878:	6413      	str	r3, [r2, #64]	; 0x40
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <I2Cx_MspInit+0xe0>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008882:	60bb      	str	r3, [r7, #8]
 8008884:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8008886:	4a11      	ldr	r2, [pc, #68]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008888:	4b10      	ldr	r3, [pc, #64]	; (80088cc <I2Cx_MspInit+0xe0>)
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008890:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8008892:	4a0e      	ldr	r2, [pc, #56]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <I2Cx_MspInit+0xe0>)
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800889c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800889e:	2200      	movs	r2, #0
 80088a0:	210f      	movs	r1, #15
 80088a2:	2048      	movs	r0, #72	; 0x48
 80088a4:	f7f8 fb60 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80088a8:	2048      	movs	r0, #72	; 0x48
 80088aa:	f7f8 fb79 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80088ae:	2200      	movs	r2, #0
 80088b0:	210f      	movs	r1, #15
 80088b2:	2049      	movs	r0, #73	; 0x49
 80088b4:	f7f8 fb58 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80088b8:	2049      	movs	r0, #73	; 0x49
 80088ba:	f7f8 fb71 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80088be:	bf00      	nop
 80088c0:	3728      	adds	r7, #40	; 0x28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	40005c00 	.word	0x40005c00
 80088cc:	40023800 	.word	0x40023800
 80088d0:	40020000 	.word	0x40020000
 80088d4:	40020800 	.word	0x40020800

080088d8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80088dc:	4814      	ldr	r0, [pc, #80]	; (8008930 <I2Cx_Init+0x58>)
 80088de:	f7f9 fd59 	bl	8002394 <HAL_I2C_GetState>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d121      	bne.n	800892c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80088e8:	4b11      	ldr	r3, [pc, #68]	; (8008930 <I2Cx_Init+0x58>)
 80088ea:	4a12      	ldr	r2, [pc, #72]	; (8008934 <I2Cx_Init+0x5c>)
 80088ec:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80088ee:	4b10      	ldr	r3, [pc, #64]	; (8008930 <I2Cx_Init+0x58>)
 80088f0:	4a11      	ldr	r2, [pc, #68]	; (8008938 <I2Cx_Init+0x60>)
 80088f2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <I2Cx_Init+0x58>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80088fa:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <I2Cx_Init+0x58>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <I2Cx_Init+0x58>)
 8008902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008906:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8008908:	4b09      	ldr	r3, [pc, #36]	; (8008930 <I2Cx_Init+0x58>)
 800890a:	2200      	movs	r2, #0
 800890c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800890e:	4b08      	ldr	r3, [pc, #32]	; (8008930 <I2Cx_Init+0x58>)
 8008910:	2200      	movs	r2, #0
 8008912:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <I2Cx_Init+0x58>)
 8008916:	2200      	movs	r2, #0
 8008918:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800891a:	4b05      	ldr	r3, [pc, #20]	; (8008930 <I2Cx_Init+0x58>)
 800891c:	2200      	movs	r2, #0
 800891e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8008920:	4803      	ldr	r0, [pc, #12]	; (8008930 <I2Cx_Init+0x58>)
 8008922:	f7ff ff63 	bl	80087ec <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8008926:	4802      	ldr	r0, [pc, #8]	; (8008930 <I2Cx_Init+0x58>)
 8008928:	f7f9 f8bc 	bl	8001aa4 <HAL_I2C_Init>
  }
}
 800892c:	bf00      	nop
 800892e:	bd80      	pop	{r7, pc}
 8008930:	2000414c 	.word	0x2000414c
 8008934:	40005c00 	.word	0x40005c00
 8008938:	000186a0 	.word	0x000186a0

0800893c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8008942:	2300      	movs	r3, #0
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	4a13      	ldr	r2, [pc, #76]	; (8008994 <I2Cx_ITConfig+0x58>)
 8008948:	4b12      	ldr	r3, [pc, #72]	; (8008994 <I2Cx_ITConfig+0x58>)
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	6313      	str	r3, [r2, #48]	; 0x30
 8008952:	4b10      	ldr	r3, [pc, #64]	; (8008994 <I2Cx_ITConfig+0x58>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800895e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008962:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8008964:	2301      	movs	r3, #1
 8008966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008968:	2300      	movs	r3, #0
 800896a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <I2Cx_ITConfig+0x5c>)
 800896e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <I2Cx_ITConfig+0x60>)
 8008976:	f7f8 fdab 	bl	80014d0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800897a:	2200      	movs	r2, #0
 800897c:	210f      	movs	r1, #15
 800897e:	2028      	movs	r0, #40	; 0x28
 8008980:	f7f8 faf2 	bl	8000f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8008984:	2028      	movs	r0, #40	; 0x28
 8008986:	f7f8 fb0b 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
}
 800898a:	bf00      	nop
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	40023800 	.word	0x40023800
 8008998:	10210000 	.word	0x10210000
 800899c:	40020000 	.word	0x40020000

080089a0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af04      	add	r7, sp, #16
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
 80089aa:	460b      	mov	r3, r1
 80089ac:	71bb      	strb	r3, [r7, #6]
 80089ae:	4613      	mov	r3, r2
 80089b0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	b299      	uxth	r1, r3
 80089ba:	79bb      	ldrb	r3, [r7, #6]
 80089bc:	b29a      	uxth	r2, r3
 80089be:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <I2Cx_WriteData+0x4c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	2301      	movs	r3, #1
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	1d7b      	adds	r3, r7, #5
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2301      	movs	r3, #1
 80089ce:	4808      	ldr	r0, [pc, #32]	; (80089f0 <I2Cx_WriteData+0x50>)
 80089d0:	f7f9 f9c0 	bl	8001d54 <HAL_I2C_Mem_Write>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80089de:	f000 f863 	bl	8008aa8 <I2Cx_Error>
  }        
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000068 	.word	0x20000068
 80089f0:	2000414c 	.word	0x2000414c

080089f4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af04      	add	r7, sp, #16
 80089fa:	4603      	mov	r3, r0
 80089fc:	460a      	mov	r2, r1
 80089fe:	71fb      	strb	r3, [r7, #7]
 8008a00:	4613      	mov	r3, r2
 8008a02:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	b299      	uxth	r1, r3
 8008a10:	79bb      	ldrb	r3, [r7, #6]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <I2Cx_ReadData+0x50>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	9302      	str	r3, [sp, #8]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	f107 030e 	add.w	r3, r7, #14
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	2301      	movs	r3, #1
 8008a26:	4808      	ldr	r0, [pc, #32]	; (8008a48 <I2Cx_ReadData+0x54>)
 8008a28:	f7f9 fa8e 	bl	8001f48 <HAL_I2C_Mem_Read>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008a36:	f000 f837 	bl	8008aa8 <I2Cx_Error>
  
  }
  return value;
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20000068 	.word	0x20000068
 8008a48:	2000414c 	.word	0x2000414c

08008a4c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af04      	add	r7, sp, #16
 8008a52:	603a      	str	r2, [r7, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	71bb      	strb	r3, [r7, #6]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	b299      	uxth	r1, r3
 8008a6a:	79bb      	ldrb	r3, [r7, #6]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <I2Cx_ReadBuffer+0x54>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	88bb      	ldrh	r3, [r7, #4]
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <I2Cx_ReadBuffer+0x58>)
 8008a80:	f7f9 fa62 	bl	8001f48 <HAL_I2C_Mem_Read>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e002      	b.n	8008a98 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008a92:	f000 f809 	bl	8008aa8 <I2Cx_Error>

    return 1;
 8008a96:	2301      	movs	r3, #1
  }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20000068 	.word	0x20000068
 8008aa4:	2000414c 	.word	0x2000414c

08008aa8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8008aac:	4803      	ldr	r0, [pc, #12]	; (8008abc <I2Cx_Error+0x14>)
 8008aae:	f7f9 f921 	bl	8001cf4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8008ab2:	f7ff ff11 	bl	80088d8 <I2Cx_Init>
}
 8008ab6:	bf00      	nop
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	2000414c 	.word	0x2000414c

08008ac0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8008ac4:	4819      	ldr	r0, [pc, #100]	; (8008b2c <SPIx_Init+0x6c>)
 8008ac6:	f7fb fe35 	bl	8004734 <HAL_SPI_GetState>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d12b      	bne.n	8008b28 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8008ad0:	4b16      	ldr	r3, [pc, #88]	; (8008b2c <SPIx_Init+0x6c>)
 8008ad2:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <SPIx_Init+0x70>)
 8008ad4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008ad6:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <SPIx_Init+0x6c>)
 8008ad8:	2218      	movs	r2, #24
 8008ada:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8008adc:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <SPIx_Init+0x6c>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <SPIx_Init+0x6c>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8008ae8:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <SPIx_Init+0x6c>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <SPIx_Init+0x6c>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8008af4:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <SPIx_Init+0x6c>)
 8008af6:	2207      	movs	r2, #7
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8008afa:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <SPIx_Init+0x6c>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <SPIx_Init+0x6c>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8008b06:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <SPIx_Init+0x6c>)
 8008b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b0c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8008b0e:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <SPIx_Init+0x6c>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <SPIx_Init+0x6c>)
 8008b16:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008b1a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8008b1c:	4803      	ldr	r0, [pc, #12]	; (8008b2c <SPIx_Init+0x6c>)
 8008b1e:	f000 f853 	bl	8008bc8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8008b22:	4802      	ldr	r0, [pc, #8]	; (8008b2c <SPIx_Init+0x6c>)
 8008b24:	f7fb f9a3 	bl	8003e6e <HAL_SPI_Init>
  }
}
 8008b28:	bf00      	nop
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20003e60 	.word	0x20003e60
 8008b30:	40015000 	.word	0x40015000

08008b34 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <SPIx_Read+0x38>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f107 0108 	add.w	r1, r7, #8
 8008b4e:	4808      	ldr	r0, [pc, #32]	; (8008b70 <SPIx_Read+0x3c>)
 8008b50:	f7fb fb4a 	bl	80041e8 <HAL_SPI_Receive>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008b5e:	f000 f827 	bl	8008bb0 <SPIx_Error>
  }
  
  return readvalue;
 8008b62:	68bb      	ldr	r3, [r7, #8]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	2000006c 	.word	0x2000006c
 8008b70:	20003e60 	.word	0x20003e60

08008b74 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8008b82:	4b09      	ldr	r3, [pc, #36]	; (8008ba8 <SPIx_Write+0x34>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	1db9      	adds	r1, r7, #6
 8008b88:	2201      	movs	r2, #1
 8008b8a:	4808      	ldr	r0, [pc, #32]	; (8008bac <SPIx_Write+0x38>)
 8008b8c:	f7fb f9fa 	bl	8003f84 <HAL_SPI_Transmit>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8008b9a:	f000 f809 	bl	8008bb0 <SPIx_Error>
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000006c 	.word	0x2000006c
 8008bac:	20003e60 	.word	0x20003e60

08008bb0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8008bb4:	4803      	ldr	r0, [pc, #12]	; (8008bc4 <SPIx_Error+0x14>)
 8008bb6:	f7fb f9bd 	bl	8003f34 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8008bba:	f7ff ff81 	bl	8008ac0 <SPIx_Init>
}
 8008bbe:	bf00      	nop
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20003e60 	.word	0x20003e60

08008bc8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <SPIx_MspInit+0x6c>)
 8008bd6:	4b17      	ldr	r3, [pc, #92]	; (8008c34 <SPIx_MspInit+0x6c>)
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bde:	6453      	str	r3, [r2, #68]	; 0x44
 8008be0:	4b14      	ldr	r3, [pc, #80]	; (8008c34 <SPIx_MspInit+0x6c>)
 8008be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	4a10      	ldr	r2, [pc, #64]	; (8008c34 <SPIx_MspInit+0x6c>)
 8008bf2:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <SPIx_MspInit+0x6c>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	f043 0320 	orr.w	r3, r3, #32
 8008bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <SPIx_MspInit+0x6c>)
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8008c08:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8008c12:	2302      	movs	r3, #2
 8008c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8008c16:	2301      	movs	r3, #1
 8008c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8008c1a:	2305      	movs	r3, #5
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8008c1e:	f107 0314 	add.w	r3, r7, #20
 8008c22:	4619      	mov	r1, r3
 8008c24:	4804      	ldr	r0, [pc, #16]	; (8008c38 <SPIx_MspInit+0x70>)
 8008c26:	f7f8 fc53 	bl	80014d0 <HAL_GPIO_Init>
}
 8008c2a:	bf00      	nop
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40023800 	.word	0x40023800
 8008c38:	40021400 	.word	0x40021400

08008c3c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8008c42:	4b36      	ldr	r3, [pc, #216]	; (8008d1c <LCD_IO_Init+0xe0>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d164      	bne.n	8008d14 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8008c4a:	4b34      	ldr	r3, [pc, #208]	; (8008d1c <LCD_IO_Init+0xe0>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8008c50:	2300      	movs	r3, #0
 8008c52:	60bb      	str	r3, [r7, #8]
 8008c54:	4a32      	ldr	r2, [pc, #200]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008c56:	4b32      	ldr	r3, [pc, #200]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f043 0308 	orr.w	r3, r3, #8
 8008c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8008c60:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	60bb      	str	r3, [r7, #8]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8008c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008c72:	2301      	movs	r3, #1
 8008c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8008c7e:	f107 030c 	add.w	r3, r7, #12
 8008c82:	4619      	mov	r1, r3
 8008c84:	4827      	ldr	r0, [pc, #156]	; (8008d24 <LCD_IO_Init+0xe8>)
 8008c86:	f7f8 fc23 	bl	80014d0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]
 8008c8e:	4a24      	ldr	r2, [pc, #144]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008c90:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c94:	f043 0308 	orr.w	r3, r3, #8
 8008c98:	6313      	str	r3, [r2, #48]	; 0x30
 8008c9a:	4b21      	ldr	r3, [pc, #132]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	607b      	str	r3, [r7, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8008ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008cac:	2301      	movs	r3, #1
 8008cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4819      	ldr	r0, [pc, #100]	; (8008d24 <LCD_IO_Init+0xe8>)
 8008cc0:	f7f8 fc06 	bl	80014d0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	4a15      	ldr	r2, [pc, #84]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008cca:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	f043 0304 	orr.w	r3, r3, #4
 8008cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8008cd4:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <LCD_IO_Init+0xe4>)
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	603b      	str	r3, [r7, #0]
 8008cde:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8008cec:	2302      	movs	r3, #2
 8008cee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8008cf0:	f107 030c 	add.w	r3, r7, #12
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	480c      	ldr	r0, [pc, #48]	; (8008d28 <LCD_IO_Init+0xec>)
 8008cf8:	f7f8 fbea 	bl	80014d0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2104      	movs	r1, #4
 8008d00:	4809      	ldr	r0, [pc, #36]	; (8008d28 <LCD_IO_Init+0xec>)
 8008d02:	f7f8 fe9b 	bl	8001a3c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8008d06:	2201      	movs	r2, #1
 8008d08:	2104      	movs	r1, #4
 8008d0a:	4807      	ldr	r0, [pc, #28]	; (8008d28 <LCD_IO_Init+0xec>)
 8008d0c:	f7f8 fe96 	bl	8001a3c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8008d10:	f7ff fed6 	bl	8008ac0 <SPIx_Init>
  }
}
 8008d14:	bf00      	nop
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20003eb8 	.word	0x20003eb8
 8008d20:	40023800 	.word	0x40023800
 8008d24:	40020c00 	.word	0x40020c00
 8008d28:	40020800 	.word	0x40020800

08008d2c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008d36:	2201      	movs	r2, #1
 8008d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d3c:	480a      	ldr	r0, [pc, #40]	; (8008d68 <LCD_IO_WriteData+0x3c>)
 8008d3e:	f7f8 fe7d 	bl	8001a3c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8008d42:	2200      	movs	r2, #0
 8008d44:	2104      	movs	r1, #4
 8008d46:	4809      	ldr	r0, [pc, #36]	; (8008d6c <LCD_IO_WriteData+0x40>)
 8008d48:	f7f8 fe78 	bl	8001a3c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff ff10 	bl	8008b74 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008d54:	2201      	movs	r2, #1
 8008d56:	2104      	movs	r1, #4
 8008d58:	4804      	ldr	r0, [pc, #16]	; (8008d6c <LCD_IO_WriteData+0x40>)
 8008d5a:	f7f8 fe6f 	bl	8001a3c <HAL_GPIO_WritePin>
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40020c00 	.word	0x40020c00
 8008d6c:	40020800 	.word	0x40020800

08008d70 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d80:	480a      	ldr	r0, [pc, #40]	; (8008dac <LCD_IO_WriteReg+0x3c>)
 8008d82:	f7f8 fe5b 	bl	8001a3c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8008d86:	2200      	movs	r2, #0
 8008d88:	2104      	movs	r1, #4
 8008d8a:	4809      	ldr	r0, [pc, #36]	; (8008db0 <LCD_IO_WriteReg+0x40>)
 8008d8c:	f7f8 fe56 	bl	8001a3c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff feed 	bl	8008b74 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	4804      	ldr	r0, [pc, #16]	; (8008db0 <LCD_IO_WriteReg+0x40>)
 8008da0:	f7f8 fe4c 	bl	8001a3c <HAL_GPIO_WritePin>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	40020c00 	.word	0x40020c00
 8008db0:	40020800 	.word	0x40020800

08008db4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	80fb      	strh	r3, [r7, #6]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2104      	movs	r1, #4
 8008dcc:	4810      	ldr	r0, [pc, #64]	; (8008e10 <LCD_IO_ReadData+0x5c>)
 8008dce:	f7f8 fe35 	bl	8001a3c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dd8:	480e      	ldr	r0, [pc, #56]	; (8008e14 <LCD_IO_ReadData+0x60>)
 8008dda:	f7f8 fe2f 	bl	8001a3c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8008dde:	88fb      	ldrh	r3, [r7, #6]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fec7 	bl	8008b74 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8008de6:	797b      	ldrb	r3, [r7, #5]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff fea3 	bl	8008b34 <SPIx_Read>
 8008dee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008df0:	2201      	movs	r2, #1
 8008df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008df6:	4807      	ldr	r0, [pc, #28]	; (8008e14 <LCD_IO_ReadData+0x60>)
 8008df8:	f7f8 fe20 	bl	8001a3c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	2104      	movs	r1, #4
 8008e00:	4803      	ldr	r0, [pc, #12]	; (8008e10 <LCD_IO_ReadData+0x5c>)
 8008e02:	f7f8 fe1b 	bl	8001a3c <HAL_GPIO_WritePin>
  
  return readvalue;
 8008e06:	68fb      	ldr	r3, [r7, #12]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	40020800 	.word	0x40020800
 8008e14:	40020c00 	.word	0x40020c00

08008e18 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7f7 ffc9 	bl	8000db8 <HAL_Delay>
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8008e32:	f7ff fd51 	bl	80088d8 <I2Cx_Init>
}
 8008e36:	bf00      	nop
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8008e3e:	f7ff fd7d 	bl	800893c <I2Cx_ITConfig>
}
 8008e42:	bf00      	nop
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	71fb      	strb	r3, [r7, #7]
 8008e50:	460b      	mov	r3, r1
 8008e52:	71bb      	strb	r3, [r7, #6]
 8008e54:	4613      	mov	r3, r2
 8008e56:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8008e58:	797a      	ldrb	r2, [r7, #5]
 8008e5a:	79b9      	ldrb	r1, [r7, #6]
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fd9e 	bl	80089a0 <I2Cx_WriteData>
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	460a      	mov	r2, r1
 8008e76:	71fb      	strb	r3, [r7, #7]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8008e7c:	79ba      	ldrb	r2, [r7, #6]
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fdb6 	bl	80089f4 <I2Cx_ReadData>
 8008e88:	4603      	mov	r3, r0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	603a      	str	r2, [r7, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	71fb      	strb	r3, [r7, #7]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	71bb      	strb	r3, [r7, #6]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8008ea8:	88bb      	ldrh	r3, [r7, #4]
 8008eaa:	79b9      	ldrb	r1, [r7, #6]
 8008eac:	79f8      	ldrb	r0, [r7, #7]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	f7ff fdcc 	bl	8008a4c <I2Cx_ReadBuffer>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	b29b      	uxth	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7f7 ff75 	bl	8000db8 <HAL_Delay>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <LTDCSetup>:
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c);
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex);
static void ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize,
		uint32_t ColorMode);
void LTDCSetup(LTDC_HandleTypeDef* arg_wsk) {
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
	LtdcHandler = arg_wsk;
 8008ee0:	4a04      	ldr	r2, [pc, #16]	; (8008ef4 <LTDCSetup+0x1c>)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6013      	str	r3, [r2, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	200041a0 	.word	0x200041a0

08008ef8 <DMASetup>:
void DMASetup(DMA2D_HandleTypeDef* arg_wsk) {
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	Dma2dHandler = arg_wsk;
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <DMASetup+0x1c>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6013      	str	r3, [r2, #0]
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20003ebc 	.word	0x20003ebc

08008f18 <initILI9341>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */

void initILI9341() {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
	/* Select the device */
	LcdDrv = &ili9341_drv;
 8008f1c:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <initILI9341+0x18>)
 8008f1e:	4a05      	ldr	r2, [pc, #20]	; (8008f34 <initILI9341+0x1c>)
 8008f20:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8008f22:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <initILI9341+0x18>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4798      	blx	r3
}
 8008f2a:	bf00      	nop
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200041a4 	.word	0x200041a4
 8008f34:	2000001c 	.word	0x2000001c

08008f38 <BSP_LCD_GetXSize>:

/**
 * @brief  Gets the LCD X size.
 * @retval The used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelWidth();
 8008f3c:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <BSP_LCD_GetXSize+0x14>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	4798      	blx	r3
 8008f44:	4603      	mov	r3, r0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	200041a4 	.word	0x200041a4

08008f50 <BSP_LCD_GetYSize>:

/**
 * @brief  Gets the LCD Y size.
 * @retval The used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void) {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelHeight();
 8008f54:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <BSP_LCD_GetYSize+0x14>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	4798      	blx	r3
 8008f5c:	4603      	mov	r3, r0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	200041a4 	.word	0x200041a4

08008f68 <BSP_LCD_LayerDefaultInit>:
/**
 * @brief  Initializes the LCD layers.
 * @param  LayerIndex: the layer foreground or background.
 * @param  FB_Address: the layer frame buffer.
 */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b090      	sub	sp, #64	; 0x40
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	80fb      	strh	r3, [r7, #6]
	LCD_LayerCfgTypeDef Layercfg;

	/* Layer Init */
	Layercfg.WindowX0 = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]
	Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8008f78:	f7ff ffde 	bl	8008f38 <BSP_LCD_GetXSize>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	613b      	str	r3, [r7, #16]
	Layercfg.WindowY0 = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	617b      	str	r3, [r7, #20]
	Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8008f84:	f7ff ffe4 	bl	8008f50 <BSP_LCD_GetYSize>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	61bb      	str	r3, [r7, #24]
	Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	61fb      	str	r3, [r7, #28]
	Layercfg.FBStartAdress = FB_Address;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	633b      	str	r3, [r7, #48]	; 0x30
	Layercfg.Alpha = 255;
 8008f94:	23ff      	movs	r3, #255	; 0xff
 8008f96:	623b      	str	r3, [r7, #32]
	Layercfg.Alpha0 = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
	Layercfg.Backcolor.Blue = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Layercfg.Backcolor.Green = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	Layercfg.Backcolor.Red = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008fae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008fb4:	2307      	movs	r3, #7
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8008fb8:	f7ff ffbe 	bl	8008f38 <BSP_LCD_GetXSize>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
	Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8008fc0:	f7ff ffc6 	bl	8008f50 <BSP_LCD_GetYSize>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_LTDC_ConfigLayer(LtdcHandler, &Layercfg, LayerIndex);
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <BSP_LCD_LayerDefaultInit+0xc0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	f107 010c 	add.w	r1, r7, #12
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7f9 fe6c 	bl	8002cb0 <HAL_LTDC_ConfigLayer>

	DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008fd8:	88fa      	ldrh	r2, [r7, #6]
 8008fda:	4914      	ldr	r1, [pc, #80]	; (800902c <BSP_LCD_LayerDefaultInit+0xc4>)
 8008fdc:	4613      	mov	r3, r2
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].pFont = &Font24;
 8008fee:	88fa      	ldrh	r2, [r7, #6]
 8008ff0:	490e      	ldr	r1, [pc, #56]	; (800902c <BSP_LCD_LayerDefaultInit+0xc4>)
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <BSP_LCD_LayerDefaultInit+0xc8>)
 8009000:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	4909      	ldr	r1, [pc, #36]	; (800902c <BSP_LCD_LayerDefaultInit+0xc4>)
 8009006:	4613      	mov	r3, r2
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009014:	601a      	str	r2, [r3, #0]

	/* Dithering activation */
	HAL_LTDC_EnableDither(LtdcHandler);
 8009016:	4b04      	ldr	r3, [pc, #16]	; (8009028 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f7f9 fe86 	bl	8002d2c <HAL_LTDC_EnableDither>
}
 8009020:	bf00      	nop
 8009022:	3740      	adds	r7, #64	; 0x40
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	200041a0 	.word	0x200041a0
 800902c:	20003ec4 	.word	0x20003ec4
 8009030:	20000010 	.word	0x20000010

08009034 <BSP_LCD_SelectLayer>:

/**
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: the Layer foreground or background.
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex) {
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 800903c:	4a04      	ldr	r2, [pc, #16]	; (8009050 <BSP_LCD_SelectLayer+0x1c>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20003ec0 	.word	0x20003ec0

08009054 <BSP_LCD_SetTextColor>:

/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetTextColor(uint32_t Color) {
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <BSP_LCD_SetTextColor+0x28>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	4907      	ldr	r1, [pc, #28]	; (8009080 <BSP_LCD_SetTextColor+0x2c>)
 8009062:	4613      	mov	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	601a      	str	r2, [r3, #0]
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	20003ec0 	.word	0x20003ec0
 8009080:	20003ec4 	.word	0x20003ec4

08009084 <BSP_LCD_SetBackColor>:

/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetBackColor(uint32_t Color) {
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 800908c:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <BSP_LCD_SetBackColor+0x2c>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	4908      	ldr	r1, [pc, #32]	; (80090b4 <BSP_LCD_SetBackColor+0x30>)
 8009092:	4613      	mov	r3, r2
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	3304      	adds	r3, #4
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]
}
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20003ec0 	.word	0x20003ec0
 80090b4:	20003ec4 	.word	0x20003ec4

080090b8 <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 80090c0:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <BSP_LCD_SetFont+0x2c>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	4908      	ldr	r1, [pc, #32]	; (80090e8 <BSP_LCD_SetFont+0x30>)
 80090c6:	4613      	mov	r3, r2
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3308      	adds	r3, #8
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	601a      	str	r2, [r3, #0]
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20003ec0 	.word	0x20003ec0
 80090e8:	20003ec4 	.word	0x20003ec4

080090ec <BSP_LCD_Clear>:

/**
 * @brief  Clears the hole LCD.
 * @param  Color: the color of the background
 */
void BSP_LCD_Clear(uint32_t Color) {
 80090ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	FillBuffer(ActiveLayer,
 80090f4:	4b10      	ldr	r3, [pc, #64]	; (8009138 <BSP_LCD_Clear+0x4c>)
 80090f6:	681c      	ldr	r4, [r3, #0]
			(uint32_t *) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress),
 80090f8:	4b10      	ldr	r3, [pc, #64]	; (800913c <BSP_LCD_Clear+0x50>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <BSP_LCD_Clear+0x4c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2134      	movs	r1, #52	; 0x34
 8009102:	fb01 f303 	mul.w	r3, r1, r3
 8009106:	4413      	add	r3, r2
 8009108:	335c      	adds	r3, #92	; 0x5c
 800910a:	681b      	ldr	r3, [r3, #0]
	FillBuffer(ActiveLayer,
 800910c:	461d      	mov	r5, r3
 800910e:	f7ff ff13 	bl	8008f38 <BSP_LCD_GetXSize>
 8009112:	4606      	mov	r6, r0
 8009114:	f7ff ff1c 	bl	8008f50 <BSP_LCD_GetYSize>
 8009118:	4602      	mov	r2, r0
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	2300      	movs	r3, #0
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	4613      	mov	r3, r2
 8009124:	4632      	mov	r2, r6
 8009126:	4629      	mov	r1, r5
 8009128:	4620      	mov	r0, r4
 800912a:	f000 fc13 	bl	8009954 <FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009136:	bf00      	nop
 8009138:	20003ec0 	.word	0x20003ec0
 800913c:	200041a0 	.word	0x200041a0

08009140 <BSP_LCD_DisplayChar>:
 * @brief  Displays one character.
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	80fb      	strh	r3, [r7, #6]
 800914a:	460b      	mov	r3, r1
 800914c:	80bb      	strh	r3, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos,
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8009152:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <BSP_LCD_DisplayChar+0x80>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	491b      	ldr	r1, [pc, #108]	; (80091c4 <BSP_LCD_DisplayChar+0x84>)
 8009158:	4613      	mov	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	3308      	adds	r3, #8
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	f1a3 0020 	sub.w	r0, r3, #32
					*\
 DrawProp[ActiveLayer].pFont->Height
 800916e:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <BSP_LCD_DisplayChar+0x80>)
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4c14      	ldr	r4, [pc, #80]	; (80091c4 <BSP_LCD_DisplayChar+0x84>)
 8009174:	4613      	mov	r3, r2
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4423      	add	r3, r4
 800917e:	3308      	adds	r3, #8
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	88db      	ldrh	r3, [r3, #6]
					*\
 8009184:	fb03 f000 	mul.w	r0, r3, r0
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <BSP_LCD_DisplayChar+0x80>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	4c0d      	ldr	r4, [pc, #52]	; (80091c4 <BSP_LCD_DisplayChar+0x84>)
 800918e:	4613      	mov	r3, r2
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4423      	add	r3, r4
 8009198:	3308      	adds	r3, #8
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	889b      	ldrh	r3, [r3, #4]
 800919e:	3307      	adds	r3, #7
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	da00      	bge.n	80091a6 <BSP_LCD_DisplayChar+0x66>
 80091a4:	3307      	adds	r3, #7
 80091a6:	10db      	asrs	r3, r3, #3
 80091a8:	fb03 f300 	mul.w	r3, r3, r0
	DrawChar(Xpos, Ypos,
 80091ac:	18ca      	adds	r2, r1, r3
 80091ae:	88b9      	ldrh	r1, [r7, #4]
 80091b0:	88fb      	ldrh	r3, [r7, #6]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fb14 	bl	80097e0 <DrawChar>
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}
 80091c0:	20003ec0 	.word	0x20003ec0
 80091c4:	20003ec4 	.word	0x20003ec4

080091c8 <BSP_LCD_DisplayStringAt>:
 *                @arg CENTER_MODE
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 80091c8:	b5b0      	push	{r4, r5, r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60ba      	str	r2, [r7, #8]
 80091d0:	461a      	mov	r2, r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	81fb      	strh	r3, [r7, #14]
 80091d6:	460b      	mov	r3, r1
 80091d8:	81bb      	strh	r3, [r7, #12]
 80091da:	4613      	mov	r3, r2
 80091dc:	71fb      	strb	r3, [r7, #7]
	uint16_t refcolumn = 1, i = 0;
 80091de:	2301      	movs	r3, #1
 80091e0:	83fb      	strh	r3, [r7, #30]
 80091e2:	2300      	movs	r3, #0
 80091e4:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	61bb      	str	r3, [r7, #24]
 80091ea:	2300      	movs	r3, #0
 80091ec:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 80091f2:	e002      	b.n	80091fa <BSP_LCD_DisplayStringAt+0x32>
		size++;
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	617a      	str	r2, [r7, #20]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f6      	bne.n	80091f4 <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8009206:	f7ff fe97 	bl	8008f38 <BSP_LCD_GetXSize>
 800920a:	4b4a      	ldr	r3, [pc, #296]	; (8009334 <BSP_LCD_DisplayStringAt+0x16c>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	494a      	ldr	r1, [pc, #296]	; (8009338 <BSP_LCD_DisplayStringAt+0x170>)
 8009210:	4613      	mov	r3, r2
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3308      	adds	r3, #8
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	889b      	ldrh	r3, [r3, #4]
 8009220:	fbb0 f3f3 	udiv	r3, r0, r3
 8009224:	613b      	str	r3, [r7, #16]

	switch (mode) {
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d01c      	beq.n	8009266 <BSP_LCD_DisplayStringAt+0x9e>
 800922c:	2b03      	cmp	r3, #3
 800922e:	d017      	beq.n	8009260 <BSP_LCD_DisplayStringAt+0x98>
 8009230:	2b01      	cmp	r3, #1
 8009232:	d12e      	bne.n	8009292 <BSP_LCD_DisplayStringAt+0xca>
	case CENTER_MODE: {
		refcolumn = X
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	1ad1      	subs	r1, r2, r3
 800923a:	4b3e      	ldr	r3, [pc, #248]	; (8009334 <BSP_LCD_DisplayStringAt+0x16c>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	483e      	ldr	r0, [pc, #248]	; (8009338 <BSP_LCD_DisplayStringAt+0x170>)
 8009240:	4613      	mov	r3, r2
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4403      	add	r3, r0
 800924a:	3308      	adds	r3, #8
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	889b      	ldrh	r3, [r3, #4]
 8009250:	fb03 f301 	mul.w	r3, r3, r1
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	b29a      	uxth	r2, r3
		refcolumn = X
 8009258:	89fb      	ldrh	r3, [r7, #14]
 800925a:	4413      	add	r3, r2
 800925c:	83fb      	strh	r3, [r7, #30]
		break;
 800925e:	e01b      	b.n	8009298 <BSP_LCD_DisplayStringAt+0xd0>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8009260:	89fb      	ldrh	r3, [r7, #14]
 8009262:	83fb      	strh	r3, [r7, #30]
		break;
 8009264:	e018      	b.n	8009298 <BSP_LCD_DisplayStringAt+0xd0>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	b299      	uxth	r1, r3
 800926e:	4b31      	ldr	r3, [pc, #196]	; (8009334 <BSP_LCD_DisplayStringAt+0x16c>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4831      	ldr	r0, [pc, #196]	; (8009338 <BSP_LCD_DisplayStringAt+0x170>)
 8009274:	4613      	mov	r3, r2
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4403      	add	r3, r0
 800927e:	3308      	adds	r3, #8
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	889b      	ldrh	r3, [r3, #4]
 8009284:	fb11 f303 	smulbb	r3, r1, r3
 8009288:	b29a      	uxth	r2, r3
 800928a:	89fb      	ldrh	r3, [r7, #14]
 800928c:	4413      	add	r3, r2
 800928e:	83fb      	strh	r3, [r7, #30]
		break;
 8009290:	e002      	b.n	8009298 <BSP_LCD_DisplayStringAt+0xd0>
	}
	default: {
		refcolumn = X;
 8009292:	89fb      	ldrh	r3, [r7, #14]
 8009294:	83fb      	strh	r3, [r7, #30]
		break;
 8009296:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8009298:	e01a      	b.n	80092d0 <BSP_LCD_DisplayStringAt+0x108>
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	89b9      	ldrh	r1, [r7, #12]
 80092a0:	8bfb      	ldrh	r3, [r7, #30]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff ff4c 	bl	8009140 <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <BSP_LCD_DisplayStringAt+0x16c>)
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	4922      	ldr	r1, [pc, #136]	; (8009338 <BSP_LCD_DisplayStringAt+0x170>)
 80092ae:	4613      	mov	r3, r2
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	3308      	adds	r3, #8
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	889a      	ldrh	r2, [r3, #4]
 80092be:	8bfb      	ldrh	r3, [r7, #30]
 80092c0:	4413      	add	r3, r2
 80092c2:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	3301      	adds	r3, #1
 80092c8:	60bb      	str	r3, [r7, #8]
		i++;
 80092ca:	8bbb      	ldrh	r3, [r7, #28]
 80092cc:	3301      	adds	r3, #1
 80092ce:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	781b      	ldrb	r3, [r3, #0]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bf14      	ite	ne
 80092d8:	2301      	movne	r3, #1
 80092da:	2300      	moveq	r3, #0
 80092dc:	b2dc      	uxtb	r4, r3
 80092de:	f7ff fe2b 	bl	8008f38 <BSP_LCD_GetXSize>
 80092e2:	4605      	mov	r5, r0
 80092e4:	8bb9      	ldrh	r1, [r7, #28]
 80092e6:	4b13      	ldr	r3, [pc, #76]	; (8009334 <BSP_LCD_DisplayStringAt+0x16c>)
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	4813      	ldr	r0, [pc, #76]	; (8009338 <BSP_LCD_DisplayStringAt+0x170>)
 80092ec:	4613      	mov	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4403      	add	r3, r0
 80092f6:	3308      	adds	r3, #8
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	889b      	ldrh	r3, [r3, #4]
 80092fc:	fb03 f301 	mul.w	r3, r3, r1
 8009300:	1aeb      	subs	r3, r5, r3
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 8009302:	b299      	uxth	r1, r3
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <BSP_LCD_DisplayStringAt+0x16c>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	480b      	ldr	r0, [pc, #44]	; (8009338 <BSP_LCD_DisplayStringAt+0x170>)
 800930a:	4613      	mov	r3, r2
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	4413      	add	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4403      	add	r3, r0
 8009314:	3308      	adds	r3, #8
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	889b      	ldrh	r3, [r3, #4]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 800931a:	4299      	cmp	r1, r3
 800931c:	bf2c      	ite	cs
 800931e:	2301      	movcs	r3, #1
 8009320:	2300      	movcc	r3, #0
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4023      	ands	r3, r4
 8009326:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1b6      	bne.n	800929a <BSP_LCD_DisplayStringAt+0xd2>
	}
}
 800932c:	bf00      	nop
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bdb0      	pop	{r4, r5, r7, pc}
 8009334:	20003ec0 	.word	0x20003ec0
 8009338:	20003ec4 	.word	0x20003ec4

0800933c <BSP_LCD_DrawHLine>:
 * @brief  Displays an horizontal line.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Length: line length
 */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length) {
 800933c:	b5b0      	push	{r4, r5, r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af02      	add	r7, sp, #8
 8009342:	4603      	mov	r3, r0
 8009344:	80fb      	strh	r3, [r7, #6]
 8009346:	460b      	mov	r3, r1
 8009348:	80bb      	strh	r3, [r7, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	807b      	strh	r3, [r7, #2]
	uint32_t xaddress = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]

	/* Get the line address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009352:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <BSP_LCD_DrawHLine+0x74>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b17      	ldr	r3, [pc, #92]	; (80093b4 <BSP_LCD_DrawHLine+0x78>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2134      	movs	r1, #52	; 0x34
 800935c:	fb01 f303 	mul.w	r3, r1, r3
 8009360:	4413      	add	r3, r2
 8009362:	335c      	adds	r3, #92	; 0x5c
 8009364:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8009366:	f7ff fde7 	bl	8008f38 <BSP_LCD_GetXSize>
 800936a:	4602      	mov	r2, r0
 800936c:	88bb      	ldrh	r3, [r7, #4]
 800936e:	fb03 f202 	mul.w	r2, r3, r2
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8009378:	4423      	add	r3, r4
 800937a:	60fb      	str	r3, [r7, #12]

	/* Write line */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Length, 1, 0,
 800937c:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <BSP_LCD_DrawHLine+0x78>)
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	68fc      	ldr	r4, [r7, #12]
 8009382:	887d      	ldrh	r5, [r7, #2]
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <BSP_LCD_DrawHLine+0x78>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	490b      	ldr	r1, [pc, #44]	; (80093b8 <BSP_LCD_DrawHLine+0x7c>)
 800938a:	4613      	mov	r3, r2
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	440b      	add	r3, r1
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	2300      	movs	r3, #0
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	2301      	movs	r3, #1
 800939e:	462a      	mov	r2, r5
 80093a0:	4621      	mov	r1, r4
 80093a2:	f000 fad7 	bl	8009954 <FillBuffer>
			DrawProp[ActiveLayer].TextColor);
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bdb0      	pop	{r4, r5, r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200041a0 	.word	0x200041a0
 80093b4:	20003ec0 	.word	0x20003ec0
 80093b8:	20003ec4 	.word	0x20003ec4

080093bc <BSP_LCD_DrawCircle>:
 * @brief  Displays a circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	80fb      	strh	r3, [r7, #6]
 80093c6:	460b      	mov	r3, r1
 80093c8:	80bb      	strh	r3, [r7, #4]
 80093ca:	4613      	mov	r3, r2
 80093cc:	807b      	strh	r3, [r7, #2]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 80093ce:	887b      	ldrh	r3, [r7, #2]
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	f1c3 0303 	rsb	r3, r3, #3
 80093d6:	617b      	str	r3, [r7, #20]
	curx = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
	cury = Radius;
 80093dc:	887b      	ldrh	r3, [r7, #2]
 80093de:	60fb      	str	r3, [r7, #12]

	while (curx <= cury) {
 80093e0:	e0cf      	b.n	8009582 <BSP_LCD_DrawCircle+0x1c6>
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury),
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	4413      	add	r3, r2
 80093ea:	b298      	uxth	r0, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	88ba      	ldrh	r2, [r7, #4]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	b29c      	uxth	r4, r3
 80093f6:	4b67      	ldr	r3, [pc, #412]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4967      	ldr	r1, [pc, #412]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 80093fc:	4613      	mov	r3, r2
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	440b      	add	r3, r1
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	4621      	mov	r1, r4
 800940c:	f000 f9c0 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury),
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	b29b      	uxth	r3, r3
 8009414:	88fa      	ldrh	r2, [r7, #6]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	b298      	uxth	r0, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	b29b      	uxth	r3, r3
 800941e:	88ba      	ldrh	r2, [r7, #4]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	b29c      	uxth	r4, r3
 8009424:	4b5b      	ldr	r3, [pc, #364]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	495b      	ldr	r1, [pc, #364]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 800942a:	4613      	mov	r3, r2
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	4621      	mov	r1, r4
 800943a:	f000 f9a9 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx),
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	b29a      	uxth	r2, r3
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	4413      	add	r3, r2
 8009446:	b298      	uxth	r0, r3
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	b29b      	uxth	r3, r3
 800944c:	88ba      	ldrh	r2, [r7, #4]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	b29c      	uxth	r4, r3
 8009452:	4b50      	ldr	r3, [pc, #320]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	4950      	ldr	r1, [pc, #320]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 8009458:	4613      	mov	r3, r2
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	4621      	mov	r1, r4
 8009468:	f000 f992 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx),
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	b29b      	uxth	r3, r3
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	b298      	uxth	r0, r3
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	b29b      	uxth	r3, r3
 800947a:	88ba      	ldrh	r2, [r7, #4]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	b29c      	uxth	r4, r3
 8009480:	4b44      	ldr	r3, [pc, #272]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4944      	ldr	r1, [pc, #272]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 8009486:	4613      	mov	r3, r2
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	440b      	add	r3, r1
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	4621      	mov	r1, r4
 8009496:	f000 f97b 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury),
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	b29a      	uxth	r2, r3
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	4413      	add	r3, r2
 80094a2:	b298      	uxth	r0, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	88bb      	ldrh	r3, [r7, #4]
 80094aa:	4413      	add	r3, r2
 80094ac:	b29c      	uxth	r4, r3
 80094ae:	4b39      	ldr	r3, [pc, #228]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4939      	ldr	r1, [pc, #228]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 80094b4:	4613      	mov	r3, r2
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	4621      	mov	r1, r4
 80094c4:	f000 f964 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury),
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	b298      	uxth	r0, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	88bb      	ldrh	r3, [r7, #4]
 80094d8:	4413      	add	r3, r2
 80094da:	b29c      	uxth	r4, r3
 80094dc:	4b2d      	ldr	r3, [pc, #180]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	492d      	ldr	r1, [pc, #180]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 80094e2:	4613      	mov	r3, r2
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	4621      	mov	r1, r4
 80094f2:	f000 f94d 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx),
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	4413      	add	r3, r2
 80094fe:	b298      	uxth	r0, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	b29a      	uxth	r2, r3
 8009504:	88bb      	ldrh	r3, [r7, #4]
 8009506:	4413      	add	r3, r2
 8009508:	b29c      	uxth	r4, r3
 800950a:	4b22      	ldr	r3, [pc, #136]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4922      	ldr	r1, [pc, #136]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 8009510:	4613      	mov	r3, r2
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	4621      	mov	r1, r4
 8009520:	f000 f936 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx),
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	b29b      	uxth	r3, r3
 8009528:	88fa      	ldrh	r2, [r7, #6]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	b298      	uxth	r0, r3
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	b29a      	uxth	r2, r3
 8009532:	88bb      	ldrh	r3, [r7, #4]
 8009534:	4413      	add	r3, r2
 8009536:	b29c      	uxth	r4, r3
 8009538:	4b16      	ldr	r3, [pc, #88]	; (8009594 <BSP_LCD_DrawCircle+0x1d8>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	4916      	ldr	r1, [pc, #88]	; (8009598 <BSP_LCD_DrawCircle+0x1dc>)
 800953e:	4613      	mov	r3, r2
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	4621      	mov	r1, r4
 800954e:	f000 f91f 	bl	8009790 <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);

		if (d < 0) {
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	da06      	bge.n	8009566 <BSP_LCD_DrawCircle+0x1aa>
			d += (curx << 2) + 6;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	009a      	lsls	r2, r3, #2
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	4413      	add	r3, r2
 8009560:	3306      	adds	r3, #6
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e00a      	b.n	800957c <BSP_LCD_DrawCircle+0x1c0>
		} else {
			d += ((curx - cury) << 2) + 10;
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	009a      	lsls	r2, r3, #2
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	4413      	add	r3, r2
 8009572:	330a      	adds	r3, #10
 8009574:	617b      	str	r3, [r7, #20]
			cury--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b01      	subs	r3, #1
 800957a:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	3301      	adds	r3, #1
 8009580:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	429a      	cmp	r2, r3
 8009588:	f67f af2b 	bls.w	80093e2 <BSP_LCD_DrawCircle+0x26>
	}
}
 800958c:	bf00      	nop
 800958e:	371c      	adds	r7, #28
 8009590:	46bd      	mov	sp, r7
 8009592:	bd90      	pop	{r4, r7, pc}
 8009594:	20003ec0 	.word	0x20003ec0
 8009598:	20003ec4 	.word	0x20003ec4

0800959c <BSP_LCD_FillRect>:
 * @param  Ypos: the Y position
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height) {
 800959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af02      	add	r7, sp, #8
 80095a4:	4604      	mov	r4, r0
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	461a      	mov	r2, r3
 80095ac:	4623      	mov	r3, r4
 80095ae:	80fb      	strh	r3, [r7, #6]
 80095b0:	4603      	mov	r3, r0
 80095b2:	80bb      	strh	r3, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	807b      	strh	r3, [r7, #2]
 80095b8:	4613      	mov	r3, r2
 80095ba:	803b      	strh	r3, [r7, #0]
	uint32_t xaddress = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80095c0:	4b20      	ldr	r3, [pc, #128]	; (8009644 <BSP_LCD_FillRect+0xa8>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	4920      	ldr	r1, [pc, #128]	; (8009648 <BSP_LCD_FillRect+0xac>)
 80095c6:	4613      	mov	r3, r2
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff fd3e 	bl	8009054 <BSP_LCD_SetTextColor>

	/* Get the rectangle start address */
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 80095d8:	4b1c      	ldr	r3, [pc, #112]	; (800964c <BSP_LCD_FillRect+0xb0>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	4b19      	ldr	r3, [pc, #100]	; (8009644 <BSP_LCD_FillRect+0xa8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2134      	movs	r1, #52	; 0x34
 80095e2:	fb01 f303 	mul.w	r3, r1, r3
 80095e6:	4413      	add	r3, r2
 80095e8:	335c      	adds	r3, #92	; 0x5c
 80095ea:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80095ec:	f7ff fca4 	bl	8008f38 <BSP_LCD_GetXSize>
 80095f0:	4602      	mov	r2, r0
 80095f2:	88bb      	ldrh	r3, [r7, #4]
 80095f4:	fb03 f202 	mul.w	r2, r3, r2
 80095f8:	88fb      	ldrh	r3, [r7, #6]
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 80095fe:	4423      	add	r3, r4
 8009600:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009602:	4b10      	ldr	r3, [pc, #64]	; (8009644 <BSP_LCD_FillRect+0xa8>)
 8009604:	681c      	ldr	r4, [r3, #0]
 8009606:	68fd      	ldr	r5, [r7, #12]
 8009608:	887e      	ldrh	r6, [r7, #2]
 800960a:	f8b7 8000 	ldrh.w	r8, [r7]
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800960e:	f7ff fc93 	bl	8008f38 <BSP_LCD_GetXSize>
 8009612:	4602      	mov	r2, r0
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8009614:	887b      	ldrh	r3, [r7, #2]
 8009616:	1ad1      	subs	r1, r2, r3
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <BSP_LCD_FillRect+0xa8>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	480a      	ldr	r0, [pc, #40]	; (8009648 <BSP_LCD_FillRect+0xac>)
 800961e:	4613      	mov	r3, r2
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4403      	add	r3, r0
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	9100      	str	r1, [sp, #0]
 800962e:	4643      	mov	r3, r8
 8009630:	4632      	mov	r2, r6
 8009632:	4629      	mov	r1, r5
 8009634:	4620      	mov	r0, r4
 8009636:	f000 f98d 	bl	8009954 <FillBuffer>
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009644:	20003ec0 	.word	0x20003ec0
 8009648:	20003ec4 	.word	0x20003ec4
 800964c:	200041a0 	.word	0x200041a0

08009650 <BSP_LCD_FillCircle>:
 * @brief  Displays a full circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	80fb      	strh	r3, [r7, #6]
 800965a:	460b      	mov	r3, r1
 800965c:	80bb      	strh	r3, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	807b      	strh	r3, [r7, #2]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8009662:	887b      	ldrh	r3, [r7, #2]
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	f1c3 0303 	rsb	r3, r3, #3
 800966a:	617b      	str	r3, [r7, #20]

	curx = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
	cury = Radius;
 8009670:	887b      	ldrh	r3, [r7, #2]
 8009672:	60fb      	str	r3, [r7, #12]

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009674:	4b44      	ldr	r3, [pc, #272]	; (8009788 <BSP_LCD_FillCircle+0x138>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	4944      	ldr	r1, [pc, #272]	; (800978c <BSP_LCD_FillCircle+0x13c>)
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	440b      	add	r3, r1
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff fce4 	bl	8009054 <BSP_LCD_SetTextColor>

	while (curx <= cury) {
 800968c:	e061      	b.n	8009752 <BSP_LCD_FillCircle+0x102>
		if (cury > 0) {
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d021      	beq.n	80096d8 <BSP_LCD_FillCircle+0x88>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	b29b      	uxth	r3, r3
 8009698:	88fa      	ldrh	r2, [r7, #6]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	b298      	uxth	r0, r3
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	88bb      	ldrh	r3, [r7, #4]
 80096a4:	4413      	add	r3, r2
 80096a6:	b299      	uxth	r1, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	461a      	mov	r2, r3
 80096b2:	f7ff fe43 	bl	800933c <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	88fa      	ldrh	r2, [r7, #6]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	b298      	uxth	r0, r3
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	88ba      	ldrh	r2, [r7, #4]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	b299      	uxth	r1, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	f7ff fe32 	bl	800933c <BSP_LCD_DrawHLine>
		}

		if (curx > 0) {
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d021      	beq.n	8009722 <BSP_LCD_FillCircle+0xd2>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	88fa      	ldrh	r2, [r7, #6]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	b298      	uxth	r0, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	88ba      	ldrh	r2, [r7, #4]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	b299      	uxth	r1, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	461a      	mov	r2, r3
 80096fc:	f7ff fe1e 	bl	800933c <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	b29b      	uxth	r3, r3
 8009704:	88fa      	ldrh	r2, [r7, #6]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	b298      	uxth	r0, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	b29a      	uxth	r2, r3
 800970e:	88bb      	ldrh	r3, [r7, #4]
 8009710:	4413      	add	r3, r2
 8009712:	b299      	uxth	r1, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	b29b      	uxth	r3, r3
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	f7ff fe0d 	bl	800933c <BSP_LCD_DrawHLine>
		}
		if (d < 0) {
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	da06      	bge.n	8009736 <BSP_LCD_FillCircle+0xe6>
			d += (curx << 2) + 6;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	009a      	lsls	r2, r3, #2
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	4413      	add	r3, r2
 8009730:	3306      	adds	r3, #6
 8009732:	617b      	str	r3, [r7, #20]
 8009734:	e00a      	b.n	800974c <BSP_LCD_FillCircle+0xfc>
		} else {
			d += ((curx - cury) << 2) + 10;
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	009a      	lsls	r2, r3, #2
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	4413      	add	r3, r2
 8009742:	330a      	adds	r3, #10
 8009744:	617b      	str	r3, [r7, #20]
			cury--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3b01      	subs	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3301      	adds	r3, #1
 8009750:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	429a      	cmp	r2, r3
 8009758:	d999      	bls.n	800968e <BSP_LCD_FillCircle+0x3e>
	}

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <BSP_LCD_FillCircle+0x138>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	490b      	ldr	r1, [pc, #44]	; (800978c <BSP_LCD_FillCircle+0x13c>)
 8009760:	4613      	mov	r3, r2
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff fc71 	bl	8009054 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8009772:	887a      	ldrh	r2, [r7, #2]
 8009774:	88b9      	ldrh	r1, [r7, #4]
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fe1f 	bl	80093bc <BSP_LCD_DrawCircle>
}
 800977e:	bf00      	nop
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20003ec0 	.word	0x20003ec0
 800978c:	20003ec4 	.word	0x20003ec4

08009790 <BSP_LCD_DrawPixel>:
 * @brief  Writes Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8009790:	b5b0      	push	{r4, r5, r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	603a      	str	r2, [r7, #0]
 800979a:	80fb      	strh	r3, [r7, #6]
 800979c:	460b      	mov	r3, r1
 800979e:	80bb      	strh	r3, [r7, #4]
	/* Write data value to all SDRAM memory */
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 80097a0:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <BSP_LCD_DrawPixel+0x48>)
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <BSP_LCD_DrawPixel+0x4c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2134      	movs	r1, #52	; 0x34
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	335c      	adds	r3, #92	; 0x5c
 80097b2:	681c      	ldr	r4, [r3, #0]
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80097b4:	88bd      	ldrh	r5, [r7, #4]
 80097b6:	f7ff fbbf 	bl	8008f38 <BSP_LCD_GetXSize>
 80097ba:	4603      	mov	r3, r0
 80097bc:	fb03 f205 	mul.w	r2, r3, r5
 80097c0:	88fb      	ldrh	r3, [r7, #6]
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4423      	add	r3, r4
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 80097c8:	461a      	mov	r2, r3
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6013      	str	r3, [r2, #0]
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bdb0      	pop	{r4, r5, r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200041a0 	.word	0x200041a0
 80097dc:	20003ec0 	.word	0x20003ec0

080097e0 <DrawChar>:
 * @brief  Draws a character on LCD.
 * @param  Xpos: the Line where to display the character shape
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	603a      	str	r2, [r7, #0]
 80097ea:	80fb      	strh	r3, [r7, #6]
 80097ec:	460b      	mov	r3, r1
 80097ee:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]

	height = DrawProp[ActiveLayer].pFont->Height;
 80097fc:	4b53      	ldr	r3, [pc, #332]	; (800994c <DrawChar+0x16c>)
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	4953      	ldr	r1, [pc, #332]	; (8009950 <DrawChar+0x170>)
 8009802:	4613      	mov	r3, r2
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	440b      	add	r3, r1
 800980c:	3308      	adds	r3, #8
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	88db      	ldrh	r3, [r3, #6]
 8009812:	827b      	strh	r3, [r7, #18]
	width = DrawProp[ActiveLayer].pFont->Width;
 8009814:	4b4d      	ldr	r3, [pc, #308]	; (800994c <DrawChar+0x16c>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	494d      	ldr	r1, [pc, #308]	; (8009950 <DrawChar+0x170>)
 800981a:	4613      	mov	r3, r2
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3308      	adds	r3, #8
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	889b      	ldrh	r3, [r3, #4]
 800982a:	823b      	strh	r3, [r7, #16]

	offset = 8 * ((width + 7) / 8) - width;
 800982c:	8a3b      	ldrh	r3, [r7, #16]
 800982e:	3307      	adds	r3, #7
 8009830:	2b00      	cmp	r3, #0
 8009832:	da00      	bge.n	8009836 <DrawChar+0x56>
 8009834:	3307      	adds	r3, #7
 8009836:	10db      	asrs	r3, r3, #3
 8009838:	b2db      	uxtb	r3, r3
 800983a:	00db      	lsls	r3, r3, #3
 800983c:	b2da      	uxtb	r2, r3
 800983e:	8a3b      	ldrh	r3, [r7, #16]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < height; i++) {
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	e076      	b.n	800993a <DrawChar+0x15a>
		pchar = ((uint8_t *) c + (width + 7) / 8 * i);
 800984c:	8a3b      	ldrh	r3, [r7, #16]
 800984e:	3307      	adds	r3, #7
 8009850:	2b00      	cmp	r3, #0
 8009852:	da00      	bge.n	8009856 <DrawChar+0x76>
 8009854:	3307      	adds	r3, #7
 8009856:	10db      	asrs	r3, r3, #3
 8009858:	461a      	mov	r2, r3
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	fb03 f302 	mul.w	r3, r3, r2
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	4413      	add	r3, r2
 8009864:	60bb      	str	r3, [r7, #8]

		switch (((width + 7) / 8)) {
 8009866:	8a3b      	ldrh	r3, [r7, #16]
 8009868:	3307      	adds	r3, #7
 800986a:	2b00      	cmp	r3, #0
 800986c:	da00      	bge.n	8009870 <DrawChar+0x90>
 800986e:	3307      	adds	r3, #7
 8009870:	10db      	asrs	r3, r3, #3
 8009872:	2b01      	cmp	r3, #1
 8009874:	d002      	beq.n	800987c <DrawChar+0x9c>
 8009876:	2b02      	cmp	r3, #2
 8009878:	d004      	beq.n	8009884 <DrawChar+0xa4>
 800987a:	e00c      	b.n	8009896 <DrawChar+0xb6>
		case 1:
			line = pchar[0];
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	617b      	str	r3, [r7, #20]
			break;
 8009882:	e016      	b.n	80098b2 <DrawChar+0xd2>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	3201      	adds	r2, #1
 800988e:	7812      	ldrb	r2, [r2, #0]
 8009890:	4313      	orrs	r3, r2
 8009892:	617b      	str	r3, [r7, #20]
			break;
 8009894:	e00d      	b.n	80098b2 <DrawChar+0xd2>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	041a      	lsls	r2, r3, #16
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	3301      	adds	r3, #1
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	021b      	lsls	r3, r3, #8
 80098a4:	4313      	orrs	r3, r2
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	3202      	adds	r2, #2
 80098aa:	7812      	ldrb	r2, [r2, #0]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]
			break;
 80098b0:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 80098b2:	2300      	movs	r3, #0
 80098b4:	61bb      	str	r3, [r7, #24]
 80098b6:	e036      	b.n	8009926 <DrawChar+0x146>
			if (line & (1 << (width - j + offset - 1))) {
 80098b8:	8a3a      	ldrh	r2, [r7, #16]
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4413      	add	r3, r2
 80098c2:	3b01      	subs	r3, #1
 80098c4:	2201      	movs	r2, #1
 80098c6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ca:	461a      	mov	r2, r3
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d012      	beq.n	80098fa <DrawChar+0x11a>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	4413      	add	r3, r2
 80098dc:	b298      	uxth	r0, r3
 80098de:	4b1b      	ldr	r3, [pc, #108]	; (800994c <DrawChar+0x16c>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	491b      	ldr	r1, [pc, #108]	; (8009950 <DrawChar+0x170>)
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	88bb      	ldrh	r3, [r7, #4]
 80098f2:	4619      	mov	r1, r3
 80098f4:	f7ff ff4c 	bl	8009790 <BSP_LCD_DrawPixel>
 80098f8:	e012      	b.n	8009920 <DrawChar+0x140>
						DrawProp[ActiveLayer].TextColor);
			} else {
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	4413      	add	r3, r2
 8009902:	b298      	uxth	r0, r3
 8009904:	4b11      	ldr	r3, [pc, #68]	; (800994c <DrawChar+0x16c>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	4911      	ldr	r1, [pc, #68]	; (8009950 <DrawChar+0x170>)
 800990a:	4613      	mov	r3, r2
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	4413      	add	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	440b      	add	r3, r1
 8009914:	3304      	adds	r3, #4
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	88bb      	ldrh	r3, [r7, #4]
 800991a:	4619      	mov	r1, r3
 800991c:	f7ff ff38 	bl	8009790 <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	3301      	adds	r3, #1
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	8a3a      	ldrh	r2, [r7, #16]
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	429a      	cmp	r2, r3
 800992c:	d8c4      	bhi.n	80098b8 <DrawChar+0xd8>
						DrawProp[ActiveLayer].BackColor);
			}
		}
		Ypos++;
 800992e:	88bb      	ldrh	r3, [r7, #4]
 8009930:	3301      	adds	r3, #1
 8009932:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < height; i++) {
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
 800993a:	8a7a      	ldrh	r2, [r7, #18]
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	429a      	cmp	r2, r3
 8009940:	d884      	bhi.n	800984c <DrawChar+0x6c>
	}
}
 8009942:	bf00      	nop
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20003ec0 	.word	0x20003ec0
 8009950:	20003ec4 	.word	0x20003ec4

08009954 <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]

	/* Register to memory mode with ARGB8888 as color Mode */

	Dma2dHandler->Init.Mode = DMA2D_R2M;
 8009962:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <FillBuffer+0x78>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800996a:	605a      	str	r2, [r3, #4]
	Dma2dHandler->Init.ColorMode = DMA2D_ARGB8888;
 800996c:	4b17      	ldr	r3, [pc, #92]	; (80099cc <FillBuffer+0x78>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2200      	movs	r2, #0
 8009972:	609a      	str	r2, [r3, #8]
	Dma2dHandler->Init.OutputOffset = OffLine;
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <FillBuffer+0x78>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	60da      	str	r2, [r3, #12]

	//Dma2dHandler->Instance = DMA2D;

	/* DMA2D Initialization */

	if (HAL_DMA2D_Init(Dma2dHandler) == HAL_OK) {
 800997c:	4b13      	ldr	r3, [pc, #76]	; (80099cc <FillBuffer+0x78>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4618      	mov	r0, r3
 8009982:	f7f7 fb1b 	bl	8000fbc <HAL_DMA2D_Init>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d11a      	bne.n	80099c2 <FillBuffer+0x6e>
		if (HAL_DMA2D_ConfigLayer(Dma2dHandler, LayerIndex) == HAL_OK) {
 800998c:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <FillBuffer+0x78>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68f9      	ldr	r1, [r7, #12]
 8009992:	4618      	mov	r0, r3
 8009994:	f7f7 fc70 	bl	8001278 <HAL_DMA2D_ConfigLayer>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d111      	bne.n	80099c2 <FillBuffer+0x6e>
			if (HAL_DMA2D_Start(Dma2dHandler, ColorIndex, (uint32_t) pDst,
 800999e:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <FillBuffer+0x78>)
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	69f9      	ldr	r1, [r7, #28]
 80099ac:	f7f7 fb4f 	bl	800104e <HAL_DMA2D_Start>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <FillBuffer+0x6e>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(Dma2dHandler, 10);
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <FillBuffer+0x78>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	210a      	movs	r1, #10
 80099bc:	4618      	mov	r0, r3
 80099be:	f7f7 fb71 	bl	80010a4 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20003ebc 	.word	0x20003ebc

080099d0 <RAMSetup>:

/**
 * @brief  Initializes the SDRAM device.
 */

void RAMSetup(SDRAM_HandleTypeDef* arg_wsk) {
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	SdramHandle = arg_wsk;
 80099d8:	4a04      	ldr	r2, [pc, #16]	; (80099ec <RAMSetup+0x1c>)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6013      	str	r3, [r2, #0]
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	20003edc 	.word	0x20003edc

080099f0 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80099fc:	4b2f      	ldr	r3, [pc, #188]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 80099fe:	2201      	movs	r2, #1
 8009a00:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009a02:	4b2e      	ldr	r3, [pc, #184]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a04:	2208      	movs	r2, #8
 8009a06:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009a08:	4b2c      	ldr	r3, [pc, #176]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009a0e:	4b2b      	ldr	r3, [pc, #172]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009a14:	4b2a      	ldr	r3, [pc, #168]	; (8009ac0 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a1c:	4927      	ldr	r1, [pc, #156]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fa f9da 	bl	8003dd8 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8009a24:	2001      	movs	r0, #1
 8009a26:	f7f7 f9c7 	bl	8000db8 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8009a2a:	4b24      	ldr	r3, [pc, #144]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009a30:	4b22      	ldr	r3, [pc, #136]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a32:	2208      	movs	r2, #8
 8009a34:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009a3c:	4b1f      	ldr	r3, [pc, #124]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009a42:	4b1f      	ldr	r3, [pc, #124]	; (8009ac0 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a4a:	491c      	ldr	r1, [pc, #112]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fa f9c3 	bl	8003dd8 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009a52:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a54:	2203      	movs	r2, #3
 8009a56:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009a58:	4b18      	ldr	r3, [pc, #96]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 8009a5e:	4b17      	ldr	r3, [pc, #92]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a60:	2204      	movs	r2, #4
 8009a62:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8009a64:	4b15      	ldr	r3, [pc, #84]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009a6a:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a72:	4912      	ldr	r1, [pc, #72]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fa f9af 	bl	8003dd8 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8009a7a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8009a7e:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8009a80:	4b0e      	ldr	r3, [pc, #56]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a82:	2204      	movs	r2, #4
 8009a84:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a88:	2208      	movs	r2, #8
 8009a8a:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a8e:	2201      	movs	r2, #1
 8009a90:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4a09      	ldr	r2, [pc, #36]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009a96:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8009a98:	4b09      	ldr	r3, [pc, #36]	; (8009ac0 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aa0:	4906      	ldr	r1, [pc, #24]	; (8009abc <BSP_SDRAM_Initialization_sequence+0xcc>)
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fa f998 	bl	8003dd8 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(SdramHandle, RefreshCount);
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <BSP_SDRAM_Initialization_sequence+0xd0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fa f9bd 	bl	8003e2e <HAL_SDRAM_ProgramRefreshRate>
}
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20003ee0 	.word	0x20003ee0
 8009ac0:	20003edc 	.word	0x20003edc

08009ac4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	460a      	mov	r2, r1
 8009ace:	80fb      	strh	r3, [r7, #6]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8009ad8:	4a13      	ldr	r2, [pc, #76]	; (8009b28 <BSP_TS_Init+0x64>)
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8009ade:	4a13      	ldr	r2, [pc, #76]	; (8009b2c <BSP_TS_Init+0x68>)
 8009ae0:	88bb      	ldrh	r3, [r7, #4]
 8009ae2:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8009ae4:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <BSP_TS_Init+0x6c>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2082      	movs	r0, #130	; 0x82
 8009aea:	4798      	blx	r3
 8009aec:	4603      	mov	r3, r0
 8009aee:	461a      	mov	r2, r3
 8009af0:	f640 0311 	movw	r3, #2065	; 0x811
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d104      	bne.n	8009b02 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8009af8:	4b0e      	ldr	r3, [pc, #56]	; (8009b34 <BSP_TS_Init+0x70>)
 8009afa:	4a0d      	ldr	r2, [pc, #52]	; (8009b30 <BSP_TS_Init+0x6c>)
 8009afc:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d109      	bne.n	8009b1c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <BSP_TS_Init+0x70>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2082      	movs	r0, #130	; 0x82
 8009b10:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8009b12:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <BSP_TS_Init+0x70>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	2082      	movs	r0, #130	; 0x82
 8009b1a:	4798      	blx	r3
  }

  return ret;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20003ef4 	.word	0x20003ef4
 8009b2c:	20003ef6 	.word	0x20003ef6
 8009b30:	20000070 	.word	0x20000070
 8009b34:	20003ef0 	.word	0x20003ef0

08009b38 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8009b40:	4b4f      	ldr	r3, [pc, #316]	; (8009c80 <BSP_TS_GetState+0x148>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	2082      	movs	r0, #130	; 0x82
 8009b48:	4798      	blx	r3
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 808d 	beq.w	8009c76 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8009b5c:	4b48      	ldr	r3, [pc, #288]	; (8009c80 <BSP_TS_GetState+0x148>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	f107 020c 	add.w	r2, r7, #12
 8009b66:	f107 010e 	add.w	r1, r7, #14
 8009b6a:	2082      	movs	r0, #130	; 0x82
 8009b6c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8009b6e:	89bb      	ldrh	r3, [r7, #12]
 8009b70:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8009b78:	89bb      	ldrh	r3, [r7, #12]
 8009b7a:	4a42      	ldr	r2, [pc, #264]	; (8009c84 <BSP_TS_GetState+0x14c>)
 8009b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b80:	08db      	lsrs	r3, r3, #3
 8009b82:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8009b84:	8abb      	ldrh	r3, [r7, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d102      	bne.n	8009b90 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	82bb      	strh	r3, [r7, #20]
 8009b8e:	e008      	b.n	8009ba2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8009b90:	4b3d      	ldr	r3, [pc, #244]	; (8009c88 <BSP_TS_GetState+0x150>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	8aba      	ldrh	r2, [r7, #20]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d903      	bls.n	8009ba2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8009b9a:	4b3b      	ldr	r3, [pc, #236]	; (8009c88 <BSP_TS_GetState+0x150>)
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8009ba2:	8abb      	ldrh	r3, [r7, #20]
 8009ba4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8009ba6:	89fb      	ldrh	r3, [r7, #14]
 8009ba8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d806      	bhi.n	8009bbe <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8009bb0:	89fb      	ldrh	r3, [r7, #14]
 8009bb2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8009bb6:	330e      	adds	r3, #14
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	81fb      	strh	r3, [r7, #14]
 8009bbc:	e005      	b.n	8009bca <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8009bbe:	89fb      	ldrh	r3, [r7, #14]
 8009bc0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8009bca:	89fb      	ldrh	r3, [r7, #14]
 8009bcc:	4a2f      	ldr	r2, [pc, #188]	; (8009c8c <BSP_TS_GetState+0x154>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8009bd6:	8afb      	ldrh	r3, [r7, #22]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	82fb      	strh	r3, [r7, #22]
 8009be0:	e008      	b.n	8009bf4 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8009be2:	4b2b      	ldr	r3, [pc, #172]	; (8009c90 <BSP_TS_GetState+0x158>)
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	8afa      	ldrh	r2, [r7, #22]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d903      	bls.n	8009bf4 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8009bec:	4b28      	ldr	r3, [pc, #160]	; (8009c90 <BSP_TS_GetState+0x158>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8009bf4:	8afb      	ldrh	r3, [r7, #22]
 8009bf6:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8009bf8:	89fb      	ldrh	r3, [r7, #14]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4b25      	ldr	r3, [pc, #148]	; (8009c94 <BSP_TS_GetState+0x15c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d906      	bls.n	8009c12 <BSP_TS_GetState+0xda>
 8009c04:	89fa      	ldrh	r2, [r7, #14]
 8009c06:	4b23      	ldr	r3, [pc, #140]	; (8009c94 <BSP_TS_GetState+0x15c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	e005      	b.n	8009c1e <BSP_TS_GetState+0xe6>
 8009c12:	4b20      	ldr	r3, [pc, #128]	; (8009c94 <BSP_TS_GetState+0x15c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	89fb      	ldrh	r3, [r7, #14]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8009c20:	89bb      	ldrh	r3, [r7, #12]
 8009c22:	461a      	mov	r2, r3
 8009c24:	4b1c      	ldr	r3, [pc, #112]	; (8009c98 <BSP_TS_GetState+0x160>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d906      	bls.n	8009c3a <BSP_TS_GetState+0x102>
 8009c2c:	89ba      	ldrh	r2, [r7, #12]
 8009c2e:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <BSP_TS_GetState+0x160>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	e005      	b.n	8009c46 <BSP_TS_GetState+0x10e>
 8009c3a:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <BSP_TS_GetState+0x160>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	89bb      	ldrh	r3, [r7, #12]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8009c48:	8a7a      	ldrh	r2, [r7, #18]
 8009c4a:	8a3b      	ldrh	r3, [r7, #16]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	dd07      	ble.n	8009c62 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8009c52:	89fb      	ldrh	r3, [r7, #14]
 8009c54:	461a      	mov	r2, r3
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <BSP_TS_GetState+0x15c>)
 8009c58:	601a      	str	r2, [r3, #0]
      _y = y; 
 8009c5a:	89bb      	ldrh	r3, [r7, #12]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <BSP_TS_GetState+0x160>)
 8009c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8009c62:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <BSP_TS_GetState+0x15c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <BSP_TS_GetState+0x160>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	809a      	strh	r2, [r3, #4]
  }
}
 8009c76:	bf00      	nop
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20003ef0 	.word	0x20003ef0
 8009c84:	ba2e8ba3 	.word	0xba2e8ba3
 8009c88:	20003ef6 	.word	0x20003ef6
 8009c8c:	88888889 	.word	0x88888889
 8009c90:	20003ef4 	.word	0x20003ef4
 8009c94:	20003ef8 	.word	0x20003ef8
 8009c98:	20003efc 	.word	0x20003efc

08009c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	607b      	str	r3, [r7, #4]
 8009ca6:	4a12      	ldr	r2, [pc, #72]	; (8009cf0 <HAL_MspInit+0x54>)
 8009ca8:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <HAL_MspInit+0x54>)
 8009caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cba:	607b      	str	r3, [r7, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	603b      	str	r3, [r7, #0]
 8009cc2:	4a0b      	ldr	r2, [pc, #44]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8009cce:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009cda:	2200      	movs	r2, #0
 8009cdc:	210f      	movs	r1, #15
 8009cde:	f06f 0001 	mvn.w	r0, #1
 8009ce2:	f7f7 f941 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40023800 	.word	0x40023800

08009cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08c      	sub	sp, #48	; 0x30
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8009d04:	2200      	movs	r2, #0
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	2036      	movs	r0, #54	; 0x36
 8009d0a:	f7f7 f92d 	bl	8000f68 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8009d0e:	2036      	movs	r0, #54	; 0x36
 8009d10:	f7f7 f946 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	4a1f      	ldr	r2, [pc, #124]	; (8009d98 <HAL_InitTick+0xa4>)
 8009d1a:	4b1f      	ldr	r3, [pc, #124]	; (8009d98 <HAL_InitTick+0xa4>)
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	f043 0310 	orr.w	r3, r3, #16
 8009d22:	6413      	str	r3, [r2, #64]	; 0x40
 8009d24:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <HAL_InitTick+0xa4>)
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	f003 0310 	and.w	r3, r3, #16
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009d30:	f107 0210 	add.w	r2, r7, #16
 8009d34:	f107 0314 	add.w	r3, r7, #20
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f9 fe42 	bl	80039c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009d40:	f7f9 fe18 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8009d44:	4603      	mov	r3, r0
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <HAL_InitTick+0xa8>)
 8009d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d52:	0c9b      	lsrs	r3, r3, #18
 8009d54:	3b01      	subs	r3, #1
 8009d56:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009d58:	4b11      	ldr	r3, [pc, #68]	; (8009da0 <HAL_InitTick+0xac>)
 8009d5a:	4a12      	ldr	r2, [pc, #72]	; (8009da4 <HAL_InitTick+0xb0>)
 8009d5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <HAL_InitTick+0xac>)
 8009d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009d66:	4a0e      	ldr	r2, [pc, #56]	; (8009da0 <HAL_InitTick+0xac>)
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009d6c:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <HAL_InitTick+0xac>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <HAL_InitTick+0xac>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009d78:	4809      	ldr	r0, [pc, #36]	; (8009da0 <HAL_InitTick+0xac>)
 8009d7a:	f7fa fda6 	bl	80048ca <HAL_TIM_Base_Init>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d104      	bne.n	8009d8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8009d84:	4806      	ldr	r0, [pc, #24]	; (8009da0 <HAL_InitTick+0xac>)
 8009d86:	f7fa fdd5 	bl	8004934 <HAL_TIM_Base_Start_IT>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	e000      	b.n	8009d90 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3730      	adds	r7, #48	; 0x30
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	40023800 	.word	0x40023800
 8009d9c:	431bde83 	.word	0x431bde83
 8009da0:	200041a8 	.word	0x200041a8
 8009da4:	40001000 	.word	0x40001000

08009da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009dac:	bf00      	nop
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009db6:	b480      	push	{r7}
 8009db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009dba:	e7fe      	b.n	8009dba <HardFault_Handler+0x4>

08009dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009dc0:	e7fe      	b.n	8009dc0 <MemManage_Handler+0x4>

08009dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009dc6:	e7fe      	b.n	8009dc6 <BusFault_Handler+0x4>

08009dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009dcc:	e7fe      	b.n	8009dcc <UsageFault_Handler+0x4>

08009dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009dd2:	bf00      	nop
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009de0:	4802      	ldr	r0, [pc, #8]	; (8009dec <TIM6_DAC_IRQHandler+0x10>)
 8009de2:	f7fa fdcb 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009de6:	bf00      	nop
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	200041a8 	.word	0x200041a8

08009df0 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fa59 	bl	800a2b4 <stmpe811_GetInstance>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2bff      	cmp	r3, #255	; 0xff
 8009e0a:	d112      	bne.n	8009e32 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f000 fa51 	bl	800a2b4 <stmpe811_GetInstance>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d80a      	bhi.n	8009e32 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	88fa      	ldrh	r2, [r7, #6]
 8009e20:	b2d1      	uxtb	r1, r2
 8009e22:	4a06      	ldr	r2, [pc, #24]	; (8009e3c <stmpe811_Init+0x4c>)
 8009e24:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8009e26:	f7ff f802 	bl	8008e2e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f807 	bl	8009e40 <stmpe811_Reset>
    }
  }
}
 8009e32:	bf00      	nop
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20003f00 	.word	0x20003f00

08009e40 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8009e4a:	88fb      	ldrh	r3, [r7, #6]
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2202      	movs	r2, #2
 8009e50:	2103      	movs	r1, #3
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fff7 	bl	8008e46 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8009e58:	200a      	movs	r0, #10
 8009e5a:	f7ff f831 	bl	8008ec0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2200      	movs	r2, #0
 8009e64:	2103      	movs	r1, #3
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe ffed 	bl	8008e46 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8009e6c:	2002      	movs	r0, #2
 8009e6e:	f7ff f827 	bl	8008ec0 <IOE_Delay>
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	4603      	mov	r3, r0
 8009e82:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8009e84:	f7fe ffd3 	bl	8008e2e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe ffec 	bl	8008e6c <IOE_Read>
 8009e94:	4603      	mov	r3, r0
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe ffe3 	bl	8008e6c <IOE_Read>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8009eaa:	4323      	orrs	r3, r4
 8009eac:	b21b      	sxth	r3, r3
 8009eae:	b29b      	uxth	r3, r3
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}

08009eb8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8009ec6:	88fb      	ldrh	r3, [r7, #6]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2109      	movs	r1, #9
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe ffcd 	bl	8008e6c <IOE_Read>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8009ede:	88fb      	ldrh	r3, [r7, #6]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	7bfa      	ldrb	r2, [r7, #15]
 8009ee4:	2109      	movs	r1, #9
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe ffad 	bl	8008e46 <IOE_Write>
}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8009f02:	88fb      	ldrh	r3, [r7, #6]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2109      	movs	r1, #9
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe ffaf 	bl	8008e6c <IOE_Read>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	f023 0301 	bic.w	r3, r3, #1
 8009f18:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	7bfa      	ldrb	r2, [r7, #15]
 8009f20:	2109      	movs	r1, #9
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe ff8f 	bl	8008e46 <IOE_Write>
    
}
 8009f28:	bf00      	nop
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	460a      	mov	r2, r1
 8009f3a:	80fb      	strh	r3, [r7, #6]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8009f44:	88fb      	ldrh	r3, [r7, #6]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	210a      	movs	r1, #10
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe ff8e 	bl	8008e6c <IOE_Read>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	797b      	ldrb	r3, [r7, #5]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	7bfa      	ldrb	r2, [r7, #15]
 8009f62:	210a      	movs	r1, #10
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe ff6e 	bl	8008e46 <IOE_Write>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	4603      	mov	r3, r0
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	80fb      	strh	r3, [r7, #6]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	210a      	movs	r1, #10
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe ff6d 	bl	8008e6c <IOE_Read>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8009f96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009f9a:	43db      	mvns	r3, r3
 8009f9c:	b25a      	sxtb	r2, r3
 8009f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	b25b      	sxtb	r3, r3
 8009fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	7bfa      	ldrb	r2, [r7, #15]
 8009fae:	210a      	movs	r1, #10
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe ff48 	bl	8008e46 <IOE_Write>
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	460a      	mov	r2, r1
 8009fc8:	80fb      	strh	r3, [r7, #6]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8009fce:	88fb      	ldrh	r3, [r7, #6]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	210b      	movs	r1, #11
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe ff49 	bl	8008e6c <IOE_Read>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	461a      	mov	r2, r3
 8009fde:	797b      	ldrb	r3, [r7, #5]
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	b2db      	uxtb	r3, r3
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	460a      	mov	r2, r1
 8009ff6:	80fb      	strh	r3, [r7, #6]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8009ffc:	88fb      	ldrh	r3, [r7, #6]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	797a      	ldrb	r2, [r7, #5]
 800a002:	210b      	movs	r1, #11
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe ff1e 	bl	8008e46 <IOE_Write>
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	4603      	mov	r3, r0
 800a01a:	6039      	str	r1, [r7, #0]
 800a01c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2117      	movs	r1, #23
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe ff1f 	bl	8008e6c <IOE_Read>
 800a02e:	4603      	mov	r3, r0
 800a030:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	b25b      	sxtb	r3, r3
 800a036:	43db      	mvns	r3, r3
 800a038:	b25a      	sxtb	r2, r3
 800a03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a03e:	4013      	ands	r3, r2
 800a040:	b25b      	sxtb	r3, r3
 800a042:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	7bfa      	ldrb	r2, [r7, #15]
 800a04a:	2117      	movs	r1, #23
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fefa 	bl	8008e46 <IOE_Write>
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	4603      	mov	r3, r0
 800a062:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2104      	movs	r1, #4
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fefe 	bl	8008e6c <IOE_Read>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	f023 0304 	bic.w	r3, r3, #4
 800a07a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800a07c:	88fb      	ldrh	r3, [r7, #6]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	7bfa      	ldrb	r2, [r7, #15]
 800a082:	2104      	movs	r1, #4
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fede 	bl	8008e46 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	21f0      	movs	r1, #240	; 0xf0
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff ffbf 	bl	800a012 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	7bfa      	ldrb	r2, [r7, #15]
 800a0a2:	2104      	movs	r1, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fece 	bl	8008e46 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800a0aa:	88fb      	ldrh	r3, [r7, #6]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2249      	movs	r2, #73	; 0x49
 800a0b0:	2120      	movs	r1, #32
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fec7 	bl	8008e46 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	f7fe ff01 	bl	8008ec0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	2121      	movs	r1, #33	; 0x21
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe febd 	bl	8008e46 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	229a      	movs	r2, #154	; 0x9a
 800a0d2:	2141      	movs	r1, #65	; 0x41
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe feb6 	bl	8008e46 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2201      	movs	r2, #1
 800a0e0:	214a      	movs	r1, #74	; 0x4a
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe feaf 	bl	8008e46 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a0e8:	88fb      	ldrh	r3, [r7, #6]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	214b      	movs	r1, #75	; 0x4b
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe fea8 	bl	8008e46 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	214b      	movs	r1, #75	; 0x4b
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fea1 	bl	8008e46 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2201      	movs	r2, #1
 800a10a:	2156      	movs	r1, #86	; 0x56
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fe9a 	bl	8008e46 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2201      	movs	r2, #1
 800a118:	2158      	movs	r1, #88	; 0x58
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fe93 	bl	8008e46 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800a120:	88fb      	ldrh	r3, [r7, #6]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2201      	movs	r2, #1
 800a126:	2140      	movs	r1, #64	; 0x40
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fe fe8c 	bl	8008e46 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800a12e:	88fb      	ldrh	r3, [r7, #6]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	22ff      	movs	r2, #255	; 0xff
 800a134:	210b      	movs	r1, #11
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe fe85 	bl	8008e46 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800a13c:	2002      	movs	r0, #2
 800a13e:	f7fe febf 	bl	8008ec0 <IOE_Delay>
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	4603      	mov	r3, r0
 800a152:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800a158:	88fb      	ldrh	r3, [r7, #6]
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2140      	movs	r1, #64	; 0x40
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fe84 	bl	8008e6c <IOE_Read>
 800a164:	4603      	mov	r3, r0
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	bf0c      	ite	eq
 800a16e:	2301      	moveq	r3, #1
 800a170:	2300      	movne	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800a17c:	88fb      	ldrh	r3, [r7, #6]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	214c      	movs	r1, #76	; 0x4c
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fe72 	bl	8008e6c <IOE_Read>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800a18e:	2301      	movs	r3, #1
 800a190:	73fb      	strb	r3, [r7, #15]
 800a192:	e00d      	b.n	800a1b0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a194:	88fb      	ldrh	r3, [r7, #6]
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2201      	movs	r2, #1
 800a19a:	214b      	movs	r1, #75	; 0x4b
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fe52 	bl	8008e46 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	214b      	movs	r1, #75	; 0x4b
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fe4b 	bl	8008e46 <IOE_Write>
  }
  
  return ret;
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800a1c8:	89fb      	ldrh	r3, [r7, #14]
 800a1ca:	b2d8      	uxtb	r0, r3
 800a1cc:	f107 0210 	add.w	r2, r7, #16
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	21d7      	movs	r1, #215	; 0xd7
 800a1d4:	f7fe fe5d 	bl	8008e92 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800a1d8:	7c3b      	ldrb	r3, [r7, #16]
 800a1da:	061a      	lsls	r2, r3, #24
 800a1dc:	7c7b      	ldrb	r3, [r7, #17]
 800a1de:	041b      	lsls	r3, r3, #16
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	7cbb      	ldrb	r3, [r7, #18]
 800a1e4:	021b      	lsls	r3, r3, #8
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	7cfa      	ldrb	r2, [r7, #19]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	0d1b      	lsrs	r3, r3, #20
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800a208:	89fb      	ldrh	r3, [r7, #14]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2201      	movs	r2, #1
 800a20e:	214b      	movs	r1, #75	; 0x4b
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fe18 	bl	8008e46 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800a216:	89fb      	ldrh	r3, [r7, #14]
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2200      	movs	r2, #0
 800a21c:	214b      	movs	r1, #75	; 0x4b
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe fe11 	bl	8008e46 <IOE_Write>
}
 800a224:	bf00      	nop
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800a236:	f7fe fe00 	bl	8008e3a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	211f      	movs	r1, #31
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff fe76 	bl	8009f30 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800a244:	88fb      	ldrh	r3, [r7, #6]
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fe36 	bl	8009eb8 <stmpe811_EnableGlobalIT>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fe47 	bl	8009ef4 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	211f      	movs	r1, #31
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff fe81 	bl	8009f72 <stmpe811_DisableITSource>
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800a282:	88fb      	ldrh	r3, [r7, #6]
 800a284:	211f      	movs	r1, #31
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fe99 	bl	8009fbe <stmpe811_ReadGITStatus>
 800a28c:	4603      	mov	r3, r0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	4603      	mov	r3, r0
 800a29e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	211f      	movs	r1, #31
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff fea1 	bl	8009fec <stmpe811_ClearGlobalIT>
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	e00b      	b.n	800a2e0 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	4a0a      	ldr	r2, [pc, #40]	; (800a2f4 <stmpe811_GetInstance+0x40>)
 800a2cc:	5cd3      	ldrb	r3, [r2, r3]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	88fa      	ldrh	r2, [r7, #6]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d101      	bne.n	800a2da <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	e006      	b.n	800a2e8 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	73fb      	strb	r3, [r7, #15]
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d9f0      	bls.n	800a2c8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800a2e6:	23ff      	movs	r3, #255	; 0xff
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20003f00 	.word	0x20003f00

0800a2f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a2fc:	4a16      	ldr	r2, [pc, #88]	; (800a358 <SystemInit+0x60>)
 800a2fe:	4b16      	ldr	r3, [pc, #88]	; (800a358 <SystemInit+0x60>)
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a30c:	4a13      	ldr	r2, [pc, #76]	; (800a35c <SystemInit+0x64>)
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <SystemInit+0x64>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a318:	4b10      	ldr	r3, [pc, #64]	; (800a35c <SystemInit+0x64>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a31e:	4a0f      	ldr	r2, [pc, #60]	; (800a35c <SystemInit+0x64>)
 800a320:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <SystemInit+0x64>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a32c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a32e:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <SystemInit+0x64>)
 800a330:	4a0b      	ldr	r2, [pc, #44]	; (800a360 <SystemInit+0x68>)
 800a332:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a334:	4a09      	ldr	r2, [pc, #36]	; (800a35c <SystemInit+0x64>)
 800a336:	4b09      	ldr	r3, [pc, #36]	; (800a35c <SystemInit+0x64>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a33e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a340:	4b06      	ldr	r3, [pc, #24]	; (800a35c <SystemInit+0x64>)
 800a342:	2200      	movs	r2, #0
 800a344:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a346:	4b04      	ldr	r3, [pc, #16]	; (800a358 <SystemInit+0x60>)
 800a348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a34c:	609a      	str	r2, [r3, #8]
#endif
}
 800a34e:	bf00      	nop
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	e000ed00 	.word	0xe000ed00
 800a35c:	40023800 	.word	0x40023800
 800a360:	24003010 	.word	0x24003010

0800a364 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a368:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a36a:	4a12      	ldr	r2, [pc, #72]	; (800a3b4 <MX_USART1_UART_Init+0x50>)
 800a36c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a376:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a378:	2200      	movs	r2, #0
 800a37a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a37c:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a37e:	2200      	movs	r2, #0
 800a380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a382:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a384:	2200      	movs	r2, #0
 800a386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a388:	4b09      	ldr	r3, [pc, #36]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a38a:	220c      	movs	r2, #12
 800a38c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a38e:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a390:	2200      	movs	r2, #0
 800a392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a394:	4b06      	ldr	r3, [pc, #24]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a396:	2200      	movs	r2, #0
 800a398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a39a:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <MX_USART1_UART_Init+0x4c>)
 800a39c:	f7fa fcd2 	bl	8004d44 <HAL_UART_Init>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a3a6:	f7fe f97d 	bl	80086a4 <Error_Handler>
  }

}
 800a3aa:	bf00      	nop
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200041e8 	.word	0x200041e8
 800a3b4:	40011000 	.word	0x40011000

0800a3b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	; 0x28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3c0:	f107 0314 	add.w	r3, r7, #20
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	609a      	str	r2, [r3, #8]
 800a3cc:	60da      	str	r2, [r3, #12]
 800a3ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a19      	ldr	r2, [pc, #100]	; (800a43c <HAL_UART_MspInit+0x84>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d12c      	bne.n	800a434 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a3da:	2300      	movs	r3, #0
 800a3dc:	613b      	str	r3, [r7, #16]
 800a3de:	4a18      	ldr	r2, [pc, #96]	; (800a440 <HAL_UART_MspInit+0x88>)
 800a3e0:	4b17      	ldr	r3, [pc, #92]	; (800a440 <HAL_UART_MspInit+0x88>)
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e4:	f043 0310 	orr.w	r3, r3, #16
 800a3e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a3ea:	4b15      	ldr	r3, [pc, #84]	; (800a440 <HAL_UART_MspInit+0x88>)
 800a3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
 800a3fa:	4a11      	ldr	r2, [pc, #68]	; (800a440 <HAL_UART_MspInit+0x88>)
 800a3fc:	4b10      	ldr	r3, [pc, #64]	; (800a440 <HAL_UART_MspInit+0x88>)
 800a3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	6313      	str	r3, [r2, #48]	; 0x30
 800a406:	4b0e      	ldr	r3, [pc, #56]	; (800a440 <HAL_UART_MspInit+0x88>)
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a412:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a418:	2302      	movs	r3, #2
 800a41a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a41c:	2301      	movs	r3, #1
 800a41e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a420:	2303      	movs	r3, #3
 800a422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a424:	2307      	movs	r3, #7
 800a426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a428:	f107 0314 	add.w	r3, r7, #20
 800a42c:	4619      	mov	r1, r3
 800a42e:	4805      	ldr	r0, [pc, #20]	; (800a444 <HAL_UART_MspInit+0x8c>)
 800a430:	f7f7 f84e 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a434:	bf00      	nop
 800a436:	3728      	adds	r7, #40	; 0x28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	40011000 	.word	0x40011000
 800a440:	40023800 	.word	0x40023800
 800a444:	40020000 	.word	0x40020000

0800a448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a448:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a480 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a44c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a44e:	e003      	b.n	800a458 <LoopCopyDataInit>

0800a450 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a450:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a452:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a454:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a456:	3104      	adds	r1, #4

0800a458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a458:	480b      	ldr	r0, [pc, #44]	; (800a488 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a45a:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a45c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a45e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a460:	d3f6      	bcc.n	800a450 <CopyDataInit>
  ldr  r2, =_sbss
 800a462:	4a0b      	ldr	r2, [pc, #44]	; (800a490 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a464:	e002      	b.n	800a46c <LoopFillZerobss>

0800a466 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a466:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a468:	f842 3b04 	str.w	r3, [r2], #4

0800a46c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a46c:	4b09      	ldr	r3, [pc, #36]	; (800a494 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a46e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a470:	d3f9      	bcc.n	800a466 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a472:	f7ff ff41 	bl	800a2f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a476:	f000 f811 	bl	800a49c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a47a:	f7fd fff7 	bl	800846c <main>
  bx  lr    
 800a47e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a480:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800a484:	0800ce00 	.word	0x0800ce00
  ldr  r0, =_sdata
 800a488:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a48c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 800a490:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 800a494:	20004228 	.word	0x20004228

0800a498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a498:	e7fe      	b.n	800a498 <ADC_IRQHandler>
	...

0800a49c <__libc_init_array>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	4e0d      	ldr	r6, [pc, #52]	; (800a4d4 <__libc_init_array+0x38>)
 800a4a0:	4c0d      	ldr	r4, [pc, #52]	; (800a4d8 <__libc_init_array+0x3c>)
 800a4a2:	1ba4      	subs	r4, r4, r6
 800a4a4:	10a4      	asrs	r4, r4, #2
 800a4a6:	2500      	movs	r5, #0
 800a4a8:	42a5      	cmp	r5, r4
 800a4aa:	d109      	bne.n	800a4c0 <__libc_init_array+0x24>
 800a4ac:	4e0b      	ldr	r6, [pc, #44]	; (800a4dc <__libc_init_array+0x40>)
 800a4ae:	4c0c      	ldr	r4, [pc, #48]	; (800a4e0 <__libc_init_array+0x44>)
 800a4b0:	f000 f886 	bl	800a5c0 <_init>
 800a4b4:	1ba4      	subs	r4, r4, r6
 800a4b6:	10a4      	asrs	r4, r4, #2
 800a4b8:	2500      	movs	r5, #0
 800a4ba:	42a5      	cmp	r5, r4
 800a4bc:	d105      	bne.n	800a4ca <__libc_init_array+0x2e>
 800a4be:	bd70      	pop	{r4, r5, r6, pc}
 800a4c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4c4:	4798      	blx	r3
 800a4c6:	3501      	adds	r5, #1
 800a4c8:	e7ee      	b.n	800a4a8 <__libc_init_array+0xc>
 800a4ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4ce:	4798      	blx	r3
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	e7f2      	b.n	800a4ba <__libc_init_array+0x1e>
 800a4d4:	0800cdf8 	.word	0x0800cdf8
 800a4d8:	0800cdf8 	.word	0x0800cdf8
 800a4dc:	0800cdf8 	.word	0x0800cdf8
 800a4e0:	0800cdfc 	.word	0x0800cdfc

0800a4e4 <__itoa>:
 800a4e4:	1e93      	subs	r3, r2, #2
 800a4e6:	2b22      	cmp	r3, #34	; 0x22
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	d904      	bls.n	800a4f8 <__itoa+0x14>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	700b      	strb	r3, [r1, #0]
 800a4f2:	461c      	mov	r4, r3
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	bd10      	pop	{r4, pc}
 800a4f8:	2a0a      	cmp	r2, #10
 800a4fa:	d109      	bne.n	800a510 <__itoa+0x2c>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	da07      	bge.n	800a510 <__itoa+0x2c>
 800a500:	232d      	movs	r3, #45	; 0x2d
 800a502:	700b      	strb	r3, [r1, #0]
 800a504:	4240      	negs	r0, r0
 800a506:	2101      	movs	r1, #1
 800a508:	4421      	add	r1, r4
 800a50a:	f000 f819 	bl	800a540 <__utoa>
 800a50e:	e7f1      	b.n	800a4f4 <__itoa+0x10>
 800a510:	2100      	movs	r1, #0
 800a512:	e7f9      	b.n	800a508 <__itoa+0x24>

0800a514 <itoa>:
 800a514:	f7ff bfe6 	b.w	800a4e4 <__itoa>

0800a518 <memcpy>:
 800a518:	b510      	push	{r4, lr}
 800a51a:	1e43      	subs	r3, r0, #1
 800a51c:	440a      	add	r2, r1
 800a51e:	4291      	cmp	r1, r2
 800a520:	d100      	bne.n	800a524 <memcpy+0xc>
 800a522:	bd10      	pop	{r4, pc}
 800a524:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a52c:	e7f7      	b.n	800a51e <memcpy+0x6>

0800a52e <memset>:
 800a52e:	4402      	add	r2, r0
 800a530:	4603      	mov	r3, r0
 800a532:	4293      	cmp	r3, r2
 800a534:	d100      	bne.n	800a538 <memset+0xa>
 800a536:	4770      	bx	lr
 800a538:	f803 1b01 	strb.w	r1, [r3], #1
 800a53c:	e7f9      	b.n	800a532 <memset+0x4>
	...

0800a540 <__utoa>:
 800a540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a542:	4c1e      	ldr	r4, [pc, #120]	; (800a5bc <__utoa+0x7c>)
 800a544:	b08b      	sub	sp, #44	; 0x2c
 800a546:	4603      	mov	r3, r0
 800a548:	460f      	mov	r7, r1
 800a54a:	466d      	mov	r5, sp
 800a54c:	f104 0e20 	add.w	lr, r4, #32
 800a550:	6820      	ldr	r0, [r4, #0]
 800a552:	6861      	ldr	r1, [r4, #4]
 800a554:	462e      	mov	r6, r5
 800a556:	c603      	stmia	r6!, {r0, r1}
 800a558:	3408      	adds	r4, #8
 800a55a:	4574      	cmp	r4, lr
 800a55c:	4635      	mov	r5, r6
 800a55e:	d1f7      	bne.n	800a550 <__utoa+0x10>
 800a560:	7921      	ldrb	r1, [r4, #4]
 800a562:	7131      	strb	r1, [r6, #4]
 800a564:	1e91      	subs	r1, r2, #2
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	6030      	str	r0, [r6, #0]
 800a56a:	2922      	cmp	r1, #34	; 0x22
 800a56c:	f04f 0100 	mov.w	r1, #0
 800a570:	d904      	bls.n	800a57c <__utoa+0x3c>
 800a572:	7039      	strb	r1, [r7, #0]
 800a574:	460f      	mov	r7, r1
 800a576:	4638      	mov	r0, r7
 800a578:	b00b      	add	sp, #44	; 0x2c
 800a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a57c:	1e78      	subs	r0, r7, #1
 800a57e:	4606      	mov	r6, r0
 800a580:	fbb3 f5f2 	udiv	r5, r3, r2
 800a584:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a588:	fb02 3315 	mls	r3, r2, r5, r3
 800a58c:	4473      	add	r3, lr
 800a58e:	1c4c      	adds	r4, r1, #1
 800a590:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a594:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a598:	462b      	mov	r3, r5
 800a59a:	b965      	cbnz	r5, 800a5b6 <__utoa+0x76>
 800a59c:	553d      	strb	r5, [r7, r4]
 800a59e:	187a      	adds	r2, r7, r1
 800a5a0:	1acc      	subs	r4, r1, r3
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	dae7      	bge.n	800a576 <__utoa+0x36>
 800a5a6:	7844      	ldrb	r4, [r0, #1]
 800a5a8:	7815      	ldrb	r5, [r2, #0]
 800a5aa:	f800 5f01 	strb.w	r5, [r0, #1]!
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	f802 4901 	strb.w	r4, [r2], #-1
 800a5b4:	e7f4      	b.n	800a5a0 <__utoa+0x60>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	e7e2      	b.n	800a580 <__utoa+0x40>
 800a5ba:	bf00      	nop
 800a5bc:	0800cdc8 	.word	0x0800cdc8

0800a5c0 <_init>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	bf00      	nop
 800a5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5c6:	bc08      	pop	{r3}
 800a5c8:	469e      	mov	lr, r3
 800a5ca:	4770      	bx	lr

0800a5cc <_fini>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	bf00      	nop
 800a5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d2:	bc08      	pop	{r3}
 800a5d4:	469e      	mov	lr, r3
 800a5d6:	4770      	bx	lr
