
STERO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002760  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08007984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          00004120  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200041b4  200041b4  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002eacf  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005df6  00000000  00000000  0004eb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000fe48  00000000  00000000  00054989  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001658  00000000  00000000  000647d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d20  00000000  00000000  00065e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ce72  00000000  00000000  00067b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007a80  00000000  00000000  000749c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0007c442  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004114  00000000  00000000  0007c4c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080051fc 	.word	0x080051fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080051fc 	.word	0x080051fc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_InitTick+0x3c>)
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_InitTick+0x40>)
{
 8000506:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	7818      	ldrb	r0, [r3, #0]
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	fbb0 f0f3 	udiv	r0, r0, r3
 8000518:	f000 f8aa 	bl	8000670 <HAL_SYSTICK_Config>
 800051c:	4604      	mov	r4, r0
 800051e:	b958      	cbnz	r0, 8000538 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000520:	2d0f      	cmp	r5, #15
 8000522:	d809      	bhi.n	8000538 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000524:	4602      	mov	r2, r0
 8000526:	4629      	mov	r1, r5
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	f000 f85e 	bl	80005ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <HAL_InitTick+0x44>)
 8000532:	4620      	mov	r0, r4
 8000534:	601d      	str	r5, [r3, #0]
 8000536:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000538:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800053a:	bd38      	pop	{r3, r4, r5, pc}
 800053c:	20000090 	.word	0x20000090
 8000540:	20000000 	.word	0x20000000
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_Init>:
{
 8000548:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_Init+0x30>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000552:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000562:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f82f 	bl	80005c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	200f      	movs	r0, #15
 800056c:	f7ff ffc8 	bl	8000500 <HAL_InitTick>
  HAL_MspInit();
 8000570:	f004 fc48 	bl	8004e04 <HAL_MspInit>
}
 8000574:	2000      	movs	r0, #0
 8000576:	bd08      	pop	{r3, pc}
 8000578:	40023c00 	.word	0x40023c00

0800057c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x10>)
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_IncTick+0x14>)
 8000580:	6811      	ldr	r1, [r2, #0]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	440b      	add	r3, r1
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20003eac 	.word	0x20003eac
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <HAL_GetTick+0x8>)
 8000596:	6818      	ldr	r0, [r3, #0]
}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20003eac 	.word	0x20003eac

080005a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
 80005a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a4:	f7ff fff6 	bl	8000594 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005aa:	bf1c      	itt	ne
 80005ac:	4b05      	ldrne	r3, [pc, #20]	; (80005c4 <HAL_Delay+0x24>)
 80005ae:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005b2:	bf18      	it	ne
 80005b4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b6:	f7ff ffed 	bl	8000594 <HAL_GetTick>
 80005ba:	1b40      	subs	r0, r0, r5
 80005bc:	4284      	cmp	r4, r0
 80005be:	d8fa      	bhi.n	80005b6 <HAL_Delay+0x16>
  {
  }
}
 80005c0:	bd38      	pop	{r3, r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000

080005c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	0200      	lsls	r0, r0, #8
 80005da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e4:	60d3      	str	r3, [r2, #12]
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	68dc      	ldr	r4, [r3, #12]
 80005f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	bf28      	it	cs
 8000600:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000602:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	f04f 0501 	mov.w	r5, #1
 8000608:	fa05 f303 	lsl.w	r3, r5, r3
 800060c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000610:	bf8c      	ite	hi
 8000612:	3c03      	subhi	r4, #3
 8000614:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000616:	4019      	ands	r1, r3
 8000618:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061a:	fa05 f404 	lsl.w	r4, r5, r4
 800061e:	3c01      	subs	r4, #1
 8000620:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000622:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	ea42 0201 	orr.w	r2, r2, r1
 8000628:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	bfad      	iteet	ge
 800062e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	f000 000f 	andlt.w	r0, r0, #15
 8000636:	4b06      	ldrlt	r3, [pc, #24]	; (8000650 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	bfb5      	itete	lt
 800063e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	e000ed14 	.word	0xe000ed14

08000654 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000654:	2800      	cmp	r0, #0
 8000656:	db08      	blt.n	800066a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000658:	0942      	lsrs	r2, r0, #5
 800065a:	2301      	movs	r3, #1
 800065c:	f000 001f 	and.w	r0, r0, #31
 8000660:	fa03 f000 	lsl.w	r0, r3, r0
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <HAL_NVIC_EnableIRQ+0x18>)
 8000666:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100

08000670 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000670:	3801      	subs	r0, #1
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d20a      	bcs.n	800068e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	21f0      	movs	r1, #240	; 0xf0
 8000680:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e010 	.word	0xe000e010
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800069c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800069e:	6804      	ldr	r4, [r0, #0]
 80006a0:	9d04      	ldr	r5, [sp, #16]
 80006a2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80006a4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80006a8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80006ac:	4333      	orrs	r3, r6
 80006ae:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80006b0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80006b2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80006b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80006b8:	d130      	bne.n	800071c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80006ba:	6886      	ldr	r6, [r0, #8]
 80006bc:	b11e      	cbz	r6, 80006c6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80006be:	2e01      	cmp	r6, #1
 80006c0:	d103      	bne.n	80006ca <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80006c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80006c6:	63a1      	str	r1, [r4, #56]	; 0x38
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80006ca:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80006cc:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80006d0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80006d4:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80006d6:	d107      	bne.n	80006e8 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 80006d8:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 80006da:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80006dc:	02c9      	lsls	r1, r1, #11
 80006de:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80006e2:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 80006e6:	e7ee      	b.n	80006c6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80006e8:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80006ea:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80006ee:	d10a      	bne.n	8000706 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 80006f0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80006f2:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80006f4:	029b      	lsls	r3, r3, #10
 80006f6:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80006fa:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 80006fe:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8000700:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8000704:	e7df      	b.n	80006c6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8000706:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8000708:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800070a:	0209      	lsls	r1, r1, #8
 800070c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8000710:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8000714:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8000716:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800071a:	e7d4      	b.n	80006c6 <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800071c:	60e1      	str	r1, [r4, #12]
 800071e:	bd70      	pop	{r4, r5, r6, pc}

08000720 <HAL_DMA2D_Init>:
{
 8000720:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8000722:	4604      	mov	r4, r0
 8000724:	b330      	cbz	r0, 8000774 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000726:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800072a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800072e:	b91b      	cbnz	r3, 8000738 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8000730:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8000734:	f002 fdd6 	bl	80032e4 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000738:	6822      	ldr	r2, [r4, #0]
 800073a:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800073c:	2302      	movs	r3, #2
 800073e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800074c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800074e:	68a1      	ldr	r1, [r4, #8]
 8000750:	f023 0307 	bic.w	r3, r3, #7
 8000754:	430b      	orrs	r3, r1
 8000756:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000758:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800075a:	68e1      	ldr	r1, [r4, #12]
 800075c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000764:	430b      	orrs	r3, r1
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000768:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800076a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800076c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800076e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000772:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000774:	2001      	movs	r0, #1
}
 8000776:	bd10      	pop	{r4, pc}

08000778 <HAL_DMA2D_Start>:
{
 8000778:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800077a:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800077e:	2c01      	cmp	r4, #1
{
 8000780:	4605      	mov	r5, r0
 8000782:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hdma2d);
 8000786:	d00f      	beq.n	80007a8 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000788:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800078c:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800078e:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8000790:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000794:	9400      	str	r4, [sp, #0]
 8000796:	f7ff ff81 	bl	800069c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800079a:	682a      	ldr	r2, [r5, #0]
 800079c:	6813      	ldr	r3, [r2, #0]
 800079e:	4333      	orrs	r3, r6
 80007a0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80007a2:	2000      	movs	r0, #0
}
 80007a4:	b002      	add	sp, #8
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80007a8:	4620      	mov	r0, r4
 80007aa:	e7fb      	b.n	80007a4 <HAL_DMA2D_Start+0x2c>

080007ac <HAL_DMA2D_PollForTransfer>:
{
 80007ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80007b2:	6803      	ldr	r3, [r0, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	07db      	lsls	r3, r3, #31
{
 80007b8:	4604      	mov	r4, r0
 80007ba:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80007bc:	d417      	bmi.n	80007ee <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80007be:	6822      	ldr	r2, [r4, #0]
 80007c0:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80007c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007c4:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80007c6:	069e      	lsls	r6, r3, #26
 80007c8:	d506      	bpl.n	80007d8 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80007ca:	f7ff fee3 	bl	8000594 <HAL_GetTick>
 80007ce:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	06d2      	lsls	r2, r2, #27
 80007d6:	d543      	bpl.n	8000860 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	2212      	movs	r2, #18
 80007dc:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 80007de:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80007e6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80007ea:	b002      	add	sp, #8
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 80007ee:	f7ff fed1 	bl	8000594 <HAL_GetTick>
 80007f2:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	0792      	lsls	r2, r2, #30
 80007fa:	d4e0      	bmi.n	80007be <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000800:	9a01      	ldr	r2, [sp, #4]
 8000802:	f012 0f21 	tst.w	r2, #33	; 0x21
 8000806:	d017      	beq.n	8000838 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000808:	9a01      	ldr	r2, [sp, #4]
 800080a:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800080c:	bf42      	ittt	mi
 800080e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000810:	f042 0202 	orrmi.w	r2, r2, #2
 8000814:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000816:	9a01      	ldr	r2, [sp, #4]
 8000818:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800081a:	bf42      	ittt	mi
 800081c:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800081e:	f042 0201 	orrmi.w	r2, r2, #1
 8000822:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000824:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000826:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000828:	2304      	movs	r3, #4
 800082a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800082e:	2300      	movs	r3, #0
 8000830:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8000834:	2001      	movs	r0, #1
 8000836:	e7d8      	b.n	80007ea <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8000838:	1c69      	adds	r1, r5, #1
 800083a:	d0dc      	beq.n	80007f6 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800083c:	f7ff feaa 	bl	8000594 <HAL_GetTick>
 8000840:	1b80      	subs	r0, r0, r6
 8000842:	4285      	cmp	r5, r0
 8000844:	d301      	bcc.n	800084a <HAL_DMA2D_PollForTransfer+0x9e>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1d4      	bne.n	80007f4 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800084a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000852:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8000854:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000856:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800085a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800085e:	e7c4      	b.n	80007ea <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000864:	9a01      	ldr	r2, [sp, #4]
 8000866:	f012 0f29 	tst.w	r2, #41	; 0x29
 800086a:	d016      	beq.n	800089a <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800086c:	9a01      	ldr	r2, [sp, #4]
 800086e:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000870:	bf42      	ittt	mi
 8000872:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000874:	f042 0204 	orrmi.w	r2, r2, #4
 8000878:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800087a:	9a01      	ldr	r2, [sp, #4]
 800087c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800087e:	bf42      	ittt	mi
 8000880:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000882:	f042 0202 	orrmi.w	r2, r2, #2
 8000886:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000888:	9a01      	ldr	r2, [sp, #4]
 800088a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800088c:	bf42      	ittt	mi
 800088e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000890:	f042 0201 	orrmi.w	r2, r2, #1
 8000894:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000896:	2229      	movs	r2, #41	; 0x29
 8000898:	e7c5      	b.n	8000826 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 800089a:	1c69      	adds	r1, r5, #1
 800089c:	d099      	beq.n	80007d2 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800089e:	f7ff fe79 	bl	8000594 <HAL_GetTick>
 80008a2:	1b80      	subs	r0, r0, r6
 80008a4:	4285      	cmp	r5, r0
 80008a6:	d3d0      	bcc.n	800084a <HAL_DMA2D_PollForTransfer+0x9e>
 80008a8:	2d00      	cmp	r5, #0
 80008aa:	d191      	bne.n	80007d0 <HAL_DMA2D_PollForTransfer+0x24>
 80008ac:	e7cd      	b.n	800084a <HAL_DMA2D_PollForTransfer+0x9e>
	...

080008b0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80008b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80008b4:	2b01      	cmp	r3, #1
{
 80008b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 80008bc:	d036      	beq.n	800092c <HAL_DMA2D_ConfigLayer+0x7c>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80008be:	010e      	lsls	r6, r1, #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80008c0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80008c4:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 80008c6:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80008c8:	69dd      	ldr	r5, [r3, #28]
  __HAL_LOCK(hdma2d);
 80008ca:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80008ce:	6a1a      	ldr	r2, [r3, #32]
 80008d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80008d2:	4f1b      	ldr	r7, [pc, #108]	; (8000940 <HAL_DMA2D_ConfigLayer+0x90>)
 80008d4:	6803      	ldr	r3, [r0, #0]
 80008d6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80008da:	3d09      	subs	r5, #9
 80008dc:	2d01      	cmp	r5, #1
 80008de:	d80f      	bhi.n	8000900 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80008e0:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 80008e4:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80008e8:	b969      	cbnz	r1, 8000906 <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80008ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80008ec:	4039      	ands	r1, r7
 80008ee:	430a      	orrs	r2, r1
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80008f2:	6982      	ldr	r2, [r0, #24]
 80008f4:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80008f6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80008f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
 80008fe:	e00f      	b.n	8000920 <HAL_DMA2D_ConfigLayer+0x70>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000900:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000904:	b1a1      	cbz	r1, 8000930 <HAL_DMA2D_ConfigLayer+0x80>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000906:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000908:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800090a:	4039      	ands	r1, r7
 800090c:	430a      	orrs	r2, r1
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800090e:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000910:	61da      	str	r2, [r3, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000912:	bf98      	it	ls
 8000914:	f024 447f 	bicls.w	r4, r4, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000918:	69b2      	ldr	r2, [r6, #24]
 800091a:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800091c:	bf98      	it	ls
 800091e:	621c      	strls	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000920:	2301      	movs	r3, #1
 8000922:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8000926:	2300      	movs	r3, #0
 8000928:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800092c:	4618      	mov	r0, r3
 800092e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000930:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000932:	4039      	ands	r1, r7
 8000934:	430a      	orrs	r2, r1
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000938:	6982      	ldr	r2, [r0, #24]
 800093a:	619a      	str	r2, [r3, #24]
 800093c:	e7f0      	b.n	8000920 <HAL_DMA2D_ConfigLayer+0x70>
 800093e:	bf00      	nop
 8000940:	00fcfff0 	.word	0x00fcfff0

08000944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000b14 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000950:	4a6e      	ldr	r2, [pc, #440]	; (8000b0c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000952:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000b18 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000958:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800095a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000960:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000964:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000968:	45b6      	cmp	lr, r6
 800096a:	f040 80b6 	bne.w	8000ada <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	684c      	ldr	r4, [r1, #4]
 8000970:	f024 0710 	bic.w	r7, r4, #16
 8000974:	2f02      	cmp	r7, #2
 8000976:	d116      	bne.n	80009a6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000978:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800097c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000980:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000984:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000988:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800098c:	f04f 0c0f 	mov.w	ip, #15
 8000990:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000994:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000998:	690d      	ldr	r5, [r1, #16]
 800099a:	fa05 f50b 	lsl.w	r5, r5, fp
 800099e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009a2:	f8ca 5020 	str.w	r5, [sl, #32]
 80009a6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009aa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009ac:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009b0:	fa05 f50a 	lsl.w	r5, r5, sl
 80009b4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009b6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ba:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009be:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80009ca:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ce:	d811      	bhi.n	80009f4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80009d0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009d6:	68cf      	ldr	r7, [r1, #12]
 80009d8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80009dc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80009e0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009e2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009e8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009ec:	409f      	lsls	r7, r3
 80009ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80009f2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80009f4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009f6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f8:	688f      	ldr	r7, [r1, #8]
 80009fa:	fa07 f70a 	lsl.w	r7, r7, sl
 80009fe:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a00:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a02:	00e5      	lsls	r5, r4, #3
 8000a04:	d569      	bpl.n	8000ada <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	f04f 0b00 	mov.w	fp, #0
 8000a0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a0e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a12:	4d3f      	ldr	r5, [pc, #252]	; (8000b10 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a18:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a1c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a20:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a24:	9703      	str	r7, [sp, #12]
 8000a26:	9f03      	ldr	r7, [sp, #12]
 8000a28:	f023 0703 	bic.w	r7, r3, #3
 8000a2c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a30:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a34:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a38:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a3c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a40:	f04f 0e0f 	mov.w	lr, #15
 8000a44:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a48:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a4a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4e:	d04b      	beq.n	8000ae8 <HAL_GPIO_Init+0x1a4>
 8000a50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d049      	beq.n	8000aec <HAL_GPIO_Init+0x1a8>
 8000a58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a5c:	42a8      	cmp	r0, r5
 8000a5e:	d047      	beq.n	8000af0 <HAL_GPIO_Init+0x1ac>
 8000a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a64:	42a8      	cmp	r0, r5
 8000a66:	d045      	beq.n	8000af4 <HAL_GPIO_Init+0x1b0>
 8000a68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a6c:	42a8      	cmp	r0, r5
 8000a6e:	d043      	beq.n	8000af8 <HAL_GPIO_Init+0x1b4>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d043      	beq.n	8000afc <HAL_GPIO_Init+0x1b8>
 8000a74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000a78:	42a8      	cmp	r0, r5
 8000a7a:	d041      	beq.n	8000b00 <HAL_GPIO_Init+0x1bc>
 8000a7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a80:	42a8      	cmp	r0, r5
 8000a82:	d03f      	beq.n	8000b04 <HAL_GPIO_Init+0x1c0>
 8000a84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a88:	42a8      	cmp	r0, r5
 8000a8a:	d03d      	beq.n	8000b08 <HAL_GPIO_Init+0x1c4>
 8000a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	bf14      	ite	ne
 8000a94:	250a      	movne	r5, #10
 8000a96:	2509      	moveq	r5, #9
 8000a98:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a9c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000aa2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000aaa:	bf0c      	ite	eq
 8000aac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000aae:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ab0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000ab2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	bf0c      	ite	eq
 8000aba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000abc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000abe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	bf0c      	ite	eq
 8000ac8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000aca:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000acc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000ace:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	bf54      	ite	pl
 8000ad4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ad6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ad8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	3301      	adds	r3, #1
 8000adc:	2b10      	cmp	r3, #16
 8000ade:	f47f af3c 	bne.w	800095a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ae2:	b005      	add	sp, #20
 8000ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae8:	465d      	mov	r5, fp
 8000aea:	e7d5      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000aec:	2501      	movs	r5, #1
 8000aee:	e7d3      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000af0:	2502      	movs	r5, #2
 8000af2:	e7d1      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000af4:	2503      	movs	r5, #3
 8000af6:	e7cf      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000af8:	2504      	movs	r5, #4
 8000afa:	e7cd      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000afc:	2505      	movs	r5, #5
 8000afe:	e7cb      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000b00:	2506      	movs	r5, #6
 8000b02:	e7c9      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000b04:	2507      	movs	r5, #7
 8000b06:	e7c7      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000b08:	2508      	movs	r5, #8
 8000b0a:	e7c5      	b.n	8000a98 <HAL_GPIO_Init+0x154>
 8000b0c:	40013c00 	.word	0x40013c00
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40021400 	.word	0x40021400

08000b1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000b20:	4d46      	ldr	r5, [pc, #280]	; (8000c3c <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000b22:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000c44 <HAL_GPIO_DeInit+0x128>
 8000b26:	f8df a120 	ldr.w	sl, [pc, #288]	; 8000c48 <HAL_GPIO_DeInit+0x12c>
 8000b2a:	f8df b120 	ldr.w	fp, [pc, #288]	; 8000c4c <HAL_GPIO_DeInit+0x130>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8000b30:	2301      	movs	r3, #1
 8000b32:	fa03 fc02 	lsl.w	ip, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8000b36:	ea0c 0401 	and.w	r4, ip, r1
    if(iocurrent == ioposition)
 8000b3a:	45a4      	cmp	ip, r4
 8000b3c:	d167      	bne.n	8000c0e <HAL_GPIO_DeInit+0xf2>
 8000b3e:	f022 0603 	bic.w	r6, r2, #3
 8000b42:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b46:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000b4a:	f002 0e03 	and.w	lr, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000b50:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000b54:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b58:	270f      	movs	r7, #15
 8000b5a:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000b5e:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000b60:	ea08 0807 	and.w	r8, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000b64:	d058      	beq.n	8000c18 <HAL_GPIO_DeInit+0xfc>
 8000b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b6a:	4298      	cmp	r0, r3
 8000b6c:	d056      	beq.n	8000c1c <HAL_GPIO_DeInit+0x100>
 8000b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b72:	4298      	cmp	r0, r3
 8000b74:	d054      	beq.n	8000c20 <HAL_GPIO_DeInit+0x104>
 8000b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d052      	beq.n	8000c24 <HAL_GPIO_DeInit+0x108>
 8000b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d050      	beq.n	8000c28 <HAL_GPIO_DeInit+0x10c>
 8000b86:	4548      	cmp	r0, r9
 8000b88:	d050      	beq.n	8000c2c <HAL_GPIO_DeInit+0x110>
 8000b8a:	4550      	cmp	r0, sl
 8000b8c:	d050      	beq.n	8000c30 <HAL_GPIO_DeInit+0x114>
 8000b8e:	4558      	cmp	r0, fp
 8000b90:	d050      	beq.n	8000c34 <HAL_GPIO_DeInit+0x118>
 8000b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b96:	4298      	cmp	r0, r3
 8000b98:	d04e      	beq.n	8000c38 <HAL_GPIO_DeInit+0x11c>
 8000b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2309      	moveq	r3, #9
 8000ba4:	230a      	movne	r3, #10
 8000ba6:	fa03 f30e 	lsl.w	r3, r3, lr
 8000baa:	4598      	cmp	r8, r3
 8000bac:	d110      	bne.n	8000bd0 <HAL_GPIO_DeInit+0xb4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000bae:	68b3      	ldr	r3, [r6, #8]
 8000bb0:	ea23 0707 	bic.w	r7, r3, r7
 8000bb4:	60b7      	str	r7, [r6, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	43e4      	mvns	r4, r4
 8000bba:	4023      	ands	r3, r4
 8000bbc:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000bbe:	686b      	ldr	r3, [r5, #4]
 8000bc0:	4023      	ands	r3, r4
 8000bc2:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000bc4:	68ab      	ldr	r3, [r5, #8]
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000bca:	68eb      	ldr	r3, [r5, #12]
 8000bcc:	401c      	ands	r4, r3
 8000bce:	60ec      	str	r4, [r5, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd0:	0056      	lsls	r6, r2, #1
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	6804      	ldr	r4, [r0, #0]
 8000bd6:	40b3      	lsls	r3, r6
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401c      	ands	r4, r3
 8000bdc:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bde:	08d4      	lsrs	r4, r2, #3
 8000be0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8000be4:	f002 0e07 	and.w	lr, r2, #7
 8000be8:	6a26      	ldr	r6, [r4, #32]
 8000bea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000bee:	270f      	movs	r7, #15
 8000bf0:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bf4:	ea26 0707 	bic.w	r7, r6, r7
 8000bf8:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bfa:	6884      	ldr	r4, [r0, #8]
 8000bfc:	401c      	ands	r4, r3
 8000bfe:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c00:	6844      	ldr	r4, [r0, #4]
 8000c02:	ea24 040c 	bic.w	r4, r4, ip
 8000c06:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c08:	68c4      	ldr	r4, [r0, #12]
 8000c0a:	4023      	ands	r3, r4
 8000c0c:	60c3      	str	r3, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0e:	3201      	adds	r2, #1
 8000c10:	2a10      	cmp	r2, #16
 8000c12:	d18d      	bne.n	8000b30 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8000c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e7c4      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e7c2      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e7c0      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c24:	2303      	movs	r3, #3
 8000c26:	e7be      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e7bc      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	e7ba      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c30:	2306      	movs	r3, #6
 8000c32:	e7b8      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c34:	2307      	movs	r3, #7
 8000c36:	e7b6      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c38:	2308      	movs	r3, #8
 8000c3a:	e7b4      	b.n	8000ba6 <HAL_GPIO_DeInit+0x8a>
 8000c3c:	40013c00 	.word	0x40013c00
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021800 	.word	0x40021800
 8000c4c:	40021c00 	.word	0x40021c00

08000c50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c50:	b10a      	cbz	r2, 8000c56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c52:	6181      	str	r1, [r0, #24]
 8000c54:	4770      	bx	lr
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	e7fb      	b.n	8000c52 <HAL_GPIO_WritePin+0x2>

08000c5a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c5a:	6801      	ldr	r1, [r0, #0]
 8000c5c:	694b      	ldr	r3, [r1, #20]
 8000c5e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	d010      	beq.n	8000c8a <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c68:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000c6c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000c6e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000c70:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000c72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c76:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000c7a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
 8000c88:	4770      	bx	lr
  }
  return HAL_OK;
 8000c8a:	4618      	mov	r0, r3
}
 8000c8c:	4770      	bx	lr

08000c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000c8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c92:	4604      	mov	r4, r0
 8000c94:	4617      	mov	r7, r2
 8000c96:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000c98:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000c9c:	b28e      	uxth	r6, r1
 8000c9e:	6825      	ldr	r5, [r4, #0]
 8000ca0:	f1b8 0f01 	cmp.w	r8, #1
 8000ca4:	bf0c      	ite	eq
 8000ca6:	696b      	ldreq	r3, [r5, #20]
 8000ca8:	69ab      	ldrne	r3, [r5, #24]
 8000caa:	ea36 0303 	bics.w	r3, r6, r3
 8000cae:	bf14      	ite	ne
 8000cb0:	2001      	movne	r0, #1
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	b908      	cbnz	r0, 8000cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cba:	696b      	ldr	r3, [r5, #20]
 8000cbc:	055a      	lsls	r2, r3, #21
 8000cbe:	d516      	bpl.n	8000cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cc8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ccc:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cce:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cde:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ce2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ce4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cee:	1c7b      	adds	r3, r7, #1
 8000cf0:	d0d5      	beq.n	8000c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cf2:	f7ff fc4f 	bl	8000594 <HAL_GetTick>
 8000cf6:	eba0 0009 	sub.w	r0, r0, r9
 8000cfa:	4287      	cmp	r7, r0
 8000cfc:	d301      	bcc.n	8000d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d1cd      	bne.n	8000c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d02:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d04:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d06:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d12:	f042 0220 	orr.w	r2, r2, #32
 8000d16:	e7e4      	b.n	8000ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000d18 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	460d      	mov	r5, r1
 8000d1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	075b      	lsls	r3, r3, #29
 8000d26:	d501      	bpl.n	8000d2c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d28:	2000      	movs	r0, #0
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f7ff ff94 	bl	8000c5a <I2C_IsAcknowledgeFailed>
 8000d32:	b9a8      	cbnz	r0, 8000d60 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000d34:	1c6a      	adds	r2, r5, #1
 8000d36:	d0f3      	beq.n	8000d20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d38:	f7ff fc2c 	bl	8000594 <HAL_GetTick>
 8000d3c:	1b80      	subs	r0, r0, r6
 8000d3e:	4285      	cmp	r5, r0
 8000d40:	d301      	bcc.n	8000d46 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d1ec      	bne.n	8000d20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d46:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d48:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d4a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d54:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000d56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d5a:	f042 0220 	orr.w	r2, r2, #32
 8000d5e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000d60:	2001      	movs	r0, #1
}
 8000d62:	bd70      	pop	{r4, r5, r6, pc}

08000d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	4604      	mov	r4, r0
 8000d68:	460d      	mov	r5, r1
 8000d6a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	6943      	ldr	r3, [r0, #20]
 8000d70:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000d74:	d001      	beq.n	8000d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000d76:	2000      	movs	r0, #0
}
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000d7a:	6942      	ldr	r2, [r0, #20]
 8000d7c:	06d2      	lsls	r2, r2, #27
 8000d7e:	d50e      	bpl.n	8000d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d80:	f06f 0210 	mvn.w	r2, #16
 8000d84:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d86:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d94:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000d96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d9e:	f7ff fbf9 	bl	8000594 <HAL_GetTick>
 8000da2:	1b80      	subs	r0, r0, r6
 8000da4:	42a8      	cmp	r0, r5
 8000da6:	d801      	bhi.n	8000dac <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d1df      	bne.n	8000d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dac:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000db0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000db2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000db6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000dbc:	f042 0220 	orr.w	r2, r2, #32
 8000dc0:	e7e8      	b.n	8000d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000dc2 <I2C_WaitOnFlagUntilTimeout>:
{
 8000dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dc6:	9e08      	ldr	r6, [sp, #32]
 8000dc8:	4604      	mov	r4, r0
 8000dca:	4690      	mov	r8, r2
 8000dcc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dce:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000dd2:	b28d      	uxth	r5, r1
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	f1b9 0f01 	cmp.w	r9, #1
 8000dda:	bf0c      	ite	eq
 8000ddc:	695b      	ldreq	r3, [r3, #20]
 8000dde:	699b      	ldrne	r3, [r3, #24]
 8000de0:	ea35 0303 	bics.w	r3, r5, r3
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	4543      	cmp	r3, r8
 8000dec:	d002      	beq.n	8000df4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000dee:	2000      	movs	r0, #0
}
 8000df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000df4:	1c7b      	adds	r3, r7, #1
 8000df6:	d0ed      	beq.n	8000dd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000df8:	f7ff fbcc 	bl	8000594 <HAL_GetTick>
 8000dfc:	1b80      	subs	r0, r0, r6
 8000dfe:	4287      	cmp	r7, r0
 8000e00:	d301      	bcc.n	8000e06 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000e02:	2f00      	cmp	r7, #0
 8000e04:	d1e6      	bne.n	8000dd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e06:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e08:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e0a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e14:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e1a:	f042 0220 	orr.w	r2, r2, #32
 8000e1e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e20:	2001      	movs	r0, #1
 8000e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000e26 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000e26:	b570      	push	{r4, r5, r6, lr}
 8000e28:	4604      	mov	r4, r0
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	061b      	lsls	r3, r3, #24
 8000e34:	d501      	bpl.n	8000e3a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e36:	2000      	movs	r0, #0
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff ff0d 	bl	8000c5a <I2C_IsAcknowledgeFailed>
 8000e40:	b9a8      	cbnz	r0, 8000e6e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000e42:	1c6a      	adds	r2, r5, #1
 8000e44:	d0f3      	beq.n	8000e2e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e46:	f7ff fba5 	bl	8000594 <HAL_GetTick>
 8000e4a:	1b80      	subs	r0, r0, r6
 8000e4c:	4285      	cmp	r5, r0
 8000e4e:	d301      	bcc.n	8000e54 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d1ec      	bne.n	8000e2e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e54:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e56:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e58:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e62:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e68:	f042 0220 	orr.w	r2, r2, #32
 8000e6c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e6e:	2001      	movs	r0, #1
}
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e74 <I2C_RequestMemoryWrite>:
{
 8000e74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e78:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e7a:	6802      	ldr	r2, [r0, #0]
{
 8000e7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000e7e:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e80:	6813      	ldr	r3, [r2, #0]
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
{
 8000e88:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e8a:	9600      	str	r6, [sp, #0]
 8000e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000e94:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e96:	f7ff ff94 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 8000e9a:	b118      	cbz	r0, 8000ea4 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
}
 8000e9e:	b004      	add	sp, #16
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ea4:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ea8:	4918      	ldr	r1, [pc, #96]	; (8000f0c <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000eaa:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000eae:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	4633      	mov	r3, r6
 8000eb4:	f7ff feeb 	bl	8000c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d1ef      	bne.n	8000e9c <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	9003      	str	r0, [sp, #12]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	9203      	str	r2, [sp, #12]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ec8:	4632      	mov	r2, r6
 8000eca:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ecc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ffa9 	bl	8000e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ed4:	b140      	cbz	r0, 8000ee8 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ed8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eda:	bf01      	itttt	eq
 8000edc:	6822      	ldreq	r2, [r4, #0]
 8000ede:	6813      	ldreq	r3, [r2, #0]
 8000ee0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000ee4:	6013      	streq	r3, [r2, #0]
 8000ee6:	e7d9      	b.n	8000e9c <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ee8:	f1b8 0f01 	cmp.w	r8, #1
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	d102      	bne.n	8000ef6 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000ef0:	b2ed      	uxtb	r5, r5
 8000ef2:	611d      	str	r5, [r3, #16]
 8000ef4:	e7d3      	b.n	8000e9e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000ef6:	0a2a      	lsrs	r2, r5, #8
 8000ef8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000efa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000efc:	4632      	mov	r2, r6
 8000efe:	4620      	mov	r0, r4
 8000f00:	f7ff ff91 	bl	8000e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d1e6      	bne.n	8000ed6 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	e7f1      	b.n	8000ef0 <I2C_RequestMemoryWrite+0x7c>
 8000f0c:	00010002 	.word	0x00010002

08000f10 <I2C_RequestMemoryRead>:
{
 8000f10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f14:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f16:	6803      	ldr	r3, [r0, #0]
{
 8000f18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000f1a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f22:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f2a:	601a      	str	r2, [r3, #0]
{
 8000f2c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f2e:	9500      	str	r5, [sp, #0]
 8000f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000f38:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f3a:	f7ff ff42 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 8000f3e:	b118      	cbz	r0, 8000f48 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
}
 8000f42:	b004      	add	sp, #16
 8000f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f48:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f4a:	492b      	ldr	r1, [pc, #172]	; (8000ff8 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f4c:	b2ff      	uxtb	r7, r7
 8000f4e:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000f52:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f54:	4620      	mov	r0, r4
 8000f56:	462b      	mov	r3, r5
 8000f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f5a:	f7ff fe98 	bl	8000c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ee      	bne.n	8000f40 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	9003      	str	r0, [sp, #12]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	9203      	str	r2, [sp, #12]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f6e:	462a      	mov	r2, r5
 8000f70:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f72:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff ff56 	bl	8000e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f7a:	b140      	cbz	r0, 8000f8e <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f7e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f80:	bf01      	itttt	eq
 8000f82:	6822      	ldreq	r2, [r4, #0]
 8000f84:	6813      	ldreq	r3, [r2, #0]
 8000f86:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	streq	r3, [r2, #0]
 8000f8c:	e7d8      	b.n	8000f40 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f8e:	f1b8 0f01 	cmp.w	r8, #1
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	d125      	bne.n	8000fe2 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f96:	b2f6      	uxtb	r6, r6
 8000f98:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f9a:	462a      	mov	r2, r5
 8000f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff ff41 	bl	8000e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d1e8      	bne.n	8000f7c <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000faa:	6821      	ldr	r1, [r4, #0]
 8000fac:	680b      	ldr	r3, [r1, #0]
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	9500      	str	r5, [sp, #0]
 8000fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000fba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fbe:	f7ff ff00 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d1bc      	bne.n	8000f40 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000fc6:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000fca:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000fcc:	f047 0701 	orr.w	r7, r7, #1
 8000fd0:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	f7ff fe5a 	bl	8000c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8000fda:	3000      	adds	r0, #0
 8000fdc:	bf18      	it	ne
 8000fde:	2001      	movne	r0, #1
 8000fe0:	e7af      	b.n	8000f42 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000fe2:	0a32      	lsrs	r2, r6, #8
 8000fe4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fe6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000fe8:	462a      	mov	r2, r5
 8000fea:	4620      	mov	r0, r4
 8000fec:	f7ff ff1b 	bl	8000e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1c3      	bne.n	8000f7c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	e7ce      	b.n	8000f96 <I2C_RequestMemoryRead+0x86>
 8000ff8:	00010002 	.word	0x00010002

08000ffc <HAL_I2C_Init>:
{
 8000ffc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000ffe:	4604      	mov	r4, r0
 8001000:	b908      	cbnz	r0, 8001006 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001002:	2001      	movs	r0, #1
 8001004:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001006:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800100a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800100e:	b91b      	cbnz	r3, 8001018 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001010:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001014:	f002 fc24 	bl	8003860 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001018:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800101a:	2324      	movs	r3, #36	; 0x24
 800101c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001028:	f000 fe3e 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800102c:	6865      	ldr	r5, [r4, #4]
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <HAL_I2C_Init+0x138>)
 8001030:	429d      	cmp	r5, r3
 8001032:	d84d      	bhi.n	80010d0 <HAL_I2C_Init+0xd4>
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <HAL_I2C_Init+0x13c>)
 8001036:	4298      	cmp	r0, r3
 8001038:	d9e3      	bls.n	8001002 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800103a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800103c:	493f      	ldr	r1, [pc, #252]	; (800113c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800103e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001040:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001048:	430b      	orrs	r3, r1
 800104a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800104c:	6a13      	ldr	r3, [r2, #32]
 800104e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001052:	3101      	adds	r1, #1
 8001054:	4319      	orrs	r1, r3
 8001056:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001058:	69d1      	ldr	r1, [r2, #28]
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <HAL_I2C_Init+0x138>)
 800105c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001060:	429d      	cmp	r5, r3
 8001062:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001066:	f100 30ff 	add.w	r0, r0, #4294967295
 800106a:	d848      	bhi.n	80010fe <HAL_I2C_Init+0x102>
 800106c:	006d      	lsls	r5, r5, #1
 800106e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001072:	3001      	adds	r0, #1
 8001074:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	bf38      	it	cc
 800107c:	2304      	movcc	r3, #4
 800107e:	430b      	orrs	r3, r1
 8001080:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001082:	6811      	ldr	r1, [r2, #0]
 8001084:	6a20      	ldr	r0, [r4, #32]
 8001086:	69e3      	ldr	r3, [r4, #28]
 8001088:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800108c:	4303      	orrs	r3, r0
 800108e:	430b      	orrs	r3, r1
 8001090:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001092:	6891      	ldr	r1, [r2, #8]
 8001094:	68e0      	ldr	r0, [r4, #12]
 8001096:	6923      	ldr	r3, [r4, #16]
 8001098:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800109c:	4303      	orrs	r3, r0
 800109e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80010a2:	430b      	orrs	r3, r1
 80010a4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010a6:	68d1      	ldr	r1, [r2, #12]
 80010a8:	69a0      	ldr	r0, [r4, #24]
 80010aa:	6963      	ldr	r3, [r4, #20]
 80010ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80010b0:	4303      	orrs	r3, r0
 80010b2:	430b      	orrs	r3, r1
 80010b4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010be:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80010c0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_I2C_Init+0x144>)
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d995      	bls.n	8001002 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010d6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80010d8:	4e18      	ldr	r6, [pc, #96]	; (800113c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010da:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80010dc:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e4:	4333      	orrs	r3, r6
 80010e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e8:	6a13      	ldr	r3, [r2, #32]
 80010ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010ee:	4371      	muls	r1, r6
 80010f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80010f8:	fbb1 f1f6 	udiv	r1, r1, r6
 80010fc:	e7a9      	b.n	8001052 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010fe:	68a3      	ldr	r3, [r4, #8]
 8001100:	b953      	cbnz	r3, 8001118 <HAL_I2C_Init+0x11c>
 8001102:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001106:	fbb0 f0f3 	udiv	r0, r0, r3
 800110a:	1c43      	adds	r3, r0, #1
 800110c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001110:	b16b      	cbz	r3, 800112e <HAL_I2C_Init+0x132>
 8001112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001116:	e7b2      	b.n	800107e <HAL_I2C_Init+0x82>
 8001118:	2319      	movs	r3, #25
 800111a:	436b      	muls	r3, r5
 800111c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001120:	1c43      	adds	r3, r0, #1
 8001122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001126:	b113      	cbz	r3, 800112e <HAL_I2C_Init+0x132>
 8001128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112c:	e7a7      	b.n	800107e <HAL_I2C_Init+0x82>
 800112e:	2301      	movs	r3, #1
 8001130:	e7a5      	b.n	800107e <HAL_I2C_Init+0x82>
 8001132:	bf00      	nop
 8001134:	000186a0 	.word	0x000186a0
 8001138:	001e847f 	.word	0x001e847f
 800113c:	000f4240 	.word	0x000f4240
 8001140:	003d08ff 	.word	0x003d08ff

08001144 <HAL_I2C_DeInit>:
{
 8001144:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001146:	4604      	mov	r4, r0
 8001148:	b198      	cbz	r0, 8001172 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800114a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800114c:	2324      	movs	r3, #36	; 0x24
 800114e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800115a:	f002 fbd5 	bl	8003908 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800115e:	2000      	movs	r0, #0
 8001160:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8001162:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001166:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800116a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800116c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001170:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
}
 8001174:	bd10      	pop	{r4, pc}
	...

08001178 <HAL_I2C_Mem_Write>:
{
 8001178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800117c:	4604      	mov	r4, r0
 800117e:	4699      	mov	r9, r3
 8001180:	460f      	mov	r7, r1
 8001182:	4690      	mov	r8, r2
 8001184:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001186:	f7ff fa05 	bl	8000594 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800118a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800118e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001190:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001192:	d003      	beq.n	800119c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001194:	2002      	movs	r0, #2
}
 8001196:	b003      	add	sp, #12
 8001198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800119c:	9000      	str	r0, [sp, #0]
 800119e:	2319      	movs	r3, #25
 80011a0:	2201      	movs	r2, #1
 80011a2:	493b      	ldr	r1, [pc, #236]	; (8001290 <HAL_I2C_Mem_Write+0x118>)
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fe0c 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d1f2      	bne.n	8001194 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80011ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d0ee      	beq.n	8001194 <HAL_I2C_Mem_Write+0x1c>
 80011b6:	2301      	movs	r3, #1
 80011b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80011c2:	bf5e      	ittt	pl
 80011c4:	681a      	ldrpl	r2, [r3, #0]
 80011c6:	f042 0201 	orrpl.w	r2, r2, #1
 80011ca:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011d4:	2321      	movs	r3, #33	; 0x21
 80011d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80011e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011e8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80011ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011f0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_I2C_Mem_Write+0x11c>)
 80011f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011f6:	9501      	str	r5, [sp, #4]
 80011f8:	9600      	str	r6, [sp, #0]
 80011fa:	464b      	mov	r3, r9
 80011fc:	4642      	mov	r2, r8
 80011fe:	4639      	mov	r1, r7
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fe37 	bl	8000e74 <I2C_RequestMemoryWrite>
 8001206:	2800      	cmp	r0, #0
 8001208:	d02a      	beq.n	8001260 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	e7c3      	b.n	8001196 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800120e:	f7ff fe0a 	bl	8000e26 <I2C_WaitOnTXEFlagUntilTimeout>
 8001212:	b140      	cbz	r0, 8001226 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001216:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001218:	bf01      	itttt	eq
 800121a:	6822      	ldreq	r2, [r4, #0]
 800121c:	6813      	ldreq	r3, [r2, #0]
 800121e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001222:	6013      	streq	r3, [r2, #0]
 8001224:	e7f1      	b.n	800120a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001228:	6827      	ldr	r7, [r4, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001230:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001232:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001234:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001236:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001238:	3a01      	subs	r2, #1
 800123a:	b292      	uxth	r2, r2
 800123c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800123e:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001240:	1e48      	subs	r0, r1, #1
 8001242:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001244:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001246:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001248:	d50a      	bpl.n	8001260 <HAL_I2C_Mem_Write+0xe8>
 800124a:	b148      	cbz	r0, 8001260 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800124c:	785a      	ldrb	r2, [r3, #1]
 800124e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001250:	3302      	adds	r3, #2
 8001252:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001254:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001256:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001258:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800125a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800125c:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800125e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001260:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001262:	462a      	mov	r2, r5
 8001264:	4631      	mov	r1, r6
 8001266:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1d0      	bne.n	800120e <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126c:	f7ff fd54 	bl	8000d18 <I2C_WaitOnBTFFlagUntilTimeout>
 8001270:	2800      	cmp	r0, #0
 8001272:	d1cf      	bne.n	8001214 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800127e:	2320      	movs	r3, #32
 8001280:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001284:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800128c:	e783      	b.n	8001196 <HAL_I2C_Mem_Write+0x1e>
 800128e:	bf00      	nop
 8001290:	00100002 	.word	0x00100002
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_I2C_Mem_Read>:
{
 8001298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800129c:	4604      	mov	r4, r0
 800129e:	b087      	sub	sp, #28
 80012a0:	4699      	mov	r9, r3
 80012a2:	460d      	mov	r5, r1
 80012a4:	4690      	mov	r8, r2
 80012a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff f974 	bl	8000594 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80012b0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80012b2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b4:	d004      	beq.n	80012c0 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80012b6:	2502      	movs	r5, #2
}
 80012b8:	4628      	mov	r0, r5
 80012ba:	b007      	add	sp, #28
 80012bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012c0:	9000      	str	r0, [sp, #0]
 80012c2:	2319      	movs	r3, #25
 80012c4:	2201      	movs	r2, #1
 80012c6:	4977      	ldr	r1, [pc, #476]	; (80014a4 <HAL_I2C_Mem_Read+0x20c>)
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fd7a 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d1f1      	bne.n	80012b6 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80012d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d0ed      	beq.n	80012b6 <HAL_I2C_Mem_Read+0x1e>
 80012da:	2301      	movs	r3, #1
 80012dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80012e6:	bf5e      	ittt	pl
 80012e8:	681a      	ldrpl	r2, [r3, #0]
 80012ea:	f042 0201 	orrpl.w	r2, r2, #1
 80012ee:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012f6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012f8:	2322      	movs	r3, #34	; 0x22
 80012fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	2300      	movs	r3, #0
 8001306:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800130a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800130c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001310:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001312:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001314:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001316:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_I2C_Mem_Read+0x210>)
 8001318:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800131a:	4629      	mov	r1, r5
 800131c:	9601      	str	r6, [sp, #4]
 800131e:	9700      	str	r7, [sp, #0]
 8001320:	464b      	mov	r3, r9
 8001322:	4642      	mov	r2, r8
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fdf3 	bl	8000f10 <I2C_RequestMemoryRead>
 800132a:	4605      	mov	r5, r0
 800132c:	b108      	cbz	r0, 8001332 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800132e:	2501      	movs	r5, #1
 8001330:	e7c2      	b.n	80012b8 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001332:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	b992      	cbnz	r2, 800135e <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001338:	9002      	str	r0, [sp, #8]
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	9202      	str	r2, [sp, #8]
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	9202      	str	r2, [sp, #8]
 8001342:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800134c:	2320      	movs	r3, #32
 800134e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001358:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800135c:	e7ac      	b.n	80012b8 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800135e:	2a01      	cmp	r2, #1
 8001360:	d12c      	bne.n	80013bc <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800136a:	9003      	str	r0, [sp, #12]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	9203      	str	r2, [sp, #12]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	9203      	str	r2, [sp, #12]
 8001374:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800137c:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800137e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80014ac <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8001382:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0e1      	beq.n	800134c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001388:	2b03      	cmp	r3, #3
 800138a:	d86e      	bhi.n	800146a <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 800138c:	2b01      	cmp	r3, #1
 800138e:	d12d      	bne.n	80013ec <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001390:	4632      	mov	r2, r6
 8001392:	4639      	mov	r1, r7
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fce5 	bl	8000d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800139a:	2800      	cmp	r0, #0
 800139c:	d1c7      	bne.n	800132e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013a2:	6912      	ldr	r2, [r2, #16]
 80013a4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80013a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013a8:	3301      	adds	r3, #1
 80013aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80013ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013ae:	3b01      	subs	r3, #1
 80013b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80013b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80013ba:	e7e2      	b.n	8001382 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 80013bc:	2a02      	cmp	r2, #2
 80013be:	d10e      	bne.n	80013de <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ce:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013d0:	9004      	str	r0, [sp, #16]
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	9204      	str	r2, [sp, #16]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	9304      	str	r3, [sp, #16]
 80013da:	9b04      	ldr	r3, [sp, #16]
 80013dc:	e7cf      	b.n	800137e <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013de:	9005      	str	r0, [sp, #20]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	9205      	str	r2, [sp, #20]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	9305      	str	r3, [sp, #20]
 80013e8:	9b05      	ldr	r3, [sp, #20]
 80013ea:	e7c8      	b.n	800137e <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 80013ec:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ee:	9600      	str	r6, [sp, #0]
 80013f0:	463b      	mov	r3, r7
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4641      	mov	r1, r8
 80013f8:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80013fa:	d119      	bne.n	8001430 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013fc:	f7ff fce1 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 8001400:	2800      	cmp	r0, #0
 8001402:	d194      	bne.n	800132e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800140e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001414:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001416:	1c53      	adds	r3, r2, #1
 8001418:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800141a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800141c:	3b01      	subs	r3, #1
 800141e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001420:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001422:	3b01      	subs	r3, #1
 8001424:	b29b      	uxth	r3, r3
 8001426:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001428:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	7053      	strb	r3, [r2, #1]
 800142e:	e7ba      	b.n	80013a6 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001430:	f7ff fcc7 	bl	8000dc2 <I2C_WaitOnFlagUntilTimeout>
 8001434:	4602      	mov	r2, r0
 8001436:	2800      	cmp	r0, #0
 8001438:	f47f af79 	bne.w	800132e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001444:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001446:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 800144c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800144e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8001450:	3301      	adds	r3, #1
 8001452:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001454:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001456:	3b01      	subs	r3, #1
 8001458:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800145a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800145c:	3b01      	subs	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001462:	4641      	mov	r1, r8
 8001464:	463b      	mov	r3, r7
 8001466:	4620      	mov	r0, r4
 8001468:	e7c8      	b.n	80013fc <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800146a:	4632      	mov	r2, r6
 800146c:	4639      	mov	r1, r7
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff fc78 	bl	8000d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001474:	2800      	cmp	r0, #0
 8001476:	f47f af5a 	bne.w	800132e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800147a:	6822      	ldr	r2, [r4, #0]
 800147c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800147e:	6912      	ldr	r2, [r2, #16]
 8001480:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001482:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001484:	1c53      	adds	r3, r2, #1
 8001486:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001488:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800148a:	3b01      	subs	r3, #1
 800148c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800148e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001490:	3b01      	subs	r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	0749      	lsls	r1, r1, #29
 800149c:	f57f af71 	bpl.w	8001382 <HAL_I2C_Mem_Read+0xea>
 80014a0:	e7c3      	b.n	800142a <HAL_I2C_Mem_Read+0x192>
 80014a2:	bf00      	nop
 80014a4:	00100002 	.word	0x00100002
 80014a8:	ffff0000 	.word	0xffff0000
 80014ac:	00010004 	.word	0x00010004

080014b0 <HAL_I2C_GetState>:
  return hi2c->State;
 80014b0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80014b4:	4770      	bx	lr

080014b6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	2a20      	cmp	r2, #32
{
 80014be:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c0:	d116      	bne.n	80014f0 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80014c2:	2324      	movs	r3, #36	; 0x24
 80014c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014c8:	6803      	ldr	r3, [r0, #0]
 80014ca:	681c      	ldr	r4, [r3, #0]
 80014cc:	f024 0401 	bic.w	r4, r4, #1
 80014d0:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80014d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80014d4:	f024 0410 	bic.w	r4, r4, #16
 80014d8:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80014da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80014dc:	4321      	orrs	r1, r4
 80014de:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	f041 0101 	orr.w	r1, r1, #1
 80014e6:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 80014ec:	2000      	movs	r0, #0
 80014ee:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80014f0:	2002      	movs	r0, #2
  }
}
 80014f2:	bd10      	pop	{r4, pc}

080014f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014f4:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f6:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80014fa:	b2e4      	uxtb	r4, r4
 80014fc:	2c20      	cmp	r4, #32
 80014fe:	d116      	bne.n	800152e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001500:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001502:	2324      	movs	r3, #36	; 0x24
 8001504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001508:	6815      	ldr	r5, [r2, #0]
 800150a:	f025 0501 	bic.w	r5, r5, #1
 800150e:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001510:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001512:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001516:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001518:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800151a:	b29b      	uxth	r3, r3
 800151c:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001526:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 800152a:	2000      	movs	r0, #0
 800152c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 800152e:	2002      	movs	r0, #2
  }
}
 8001530:	bd30      	pop	{r4, r5, pc}

08001532 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001536:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001538:	6804      	ldr	r4, [r0, #0]
 800153a:	684f      	ldr	r7, [r1, #4]
 800153c:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800153e:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001542:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001546:	3284      	adds	r2, #132	; 0x84
 8001548:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800154a:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800154e:	6858      	ldr	r0, [r3, #4]
 8001550:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001554:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001556:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001558:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800155c:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001560:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001562:	4430      	add	r0, r6
 8001564:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001568:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800156a:	68e0      	ldr	r0, [r4, #12]
 800156c:	68cd      	ldr	r5, [r1, #12]
 800156e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001572:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001574:	6898      	ldr	r0, [r3, #8]
 8001576:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800157a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800157c:	68e6      	ldr	r6, [r4, #12]
 800157e:	6888      	ldr	r0, [r1, #8]
 8001580:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001584:	3001      	adds	r0, #1
 8001586:	4430      	add	r0, r6
 8001588:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800158c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800158e:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001590:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001592:	f020 0007 	bic.w	r0, r0, #7
 8001596:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001598:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800159c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800159e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80015a0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80015a4:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80015a8:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80015ac:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80015b0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80015b4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80015b8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80015bc:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80015be:	6958      	ldr	r0, [r3, #20]
 80015c0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80015c4:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80015c6:	6948      	ldr	r0, [r1, #20]
 80015c8:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80015ca:	69d8      	ldr	r0, [r3, #28]
 80015cc:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80015d0:	f020 0007 	bic.w	r0, r0, #7
 80015d4:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80015d6:	6a08      	ldr	r0, [r1, #32]
 80015d8:	69cd      	ldr	r5, [r1, #28]
 80015da:	4305      	orrs	r5, r0
 80015dc:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80015de:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80015e0:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80015e2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80015e6:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80015e8:	b31e      	cbz	r6, 8001632 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80015ea:	2e01      	cmp	r6, #1
 80015ec:	d023      	beq.n	8001636 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80015ee:	1eb0      	subs	r0, r6, #2
 80015f0:	2802      	cmp	r0, #2
 80015f2:	d922      	bls.n	800163a <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80015f4:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80015f6:	bf0c      	ite	eq
 80015f8:	2002      	moveq	r0, #2
 80015fa:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80015fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80015fe:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001602:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001604:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001606:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001608:	eba7 070e 	sub.w	r7, r7, lr
 800160c:	4345      	muls	r5, r0
 800160e:	4378      	muls	r0, r7
 8001610:	3003      	adds	r0, #3
 8001612:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001616:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001618:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800161a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800161e:	f020 0007 	bic.w	r0, r0, #7
 8001622:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001624:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001626:	58a3      	ldr	r3, [r4, r2]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	50a3      	str	r3, [r4, r2]
 800162e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8001632:	2004      	movs	r0, #4
 8001634:	e7e2      	b.n	80015fc <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001636:	2003      	movs	r0, #3
 8001638:	e7e0      	b.n	80015fc <LTDC_SetConfig+0xca>
    tmp = 2U;
 800163a:	2002      	movs	r0, #2
 800163c:	e7de      	b.n	80015fc <LTDC_SetConfig+0xca>
	...

08001640 <HAL_LTDC_Init>:
{
 8001640:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8001642:	4604      	mov	r4, r0
 8001644:	2800      	cmp	r0, #0
 8001646:	d063      	beq.n	8001710 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001648:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800164c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001650:	b91b      	cbnz	r3, 800165a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001652:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001656:	f002 fc5d 	bl	8003f14 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800165a:	2302      	movs	r3, #2
 800165c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001660:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001662:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800166a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800166c:	6862      	ldr	r2, [r4, #4]
 800166e:	6999      	ldr	r1, [r3, #24]
 8001670:	4302      	orrs	r2, r0
 8001672:	68e0      	ldr	r0, [r4, #12]
 8001674:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001676:	6920      	ldr	r0, [r4, #16]
 8001678:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800167a:	430a      	orrs	r2, r1
 800167c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4924      	ldr	r1, [pc, #144]	; (8001714 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001682:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001684:	400a      	ands	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800168e:	69a0      	ldr	r0, [r4, #24]
 8001690:	4302      	orrs	r2, r0
 8001692:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001694:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001696:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001698:	400a      	ands	r2, r1
 800169a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80016a2:	6a20      	ldr	r0, [r4, #32]
 80016a4:	4302      	orrs	r2, r0
 80016a6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80016a8:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80016aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80016ac:	400a      	ands	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80016b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016b8:	4302      	orrs	r2, r0
 80016ba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	4011      	ands	r1, r2
 80016c0:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80016c2:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80016c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80016c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80016cc:	430a      	orrs	r2, r1
 80016ce:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80016d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80016d2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80016d6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80016da:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80016de:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80016e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80016e6:	430a      	orrs	r2, r1
 80016e8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80016ec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80016f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f4:	f042 0206 	orr.w	r2, r2, #6
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	f042 0201 	orr.w	r2, r2, #1
 8001700:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001702:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001704:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001706:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800170a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800170e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
}
 8001712:	bd38      	pop	{r3, r4, r5, pc}
 8001714:	f000f800 	.word	0xf000f800

08001718 <HAL_LTDC_ConfigLayer>:
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800171a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800171e:	2b01      	cmp	r3, #1
{
 8001720:	4606      	mov	r6, r0
 8001722:	468e      	mov	lr, r1
 8001724:	4694      	mov	ip, r2
 8001726:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800172a:	d01d      	beq.n	8001768 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800172c:	2434      	movs	r4, #52	; 0x34
 800172e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001730:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001734:	fb04 6402 	mla	r4, r4, r2, r6
 8001738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 800173a:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800173c:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 800173e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001750:	4630      	mov	r0, r6
 8001752:	4662      	mov	r2, ip
 8001754:	4671      	mov	r1, lr
 8001756:	f7ff feec 	bl	8001532 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800175a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800175c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800175e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001760:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001764:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800176c <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 800176c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001770:	2b01      	cmp	r3, #1
 8001772:	f04f 0302 	mov.w	r3, #2
 8001776:	d00c      	beq.n	8001792 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800177a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800177e:	6993      	ldr	r3, [r2, #24]
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001786:	2301      	movs	r3, #1
 8001788:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800178c:	2300      	movs	r3, #0
 800178e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001792:	4618      	mov	r0, r3
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40016800 	.word	0x40016800

0800179c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800179c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017a4:	4c18      	ldr	r4, [pc, #96]	; (8001808 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_PWREx_EnableOverDrive+0x70>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80017be:	f7fe fee9 	bl	8000594 <HAL_GetTick>
 80017c2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	03da      	lsls	r2, r3, #15
 80017c8:	d50b      	bpl.n	80017e2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017cc:	4c0e      	ldr	r4, [pc, #56]	; (8001808 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80017d2:	f7fe fedf 	bl	8000594 <HAL_GetTick>
 80017d6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d8:	6863      	ldr	r3, [r4, #4]
 80017da:	039b      	lsls	r3, r3, #14
 80017dc:	d50a      	bpl.n	80017f4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80017de:	2000      	movs	r0, #0
 80017e0:	e006      	b.n	80017f0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017e2:	f7fe fed7 	bl	8000594 <HAL_GetTick>
 80017e6:	1b40      	subs	r0, r0, r5
 80017e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017ec:	d9ea      	bls.n	80017c4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80017ee:	2003      	movs	r0, #3
}
 80017f0:	b003      	add	sp, #12
 80017f2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f4:	f7fe fece 	bl	8000594 <HAL_GetTick>
 80017f8:	1b40      	subs	r0, r0, r5
 80017fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017fe:	d9eb      	bls.n	80017d8 <HAL_PWREx_EnableOverDrive+0x3c>
 8001800:	e7f5      	b.n	80017ee <HAL_PWREx_EnableOverDrive+0x52>
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000
 800180c:	420e0040 	.word	0x420e0040
 8001810:	420e0044 	.word	0x420e0044

08001814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	4604      	mov	r4, r0
 800181a:	b918      	cbnz	r0, 8001824 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800181c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800181e:	b002      	add	sp, #8
 8001820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001824:	6803      	ldr	r3, [r0, #0]
 8001826:	07dd      	lsls	r5, r3, #31
 8001828:	d410      	bmi.n	800184c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	0798      	lsls	r0, r3, #30
 800182e:	d458      	bmi.n	80018e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	071a      	lsls	r2, r3, #28
 8001834:	f100 809a 	bmi.w	800196c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	075b      	lsls	r3, r3, #29
 800183c:	f100 80b8 	bmi.w	80019b0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	69a2      	ldr	r2, [r4, #24]
 8001842:	2a00      	cmp	r2, #0
 8001844:	f040 8119 	bne.w	8001a7a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001848:	2000      	movs	r0, #0
 800184a:	e7e8      	b.n	800181e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184c:	4ba6      	ldr	r3, [pc, #664]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	f002 020c 	and.w	r2, r2, #12
 8001854:	2a04      	cmp	r2, #4
 8001856:	d007      	beq.n	8001868 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185e:	2a08      	cmp	r2, #8
 8001860:	d10a      	bne.n	8001878 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	0259      	lsls	r1, r3, #9
 8001866:	d507      	bpl.n	8001878 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4b9f      	ldr	r3, [pc, #636]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	039a      	lsls	r2, r3, #14
 800186e:	d5dc      	bpl.n	800182a <HAL_RCC_OscConfig+0x16>
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1d9      	bne.n	800182a <HAL_RCC_OscConfig+0x16>
 8001876:	e7d1      	b.n	800181c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	4d9b      	ldr	r5, [pc, #620]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d111      	bne.n	80018a6 <HAL_RCC_OscConfig+0x92>
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800188a:	f7fe fe83 	bl	8000594 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4d96      	ldr	r5, [pc, #600]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001890:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	039b      	lsls	r3, r3, #14
 8001896:	d4c8      	bmi.n	800182a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001898:	f7fe fe7c 	bl	8000594 <HAL_GetTick>
 800189c:	1b80      	subs	r0, r0, r6
 800189e:	2864      	cmp	r0, #100	; 0x64
 80018a0:	d9f7      	bls.n	8001892 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80018a2:	2003      	movs	r0, #3
 80018a4:	e7bb      	b.n	800181e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018aa:	d104      	bne.n	80018b6 <HAL_RCC_OscConfig+0xa2>
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b2:	602b      	str	r3, [r5, #0]
 80018b4:	e7e5      	b.n	8001882 <HAL_RCC_OscConfig+0x6e>
 80018b6:	682a      	ldr	r2, [r5, #0]
 80018b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018bc:	602a      	str	r2, [r5, #0]
 80018be:	682a      	ldr	r2, [r5, #0]
 80018c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1df      	bne.n	800188a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80018ca:	f7fe fe63 	bl	8000594 <HAL_GetTick>
 80018ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	039f      	lsls	r7, r3, #14
 80018d4:	d5a9      	bpl.n	800182a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d6:	f7fe fe5d 	bl	8000594 <HAL_GetTick>
 80018da:	1b80      	subs	r0, r0, r6
 80018dc:	2864      	cmp	r0, #100	; 0x64
 80018de:	d9f7      	bls.n	80018d0 <HAL_RCC_OscConfig+0xbc>
 80018e0:	e7df      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018e2:	4b81      	ldr	r3, [pc, #516]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	f012 0f0c 	tst.w	r2, #12
 80018ea:	d007      	beq.n	80018fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f2:	2a08      	cmp	r2, #8
 80018f4:	d111      	bne.n	800191a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	025e      	lsls	r6, r3, #9
 80018fa:	d40e      	bmi.n	800191a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fc:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	0795      	lsls	r5, r2, #30
 8001902:	d502      	bpl.n	800190a <HAL_RCC_OscConfig+0xf6>
 8001904:	68e2      	ldr	r2, [r4, #12]
 8001906:	2a01      	cmp	r2, #1
 8001908:	d188      	bne.n	800181c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6921      	ldr	r1, [r4, #16]
 800190e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001912:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001916:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001918:	e78a      	b.n	8001830 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800191a:	68e2      	ldr	r2, [r4, #12]
 800191c:	4b73      	ldr	r3, [pc, #460]	; (8001aec <HAL_RCC_OscConfig+0x2d8>)
 800191e:	b1b2      	cbz	r2, 800194e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001924:	f7fe fe36 	bl	8000594 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4d6f      	ldr	r5, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800192a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	0798      	lsls	r0, r3, #30
 8001930:	d507      	bpl.n	8001942 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	6922      	ldr	r2, [r4, #16]
 8001936:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800193a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800193e:	602b      	str	r3, [r5, #0]
 8001940:	e776      	b.n	8001830 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001942:	f7fe fe27 	bl	8000594 <HAL_GetTick>
 8001946:	1b80      	subs	r0, r0, r6
 8001948:	2802      	cmp	r0, #2
 800194a:	d9ef      	bls.n	800192c <HAL_RCC_OscConfig+0x118>
 800194c:	e7a9      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800194e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001950:	f7fe fe20 	bl	8000594 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001954:	4d64      	ldr	r5, [pc, #400]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001956:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	0799      	lsls	r1, r3, #30
 800195c:	f57f af68 	bpl.w	8001830 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7fe fe18 	bl	8000594 <HAL_GetTick>
 8001964:	1b80      	subs	r0, r0, r6
 8001966:	2802      	cmp	r0, #2
 8001968:	d9f6      	bls.n	8001958 <HAL_RCC_OscConfig+0x144>
 800196a:	e79a      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800196c:	6962      	ldr	r2, [r4, #20]
 800196e:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <HAL_RCC_OscConfig+0x2dc>)
 8001970:	b17a      	cbz	r2, 8001992 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001976:	f7fe fe0d 	bl	8000594 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4d5b      	ldr	r5, [pc, #364]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800197c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001980:	079f      	lsls	r7, r3, #30
 8001982:	f53f af59 	bmi.w	8001838 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7fe fe05 	bl	8000594 <HAL_GetTick>
 800198a:	1b80      	subs	r0, r0, r6
 800198c:	2802      	cmp	r0, #2
 800198e:	d9f6      	bls.n	800197e <HAL_RCC_OscConfig+0x16a>
 8001990:	e787      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001992:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001994:	f7fe fdfe 	bl	8000594 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4d53      	ldr	r5, [pc, #332]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800199a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800199e:	0798      	lsls	r0, r3, #30
 80019a0:	f57f af4a 	bpl.w	8001838 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a4:	f7fe fdf6 	bl	8000594 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	2802      	cmp	r0, #2
 80019ac:	d9f6      	bls.n	800199c <HAL_RCC_OscConfig+0x188>
 80019ae:	e778      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 80019b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80019b8:	d128      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4d48      	ldr	r5, [pc, #288]	; (8001af4 <HAL_RCC_OscConfig+0x2e0>)
 80019d2:	682b      	ldr	r3, [r5, #0]
 80019d4:	05d9      	lsls	r1, r3, #23
 80019d6:	d51b      	bpl.n	8001a10 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	68a3      	ldr	r3, [r4, #8]
 80019da:	4d43      	ldr	r5, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d127      	bne.n	8001a30 <HAL_RCC_OscConfig+0x21c>
 80019e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80019e8:	f7fe fdd4 	bl	8000594 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	4d3e      	ldr	r5, [pc, #248]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019ee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019f6:	079b      	lsls	r3, r3, #30
 80019f8:	d539      	bpl.n	8001a6e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80019fa:	2e00      	cmp	r6, #0
 80019fc:	f43f af20 	beq.w	8001840 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 8001a02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	e719      	b.n	8001840 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2600      	movs	r6, #0
 8001a0e:	e7df      	b.n	80019d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a18:	f7fe fdbc 	bl	8000594 <HAL_GetTick>
 8001a1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	682b      	ldr	r3, [r5, #0]
 8001a20:	05da      	lsls	r2, r3, #23
 8001a22:	d4d9      	bmi.n	80019d8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7fe fdb6 	bl	8000594 <HAL_GetTick>
 8001a28:	1bc0      	subs	r0, r0, r7
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d9f7      	bls.n	8001a1e <HAL_RCC_OscConfig+0x20a>
 8001a2e:	e738      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d104      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22a>
 8001a34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	672b      	str	r3, [r5, #112]	; 0x70
 8001a3c:	e7d0      	b.n	80019e0 <HAL_RCC_OscConfig+0x1cc>
 8001a3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	672a      	str	r2, [r5, #112]	; 0x70
 8001a46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a48:	f022 0204 	bic.w	r2, r2, #4
 8001a4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ca      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a52:	f7fe fd9f 	bl	8000594 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a5e:	0798      	lsls	r0, r3, #30
 8001a60:	d5cb      	bpl.n	80019fa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7fe fd97 	bl	8000594 <HAL_GetTick>
 8001a66:	1bc0      	subs	r0, r0, r7
 8001a68:	4540      	cmp	r0, r8
 8001a6a:	d9f7      	bls.n	8001a5c <HAL_RCC_OscConfig+0x248>
 8001a6c:	e719      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7fe fd91 	bl	8000594 <HAL_GetTick>
 8001a72:	1bc0      	subs	r0, r0, r7
 8001a74:	4540      	cmp	r0, r8
 8001a76:	d9bd      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1e0>
 8001a78:	e713      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7a:	4d1b      	ldr	r5, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
 8001a7c:	68ab      	ldr	r3, [r5, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	f43f aeca 	beq.w	800181c <HAL_RCC_OscConfig+0x8>
 8001a88:	4e1b      	ldr	r6, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x2e4>)
 8001a8a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a90:	d134      	bne.n	8001afc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a92:	f7fe fd7f 	bl	8000594 <HAL_GetTick>
 8001a96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	0199      	lsls	r1, r3, #6
 8001a9c:	d41e      	bmi.n	8001adc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9e:	6a22      	ldr	r2, [r4, #32]
 8001aa0:	69e3      	ldr	r3, [r4, #28]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001aa6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ab0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4c0d      	ldr	r4, [pc, #52]	; (8001ae8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab4:	0852      	lsrs	r2, r2, #1
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001abc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001abe:	2301      	movs	r3, #1
 8001ac0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ac2:	f7fe fd67 	bl	8000594 <HAL_GetTick>
 8001ac6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	019a      	lsls	r2, r3, #6
 8001acc:	f53f aebc 	bmi.w	8001848 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe fd60 	bl	8000594 <HAL_GetTick>
 8001ad4:	1b40      	subs	r0, r0, r5
 8001ad6:	2802      	cmp	r0, #2
 8001ad8:	d9f6      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x2b4>
 8001ada:	e6e2      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe fd5a 	bl	8000594 <HAL_GetTick>
 8001ae0:	1bc0      	subs	r0, r0, r7
 8001ae2:	2802      	cmp	r0, #2
 8001ae4:	d9d8      	bls.n	8001a98 <HAL_RCC_OscConfig+0x284>
 8001ae6:	e6dc      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	42470000 	.word	0x42470000
 8001af0:	42470e80 	.word	0x42470e80
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001afc:	f7fe fd4a 	bl	8000594 <HAL_GetTick>
 8001b00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	682b      	ldr	r3, [r5, #0]
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	f57f ae9f 	bpl.w	8001848 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7fe fd43 	bl	8000594 <HAL_GetTick>
 8001b0e:	1b00      	subs	r0, r0, r4
 8001b10:	2802      	cmp	r0, #2
 8001b12:	d9f6      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2ee>
 8001b14:	e6c5      	b.n	80018a2 <HAL_RCC_OscConfig+0x8e>
 8001b16:	bf00      	nop

08001b18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4913      	ldr	r1, [pc, #76]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1c:	688b      	ldr	r3, [r1, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x16>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b2a:	4810      	ldr	r0, [pc, #64]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001b2e:	4810      	ldr	r0, [pc, #64]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b30:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b34:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3c:	bf14      	ite	ne
 8001b3e:	480c      	ldrne	r0, [pc, #48]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b40:	480a      	ldreq	r0, [pc, #40]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b46:	bf18      	it	ne
 8001b48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b52:	f7fe fb4d 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_ClockConfig>:
{
 8001b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	b910      	cbnz	r0, 8001b84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_RCC_ClockConfig+0x124>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f002 020f 	and.w	r2, r2, #15
 8001b8c:	428a      	cmp	r2, r1
 8001b8e:	d328      	bcc.n	8001be2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	6821      	ldr	r1, [r4, #0]
 8001b92:	078f      	lsls	r7, r1, #30
 8001b94:	d42d      	bmi.n	8001bf2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	07c8      	lsls	r0, r1, #31
 8001b98:	d440      	bmi.n	8001c1c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_ClockConfig+0x124>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f002 020f 	and.w	r2, r2, #15
 8001ba2:	4295      	cmp	r5, r2
 8001ba4:	d366      	bcc.n	8001c74 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	0751      	lsls	r1, r2, #29
 8001baa:	d46c      	bmi.n	8001c86 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	0713      	lsls	r3, r2, #28
 8001bae:	d507      	bpl.n	8001bc0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb0:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_RCC_ClockConfig+0x128>)
 8001bb2:	6921      	ldr	r1, [r4, #16]
 8001bb4:	6893      	ldr	r3, [r2, #8]
 8001bb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc0:	f7ff ffaa 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCC_ClockConfig+0x128>)
 8001bc6:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x12c>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	40d8      	lsrs	r0, r3
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_RCC_ClockConfig+0x130>)
 8001bd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f7fe fc92 	bl	8000500 <HAL_InitTick>
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	4299      	cmp	r1, r3
 8001bee:	d1c6      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xa>
 8001bf0:	e7ce      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1c>
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	bf1e      	ittt	ne
 8001bfa:	689a      	ldrne	r2, [r3, #8]
 8001bfc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001c00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c04:	bf42      	ittt	mi
 8001c06:	689a      	ldrmi	r2, [r3, #8]
 8001c08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	68a0      	ldr	r0, [r4, #8]
 8001c12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c16:	4302      	orrs	r2, r0
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	e7bc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_RCC_ClockConfig+0x128>)
 8001c20:	2a01      	cmp	r2, #1
 8001c22:	d11d      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	d0a8      	beq.n	8001b7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2c:	4e1b      	ldr	r6, [pc, #108]	; (8001c9c <HAL_RCC_ClockConfig+0x128>)
 8001c2e:	68b3      	ldr	r3, [r6, #8]
 8001c30:	f023 0303 	bic.w	r3, r3, #3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001c38:	f7fe fcac 	bl	8000594 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	68b3      	ldr	r3, [r6, #8]
 8001c44:	6862      	ldr	r2, [r4, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c4e:	d0a4      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c50:	f7fe fca0 	bl	8000594 <HAL_GetTick>
 8001c54:	1bc0      	subs	r0, r0, r7
 8001c56:	4540      	cmp	r0, r8
 8001c58:	d9f3      	bls.n	8001c42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
}
 8001c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c60:	1e91      	subs	r1, r2, #2
 8001c62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c66:	d802      	bhi.n	8001c6e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c6c:	e7dd      	b.n	8001c2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	f013 0f02 	tst.w	r3, #2
 8001c72:	e7da      	b.n	8001c2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c74:	b2ea      	uxtb	r2, r5
 8001c76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	429d      	cmp	r5, r3
 8001c80:	f47f af7d 	bne.w	8001b7e <HAL_RCC_ClockConfig+0xa>
 8001c84:	e78f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c86:	4905      	ldr	r1, [pc, #20]	; (8001c9c <HAL_RCC_ClockConfig+0x128>)
 8001c88:	68e0      	ldr	r0, [r4, #12]
 8001c8a:	688b      	ldr	r3, [r1, #8]
 8001c8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c90:	4303      	orrs	r3, r0
 8001c92:	608b      	str	r3, [r1, #8]
 8001c94:	e78a      	b.n	8001bac <HAL_RCC_ClockConfig+0x38>
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08007959 	.word	0x08007959
 8001ca4:	20000090 	.word	0x20000090

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cb6:	6810      	ldr	r0, [r2, #0]
}
 8001cb8:	40d8      	lsrs	r0, r3
 8001cba:	4770      	bx	lr
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	08007969 	.word	0x08007969
 8001cc4:	20000090 	.word	0x20000090

08001cc8 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cc8:	6803      	ldr	r3, [r0, #0]
{
 8001cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ccc:	079a      	lsls	r2, r3, #30
{
 8001cce:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cd0:	f040 8088 	bne.w	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f013 0f0c 	tst.w	r3, #12
 8001cda:	d044      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001cdc:	4d80      	ldr	r5, [pc, #512]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cde:	4e81      	ldr	r6, [pc, #516]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001ce4:	f7fe fc56 	bl	8000594 <HAL_GetTick>
 8001ce8:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cea:	6833      	ldr	r3, [r6, #0]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f100 80bd 	bmi.w	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001cf2:	6821      	ldr	r1, [r4, #0]
 8001cf4:	074f      	lsls	r7, r1, #29
 8001cf6:	d515      	bpl.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cf8:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001cfa:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cfe:	6920      	ldr	r0, [r4, #16]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001d06:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d10:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8001d14:	6a22      	ldr	r2, [r4, #32]
 8001d16:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001d1a:	3a01      	subs	r2, #1
 8001d1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d20:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d24:	070e      	lsls	r6, r1, #28
 8001d26:	d514      	bpl.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d28:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d2a:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d2c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d30:	6920      	ldr	r0, [r4, #16]
 8001d32:	071b      	lsls	r3, r3, #28
 8001d34:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001d38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d42:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d52:	2301      	movs	r3, #1
 8001d54:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d56:	f7fe fc1d 	bl	8000594 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d5a:	4d62      	ldr	r5, [pc, #392]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001d5c:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	0098      	lsls	r0, r3, #2
 8001d62:	f140 808a 	bpl.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	069a      	lsls	r2, r3, #26
 8001d6a:	d531      	bpl.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d72:	4d5d      	ldr	r5, [pc, #372]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d8e:	f7fe fc01 	bl	8000594 <HAL_GetTick>
 8001d92:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	05d9      	lsls	r1, r3, #23
 8001d98:	d576      	bpl.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9a:	4d52      	ldr	r5, [pc, #328]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001d9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d9e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001da2:	d177      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001da6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001daa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001dae:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001db0:	f040 8091 	bne.w	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8001db4:	6891      	ldr	r1, [r2, #8]
 8001db6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001dba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001dbe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001dc2:	4301      	orrs	r1, r0
 8001dc4:	6091      	str	r1, [r2, #8]
 8001dc6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dd6:	bf1f      	itttt	ne
 8001dd8:	4b44      	ldrne	r3, [pc, #272]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dda:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8001dde:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8001de0:	2000      	movne	r0, #0
 8001de2:	e041      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8001de4:	4d42      	ldr	r5, [pc, #264]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001de6:	4e3f      	ldr	r6, [pc, #252]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001dec:	f7fe fbd2 	bl	8000594 <HAL_GetTick>
 8001df0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001df2:	6833      	ldr	r3, [r6, #0]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	d431      	bmi.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	07d7      	lsls	r7, r2, #31
 8001dfc:	d506      	bpl.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001dfe:	68a3      	ldr	r3, [r4, #8]
 8001e00:	6861      	ldr	r1, [r4, #4]
 8001e02:	071b      	lsls	r3, r3, #28
 8001e04:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001e08:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001e0c:	0790      	lsls	r0, r2, #30
 8001e0e:	d515      	bpl.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e10:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001e12:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e14:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001e18:	6860      	ldr	r0, [r4, #4]
 8001e1a:	061b      	lsls	r3, r3, #24
 8001e1c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001e20:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e2a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001e2e:	69e3      	ldr	r3, [r4, #28]
 8001e30:	f021 011f 	bic.w	r1, r1, #31
 8001e34:	3b01      	subs	r3, #1
 8001e36:	430b      	orrs	r3, r1
 8001e38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001e40:	f7fe fba8 	bl	8000594 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e44:	4d27      	ldr	r5, [pc, #156]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001e46:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	0119      	lsls	r1, r3, #4
 8001e4c:	f53f af42 	bmi.w	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e50:	f7fe fba0 	bl	8000594 <HAL_GetTick>
 8001e54:	1b80      	subs	r0, r0, r6
 8001e56:	2802      	cmp	r0, #2
 8001e58:	d9f6      	bls.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001e5a:	e004      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e5c:	f7fe fb9a 	bl	8000594 <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9c5      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
}
 8001e68:	b003      	add	sp, #12
 8001e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e6c:	f7fe fb92 	bl	8000594 <HAL_GetTick>
 8001e70:	1bc0      	subs	r0, r0, r7
 8001e72:	2802      	cmp	r0, #2
 8001e74:	f67f af39 	bls.w	8001cea <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001e78:	e7f5      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e7a:	f7fe fb8b 	bl	8000594 <HAL_GetTick>
 8001e7e:	1b80      	subs	r0, r0, r6
 8001e80:	2802      	cmp	r0, #2
 8001e82:	f67f af6c 	bls.w	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8001e86:	e7ee      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e88:	f7fe fb84 	bl	8000594 <HAL_GetTick>
 8001e8c:	1b80      	subs	r0, r0, r6
 8001e8e:	2802      	cmp	r0, #2
 8001e90:	d980      	bls.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001e92:	e7e8      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e96:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d082      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001eae:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001eb2:	07da      	lsls	r2, r3, #31
 8001eb4:	f57f af76 	bpl.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fb6c 	bl	8000594 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ec0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ec4:	079b      	lsls	r3, r3, #30
 8001ec6:	f53f af6d 	bmi.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe fb63 	bl	8000594 <HAL_GetTick>
 8001ece:	1b80      	subs	r0, r0, r6
 8001ed0:	42b8      	cmp	r0, r7
 8001ed2:	d9f6      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001ed4:	e7c7      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed6:	6891      	ldr	r1, [r2, #8]
 8001ed8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001edc:	e772      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001ede:	bf00      	nop
 8001ee0:	42470070 	.word	0x42470070
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	424711e0 	.word	0x424711e0
 8001ef0:	42470068 	.word	0x42470068
 8001ef4:	42470e40 	.word	0x42470e40

08001ef8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8001efc:	4604      	mov	r4, r0
 8001efe:	b1c8      	cbz	r0, 8001f34 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001f00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001f04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f08:	b91b      	cbnz	r3, 8001f12 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001f0a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001f0e:	f001 fa31 	bl	8003374 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001f18:	1d21      	adds	r1, r4, #4
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	f000 fb1a 	bl	8002554 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001f20:	6862      	ldr	r2, [r4, #4]
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	4629      	mov	r1, r5
 8001f26:	f000 fb54 	bl	80025d2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8001f30:	2000      	movs	r0, #0
 8001f32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f34:	2001      	movs	r0, #1
}
 8001f36:	bd38      	pop	{r3, r4, r5, pc}

08001f38 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001f3c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8001f40:	b2c0      	uxtb	r0, r0
 8001f42:	2802      	cmp	r0, #2
{
 8001f44:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001f46:	d00d      	beq.n	8001f64 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001f4e:	6820      	ldr	r0, [r4, #0]
 8001f50:	f000 fb87 	bl	8002662 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001f58:	bf0c      	ite	eq
 8001f5a:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8001f62:	2000      	movs	r0, #0
}
 8001f64:	bd38      	pop	{r3, r4, r5, pc}

08001f66 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001f66:	b510      	push	{r4, lr}
 8001f68:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001f6a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8001f6e:	b2c0      	uxtb	r0, r0
 8001f70:	2802      	cmp	r0, #2
 8001f72:	d009      	beq.n	8001f88 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001f7a:	6820      	ldr	r0, [r4, #0]
 8001f7c:	f000 fb96 	bl	80026ac <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8001f86:	2000      	movs	r0, #0
}
 8001f88:	bd10      	pop	{r4, pc}

08001f8a <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001f8a:	b570      	push	{r4, r5, r6, lr}
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	4616      	mov	r6, r2
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	6898      	ldr	r0, [r3, #8]
 8001f96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f9a:	d100      	bne.n	8001f9e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
      }
    }
  }

  return HAL_OK;
}
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	1c6a      	adds	r2, r5, #1
 8001fa0:	d0f8      	beq.n	8001f94 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001fa2:	f7fe faf7 	bl	8000594 <HAL_GetTick>
 8001fa6:	1b80      	subs	r0, r0, r6
 8001fa8:	4285      	cmp	r5, r0
 8001faa:	d8f2      	bhi.n	8001f92 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fb4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb6:	6862      	ldr	r2, [r4, #4]
 8001fb8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001fbc:	d10a      	bne.n	8001fd4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4a>
 8001fbe:	68a2      	ldr	r2, [r4, #8]
 8001fc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fc4:	d002      	beq.n	8001fcc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x42>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001fca:	d103      	bne.n	8001fd4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fd6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001fda:	d107      	bne.n	8001fec <SPI_WaitFlagStateUntilTimeout.constprop.7+0x62>
          SPI_RESET_CRC(hspi);
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}

08001ffc <SPI_EndRxTransaction>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffc:	6843      	ldr	r3, [r0, #4]
 8001ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002002:	b510      	push	{r4, lr}
 8002004:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002006:	d10b      	bne.n	8002020 <SPI_EndRxTransaction+0x24>
 8002008:	6883      	ldr	r3, [r0, #8]
 800200a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200e:	d002      	beq.n	8002016 <SPI_EndRxTransaction+0x1a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002014:	d104      	bne.n	8002020 <SPI_EndRxTransaction+0x24>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002016:	6820      	ldr	r0, [r4, #0]
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800201e:	6003      	str	r3, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff ffb2 	bl	8001f8a <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8002026:	b120      	cbz	r0, 8002032 <SPI_EndRxTransaction+0x36>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002028:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002030:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8002032:	bd10      	pop	{r4, pc}

08002034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002038:	f7ff ffa7 	bl	8001f8a <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800203c:	b120      	cbz	r0, 8002048 <SPI_EndRxTxTransaction+0x14>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800203e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8002048:	bd10      	pop	{r4, pc}

0800204a <HAL_SPI_Init>:
{
 800204a:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800204c:	4604      	mov	r4, r0
 800204e:	2800      	cmp	r0, #0
 8002050:	d036      	beq.n	80020c0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002056:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800205a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800205e:	b91b      	cbnz	r3, 8002068 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002060:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002064:	f002 f968 	bl	8004338 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002068:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800206a:	68a0      	ldr	r0, [r4, #8]
 800206c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002074:	680b      	ldr	r3, [r1, #0]
 8002076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800207a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800207c:	6863      	ldr	r3, [r4, #4]
 800207e:	4303      	orrs	r3, r0
 8002080:	68e0      	ldr	r0, [r4, #12]
 8002082:	4303      	orrs	r3, r0
 8002084:	6920      	ldr	r0, [r4, #16]
 8002086:	4303      	orrs	r3, r0
 8002088:	6960      	ldr	r0, [r4, #20]
 800208a:	4303      	orrs	r3, r0
 800208c:	69e0      	ldr	r0, [r4, #28]
 800208e:	4303      	orrs	r3, r0
 8002090:	6a20      	ldr	r0, [r4, #32]
 8002092:	4303      	orrs	r3, r0
 8002094:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002096:	4303      	orrs	r3, r0
 8002098:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800209c:	4303      	orrs	r3, r0
 800209e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80020a0:	0c12      	lsrs	r2, r2, #16
 80020a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a4:	f002 0204 	and.w	r2, r2, #4
 80020a8:	431a      	orrs	r2, r3
 80020aa:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ac:	69cb      	ldr	r3, [r1, #28]
 80020ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020b2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80020b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80020be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020c0:	2001      	movs	r0, #1
}
 80020c2:	bd10      	pop	{r4, pc}

080020c4 <HAL_SPI_DeInit>:
{
 80020c4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80020c6:	4604      	mov	r4, r0
 80020c8:	b180      	cbz	r0, 80020ec <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80020ca:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80020cc:	2302      	movs	r3, #2
 80020ce:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80020da:	f002 f98b 	bl	80043f4 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020de:	2000      	movs	r0, #0
 80020e0:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80020e2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80020e6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 80020ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020ec:	2001      	movs	r0, #1
}
 80020ee:	bd10      	pop	{r4, pc}

080020f0 <HAL_SPI_Transmit>:
{
 80020f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80020f4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80020f6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80020fa:	2b01      	cmp	r3, #1
{
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002102:	f000 809b 	beq.w	800223c <HAL_SPI_Transmit+0x14c>
 8002106:	2301      	movs	r3, #1
 8002108:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800210c:	f7fe fa42 	bl	8000594 <HAL_GetTick>
 8002110:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002112:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002116:	b2c0      	uxtb	r0, r0
 8002118:	2801      	cmp	r0, #1
 800211a:	f040 808d 	bne.w	8002238 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 800211e:	2d00      	cmp	r5, #0
 8002120:	d05d      	beq.n	80021de <HAL_SPI_Transmit+0xee>
 8002122:	f1b8 0f00 	cmp.w	r8, #0
 8002126:	d05a      	beq.n	80021de <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002128:	2303      	movs	r3, #3
 800212a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800212e:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002130:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002132:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002134:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002136:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800213a:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800213c:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800213e:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002140:	6420      	str	r0, [r4, #64]	; 0x40
 8002142:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002144:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800214a:	bf08      	it	eq
 800214c:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 800214e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002152:	bf04      	itt	eq
 8002154:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002158:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215a:	6803      	ldr	r3, [r0, #0]
 800215c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800215e:	bf5e      	ittt	pl
 8002160:	6803      	ldrpl	r3, [r0, #0]
 8002162:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002166:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002168:	68e3      	ldr	r3, [r4, #12]
 800216a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800216e:	6863      	ldr	r3, [r4, #4]
 8002170:	d13e      	bne.n	80021f0 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002172:	b113      	cbz	r3, 800217a <HAL_SPI_Transmit+0x8a>
 8002174:	f1b8 0f01 	cmp.w	r8, #1
 8002178:	d107      	bne.n	800218a <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800217e:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002180:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002182:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002184:	3b01      	subs	r3, #1
 8002186:	b29b      	uxth	r3, r3
 8002188:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800218a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800218c:	b29b      	uxth	r3, r3
 800218e:	b9a3      	cbnz	r3, 80021ba <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002190:	463a      	mov	r2, r7
 8002192:	4631      	mov	r1, r6
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff ff4d 	bl	8002034 <SPI_EndRxTxTransaction>
 800219a:	2800      	cmp	r0, #0
 800219c:	d149      	bne.n	8002232 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	b933      	cbnz	r3, 80021b0 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	9201      	str	r2, [sp, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80021b2:	3000      	adds	r0, #0
 80021b4:	bf18      	it	ne
 80021b6:	2001      	movne	r0, #1
 80021b8:	e011      	b.n	80021de <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	6893      	ldr	r3, [r2, #8]
 80021be:	0798      	lsls	r0, r3, #30
 80021c0:	d505      	bpl.n	80021ce <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021c4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80021c8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ca:	6323      	str	r3, [r4, #48]	; 0x30
 80021cc:	e7d9      	b.n	8002182 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ce:	f7fe f9e1 	bl	8000594 <HAL_GetTick>
 80021d2:	1bc0      	subs	r0, r0, r7
 80021d4:	42b0      	cmp	r0, r6
 80021d6:	d3d8      	bcc.n	800218a <HAL_SPI_Transmit+0x9a>
 80021d8:	1c71      	adds	r1, r6, #1
 80021da:	d0d6      	beq.n	800218a <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021de:	2301      	movs	r3, #1
 80021e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021e4:	2300      	movs	r3, #0
 80021e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80021ea:	b002      	add	sp, #8
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f0:	b113      	cbz	r3, 80021f8 <HAL_SPI_Transmit+0x108>
 80021f2:	f1b8 0f01 	cmp.w	r8, #1
 80021f6:	d108      	bne.n	800220a <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021f8:	782b      	ldrb	r3, [r5, #0]
 80021fa:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021fe:	3301      	adds	r3, #1
 8002200:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002202:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002204:	3b01      	subs	r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800220a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0be      	beq.n	8002190 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	0792      	lsls	r2, r2, #30
 8002218:	d503      	bpl.n	8002222 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	731a      	strb	r2, [r3, #12]
 8002220:	e7ec      	b.n	80021fc <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002222:	f7fe f9b7 	bl	8000594 <HAL_GetTick>
 8002226:	1bc0      	subs	r0, r0, r7
 8002228:	4286      	cmp	r6, r0
 800222a:	d8ee      	bhi.n	800220a <HAL_SPI_Transmit+0x11a>
 800222c:	1c73      	adds	r3, r6, #1
 800222e:	d0ec      	beq.n	800220a <HAL_SPI_Transmit+0x11a>
 8002230:	e7d4      	b.n	80021dc <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002232:	2320      	movs	r3, #32
 8002234:	6563      	str	r3, [r4, #84]	; 0x54
 8002236:	e7b2      	b.n	800219e <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002238:	2002      	movs	r0, #2
 800223a:	e7d0      	b.n	80021de <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800223c:	2002      	movs	r0, #2
 800223e:	e7d4      	b.n	80021ea <HAL_SPI_Transmit+0xfa>

08002240 <HAL_SPI_TransmitReceive>:
{
 8002240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002244:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002246:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800224a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800224c:	2b01      	cmp	r3, #1
{
 800224e:	4604      	mov	r4, r0
 8002250:	460d      	mov	r5, r1
 8002252:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002254:	f000 80e2 	beq.w	800241c <HAL_SPI_TransmitReceive+0x1dc>
 8002258:	2301      	movs	r3, #1
 800225a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800225e:	f7fe f999 	bl	8000594 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002262:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002266:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002268:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800226a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800226c:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800226e:	d00a      	beq.n	8002286 <HAL_SPI_TransmitReceive+0x46>
 8002270:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002274:	f040 80d0 	bne.w	8002418 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002278:	68a0      	ldr	r0, [r4, #8]
 800227a:	2800      	cmp	r0, #0
 800227c:	f040 80cc 	bne.w	8002418 <HAL_SPI_TransmitReceive+0x1d8>
 8002280:	2b04      	cmp	r3, #4
 8002282:	f040 80c9 	bne.w	8002418 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002286:	2d00      	cmp	r5, #0
 8002288:	f000 80c4 	beq.w	8002414 <HAL_SPI_TransmitReceive+0x1d4>
 800228c:	f1b9 0f00 	cmp.w	r9, #0
 8002290:	f000 80c0 	beq.w	8002414 <HAL_SPI_TransmitReceive+0x1d4>
 8002294:	2e00      	cmp	r6, #0
 8002296:	f000 80bd 	beq.w	8002414 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800229a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800229e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022a2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a4:	bf1c      	itt	ne
 80022a6:	2305      	movne	r3, #5
 80022a8:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80022b0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022b2:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80022b6:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80022b8:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ba:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80022bc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022be:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80022c0:	bf58      	it	pl
 80022c2:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022c4:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80022c6:	bf58      	it	pl
 80022c8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80022cc:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80022ce:	bf58      	it	pl
 80022d0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d2:	68e2      	ldr	r2, [r4, #12]
 80022d4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022d8:	d158      	bne.n	800238c <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022da:	b109      	cbz	r1, 80022e0 <HAL_SPI_TransmitReceive+0xa0>
 80022dc:	2e01      	cmp	r6, #1
 80022de:	d107      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80022e4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80022e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e8:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80022f0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b9ab      	cbnz	r3, 8002324 <HAL_SPI_TransmitReceive+0xe4>
 80022f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b993      	cbnz	r3, 8002324 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022fe:	4642      	mov	r2, r8
 8002300:	4639      	mov	r1, r7
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff fe96 	bl	8002034 <SPI_EndRxTxTransaction>
 8002308:	2800      	cmp	r0, #0
 800230a:	f040 8081 	bne.w	8002410 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800230e:	68a3      	ldr	r3, [r4, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d132      	bne.n	800237a <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	9001      	str	r0, [sp, #4]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	9201      	str	r2, [sp, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	9b01      	ldr	r3, [sp, #4]
 8002322:	e02a      	b.n	800237a <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	6893      	ldr	r3, [r2, #8]
 8002328:	0799      	lsls	r1, r3, #30
 800232a:	d50d      	bpl.n	8002348 <HAL_SPI_TransmitReceive+0x108>
 800232c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800232e:	b29b      	uxth	r3, r3
 8002330:	b153      	cbz	r3, 8002348 <HAL_SPI_TransmitReceive+0x108>
 8002332:	b14d      	cbz	r5, 8002348 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002336:	f833 1b02 	ldrh.w	r1, [r3], #2
 800233a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800233c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800233e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002340:	3b01      	subs	r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002346:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002348:	6893      	ldr	r3, [r2, #8]
 800234a:	07db      	lsls	r3, r3, #31
 800234c:	d50c      	bpl.n	8002368 <HAL_SPI_TransmitReceive+0x128>
 800234e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002350:	b29b      	uxth	r3, r3
 8002352:	b14b      	cbz	r3, 8002368 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800235c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800235e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002360:	3b01      	subs	r3, #1
 8002362:	b29b      	uxth	r3, r3
 8002364:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002366:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002368:	f7fe f914 	bl	8000594 <HAL_GetTick>
 800236c:	eba0 0008 	sub.w	r0, r0, r8
 8002370:	4287      	cmp	r7, r0
 8002372:	d8be      	bhi.n	80022f2 <HAL_SPI_TransmitReceive+0xb2>
 8002374:	1c7e      	adds	r6, r7, #1
 8002376:	d0bc      	beq.n	80022f2 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002378:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800237a:	2301      	movs	r3, #1
 800237c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002380:	2300      	movs	r3, #0
 8002382:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002386:	b003      	add	sp, #12
 8002388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238c:	b109      	cbz	r1, 8002392 <HAL_SPI_TransmitReceive+0x152>
 800238e:	2e01      	cmp	r6, #1
 8002390:	d108      	bne.n	80023a4 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002392:	782a      	ldrb	r2, [r5, #0]
 8002394:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002396:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002398:	3301      	adds	r3, #1
 800239a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800239c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80023a4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b91b      	cbnz	r3, 80023b4 <HAL_SPI_TransmitReceive+0x174>
 80023ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0a4      	beq.n	80022fe <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023b4:	6822      	ldr	r2, [r4, #0]
 80023b6:	6893      	ldr	r3, [r2, #8]
 80023b8:	0798      	lsls	r0, r3, #30
 80023ba:	d50e      	bpl.n	80023da <HAL_SPI_TransmitReceive+0x19a>
 80023bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b15b      	cbz	r3, 80023da <HAL_SPI_TransmitReceive+0x19a>
 80023c2:	b155      	cbz	r5, 80023da <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80023ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023cc:	3301      	adds	r3, #1
 80023ce:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80023d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80023d8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023da:	6822      	ldr	r2, [r4, #0]
 80023dc:	6893      	ldr	r3, [r2, #8]
 80023de:	07d9      	lsls	r1, r3, #31
 80023e0:	d50d      	bpl.n	80023fe <HAL_SPI_TransmitReceive+0x1be>
 80023e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b153      	cbz	r3, 80023fe <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023ea:	68d2      	ldr	r2, [r2, #12]
 80023ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023f0:	3301      	adds	r3, #1
 80023f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80023f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80023fc:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023fe:	f7fe f8c9 	bl	8000594 <HAL_GetTick>
 8002402:	eba0 0008 	sub.w	r0, r0, r8
 8002406:	4287      	cmp	r7, r0
 8002408:	d8cd      	bhi.n	80023a6 <HAL_SPI_TransmitReceive+0x166>
 800240a:	1c7b      	adds	r3, r7, #1
 800240c:	d0cb      	beq.n	80023a6 <HAL_SPI_TransmitReceive+0x166>
 800240e:	e7b3      	b.n	8002378 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002410:	2320      	movs	r3, #32
 8002412:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e7b0      	b.n	800237a <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002418:	2002      	movs	r0, #2
 800241a:	e7ae      	b.n	800237a <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800241c:	2002      	movs	r0, #2
 800241e:	e7b2      	b.n	8002386 <HAL_SPI_TransmitReceive+0x146>

08002420 <HAL_SPI_Receive>:
{
 8002420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002424:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002426:	6843      	ldr	r3, [r0, #4]
 8002428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800242c:	4604      	mov	r4, r0
 800242e:	4688      	mov	r8, r1
 8002430:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002432:	d10c      	bne.n	800244e <HAL_SPI_Receive+0x2e>
 8002434:	6883      	ldr	r3, [r0, #8]
 8002436:	b953      	cbnz	r3, 800244e <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002438:	2304      	movs	r3, #4
 800243a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800243e:	4613      	mov	r3, r2
 8002440:	9500      	str	r5, [sp, #0]
 8002442:	460a      	mov	r2, r1
 8002444:	f7ff fefc 	bl	8002240 <HAL_SPI_TransmitReceive>
}
 8002448:	b002      	add	sp, #8
 800244a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800244e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002452:	2b01      	cmp	r3, #1
 8002454:	d079      	beq.n	800254a <HAL_SPI_Receive+0x12a>
 8002456:	2301      	movs	r3, #1
 8002458:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800245c:	f7fe f89a 	bl	8000594 <HAL_GetTick>
 8002460:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002462:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002466:	b2c0      	uxtb	r0, r0
 8002468:	2801      	cmp	r0, #1
 800246a:	d16c      	bne.n	8002546 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 800246c:	f1b8 0f00 	cmp.w	r8, #0
 8002470:	d057      	beq.n	8002522 <HAL_SPI_Receive+0x102>
 8002472:	2f00      	cmp	r7, #0
 8002474:	d055      	beq.n	8002522 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002476:	2304      	movs	r3, #4
 8002478:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002480:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002482:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002484:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002486:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002488:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800248a:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800248c:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 800248e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002494:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002496:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 800249a:	bf02      	ittt	eq
 800249c:	681a      	ldreq	r2, [r3, #0]
 800249e:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80024a2:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80024a8:	bf5e      	ittt	pl
 80024aa:	681a      	ldrpl	r2, [r3, #0]
 80024ac:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80024b0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024b2:	68e3      	ldr	r3, [r4, #12]
 80024b4:	b1f3      	cbz	r3, 80024f4 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 80024b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b1fb      	cbz	r3, 80024fc <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	07d2      	lsls	r2, r2, #31
 80024c2:	d535      	bpl.n	8002530 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024cc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80024ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80024d6:	e7ee      	b.n	80024b6 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	07d0      	lsls	r0, r2, #31
 80024de:	d518      	bpl.n	8002512 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024e8:	3301      	adds	r3, #1
 80024ea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80024ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80024f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ed      	bne.n	80024d8 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024fc:	4632      	mov	r2, r6
 80024fe:	4629      	mov	r1, r5
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fd7b 	bl	8001ffc <SPI_EndRxTransaction>
 8002506:	b9d8      	cbnz	r0, 8002540 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002508:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800250a:	3000      	adds	r0, #0
 800250c:	bf18      	it	ne
 800250e:	2001      	movne	r0, #1
 8002510:	e007      	b.n	8002522 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002512:	f7fe f83f 	bl	8000594 <HAL_GetTick>
 8002516:	1b80      	subs	r0, r0, r6
 8002518:	4285      	cmp	r5, r0
 800251a:	d8eb      	bhi.n	80024f4 <HAL_SPI_Receive+0xd4>
 800251c:	1c69      	adds	r1, r5, #1
 800251e:	d0e9      	beq.n	80024f4 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002522:	2301      	movs	r3, #1
 8002524:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002528:	2300      	movs	r3, #0
 800252a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 800252e:	e78b      	b.n	8002448 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002530:	f7fe f830 	bl	8000594 <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	4285      	cmp	r5, r0
 8002538:	d8bd      	bhi.n	80024b6 <HAL_SPI_Receive+0x96>
 800253a:	1c6b      	adds	r3, r5, #1
 800253c:	d0bb      	beq.n	80024b6 <HAL_SPI_Receive+0x96>
 800253e:	e7ef      	b.n	8002520 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002540:	2320      	movs	r3, #32
 8002542:	6563      	str	r3, [r4, #84]	; 0x54
 8002544:	e7e0      	b.n	8002508 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002546:	2002      	movs	r0, #2
 8002548:	e7eb      	b.n	8002522 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 800254a:	2002      	movs	r0, #2
 800254c:	e77c      	b.n	8002448 <HAL_SPI_Receive+0x28>

0800254e <HAL_SPI_GetState>:
  return hspi->State;
 800254e:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002552:	4770      	bx	lr

08002554 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002554:	680b      	ldr	r3, [r1, #0]
 8002556:	684a      	ldr	r2, [r1, #4]
 8002558:	f8d1 c010 	ldr.w	ip, [r1, #16]
 800255c:	2b01      	cmp	r3, #1
{
 800255e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8002568:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800256c:	694d      	ldr	r5, [r1, #20]
 800256e:	698c      	ldr	r4, [r1, #24]
 8002570:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8002574:	6a0f      	ldr	r7, [r1, #32]
 8002576:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002578:	d014      	beq.n	80025a4 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800257a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800257e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002582:	431a      	orrs	r2, r3
 8002584:	ea42 0209 	orr.w	r2, r2, r9
 8002588:	ea42 0208 	orr.w	r2, r2, r8
 800258c:	ea42 030c 	orr.w	r3, r2, ip
 8002590:	432b      	orrs	r3, r5
 8002592:	4323      	orrs	r3, r4
 8002594:	ea43 030e 	orr.w	r3, r3, lr
 8002598:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800259a:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800259c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 800259e:	2000      	movs	r0, #0
 80025a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80025a4:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80025a6:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80025aa:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80025ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025b2:	430a      	orrs	r2, r1
 80025b4:	ea43 030e 	orr.w	r3, r3, lr
 80025b8:	ea42 0209 	orr.w	r2, r2, r9
 80025bc:	433b      	orrs	r3, r7
 80025be:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80025c2:	431e      	orrs	r6, r3
 80025c4:	ea42 030c 	orr.w	r3, r2, ip
 80025c8:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025ca:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80025cc:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80025ce:	6043      	str	r3, [r0, #4]
 80025d0:	e7e5      	b.n	800259e <FMC_SDRAM_Init+0x4a>

080025d2 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80025d2:	2a01      	cmp	r2, #1
{
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80025da:	688f      	ldr	r7, [r1, #8]
 80025dc:	690d      	ldr	r5, [r1, #16]
 80025de:	694e      	ldr	r6, [r1, #20]
 80025e0:	e891 4008 	ldmia.w	r1, {r3, lr}
 80025e4:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 80025e6:	d01b      	beq.n	8002620 <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80025e8:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80025ea:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80025ee:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80025f2:	3b01      	subs	r3, #1
 80025f4:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80025f8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80025fa:	1e7b      	subs	r3, r7, #1
 80025fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002600:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002604:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002608:	3d01      	subs	r5, #1
 800260a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800260e:	3e01      	subs	r6, #1
 8002610:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8002614:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002616:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800261a:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 800261c:	2000      	movs	r0, #0
 800261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002620:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002622:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8002624:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002628:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800262c:	3b01      	subs	r3, #1
 800262e:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8002632:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002634:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002638:	1e7b      	subs	r3, r7, #1
 800263a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800263e:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002642:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8002646:	1e6b      	subs	r3, r5, #1
 8002648:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800264c:	3e01      	subs	r6, #1
 800264e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8002652:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002654:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002658:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800265c:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800265e:	60c3      	str	r3, [r0, #12]
 8002660:	e7dc      	b.n	800261c <FMC_SDRAM_Timing_Init+0x4a>

08002662 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002662:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
{
 8002668:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800266a:	e891 000c 	ldmia.w	r1, {r2, r3}
 800266e:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 8002670:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002672:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8002676:	688a      	ldr	r2, [r1, #8]
 8002678:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800267a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800267e:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8002680:	9b01      	ldr	r3, [sp, #4]
 8002682:	6103      	str	r3, [r0, #16]
{
 8002684:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002686:	f7fd ff85 	bl	8000594 <HAL_GetTick>
 800268a:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800268c:	69a0      	ldr	r0, [r4, #24]
 800268e:	f010 0020 	ands.w	r0, r0, #32
 8002692:	d003      	beq.n	800269c <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002694:	1c6b      	adds	r3, r5, #1
 8002696:	d0f9      	beq.n	800268c <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002698:	b915      	cbnz	r5, 80026a0 <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 800269a:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 800269c:	b002      	add	sp, #8
 800269e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80026a0:	f7fd ff78 	bl	8000594 <HAL_GetTick>
 80026a4:	1b80      	subs	r0, r0, r6
 80026a6:	4285      	cmp	r5, r0
 80026a8:	d2f0      	bcs.n	800268c <FMC_SDRAM_SendCommand+0x2a>
 80026aa:	e7f6      	b.n	800269a <FMC_SDRAM_SendCommand+0x38>

080026ac <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80026ac:	6943      	ldr	r3, [r0, #20]
 80026ae:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80026b2:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80026b4:	2000      	movs	r0, #0
 80026b6:	4770      	bx	lr

080026b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026b8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80026ba:	f000 fc41 	bl	8002f40 <vTaskStartScheduler>
  
  return osOK;
}
 80026be:	2000      	movs	r0, #0
 80026c0:	bd08      	pop	{r3, pc}

080026c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026c2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026c4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80026c8:	8a02      	ldrh	r2, [r0, #16]
{
 80026ca:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026cc:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80026d0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80026d2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80026d4:	bf14      	ite	ne
 80026d6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026d8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026da:	a803      	add	r0, sp, #12
 80026dc:	9001      	str	r0, [sp, #4]
 80026de:	9400      	str	r4, [sp, #0]
 80026e0:	4628      	mov	r0, r5
 80026e2:	f000 fb5d 	bl	8002da0 <xTaskCreate>
 80026e6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026e8:	bf0c      	ite	eq
 80026ea:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80026ec:	2000      	movne	r0, #0
}
 80026ee:	b005      	add	sp, #20
 80026f0:	bd30      	pop	{r4, r5, pc}

080026f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026f2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026f4:	2800      	cmp	r0, #0
 80026f6:	bf08      	it	eq
 80026f8:	2001      	moveq	r0, #1
 80026fa:	f000 fd6f 	bl	80031dc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026fe:	2000      	movs	r0, #0
 8002700:	bd08      	pop	{r3, pc}

08002702 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002702:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002704:	f000 fdc8 	bl	8003298 <xTaskGetSchedulerState>
 8002708:	2801      	cmp	r0, #1
 800270a:	d003      	beq.n	8002714 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800270c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002710:	f000 b918 	b.w	8002944 <xPortSysTickHandler>
 8002714:	bd08      	pop	{r3, pc}

08002716 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002716:	f100 0308 	add.w	r3, r0, #8
 800271a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800271c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002720:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002722:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002724:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002726:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002728:	6003      	str	r3, [r0, #0]
 800272a:	4770      	bx	lr

0800272c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	6103      	str	r3, [r0, #16]
 8002730:	4770      	bx	lr

08002732 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002732:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002734:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800273e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002740:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002742:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002744:	3301      	adds	r3, #1
 8002746:	6003      	str	r3, [r0, #0]
 8002748:	4770      	bx	lr

0800274a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800274a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800274c:	1c53      	adds	r3, r2, #1
{
 800274e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002750:	d10a      	bne.n	8002768 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002752:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002758:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800275a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800275c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800275e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002760:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002762:	3301      	adds	r3, #1
 8002764:	6003      	str	r3, [r0, #0]
 8002766:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002768:	f100 0308 	add.w	r3, r0, #8
 800276c:	685c      	ldr	r4, [r3, #4]
 800276e:	6825      	ldr	r5, [r4, #0]
 8002770:	42aa      	cmp	r2, r5
 8002772:	d3ef      	bcc.n	8002754 <vListInsert+0xa>
 8002774:	4623      	mov	r3, r4
 8002776:	e7f9      	b.n	800276c <vListInsert+0x22>

08002778 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002778:	6841      	ldr	r1, [r0, #4]
 800277a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800277c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800277e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002780:	6882      	ldr	r2, [r0, #8]
 8002782:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002788:	bf08      	it	eq
 800278a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800278c:	2200      	movs	r2, #0
 800278e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	3a01      	subs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002796:	6818      	ldr	r0, [r3, #0]
}
 8002798:	4770      	bx	lr
	...

0800279c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800279c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <prvTaskExitError+0x3c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	d008      	beq.n	80027bc <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	e7fe      	b.n	80027ba <prvTaskExitError+0x1e>
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027cc:	9b01      	ldr	r3, [sp, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0fc      	beq.n	80027cc <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027d2:	b002      	add	sp, #8
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008

080027dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <prvPortStartFirstTask+0x24>)
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	6800      	ldr	r0, [r0, #0]
 80027e2:	f380 8808 	msr	MSP, r0
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f380 8814 	msr	CONTROL, r0
 80027ee:	b662      	cpsie	i
 80027f0:	b661      	cpsie	f
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	df00      	svc	0
 80027fc:	bf00      	nop
 80027fe:	0000      	.short	0x0000
 8002800:	e000ed08 	.word	0xe000ed08

08002804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002814 <vPortEnableVFP+0x10>
 8002808:	6801      	ldr	r1, [r0, #0]
 800280a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800280e:	6001      	str	r1, [r0, #0]
 8002810:	4770      	bx	lr
 8002812:	0000      	.short	0x0000
 8002814:	e000ed88 	.word	0xe000ed88

08002818 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <pxPortInitialiseStack+0x28>)
 8002822:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002826:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800282a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800282e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002832:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002836:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800283a:	3844      	subs	r0, #68	; 0x44
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	0800279d 	.word	0x0800279d
	...

08002850 <SVC_Handler>:
	__asm volatile (
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <pxCurrentTCBConst2>)
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	6808      	ldr	r0, [r1, #0]
 8002856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285a:	f380 8809 	msr	PSP, r0
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f380 8811 	msr	BASEPRI, r0
 800286a:	4770      	bx	lr
 800286c:	f3af 8000 	nop.w

08002870 <pxCurrentTCBConst2>:
 8002870:	20003cd0 	.word	0x20003cd0

08002874 <vPortEnterCritical>:
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <vPortEnterCritical+0x3c>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800288a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800288c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800288e:	d10d      	bne.n	80028ac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <vPortEnterCritical+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002898:	d008      	beq.n	80028ac <vPortEnterCritical+0x38>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	e7fe      	b.n	80028aa <vPortEnterCritical+0x36>
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80028b8:	4a08      	ldr	r2, [pc, #32]	; (80028dc <vPortExitCritical+0x24>)
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	b943      	cbnz	r3, 80028d0 <vPortExitCritical+0x18>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80028d0:	3b01      	subs	r3, #1
 80028d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028d4:	b90b      	cbnz	r3, 80028da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	4770      	bx	lr
 80028dc:	20000008 	.word	0x20000008

080028e0 <PendSV_Handler>:
	__asm volatile
 80028e0:	f3ef 8009 	mrs	r0, PSP
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <pxCurrentTCBConst>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f01e 0f10 	tst.w	lr, #16
 80028f0:	bf08      	it	eq
 80028f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fa:	6010      	str	r0, [r2, #0]
 80028fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002904:	f380 8811 	msr	BASEPRI, r0
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f000 fc88 	bl	8003224 <vTaskSwitchContext>
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f380 8811 	msr	BASEPRI, r0
 800291c:	bc09      	pop	{r0, r3}
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	6808      	ldr	r0, [r1, #0]
 8002922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002926:	f01e 0f10 	tst.w	lr, #16
 800292a:	bf08      	it	eq
 800292c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002930:	f380 8809 	msr	PSP, r0
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	f3af 8000 	nop.w

08002940 <pxCurrentTCBConst>:
 8002940:	20003cd0 	.word	0x20003cd0

08002944 <xPortSysTickHandler>:
{
 8002944:	b508      	push	{r3, lr}
	__asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002956:	f000 fb37 	bl	8002fc8 <xTaskIncrementTick>
 800295a:	b118      	cbz	r0, 8002964 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <xPortSysTickHandler+0x28>)
 800295e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002962:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002964:	2300      	movs	r3, #0
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	bd08      	pop	{r3, pc}
 800296c:	e000ed04 	.word	0xe000ed04

08002970 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002970:	4a08      	ldr	r2, [pc, #32]	; (8002994 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002972:	4909      	ldr	r1, [pc, #36]	; (8002998 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002974:	2300      	movs	r3, #0
 8002976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002978:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <vPortSetupTimerInterrupt+0x2c>)
 800297c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fbb3 f3f1 	udiv	r3, r3, r1
 8002986:	4906      	ldr	r1, [pc, #24]	; (80029a0 <vPortSetupTimerInterrupt+0x30>)
 8002988:	3b01      	subs	r3, #1
 800298a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800298c:	2307      	movs	r3, #7
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010
 8002998:	e000e018 	.word	0xe000e018
 800299c:	20000090 	.word	0x20000090
 80029a0:	e000e014 	.word	0xe000e014

080029a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <xPortStartScheduler+0xe8>)
 80029a6:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <xPortStartScheduler+0xec>)
{
 80029a8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	4291      	cmp	r1, r2
 80029ae:	d108      	bne.n	80029c2 <xPortStartScheduler+0x1e>
	__asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	e7fe      	b.n	80029c0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <xPortStartScheduler+0xf0>)
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d108      	bne.n	80029dc <xPortStartScheduler+0x38>
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	e7fe      	b.n	80029da <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <xPortStartScheduler+0xf4>)
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029e8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <xPortStartScheduler+0xfc>)
 80029fe:	2207      	movs	r2, #7
 8002a00:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a02:	2100      	movs	r1, #0
 8002a04:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002a08:	0600      	lsls	r0, r0, #24
 8002a0a:	f102 34ff 	add.w	r4, r2, #4294967295
 8002a0e:	d40d      	bmi.n	8002a2c <xPortStartScheduler+0x88>
 8002a10:	b101      	cbz	r1, 8002a14 <xPortStartScheduler+0x70>
 8002a12:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2a03      	cmp	r2, #3
 8002a18:	d011      	beq.n	8002a3e <xPortStartScheduler+0x9a>
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	e7fe      	b.n	8002a2a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002a30:	0052      	lsls	r2, r2, #1
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f88d 2003 	strb.w	r2, [sp, #3]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	e7e2      	b.n	8002a04 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a3e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a44:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a46:	9b01      	ldr	r3, [sp, #4]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <xPortStartScheduler+0xf4>)
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <xPortStartScheduler+0x100>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a56:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002a5e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002a60:	f7ff ff86 	bl	8002970 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <xPortStartScheduler+0x104>)
 8002a66:	2400      	movs	r4, #0
 8002a68:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002a6a:	f7ff fecb 	bl	8002804 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a6e:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <xPortStartScheduler+0x108>)
 8002a70:	6813      	ldr	r3, [r2, #0]
 8002a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a76:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002a78:	f7ff feb0 	bl	80027dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002a7c:	f000 fbd2 	bl	8003224 <vTaskSwitchContext>
	prvTaskExitError();
 8002a80:	f7ff fe8c 	bl	800279c <prvTaskExitError>
}
 8002a84:	4620      	mov	r0, r4
 8002a86:	b002      	add	sp, #8
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	410fc271 	.word	0x410fc271
 8002a94:	410fc270 	.word	0x410fc270
 8002a98:	e000e400 	.word	0xe000e400
 8002a9c:	200000b0 	.word	0x200000b0
 8002aa0:	200000b4 	.word	0x200000b4
 8002aa4:	e000ed20 	.word	0xe000ed20
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	e000ef34 	.word	0xe000ef34

08002ab0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ab0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <prvInsertBlockIntoFreeList+0x40>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4282      	cmp	r2, r0
 8002ab8:	d318      	bcc.n	8002aec <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002aba:	685c      	ldr	r4, [r3, #4]
 8002abc:	1919      	adds	r1, r3, r4
 8002abe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ac0:	bf01      	itttt	eq
 8002ac2:	6841      	ldreq	r1, [r0, #4]
 8002ac4:	4618      	moveq	r0, r3
 8002ac6:	1909      	addeq	r1, r1, r4
 8002ac8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aca:	6844      	ldr	r4, [r0, #4]
 8002acc:	1901      	adds	r1, r0, r4
 8002ace:	428a      	cmp	r2, r1
 8002ad0:	d107      	bne.n	8002ae2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ad2:	4908      	ldr	r1, [pc, #32]	; (8002af4 <prvInsertBlockIntoFreeList+0x44>)
 8002ad4:	6809      	ldr	r1, [r1, #0]
 8002ad6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ad8:	bf1f      	itttt	ne
 8002ada:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002adc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ade:	1909      	addne	r1, r1, r4
 8002ae0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ae2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ae4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ae6:	bf18      	it	ne
 8002ae8:	6018      	strne	r0, [r3, #0]
 8002aea:	bd10      	pop	{r4, pc}
 8002aec:	4613      	mov	r3, r2
 8002aee:	e7e1      	b.n	8002ab4 <prvInsertBlockIntoFreeList+0x4>
 8002af0:	20003cc8 	.word	0x20003cc8
 8002af4:	200000b8 	.word	0x200000b8

08002af8 <pvPortMalloc>:
{
 8002af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002afc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002afe:	f000 fa5b 	bl	8002fb8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002b02:	493e      	ldr	r1, [pc, #248]	; (8002bfc <pvPortMalloc+0x104>)
 8002b04:	4d3e      	ldr	r5, [pc, #248]	; (8002c00 <pvPortMalloc+0x108>)
 8002b06:	680b      	ldr	r3, [r1, #0]
 8002b08:	bb0b      	cbnz	r3, 8002b4e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002b0a:	4a3e      	ldr	r2, [pc, #248]	; (8002c04 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b0c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b0e:	bf1f      	itttt	ne
 8002b10:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b12:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b16:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002b1a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b1c:	bf14      	ite	ne
 8002b1e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b20:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b24:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002b26:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b28:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b2c:	4e36      	ldr	r6, [pc, #216]	; (8002c08 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002b2e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b30:	2000      	movs	r0, #0
 8002b32:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b34:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002b36:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b38:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b3a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b3c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b40:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b42:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <pvPortMalloc+0x118>)
 8002b46:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b4c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b4e:	682f      	ldr	r7, [r5, #0]
 8002b50:	4227      	tst	r7, r4
 8002b52:	d116      	bne.n	8002b82 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002b54:	2c00      	cmp	r4, #0
 8002b56:	d041      	beq.n	8002bdc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002b58:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b5c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b5e:	bf1c      	itt	ne
 8002b60:	f023 0307 	bicne.w	r3, r3, #7
 8002b64:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b66:	b163      	cbz	r3, 8002b82 <pvPortMalloc+0x8a>
 8002b68:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <pvPortMalloc+0x118>)
 8002b6a:	6816      	ldr	r6, [r2, #0]
 8002b6c:	42b3      	cmp	r3, r6
 8002b6e:	4690      	mov	r8, r2
 8002b70:	d807      	bhi.n	8002b82 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002b72:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <pvPortMalloc+0x110>)
 8002b74:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b76:	6868      	ldr	r0, [r5, #4]
 8002b78:	4283      	cmp	r3, r0
 8002b7a:	d804      	bhi.n	8002b86 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002b7c:	6809      	ldr	r1, [r1, #0]
 8002b7e:	428d      	cmp	r5, r1
 8002b80:	d107      	bne.n	8002b92 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002b82:	2400      	movs	r4, #0
 8002b84:	e02a      	b.n	8002bdc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b86:	682c      	ldr	r4, [r5, #0]
 8002b88:	2c00      	cmp	r4, #0
 8002b8a:	d0f7      	beq.n	8002b7c <pvPortMalloc+0x84>
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	4625      	mov	r5, r4
 8002b90:	e7f1      	b.n	8002b76 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b92:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b94:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b96:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b98:	1ac2      	subs	r2, r0, r3
 8002b9a:	2a10      	cmp	r2, #16
 8002b9c:	d90f      	bls.n	8002bbe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b9e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ba0:	0741      	lsls	r1, r0, #29
 8002ba2:	d008      	beq.n	8002bb6 <pvPortMalloc+0xbe>
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	e7fe      	b.n	8002bb4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bb6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bb8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bba:	f7ff ff79 	bl	8002ab0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bbe:	4913      	ldr	r1, [pc, #76]	; (8002c0c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bc0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bc2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bc4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bc6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bc8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002bca:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bce:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002bd2:	bf38      	it	cc
 8002bd4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002bd6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bd8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bda:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002bdc:	f000 fa86 	bl	80030ec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002be0:	0763      	lsls	r3, r4, #29
 8002be2:	d008      	beq.n	8002bf6 <pvPortMalloc+0xfe>
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	e7fe      	b.n	8002bf4 <pvPortMalloc+0xfc>
}
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bfc:	200000b8 	.word	0x200000b8
 8002c00:	20003cbc 	.word	0x20003cbc
 8002c04:	200000bc 	.word	0x200000bc
 8002c08:	20003cc8 	.word	0x20003cc8
 8002c0c:	20003cc4 	.word	0x20003cc4
 8002c10:	20003cc0 	.word	0x20003cc0

08002c14 <vPortFree>:
{
 8002c14:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002c16:	4604      	mov	r4, r0
 8002c18:	b370      	cbz	r0, 8002c78 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <vPortFree+0x68>)
 8002c1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4213      	tst	r3, r2
 8002c24:	d108      	bne.n	8002c38 <vPortFree+0x24>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	e7fe      	b.n	8002c36 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c38:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002c3c:	b141      	cbz	r1, 8002c50 <vPortFree+0x3c>
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	e7fe      	b.n	8002c4e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c50:	ea23 0302 	bic.w	r3, r3, r2
 8002c54:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002c58:	f000 f9ae 	bl	8002fb8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c5c:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <vPortFree+0x6c>)
 8002c5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002c62:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c64:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c68:	440b      	add	r3, r1
 8002c6a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c6c:	f7ff ff20 	bl	8002ab0 <prvInsertBlockIntoFreeList>
}
 8002c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002c74:	f000 ba3a 	b.w	80030ec <xTaskResumeAll>
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20003cbc 	.word	0x20003cbc
 8002c80:	20003cc0 	.word	0x20003cc0

08002c84 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <prvResetNextTaskUnblockTime+0x1c>)
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <prvResetNextTaskUnblockTime+0x20>)
 8002c8c:	b919      	cbnz	r1, 8002c96 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c8e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c9a:	68d2      	ldr	r2, [r2, #12]
 8002c9c:	6852      	ldr	r2, [r2, #4]
 8002c9e:	e7f8      	b.n	8002c92 <prvResetNextTaskUnblockTime+0xe>
 8002ca0:	20003cd4 	.word	0x20003cd4
 8002ca4:	20003dac 	.word	0x20003dac

08002ca8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cac:	4e1b      	ldr	r6, [pc, #108]	; (8002d1c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002cae:	681d      	ldr	r5, [r3, #0]
{
 8002cb0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cb2:	6830      	ldr	r0, [r6, #0]
 8002cb4:	3004      	adds	r0, #4
{
 8002cb6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cb8:	f7ff fd5e 	bl	8002778 <uxListRemove>
 8002cbc:	4633      	mov	r3, r6
 8002cbe:	b940      	cbnz	r0, 8002cd2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002cc0:	6831      	ldr	r1, [r6, #0]
 8002cc2:	4e17      	ldr	r6, [pc, #92]	; (8002d20 <prvAddCurrentTaskToDelayedList+0x78>)
 8002cc4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002cc6:	6832      	ldr	r2, [r6, #0]
 8002cc8:	2001      	movs	r0, #1
 8002cca:	4088      	lsls	r0, r1
 8002ccc:	ea22 0200 	bic.w	r2, r2, r0
 8002cd0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002cd2:	1c62      	adds	r2, r4, #1
 8002cd4:	d107      	bne.n	8002ce6 <prvAddCurrentTaskToDelayedList+0x3e>
 8002cd6:	b137      	cbz	r7, 8002ce6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	4812      	ldr	r0, [pc, #72]	; (8002d24 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002cdc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002cde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ce2:	f7ff bd26 	b.w	8002732 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ce6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ce8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002cea:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cec:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002cee:	d907      	bls.n	8002d00 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <prvAddCurrentTaskToDelayedList+0x80>)
 8002cf2:	6810      	ldr	r0, [r2, #0]
 8002cf4:	6819      	ldr	r1, [r3, #0]
}
 8002cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cfa:	3104      	adds	r1, #4
 8002cfc:	f7ff bd25 	b.w	800274a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <prvAddCurrentTaskToDelayedList+0x84>)
 8002d02:	6810      	ldr	r0, [r2, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	3104      	adds	r1, #4
 8002d08:	f7ff fd1f 	bl	800274a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <prvAddCurrentTaskToDelayedList+0x88>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002d12:	bf38      	it	cc
 8002d14:	601c      	strcc	r4, [r3, #0]
 8002d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d18:	20003df4 	.word	0x20003df4
 8002d1c:	20003cd0 	.word	0x20003cd0
 8002d20:	20003d7c 	.word	0x20003d7c
 8002d24:	20003dcc 	.word	0x20003dcc
 8002d28:	20003cd8 	.word	0x20003cd8
 8002d2c:	20003cd4 	.word	0x20003cd4
 8002d30:	20003dac 	.word	0x20003dac

08002d34 <prvIdleTask>:
{
 8002d34:	b580      	push	{r7, lr}
				taskYIELD();
 8002d36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002d9c <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d3a:	4f14      	ldr	r7, [pc, #80]	; (8002d8c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d3c:	4c14      	ldr	r4, [pc, #80]	; (8002d90 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8002d3e:	4e15      	ldr	r6, [pc, #84]	; (8002d94 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	b963      	cbnz	r3, 8002d5e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d44:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <prvIdleTask+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d9f8      	bls.n	8002d3e <prvIdleTask+0xa>
				taskYIELD();
 8002d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d50:	f8c8 3000 	str.w	r3, [r8]
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	e7ee      	b.n	8002d3c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002d5e:	f7ff fd89 	bl	8002874 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d66:	1d28      	adds	r0, r5, #4
 8002d68:	f7ff fd06 	bl	8002778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d6c:	6833      	ldr	r3, [r6, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002d78:	f7ff fd9e 	bl	80028b8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002d7c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002d7e:	f7ff ff49 	bl	8002c14 <vPortFree>
			vPortFree( pxTCB );
 8002d82:	4628      	mov	r0, r5
 8002d84:	f7ff ff46 	bl	8002c14 <vPortFree>
 8002d88:	e7da      	b.n	8002d40 <prvIdleTask+0xc>
 8002d8a:	bf00      	nop
 8002d8c:	20003de0 	.word	0x20003de0
 8002d90:	20003d6c 	.word	0x20003d6c
 8002d94:	20003d68 	.word	0x20003d68
 8002d98:	20003cdc 	.word	0x20003cdc
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <xTaskCreate>:
	{
 8002da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002da8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002daa:	4650      	mov	r0, sl
	{
 8002dac:	460f      	mov	r7, r1
 8002dae:	4699      	mov	r9, r3
 8002db0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db2:	f7ff fea1 	bl	8002af8 <pvPortMalloc>
			if( pxStack != NULL )
 8002db6:	4605      	mov	r5, r0
 8002db8:	2800      	cmp	r0, #0
 8002dba:	f000 8096 	beq.w	8002eea <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dbe:	2054      	movs	r0, #84	; 0x54
 8002dc0:	f7ff fe9a 	bl	8002af8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	f000 808c 	beq.w	8002ee4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002dcc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002dd0:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002dd2:	4455      	add	r5, sl
 8002dd4:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002dd6:	f025 0a07 	bic.w	sl, r5, #7
 8002dda:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002dde:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002de0:	7859      	ldrb	r1, [r3, #1]
 8002de2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002de6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002dea:	b109      	cbz	r1, 8002df0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dec:	42bb      	cmp	r3, r7
 8002dee:	d1f7      	bne.n	8002de0 <xTaskCreate+0x40>
 8002df0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002df2:	2d06      	cmp	r5, #6
 8002df4:	bf28      	it	cs
 8002df6:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002df8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dfc:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002dfe:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002e00:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e02:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e04:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002e08:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e0c:	f7ff fc8e 	bl	800272c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e10:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e14:	f104 0018 	add.w	r0, r4, #24
 8002e18:	f7ff fc88 	bl	800272c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002e1c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e20:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e22:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e24:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e26:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e2a:	464a      	mov	r2, r9
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	4650      	mov	r0, sl
 8002e30:	f7ff fcf2 	bl	8002818 <pxPortInitialiseStack>
 8002e34:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002e36:	b106      	cbz	r6, 8002e3a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e38:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002e3a:	f7ff fd1b 	bl	8002874 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002e3e:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002e40:	4e32      	ldr	r6, [pc, #200]	; (8002f0c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002f38 <xTaskCreate+0x198>
 8002e48:	3201      	adds	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002e4c:	6835      	ldr	r5, [r6, #0]
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	d14e      	bne.n	8002ef0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002e52:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d11d      	bne.n	8002e96 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e5a:	eb08 0005 	add.w	r0, r8, r5
 8002e5e:	3514      	adds	r5, #20
 8002e60:	f7ff fc59 	bl	8002716 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e64:	2d8c      	cmp	r5, #140	; 0x8c
 8002e66:	d1f8      	bne.n	8002e5a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002e68:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002f3c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002e6c:	4d28      	ldr	r5, [pc, #160]	; (8002f10 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002e6e:	4648      	mov	r0, r9
 8002e70:	f7ff fc51 	bl	8002716 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e74:	4628      	mov	r0, r5
 8002e76:	f7ff fc4e 	bl	8002716 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e7a:	4826      	ldr	r0, [pc, #152]	; (8002f14 <xTaskCreate+0x174>)
 8002e7c:	f7ff fc4b 	bl	8002716 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002e80:	4825      	ldr	r0, [pc, #148]	; (8002f18 <xTaskCreate+0x178>)
 8002e82:	f7ff fc48 	bl	8002716 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002e86:	4825      	ldr	r0, [pc, #148]	; (8002f1c <xTaskCreate+0x17c>)
 8002e88:	f7ff fc45 	bl	8002716 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <xTaskCreate+0x180>)
 8002e8e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <xTaskCreate+0x184>)
 8002e94:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002e96:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002e98:	4924      	ldr	r1, [pc, #144]	; (8002f2c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002e9a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002e9c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002ea2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ea4:	2501      	movs	r5, #1
 8002ea6:	fa05 f302 	lsl.w	r3, r5, r2
 8002eaa:	4303      	orrs	r3, r0
 8002eac:	2014      	movs	r0, #20
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	fb00 8002 	mla	r0, r0, r2, r8
 8002eb4:	4639      	mov	r1, r7
 8002eb6:	f7ff fc3c 	bl	8002732 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002eba:	f7ff fcfd 	bl	80028b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <xTaskCreate+0x190>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b163      	cbz	r3, 8002ede <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ec4:	6833      	ldr	r3, [r6, #0]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d207      	bcs.n	8002ede <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <xTaskCreate+0x194>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
	}
 8002ede:	4628      	mov	r0, r5
 8002ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7ff fe95 	bl	8002c14 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eea:	f04f 35ff 	mov.w	r5, #4294967295
 8002eee:	e7f6      	b.n	8002ede <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <xTaskCreate+0x190>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ce      	bne.n	8002e96 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002efe:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002f00:	bf98      	it	ls
 8002f02:	6034      	strls	r4, [r6, #0]
 8002f04:	e7c7      	b.n	8002e96 <xTaskCreate+0xf6>
 8002f06:	bf00      	nop
 8002f08:	20003d68 	.word	0x20003d68
 8002f0c:	20003cd0 	.word	0x20003cd0
 8002f10:	20003d94 	.word	0x20003d94
 8002f14:	20003db4 	.word	0x20003db4
 8002f18:	20003de0 	.word	0x20003de0
 8002f1c:	20003dcc 	.word	0x20003dcc
 8002f20:	20003cd4 	.word	0x20003cd4
 8002f24:	20003cd8 	.word	0x20003cd8
 8002f28:	20003d78 	.word	0x20003d78
 8002f2c:	20003d7c 	.word	0x20003d7c
 8002f30:	20003dc8 	.word	0x20003dc8
 8002f34:	e000ed04 	.word	0xe000ed04
 8002f38:	20003cdc 	.word	0x20003cdc
 8002f3c:	20003d80 	.word	0x20003d80

08002f40 <vTaskStartScheduler>:
{
 8002f40:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <vTaskStartScheduler+0x60>)
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2400      	movs	r4, #0
 8002f48:	9400      	str	r4, [sp, #0]
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	4915      	ldr	r1, [pc, #84]	; (8002fa4 <vTaskStartScheduler+0x64>)
 8002f50:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <vTaskStartScheduler+0x68>)
 8002f52:	f7ff ff25 	bl	8002da0 <xTaskCreate>
	if( xReturn == pdPASS )
 8002f56:	2801      	cmp	r0, #1
 8002f58:	d114      	bne.n	8002f84 <vTaskStartScheduler+0x44>
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <vTaskStartScheduler+0x6c>)
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <vTaskStartScheduler+0x70>)
 8002f74:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <vTaskStartScheduler+0x74>)
 8002f78:	601c      	str	r4, [r3, #0]
}
 8002f7a:	b002      	add	sp, #8
 8002f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002f80:	f7ff bd10 	b.w	80029a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f84:	3001      	adds	r0, #1
 8002f86:	d108      	bne.n	8002f9a <vTaskStartScheduler+0x5a>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	e7fe      	b.n	8002f98 <vTaskStartScheduler+0x58>
}
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20003da8 	.word	0x20003da8
 8002fa4:	08005264 	.word	0x08005264
 8002fa8:	08002d35 	.word	0x08002d35
 8002fac:	20003dac 	.word	0x20003dac
 8002fb0:	20003dc8 	.word	0x20003dc8
 8002fb4:	20003df4 	.word	0x20003df4

08002fb8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002fb8:	4a02      	ldr	r2, [pc, #8]	; (8002fc4 <vTaskSuspendAll+0xc>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20003d74 	.word	0x20003d74

08002fc8 <xTaskIncrementTick>:
{
 8002fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <xTaskIncrementTick+0xf8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d153      	bne.n	800307c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <xTaskIncrementTick+0xfc>)
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002fda:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fdc:	b9bc      	cbnz	r4, 800300e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <xTaskIncrementTick+0x100>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	b142      	cbz	r2, 8002ff8 <xTaskIncrementTick+0x30>
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	e7fe      	b.n	8002ff6 <xTaskIncrementTick+0x2e>
 8002ff8:	4a34      	ldr	r2, [pc, #208]	; (80030cc <xTaskIncrementTick+0x104>)
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	6810      	ldr	r0, [r2, #0]
 8002ffe:	6018      	str	r0, [r3, #0]
 8003000:	6011      	str	r1, [r2, #0]
 8003002:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <xTaskIncrementTick+0x108>)
 8003004:	6813      	ldr	r3, [r2, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	f7ff fe3b 	bl	8002c84 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800300e:	4d31      	ldr	r5, [pc, #196]	; (80030d4 <xTaskIncrementTick+0x10c>)
 8003010:	4f31      	ldr	r7, [pc, #196]	; (80030d8 <xTaskIncrementTick+0x110>)
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	429c      	cmp	r4, r3
 8003016:	f04f 0b00 	mov.w	fp, #0
 800301a:	d33e      	bcc.n	800309a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800301c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80030c8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003020:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80030e8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003024:	f8d8 2000 	ldr.w	r2, [r8]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	bb72      	cbnz	r2, 800308a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	602a      	str	r2, [r5, #0]
					break;
 8003032:	e032      	b.n	800309a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003034:	f106 0a04 	add.w	sl, r6, #4
 8003038:	4650      	mov	r0, sl
 800303a:	f7ff fb9d 	bl	8002778 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003040:	b119      	cbz	r1, 800304a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003042:	f106 0018 	add.w	r0, r6, #24
 8003046:	f7ff fb97 	bl	8002778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800304a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800304c:	f8d9 3000 	ldr.w	r3, [r9]
 8003050:	2201      	movs	r2, #1
 8003052:	fa02 f100 	lsl.w	r1, r2, r0
 8003056:	4319      	orrs	r1, r3
 8003058:	4b20      	ldr	r3, [pc, #128]	; (80030dc <xTaskIncrementTick+0x114>)
 800305a:	f8c9 1000 	str.w	r1, [r9]
 800305e:	f04f 0e14 	mov.w	lr, #20
 8003062:	4651      	mov	r1, sl
 8003064:	fb0e 3000 	mla	r0, lr, r0, r3
 8003068:	f7ff fb63 	bl	8002732 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800306c:	6838      	ldr	r0, [r7, #0]
 800306e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003070:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003072:	4291      	cmp	r1, r2
 8003074:	bf28      	it	cs
 8003076:	f04f 0b01 	movcs.w	fp, #1
 800307a:	e7d3      	b.n	8003024 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <xTaskIncrementTick+0x118>)
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003084:	f04f 0b00 	mov.w	fp, #0
 8003088:	e011      	b.n	80030ae <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800308a:	f8d8 2000 	ldr.w	r2, [r8]
 800308e:	68d2      	ldr	r2, [r2, #12]
 8003090:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003092:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003094:	428c      	cmp	r4, r1
 8003096:	d2cd      	bcs.n	8003034 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003098:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <xTaskIncrementTick+0x114>)
 800309e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a0:	2214      	movs	r2, #20
 80030a2:	434a      	muls	r2, r1
 80030a4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80030a6:	2a02      	cmp	r2, #2
 80030a8:	bf28      	it	cs
 80030aa:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80030ae:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <xTaskIncrementTick+0x11c>)
 80030b0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	bf18      	it	ne
 80030b6:	f04f 0b01 	movne.w	fp, #1
}
 80030ba:	4658      	mov	r0, fp
 80030bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	20003d74 	.word	0x20003d74
 80030c4:	20003df4 	.word	0x20003df4
 80030c8:	20003cd4 	.word	0x20003cd4
 80030cc:	20003cd8 	.word	0x20003cd8
 80030d0:	20003db0 	.word	0x20003db0
 80030d4:	20003dac 	.word	0x20003dac
 80030d8:	20003cd0 	.word	0x20003cd0
 80030dc:	20003cdc 	.word	0x20003cdc
 80030e0:	20003d70 	.word	0x20003d70
 80030e4:	20003df8 	.word	0x20003df8
 80030e8:	20003d7c 	.word	0x20003d7c

080030ec <xTaskResumeAll>:
{
 80030ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80030f0:	4c31      	ldr	r4, [pc, #196]	; (80031b8 <xTaskResumeAll+0xcc>)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	b943      	cbnz	r3, 8003108 <xTaskResumeAll+0x1c>
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	e7fe      	b.n	8003106 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003108:	f7ff fbb4 	bl	8002874 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	3b01      	subs	r3, #1
 8003110:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003112:	6824      	ldr	r4, [r4, #0]
 8003114:	b12c      	cbz	r4, 8003122 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003116:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003118:	f7ff fbce 	bl	80028b8 <vPortExitCritical>
}
 800311c:	4620      	mov	r0, r4
 800311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <xTaskResumeAll+0xd0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f5      	beq.n	8003116 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800312a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80031d4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800312e:	4f24      	ldr	r7, [pc, #144]	; (80031c0 <xTaskResumeAll+0xd4>)
 8003130:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80031d8 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003134:	f8d9 3000 	ldr.w	r3, [r9]
 8003138:	b9e3      	cbnz	r3, 8003174 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800313a:	b10c      	cbz	r4, 8003140 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800313c:	f7ff fda2 	bl	8002c84 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003140:	4d20      	ldr	r5, [pc, #128]	; (80031c4 <xTaskResumeAll+0xd8>)
 8003142:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003144:	b144      	cbz	r4, 8003158 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003146:	4e20      	ldr	r6, [pc, #128]	; (80031c8 <xTaskResumeAll+0xdc>)
 8003148:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800314a:	f7ff ff3d 	bl	8002fc8 <xTaskIncrementTick>
 800314e:	b100      	cbz	r0, 8003152 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003150:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003152:	3c01      	subs	r4, #1
 8003154:	d1f9      	bne.n	800314a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003156:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <xTaskResumeAll+0xdc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0da      	beq.n	8003116 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <xTaskResumeAll+0xe0>)
 8003162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003170:	2401      	movs	r4, #1
 8003172:	e7d1      	b.n	8003118 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003174:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003178:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800317c:	f104 0018 	add.w	r0, r4, #24
 8003180:	f7ff fafa 	bl	8002778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff faf7 	bl	8002778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800318a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	2501      	movs	r5, #1
 8003190:	fa05 f302 	lsl.w	r3, r5, r2
 8003194:	2014      	movs	r0, #20
 8003196:	430b      	orrs	r3, r1
 8003198:	fb00 8002 	mla	r0, r0, r2, r8
 800319c:	4631      	mov	r1, r6
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	f7ff fac7 	bl	8002732 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <xTaskResumeAll+0xe4>)
 80031a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80031ae:	bf24      	itt	cs
 80031b0:	4b05      	ldrcs	r3, [pc, #20]	; (80031c8 <xTaskResumeAll+0xdc>)
 80031b2:	601d      	strcs	r5, [r3, #0]
 80031b4:	e7be      	b.n	8003134 <xTaskResumeAll+0x48>
 80031b6:	bf00      	nop
 80031b8:	20003d74 	.word	0x20003d74
 80031bc:	20003d68 	.word	0x20003d68
 80031c0:	20003d7c 	.word	0x20003d7c
 80031c4:	20003d70 	.word	0x20003d70
 80031c8:	20003df8 	.word	0x20003df8
 80031cc:	e000ed04 	.word	0xe000ed04
 80031d0:	20003cd0 	.word	0x20003cd0
 80031d4:	20003db4 	.word	0x20003db4
 80031d8:	20003cdc 	.word	0x20003cdc

080031dc <vTaskDelay>:
	{
 80031dc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031de:	b940      	cbnz	r0, 80031f2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <vTaskDelay+0x40>)
 80031e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <vTaskDelay+0x44>)
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	b141      	cbz	r1, 800320a <vTaskDelay+0x2e>
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	e7fe      	b.n	8003208 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800320a:	f7ff fed5 	bl	8002fb8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800320e:	f7ff fd4b 	bl	8002ca8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003212:	f7ff ff6b 	bl	80030ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003216:	2800      	cmp	r0, #0
 8003218:	d0e2      	beq.n	80031e0 <vTaskDelay+0x4>
 800321a:	bd08      	pop	{r3, pc}
 800321c:	e000ed04 	.word	0xe000ed04
 8003220:	20003d74 	.word	0x20003d74

08003224 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <vTaskSwitchContext+0x60>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <vTaskSwitchContext+0x64>)
{
 800322a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800322c:	b112      	cbz	r2, 8003234 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800322e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003234:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <vTaskSwitchContext+0x68>)
 8003238:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f1c3 031f 	rsb	r3, r3, #31
 8003244:	2214      	movs	r2, #20
 8003246:	4912      	ldr	r1, [pc, #72]	; (8003290 <vTaskSwitchContext+0x6c>)
 8003248:	435a      	muls	r2, r3
 800324a:	1888      	adds	r0, r1, r2
 800324c:	588c      	ldr	r4, [r1, r2]
 800324e:	b944      	cbnz	r4, 8003262 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	e7fe      	b.n	8003260 <vTaskSwitchContext+0x3c>
 8003262:	6844      	ldr	r4, [r0, #4]
 8003264:	3208      	adds	r2, #8
 8003266:	6864      	ldr	r4, [r4, #4]
 8003268:	6044      	str	r4, [r0, #4]
 800326a:	440a      	add	r2, r1
 800326c:	4294      	cmp	r4, r2
 800326e:	bf04      	itt	eq
 8003270:	6862      	ldreq	r2, [r4, #4]
 8003272:	6042      	streq	r2, [r0, #4]
 8003274:	2214      	movs	r2, #20
 8003276:	fb02 1303 	mla	r3, r2, r3, r1
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <vTaskSwitchContext+0x70>)
 8003280:	e7d6      	b.n	8003230 <vTaskSwitchContext+0xc>
 8003282:	bf00      	nop
 8003284:	20003d74 	.word	0x20003d74
 8003288:	20003df8 	.word	0x20003df8
 800328c:	20003d7c 	.word	0x20003d7c
 8003290:	20003cdc 	.word	0x20003cdc
 8003294:	20003cd0 	.word	0x20003cd0

08003298 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <xTaskGetSchedulerState+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b133      	cbz	r3, 80032ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <xTaskGetSchedulerState+0x1c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80032a4:	bf0c      	ite	eq
 80032a6:	2002      	moveq	r0, #2
 80032a8:	2000      	movne	r0, #0
 80032aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032ac:	2001      	movs	r0, #1
	}
 80032ae:	4770      	bx	lr
 80032b0:	20003dc8 	.word	0x20003dc8
 80032b4:	20003d74 	.word	0x20003d74

080032b8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80032b8:	b508      	push	{r3, lr}

  hdma2d.Instance = DMA2D;
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <MX_DMA2D_Init+0x24>)
  hdma2d.Init.Mode = DMA2D_R2M;
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <MX_DMA2D_Init+0x28>)
 80032be:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 80032c2:	e880 4008 	stmia.w	r0, {r3, lr}
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80032c6:	2300      	movs	r3, #0
 80032c8:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80032ca:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80032cc:	f7fd fa28 	bl	8000720 <HAL_DMA2D_Init>
 80032d0:	b118      	cbz	r0, 80032da <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
  }

}
 80032d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80032d6:	f000 bf9d 	b.w	8004214 <Error_Handler>
 80032da:	bd08      	pop	{r3, pc}
 80032dc:	20003eb0 	.word	0x20003eb0
 80032e0:	4002b000 	.word	0x4002b000

080032e4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 80032e4:	6802      	ldr	r2, [r0, #0]
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_DMA2D_MspInit+0x28>)
 80032e8:	429a      	cmp	r2, r3
{
 80032ea:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
 80032ec:	d10b      	bne.n	8003306 <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_DMA2D_MspInit+0x2c>)
 80032f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003306:	b002      	add	sp, #8
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	4002b000 	.word	0x4002b000
 8003310:	40023800 	.word	0x40023800

08003314 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003314:	b500      	push	{lr}
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003316:	4815      	ldr	r0, [pc, #84]	; (800336c <MX_FMC_Init+0x58>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003318:	4915      	ldr	r1, [pc, #84]	; (8003370 <MX_FMC_Init+0x5c>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800331a:	2210      	movs	r2, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800331c:	2301      	movs	r3, #1
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800331e:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003320:	2240      	movs	r2, #64	; 0x40
{
 8003322:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003324:	e880 000a 	stmia.w	r0, {r1, r3}
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003328:	6142      	str	r2, [r0, #20]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800332a:	2300      	movs	r3, #0
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800332c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003330:	2104      	movs	r1, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003332:	6083      	str	r3, [r0, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003334:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003336:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003338:	2207      	movs	r2, #7
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800333a:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800333c:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800333e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003342:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8003344:	6203      	str	r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003346:	9202      	str	r2, [sp, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8003348:	2302      	movs	r3, #2
  SdramTiming.SelfRefreshTime = 4;
 800334a:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 800334c:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800334e:	4469      	add	r1, sp
  SdramTiming.WriteRecoveryTime = 3;
 8003350:	2203      	movs	r2, #3
  SdramTiming.LoadToActiveDelay = 2;
 8003352:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 8003354:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8003356:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8003358:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800335a:	f7fe fdcd 	bl	8001ef8 <HAL_SDRAM_Init>
 800335e:	b108      	cbz	r0, 8003364 <MX_FMC_Init+0x50>
  {
    Error_Handler( );
 8003360:	f000 ff58 	bl	8004214 <Error_Handler>
  }

}
 8003364:	b009      	add	sp, #36	; 0x24
 8003366:	f85d fb04 	ldr.w	pc, [sp], #4
 800336a:	bf00      	nop
 800336c:	20003ef0 	.word	0x20003ef0
 8003370:	a0000140 	.word	0xa0000140

08003374 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FMC_Initialized) {
 8003378:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_SDRAM_MspInit+0xb8>)
 800337a:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800337c:	b086      	sub	sp, #24
  if (FMC_Initialized) {
 800337e:	2c00      	cmp	r4, #0
 8003380:	d151      	bne.n	8003426 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8003382:	f04f 0801 	mov.w	r8, #1
 8003386:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_SDRAM_MspInit+0xbc>)
 800338c:	9400      	str	r4, [sp, #0]
 800338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003390:	4828      	ldr	r0, [pc, #160]	; (8003434 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003392:	ea42 0208 	orr.w	r2, r2, r8
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 800339c:	ea03 0308 	and.w	r3, r3, r8
 80033a0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a6:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80033a8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80033ac:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80033b2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b8:	f7fd fac4 	bl	8000944 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80033bc:	a901      	add	r1, sp, #4
 80033be:	481e      	ldr	r0, [pc, #120]	; (8003438 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80033c0:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ca:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f7fd faba 	bl	8000944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80033d0:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033d4:	a901      	add	r1, sp, #4
 80033d6:	4819      	ldr	r0, [pc, #100]	; (800343c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80033d8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033e2:	f7fd faaf 	bl	8000944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80033e6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033ea:	a901      	add	r1, sp, #4
 80033ec:	4814      	ldr	r0, [pc, #80]	; (8003440 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80033ee:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f8:	f7fd faa4 	bl	8000944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80033fc:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003400:	a901      	add	r1, sp, #4
 8003402:	4810      	ldr	r0, [pc, #64]	; (8003444 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8003404:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800340c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340e:	f7fd fa99 	bl	8000944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003412:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	a901      	add	r1, sp, #4
 8003416:	480c      	ldr	r0, [pc, #48]	; (8003448 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003418:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003420:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f7fd fa8f 	bl	8000944 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003426:	b006      	add	sp, #24
 8003428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800342c:	20003dfc 	.word	0x20003dfc
 8003430:	40023800 	.word	0x40023800
 8003434:	40021400 	.word	0x40021400
 8003438:	40020800 	.word	0x40020800
 800343c:	40021800 	.word	0x40021800
 8003440:	40021000 	.word	0x40021000
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40020400 	.word	0x40020400

0800344c <StartGAME_master>:
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE END Header_StartDefaultTask */
void StartGAME_master(void const * argument) {
 800344c:	b508      	push	{r3, lr}

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800344e:	2001      	movs	r0, #1
 8003450:	f7ff f94f 	bl	80026f2 <osDelay>
 8003454:	e7fb      	b.n	800344e <StartGAME_master+0x2>
	...

08003458 <StartLCD_handling>:
void StartLCD_handling(void const * argument) {
 8003458:	b508      	push	{r3, lr}
		if (HAL_GetTick() - initTime >= 50) {
 800345a:	4c0b      	ldr	r4, [pc, #44]	; (8003488 <StartLCD_handling+0x30>)
			flagTouch = 0; //wyzerowanie flagi
 800345c:	4e0b      	ldr	r6, [pc, #44]	; (800348c <StartLCD_handling+0x34>)
			Display(globalClassHandler);
 800345e:	4d0c      	ldr	r5, [pc, #48]	; (8003490 <StartLCD_handling+0x38>)
		osDelay(1);
 8003460:	2001      	movs	r0, #1
 8003462:	f7ff f946 	bl	80026f2 <osDelay>
		if (HAL_GetTick() - initTime >= 50) {
 8003466:	f7fd f895 	bl	8000594 <HAL_GetTick>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	1ac0      	subs	r0, r0, r3
 800346e:	2831      	cmp	r0, #49	; 0x31
 8003470:	d9f6      	bls.n	8003460 <StartLCD_handling+0x8>
			flagTouch = 0; //wyzerowanie flagi
 8003472:	2300      	movs	r3, #0
			Display(globalClassHandler);
 8003474:	6828      	ldr	r0, [r5, #0]
			flagTouch = 0; //wyzerowanie flagi
 8003476:	6033      	str	r3, [r6, #0]
			Display(globalClassHandler);
 8003478:	f000 fc84 	bl	8003d84 <Display>
			Service();
 800347c:	f000 fcc4 	bl	8003e08 <Service>
			initTime = HAL_GetTick(); //eliminacja drgan
 8003480:	f7fd f888 	bl	8000594 <HAL_GetTick>
 8003484:	6020      	str	r0, [r4, #0]
 8003486:	e7eb      	b.n	8003460 <StartLCD_handling+0x8>
 8003488:	20003f24 	.word	0x20003f24
 800348c:	20003e00 	.word	0x20003e00
 8003490:	20003f3c 	.word	0x20003f3c

08003494 <StartTS_handling>:
void StartTS_handling(void const * argument) {
 8003494:	b508      	push	{r3, lr}
		BSP_TS_GetState(ts_struct);
 8003496:	4d09      	ldr	r5, [pc, #36]	; (80034bc <StartTS_handling+0x28>)
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003498:	4c09      	ldr	r4, [pc, #36]	; (80034c0 <StartTS_handling+0x2c>)
		osDelay(1);
 800349a:	2001      	movs	r0, #1
 800349c:	f7ff f929 	bl	80026f2 <osDelay>
		BSP_TS_GetState(ts_struct);
 80034a0:	6828      	ldr	r0, [r5, #0]
 80034a2:	f001 fc4f 	bl	8004d44 <BSP_TS_GetState>
		if (ts_struct->TouchDetected) {
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	b102      	cbz	r2, 80034ae <StartTS_handling+0x1a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80034ac:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80034ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7fd fbcc 	bl	8000c50 <HAL_GPIO_WritePin>
 80034b8:	e7ef      	b.n	800349a <StartTS_handling+0x6>
 80034ba:	bf00      	nop
 80034bc:	20003f50 	.word	0x20003f50
 80034c0:	40021800 	.word	0x40021800

080034c4 <StartMPU_handling>:
void StartMPU_handling(void const * argument) {
 80034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
		writegyro(hspi4, config_address, 0x0F);
 80034c6:	4c23      	ldr	r4, [pc, #140]	; (8003554 <StartMPU_handling+0x90>)
void StartMPU_handling(void const * argument) {
 80034c8:	b095      	sub	sp, #84	; 0x54
		writegyro(hspi4, config_address, 0x0F);
 80034ca:	f104 0510 	add.w	r5, r4, #16
		osDelay(1);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f7ff f90f 	bl	80026f2 <osDelay>
		writegyro(hspi4, config_address, 0x0F);
 80034d4:	230f      	movs	r3, #15
 80034d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <StartMPU_handling+0x94>)
		globalClassHandler->gyroVarX = (uint8_t)readgyro(hspi4, Address_ACCX, globalClassHandler->gyroVarX);
 80034da:	4e20      	ldr	r6, [pc, #128]	; (800355c <StartMPU_handling+0x98>)
		writegyro(hspi4, config_address, 0x0F);
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	9312      	str	r3, [sp, #72]	; 0x48
 80034e0:	2248      	movs	r2, #72	; 0x48
 80034e2:	4629      	mov	r1, r5
 80034e4:	4668      	mov	r0, sp
 80034e6:	f001 fe75 	bl	80051d4 <memcpy>
 80034ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034ee:	f000 fe93 	bl	8004218 <writegyro>
		globalClassHandler->gyroVarX = (uint8_t)readgyro(hspi4, Address_ACCX, globalClassHandler->gyroVarX);
 80034f2:	6837      	ldr	r7, [r6, #0]
 80034f4:	783b      	ldrb	r3, [r7, #0]
 80034f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <StartMPU_handling+0x9c>)
 80034fa:	2248      	movs	r2, #72	; 0x48
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	9312      	str	r3, [sp, #72]	; 0x48
 8003500:	4629      	mov	r1, r5
 8003502:	4668      	mov	r0, sp
 8003504:	f001 fe66 	bl	80051d4 <memcpy>
 8003508:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800350c:	f000 fea6 	bl	800425c <readgyro>
 8003510:	7038      	strb	r0, [r7, #0]
		globalClassHandler->gyroVarY = (uint8_t)readgyro(hspi4, Address_ACCY, globalClassHandler->gyroVarY);
 8003512:	6837      	ldr	r7, [r6, #0]
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	9313      	str	r3, [sp, #76]	; 0x4c
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <StartMPU_handling+0xa0>)
 800351a:	2248      	movs	r2, #72	; 0x48
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	9312      	str	r3, [sp, #72]	; 0x48
 8003520:	4629      	mov	r1, r5
 8003522:	4668      	mov	r0, sp
 8003524:	f001 fe56 	bl	80051d4 <memcpy>
 8003528:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800352c:	f000 fe96 	bl	800425c <readgyro>
 8003530:	7078      	strb	r0, [r7, #1]
		globalClassHandler->gyroVarZ = (uint8_t)readgyro(hspi4, Address_ACCZ, globalClassHandler->gyroVarZ);
 8003532:	6836      	ldr	r6, [r6, #0]
 8003534:	78b3      	ldrb	r3, [r6, #2]
 8003536:	9313      	str	r3, [sp, #76]	; 0x4c
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <StartMPU_handling+0xa4>)
 800353a:	2248      	movs	r2, #72	; 0x48
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	9312      	str	r3, [sp, #72]	; 0x48
 8003540:	4629      	mov	r1, r5
 8003542:	4668      	mov	r0, sp
 8003544:	f001 fe46 	bl	80051d4 <memcpy>
 8003548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800354c:	f000 fe86 	bl	800425c <readgyro>
 8003550:	70b0      	strb	r0, [r6, #2]
 8003552:	e7bc      	b.n	80034ce <StartMPU_handling+0xa>
 8003554:	20004100 	.word	0x20004100
 8003558:	2000001f 	.word	0x2000001f
 800355c:	20003f3c 	.word	0x20003f3c
 8003560:	2000001c 	.word	0x2000001c
 8003564:	2000001d 	.word	0x2000001d
 8003568:	2000001e 	.word	0x2000001e

0800356c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800356c:	b570      	push	{r4, r5, r6, lr}
	ts_struct = &struktura;
 800356e:	4c20      	ldr	r4, [pc, #128]	; (80035f0 <MX_FREERTOS_Init+0x84>)
 8003570:	4820      	ldr	r0, [pc, #128]	; (80035f4 <MX_FREERTOS_Init+0x88>)
 8003572:	6020      	str	r0, [r4, #0]
void MX_FREERTOS_Init(void) {
 8003574:	b094      	sub	sp, #80	; 0x50
	ts_init(ts_struct);
 8003576:	f000 fe41 	bl	80041fc <ts_init>
	initMenu(ts_struct, globalClassHandler);
 800357a:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <MX_FREERTOS_Init+0x8c>)
 800357c:	6820      	ldr	r0, [r4, #0]
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityNormal, 0, 128);
 800357e:	4c1f      	ldr	r4, [pc, #124]	; (80035fc <MX_FREERTOS_Init+0x90>)
	initMenu(ts_struct, globalClassHandler);
 8003580:	6819      	ldr	r1, [r3, #0]
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityNormal, 0, 128);
 8003582:	4626      	mov	r6, r4
	initMenu(ts_struct, globalClassHandler);
 8003584:	f000 fb3e 	bl	8003c04 <initMenu>
		osThreadDef(LCD_handling, StartLCD_handling, osPriorityNormal, 0, 128);
 8003588:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800358a:	466d      	mov	r5, sp
 800358c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358e:	6833      	ldr	r3, [r6, #0]
 8003590:	602b      	str	r3, [r5, #0]
		lcdTaskHandle = osThreadCreate(osThread(LCD_handling), NULL);
 8003592:	2100      	movs	r1, #0
 8003594:	4668      	mov	r0, sp
 8003596:	f7ff f894 	bl	80026c2 <osThreadCreate>
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <MX_FREERTOS_Init+0x94>)
		osThreadDef(TS_handling, StartTS_handling, osPriorityNormal, 0, 128);
 800359c:	f104 0614 	add.w	r6, r4, #20
		lcdTaskHandle = osThreadCreate(osThread(LCD_handling), NULL);
 80035a0:	6018      	str	r0, [r3, #0]
		osThreadDef(TS_handling, StartTS_handling, osPriorityNormal, 0, 128);
 80035a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035a4:	ad05      	add	r5, sp, #20
 80035a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	602b      	str	r3, [r5, #0]
		touchTaskHandle = osThreadCreate(osThread(TS_handling), NULL);
 80035ac:	2100      	movs	r1, #0
 80035ae:	a805      	add	r0, sp, #20
 80035b0:	f7ff f887 	bl	80026c2 <osThreadCreate>
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <MX_FREERTOS_Init+0x98>)
		osThreadDef(MPU_handling, StartMPU_handling, osPriorityNormal, 0, 128);
 80035b6:	f104 0628 	add.w	r6, r4, #40	; 0x28
		touchTaskHandle = osThreadCreate(osThread(TS_handling), NULL);
 80035ba:	6018      	str	r0, [r3, #0]
		osThreadDef(MPU_handling, StartMPU_handling, osPriorityNormal, 0, 128);
 80035bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035be:	ad0a      	add	r5, sp, #40	; 0x28
 80035c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c2:	6833      	ldr	r3, [r6, #0]
 80035c4:	602b      	str	r3, [r5, #0]
		mpuTaskHandle = osThreadCreate(osThread(MPU_handling), NULL);
 80035c6:	2100      	movs	r1, #0
 80035c8:	a80a      	add	r0, sp, #40	; 0x28
 80035ca:	f7ff f87a 	bl	80026c2 <osThreadCreate>
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <MX_FREERTOS_Init+0x9c>)
		osThreadDef(GAME_master, StartGAME_master, osPriorityNormal, 0, 128);
 80035d0:	343c      	adds	r4, #60	; 0x3c
		mpuTaskHandle = osThreadCreate(osThread(MPU_handling), NULL);
 80035d2:	6018      	str	r0, [r3, #0]
		osThreadDef(GAME_master, StartGAME_master, osPriorityNormal, 0, 128);
 80035d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d6:	ad0f      	add	r5, sp, #60	; 0x3c
 80035d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	602b      	str	r3, [r5, #0]
		gameTaskHandle = osThreadCreate(osThread(GAME_master), NULL);
 80035de:	2100      	movs	r1, #0
 80035e0:	a80f      	add	r0, sp, #60	; 0x3c
 80035e2:	f7ff f86e 	bl	80026c2 <osThreadCreate>
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <MX_FREERTOS_Init+0xa0>)
 80035e8:	6018      	str	r0, [r3, #0]
}
 80035ea:	b014      	add	sp, #80	; 0x50
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
 80035ee:	bf00      	nop
 80035f0:	20003f50 	.word	0x20003f50
 80035f4:	20003f30 	.word	0x20003f30
 80035f8:	20003f3c 	.word	0x20003f3c
 80035fc:	08005214 	.word	0x08005214
 8003600:	20003f48 	.word	0x20003f48
 8003604:	20003f2c 	.word	0x20003f2c
 8003608:	20003f38 	.word	0x20003f38
 800360c:	20003f44 	.word	0x20003f44

08003610 <MX_GPIO_Init>:
     PB15   ------> USB_OTG_HS_DP
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8003610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003616:	2214      	movs	r2, #20
 8003618:	2100      	movs	r1, #0
 800361a:	a809      	add	r0, sp, #36	; 0x24
 800361c:	f001 fde5 	bl	80051ea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003620:	2400      	movs	r4, #0
 8003622:	4b72      	ldr	r3, [pc, #456]	; (80037ec <MX_GPIO_Init+0x1dc>)
 8003624:	9401      	str	r4, [sp, #4]
 8003626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003628:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80037f8 <MX_GPIO_Init+0x1e8>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800362c:	4e70      	ldr	r6, [pc, #448]	; (80037f0 <MX_GPIO_Init+0x1e0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800362e:	4f71      	ldr	r7, [pc, #452]	; (80037f4 <MX_GPIO_Init+0x1e4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003630:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80037fc <MX_GPIO_Init+0x1ec>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003634:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8003800 <MX_GPIO_Init+0x1f0>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003638:	f042 0210 	orr.w	r2, r2, #16
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	f002 0210 	and.w	r2, r2, #16
 8003644:	9201      	str	r2, [sp, #4]
 8003646:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003648:	9402      	str	r4, [sp, #8]
 800364a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364c:	f042 0204 	orr.w	r2, r2, #4
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	f002 0204 	and.w	r2, r2, #4
 8003658:	9202      	str	r2, [sp, #8]
 800365a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800365c:	9403      	str	r4, [sp, #12]
 800365e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003660:	f042 0220 	orr.w	r2, r2, #32
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	f002 0220 	and.w	r2, r2, #32
 800366c:	9203      	str	r2, [sp, #12]
 800366e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003670:	9404      	str	r4, [sp, #16]
 8003672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003674:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
 800367a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003680:	9204      	str	r2, [sp, #16]
 8003682:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	9405      	str	r4, [sp, #20]
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	f002 0201 	and.w	r2, r2, #1
 8003694:	9205      	str	r2, [sp, #20]
 8003696:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003698:	9406      	str	r4, [sp, #24]
 800369a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369c:	f042 0202 	orr.w	r2, r2, #2
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
 80036a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a4:	f002 0202 	and.w	r2, r2, #2
 80036a8:	9206      	str	r2, [sp, #24]
 80036aa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036ac:	9407      	str	r4, [sp, #28]
 80036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
 80036b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80036bc:	9207      	str	r2, [sp, #28]
 80036be:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c0:	9408      	str	r4, [sp, #32]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	f042 0208 	orr.w	r2, r2, #8
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80036d2:	4622      	mov	r2, r4
 80036d4:	4640      	mov	r0, r8
 80036d6:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d8:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80036da:	f7fd fab9 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80036de:	4622      	mov	r2, r4
 80036e0:	4630      	mov	r0, r6
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	f7fd fab4 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80036e8:	4622      	mov	r2, r4
 80036ea:	4638      	mov	r0, r7
 80036ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80036f0:	f7fd faae 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80036f4:	4622      	mov	r2, r4
 80036f6:	4648      	mov	r0, r9
 80036f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80036fc:	f7fd faa8 	bl	8000c50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003700:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003702:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003704:	a909      	add	r1, sp, #36	; 0x24
 8003706:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003708:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003710:	f7fd f918 	bl	8000944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003714:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003718:	a909      	add	r1, sp, #36	; 0x24
 800371a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800371c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800371e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003724:	f7fd f90e 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003728:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800372a:	a909      	add	r1, sp, #36	; 0x24
 800372c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003730:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003736:	f7fd f905 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800373a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800373c:	a909      	add	r1, sp, #36	; 0x24
 800373e:	4640      	mov	r0, r8

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003740:	f5a8 6880 	sub.w	r8, r8, #1024	; 0x400
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003746:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800374c:	f7fd f8fa 	bl	8000944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003750:	2304      	movs	r3, #4
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003752:	a909      	add	r1, sp, #36	; 0x24
 8003754:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003756:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003758:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800375c:	f7fd f8f2 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003760:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8003764:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800376a:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376c:	a909      	add	r1, sp, #36	; 0x24
 800376e:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003770:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377a:	f7fd f8e3 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800377e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003782:	a909      	add	r1, sp, #36	; 0x24
 8003784:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003786:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003788:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800378c:	f7fd f8da 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003790:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003794:	a909      	add	r1, sp, #36	; 0x24
 8003796:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = TE_Pin;
 8003798:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800379e:	f7fd f8d1 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80037a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037a6:	a909      	add	r1, sp, #36	; 0x24
 80037a8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80037aa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ac:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b2:	f7fd f8c7 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80037b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037ba:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037c2:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	4630      	mov	r0, r6
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037c6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	f7fd f8b9 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80037d2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037d6:	a909      	add	r1, sp, #36	; 0x24
 80037d8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80037da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037dc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037e2:	f7fd f8af 	bl	8000944 <HAL_GPIO_Init>

}
 80037e6:	b00e      	add	sp, #56	; 0x38
 80037e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020000 	.word	0x40020000
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40021800 	.word	0x40021800
 8003800:	10120000 	.word	0x10120000

08003804 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003804:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8003806:	4813      	ldr	r0, [pc, #76]	; (8003854 <MX_I2C3_Init+0x50>)
  hi2c3.Init.ClockSpeed = 100000;
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <MX_I2C3_Init+0x54>)
 800380a:	f8df e050 	ldr.w	lr, [pc, #80]	; 800385c <MX_I2C3_Init+0x58>
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800380e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8003812:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003816:	2300      	movs	r3, #0
 8003818:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800381a:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800381c:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800381e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003820:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003822:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003824:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003826:	f7fd fbe9 	bl	8000ffc <HAL_I2C_Init>
 800382a:	b108      	cbz	r0, 8003830 <MX_I2C3_Init+0x2c>
  {
    Error_Handler();
 800382c:	f000 fcf2 	bl	8004214 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003830:	2100      	movs	r1, #0
 8003832:	4808      	ldr	r0, [pc, #32]	; (8003854 <MX_I2C3_Init+0x50>)
 8003834:	f7fd fe3f 	bl	80014b6 <HAL_I2CEx_ConfigAnalogFilter>
 8003838:	b108      	cbz	r0, 800383e <MX_I2C3_Init+0x3a>
  {
    Error_Handler();
 800383a:	f000 fceb 	bl	8004214 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800383e:	2100      	movs	r1, #0
 8003840:	4804      	ldr	r0, [pc, #16]	; (8003854 <MX_I2C3_Init+0x50>)
 8003842:	f7fd fe57 	bl	80014f4 <HAL_I2CEx_ConfigDigitalFilter>
 8003846:	b118      	cbz	r0, 8003850 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
  }

}
 8003848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800384c:	f000 bce2 	b.w	8004214 <Error_Handler>
 8003850:	bd08      	pop	{r3, pc}
 8003852:	bf00      	nop
 8003854:	20003f58 	.word	0x20003f58
 8003858:	40005c00 	.word	0x40005c00
 800385c:	000186a0 	.word	0x000186a0

08003860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003864:	4604      	mov	r4, r0
 8003866:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	2214      	movs	r2, #20
 800386a:	2100      	movs	r1, #0
 800386c:	a803      	add	r0, sp, #12
 800386e:	f001 fcbc 	bl	80051ea <memset>
  if(i2cHandle->Instance==I2C3)
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_I2C_MspInit+0x98>)
 8003876:	429a      	cmp	r2, r3
 8003878:	d13a      	bne.n	80038f0 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387a:	4c20      	ldr	r4, [pc, #128]	; (80038fc <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800387c:	4820      	ldr	r0, [pc, #128]	; (8003900 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387e:	2500      	movs	r5, #0
 8003880:	9500      	str	r5, [sp, #0]
 8003882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6323      	str	r3, [r4, #48]	; 0x30
 800388a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003894:	9501      	str	r5, [sp, #4]
 8003896:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6323      	str	r3, [r4, #48]	; 0x30
 800389e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a8:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80038ac:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b0:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038b2:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80038b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80038b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b8:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038bc:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038be:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80038c0:	f7fd f840 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80038c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80038c8:	a903      	add	r1, sp, #12
 80038ca:	480e      	ldr	r0, [pc, #56]	; (8003904 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80038cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ce:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d2:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038d6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80038d8:	f7fd f834 	bl	8000944 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038dc:	9502      	str	r5, [sp, #8]
 80038de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038e4:	6423      	str	r3, [r4, #64]	; 0x40
 80038e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ec:	9302      	str	r3, [sp, #8]
 80038ee:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80038f0:	b008      	add	sp, #32
 80038f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f6:	bf00      	nop
 80038f8:	40005c00 	.word	0x40005c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020800 	.word	0x40020800
 8003904:	40020000 	.word	0x40020000

08003908 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003908:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C3)
 800390a:	6802      	ldr	r2, [r0, #0]
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_I2C_MspDeInit+0x30>)
 800390e:	429a      	cmp	r2, r3
 8003910:	d110      	bne.n	8003934 <HAL_I2C_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_I2C_MspDeInit+0x34>)
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003914:	480a      	ldr	r0, [pc, #40]	; (8003940 <HAL_I2C_MspDeInit+0x38>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003916:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003918:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800391e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003922:	f7fd f8fb 	bl	8000b1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <HAL_I2C_MspDeInit+0x3c>)

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 800392c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003930:	f7fd b8f4 	b.w	8000b1c <HAL_GPIO_DeInit>
 8003934:	bd08      	pop	{r3, pc}
 8003936:	bf00      	nop
 8003938:	40005c00 	.word	0x40005c00
 800393c:	40023800 	.word	0x40023800
 8003940:	40020800 	.word	0x40020800
 8003944:	40020000 	.word	0x40020000

08003948 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8003948:	20f0      	movs	r0, #240	; 0xf0
 800394a:	4770      	bx	lr

0800394c <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 800394c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003950:	4770      	bx	lr

08003952 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8003952:	2029      	movs	r0, #41	; 0x29
 8003954:	f000 becc 	b.w	80046f0 <LCD_IO_WriteReg>

08003958 <ili9341_DisplayOff>:
 8003958:	2028      	movs	r0, #40	; 0x28
 800395a:	f000 bec9 	b.w	80046f0 <LCD_IO_WriteReg>

0800395e <ili9341_Init>:
{
 800395e:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003960:	f000 fe4e 	bl	8004600 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003964:	20ca      	movs	r0, #202	; 0xca
 8003966:	f000 fec3 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800396a:	20c3      	movs	r0, #195	; 0xc3
 800396c:	f000 fea4 	bl	80046b8 <LCD_IO_WriteData>
 8003970:	2008      	movs	r0, #8
 8003972:	f000 fea1 	bl	80046b8 <LCD_IO_WriteData>
 8003976:	2050      	movs	r0, #80	; 0x50
 8003978:	f000 fe9e 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800397c:	20cf      	movs	r0, #207	; 0xcf
 800397e:	f000 feb7 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003982:	2000      	movs	r0, #0
 8003984:	f000 fe98 	bl	80046b8 <LCD_IO_WriteData>
 8003988:	20c1      	movs	r0, #193	; 0xc1
 800398a:	f000 fe95 	bl	80046b8 <LCD_IO_WriteData>
 800398e:	2030      	movs	r0, #48	; 0x30
 8003990:	f000 fe92 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003994:	20ed      	movs	r0, #237	; 0xed
 8003996:	f000 feab 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f000 fe8c 	bl	80046b8 <LCD_IO_WriteData>
 80039a0:	2003      	movs	r0, #3
 80039a2:	f000 fe89 	bl	80046b8 <LCD_IO_WriteData>
 80039a6:	2012      	movs	r0, #18
 80039a8:	f000 fe86 	bl	80046b8 <LCD_IO_WriteData>
 80039ac:	2081      	movs	r0, #129	; 0x81
 80039ae:	f000 fe83 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80039b2:	20e8      	movs	r0, #232	; 0xe8
 80039b4:	f000 fe9c 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80039b8:	2085      	movs	r0, #133	; 0x85
 80039ba:	f000 fe7d 	bl	80046b8 <LCD_IO_WriteData>
 80039be:	2000      	movs	r0, #0
 80039c0:	f000 fe7a 	bl	80046b8 <LCD_IO_WriteData>
 80039c4:	2078      	movs	r0, #120	; 0x78
 80039c6:	f000 fe77 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80039ca:	20cb      	movs	r0, #203	; 0xcb
 80039cc:	f000 fe90 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80039d0:	2039      	movs	r0, #57	; 0x39
 80039d2:	f000 fe71 	bl	80046b8 <LCD_IO_WriteData>
 80039d6:	202c      	movs	r0, #44	; 0x2c
 80039d8:	f000 fe6e 	bl	80046b8 <LCD_IO_WriteData>
 80039dc:	2000      	movs	r0, #0
 80039de:	f000 fe6b 	bl	80046b8 <LCD_IO_WriteData>
 80039e2:	2034      	movs	r0, #52	; 0x34
 80039e4:	f000 fe68 	bl	80046b8 <LCD_IO_WriteData>
 80039e8:	2002      	movs	r0, #2
 80039ea:	f000 fe65 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80039ee:	20f7      	movs	r0, #247	; 0xf7
 80039f0:	f000 fe7e 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80039f4:	2020      	movs	r0, #32
 80039f6:	f000 fe5f 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80039fa:	20ea      	movs	r0, #234	; 0xea
 80039fc:	f000 fe78 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a00:	2000      	movs	r0, #0
 8003a02:	f000 fe59 	bl	80046b8 <LCD_IO_WriteData>
 8003a06:	2000      	movs	r0, #0
 8003a08:	f000 fe56 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a0c:	20b1      	movs	r0, #177	; 0xb1
 8003a0e:	f000 fe6f 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f000 fe50 	bl	80046b8 <LCD_IO_WriteData>
 8003a18:	201b      	movs	r0, #27
 8003a1a:	f000 fe4d 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a1e:	20b6      	movs	r0, #182	; 0xb6
 8003a20:	f000 fe66 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a24:	200a      	movs	r0, #10
 8003a26:	f000 fe47 	bl	80046b8 <LCD_IO_WriteData>
 8003a2a:	20a2      	movs	r0, #162	; 0xa2
 8003a2c:	f000 fe44 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a30:	20c0      	movs	r0, #192	; 0xc0
 8003a32:	f000 fe5d 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a36:	2010      	movs	r0, #16
 8003a38:	f000 fe3e 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a3c:	20c1      	movs	r0, #193	; 0xc1
 8003a3e:	f000 fe57 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a42:	2010      	movs	r0, #16
 8003a44:	f000 fe38 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a48:	20c5      	movs	r0, #197	; 0xc5
 8003a4a:	f000 fe51 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a4e:	2045      	movs	r0, #69	; 0x45
 8003a50:	f000 fe32 	bl	80046b8 <LCD_IO_WriteData>
 8003a54:	2015      	movs	r0, #21
 8003a56:	f000 fe2f 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a5a:	20c7      	movs	r0, #199	; 0xc7
 8003a5c:	f000 fe48 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a60:	2090      	movs	r0, #144	; 0x90
 8003a62:	f000 fe29 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a66:	2036      	movs	r0, #54	; 0x36
 8003a68:	f000 fe42 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a6c:	20c8      	movs	r0, #200	; 0xc8
 8003a6e:	f000 fe23 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a72:	20f2      	movs	r0, #242	; 0xf2
 8003a74:	f000 fe3c 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f000 fe1d 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a7e:	20b0      	movs	r0, #176	; 0xb0
 8003a80:	f000 fe36 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a84:	20c2      	movs	r0, #194	; 0xc2
 8003a86:	f000 fe17 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a8a:	20b6      	movs	r0, #182	; 0xb6
 8003a8c:	f000 fe30 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a90:	200a      	movs	r0, #10
 8003a92:	f000 fe11 	bl	80046b8 <LCD_IO_WriteData>
 8003a96:	20a7      	movs	r0, #167	; 0xa7
 8003a98:	f000 fe0e 	bl	80046b8 <LCD_IO_WriteData>
 8003a9c:	2027      	movs	r0, #39	; 0x27
 8003a9e:	f000 fe0b 	bl	80046b8 <LCD_IO_WriteData>
 8003aa2:	2004      	movs	r0, #4
 8003aa4:	f000 fe08 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003aa8:	202a      	movs	r0, #42	; 0x2a
 8003aaa:	f000 fe21 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f000 fe02 	bl	80046b8 <LCD_IO_WriteData>
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f000 fdff 	bl	80046b8 <LCD_IO_WriteData>
 8003aba:	2000      	movs	r0, #0
 8003abc:	f000 fdfc 	bl	80046b8 <LCD_IO_WriteData>
 8003ac0:	20ef      	movs	r0, #239	; 0xef
 8003ac2:	f000 fdf9 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ac6:	202b      	movs	r0, #43	; 0x2b
 8003ac8:	f000 fe12 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f000 fdf3 	bl	80046b8 <LCD_IO_WriteData>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f000 fdf0 	bl	80046b8 <LCD_IO_WriteData>
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f000 fded 	bl	80046b8 <LCD_IO_WriteData>
 8003ade:	203f      	movs	r0, #63	; 0x3f
 8003ae0:	f000 fdea 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ae4:	20f6      	movs	r0, #246	; 0xf6
 8003ae6:	f000 fe03 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003aea:	2001      	movs	r0, #1
 8003aec:	f000 fde4 	bl	80046b8 <LCD_IO_WriteData>
 8003af0:	2000      	movs	r0, #0
 8003af2:	f000 fde1 	bl	80046b8 <LCD_IO_WriteData>
 8003af6:	2006      	movs	r0, #6
 8003af8:	f000 fdde 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003afc:	202c      	movs	r0, #44	; 0x2c
 8003afe:	f000 fdf7 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003b02:	20c8      	movs	r0, #200	; 0xc8
 8003b04:	f000 fe46 	bl	8004794 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003b08:	2026      	movs	r0, #38	; 0x26
 8003b0a:	f000 fdf1 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f000 fdd2 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b14:	20e0      	movs	r0, #224	; 0xe0
 8003b16:	f000 fdeb 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b1a:	200f      	movs	r0, #15
 8003b1c:	f000 fdcc 	bl	80046b8 <LCD_IO_WriteData>
 8003b20:	2029      	movs	r0, #41	; 0x29
 8003b22:	f000 fdc9 	bl	80046b8 <LCD_IO_WriteData>
 8003b26:	2024      	movs	r0, #36	; 0x24
 8003b28:	f000 fdc6 	bl	80046b8 <LCD_IO_WriteData>
 8003b2c:	200c      	movs	r0, #12
 8003b2e:	f000 fdc3 	bl	80046b8 <LCD_IO_WriteData>
 8003b32:	200e      	movs	r0, #14
 8003b34:	f000 fdc0 	bl	80046b8 <LCD_IO_WriteData>
 8003b38:	2009      	movs	r0, #9
 8003b3a:	f000 fdbd 	bl	80046b8 <LCD_IO_WriteData>
 8003b3e:	204e      	movs	r0, #78	; 0x4e
 8003b40:	f000 fdba 	bl	80046b8 <LCD_IO_WriteData>
 8003b44:	2078      	movs	r0, #120	; 0x78
 8003b46:	f000 fdb7 	bl	80046b8 <LCD_IO_WriteData>
 8003b4a:	203c      	movs	r0, #60	; 0x3c
 8003b4c:	f000 fdb4 	bl	80046b8 <LCD_IO_WriteData>
 8003b50:	2009      	movs	r0, #9
 8003b52:	f000 fdb1 	bl	80046b8 <LCD_IO_WriteData>
 8003b56:	2013      	movs	r0, #19
 8003b58:	f000 fdae 	bl	80046b8 <LCD_IO_WriteData>
 8003b5c:	2005      	movs	r0, #5
 8003b5e:	f000 fdab 	bl	80046b8 <LCD_IO_WriteData>
 8003b62:	2017      	movs	r0, #23
 8003b64:	f000 fda8 	bl	80046b8 <LCD_IO_WriteData>
 8003b68:	2011      	movs	r0, #17
 8003b6a:	f000 fda5 	bl	80046b8 <LCD_IO_WriteData>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f000 fda2 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b74:	20e1      	movs	r0, #225	; 0xe1
 8003b76:	f000 fdbb 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f000 fd9c 	bl	80046b8 <LCD_IO_WriteData>
 8003b80:	2016      	movs	r0, #22
 8003b82:	f000 fd99 	bl	80046b8 <LCD_IO_WriteData>
 8003b86:	201b      	movs	r0, #27
 8003b88:	f000 fd96 	bl	80046b8 <LCD_IO_WriteData>
 8003b8c:	2004      	movs	r0, #4
 8003b8e:	f000 fd93 	bl	80046b8 <LCD_IO_WriteData>
 8003b92:	2011      	movs	r0, #17
 8003b94:	f000 fd90 	bl	80046b8 <LCD_IO_WriteData>
 8003b98:	2007      	movs	r0, #7
 8003b9a:	f000 fd8d 	bl	80046b8 <LCD_IO_WriteData>
 8003b9e:	2031      	movs	r0, #49	; 0x31
 8003ba0:	f000 fd8a 	bl	80046b8 <LCD_IO_WriteData>
 8003ba4:	2033      	movs	r0, #51	; 0x33
 8003ba6:	f000 fd87 	bl	80046b8 <LCD_IO_WriteData>
 8003baa:	2042      	movs	r0, #66	; 0x42
 8003bac:	f000 fd84 	bl	80046b8 <LCD_IO_WriteData>
 8003bb0:	2005      	movs	r0, #5
 8003bb2:	f000 fd81 	bl	80046b8 <LCD_IO_WriteData>
 8003bb6:	200c      	movs	r0, #12
 8003bb8:	f000 fd7e 	bl	80046b8 <LCD_IO_WriteData>
 8003bbc:	200a      	movs	r0, #10
 8003bbe:	f000 fd7b 	bl	80046b8 <LCD_IO_WriteData>
 8003bc2:	2028      	movs	r0, #40	; 0x28
 8003bc4:	f000 fd78 	bl	80046b8 <LCD_IO_WriteData>
 8003bc8:	202f      	movs	r0, #47	; 0x2f
 8003bca:	f000 fd75 	bl	80046b8 <LCD_IO_WriteData>
 8003bce:	200f      	movs	r0, #15
 8003bd0:	f000 fd72 	bl	80046b8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003bd4:	2011      	movs	r0, #17
 8003bd6:	f000 fd8b 	bl	80046f0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003bda:	20c8      	movs	r0, #200	; 0xc8
 8003bdc:	f000 fdda 	bl	8004794 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003be0:	2029      	movs	r0, #41	; 0x29
 8003be2:	f000 fd85 	bl	80046f0 <LCD_IO_WriteReg>
 8003be6:	202c      	movs	r0, #44	; 0x2c
}
 8003be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8003bec:	f000 bd80 	b.w	80046f0 <LCD_IO_WriteReg>

08003bf0 <ili9341_ReadID>:
{
 8003bf0:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003bf2:	f000 fd05 	bl	8004600 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	20d3      	movs	r0, #211	; 0xd3
 8003bfa:	f000 fd95 	bl	8004728 <LCD_IO_ReadData>
}
 8003bfe:	b280      	uxth	r0, r0
 8003c00:	bd08      	pop	{r3, pc}
	...

08003c04 <initMenu>:
int switchingMENU_flag = 1;
int switchingODCZYTY_flag = 1;
int page = 0;

void initMenu(TS_StateTypeDef* str, globalClass* globalClassHandler) {
	localstr = str;
 8003c04:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <initMenu+0xc>)
 8003c06:	6018      	str	r0, [r3, #0]
	localClassHandler = globalClassHandler;
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <initMenu+0x10>)
 8003c0a:	6019      	str	r1, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20003fac 	.word	0x20003fac
 8003c14:	20003fb0 	.word	0x20003fb0

08003c18 <DrawButton>:
}

void DrawButton(char* text, uint8_t line_number) {
 8003c18:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8003c1a:	4d12      	ldr	r5, [pc, #72]	; (8003c64 <DrawButton+0x4c>)
void DrawButton(char* text, uint8_t line_number) {
 8003c1c:	4606      	mov	r6, r0
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8003c1e:	4628      	mov	r0, r5
void DrawButton(char* text, uint8_t line_number) {
 8003c20:	460c      	mov	r4, r1
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8003c22:	f000 fecd 	bl	80049c0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(20, line_number, BSP_LCD_GetXSize()-40, 44);
 8003c26:	f000 fe75 	bl	8004914 <BSP_LCD_GetXSize>
 8003c2a:	b2a4      	uxth	r4, r4
 8003c2c:	f1a0 0228 	sub.w	r2, r0, #40	; 0x28
 8003c30:	4621      	mov	r1, r4
 8003c32:	232c      	movs	r3, #44	; 0x2c
 8003c34:	b292      	uxth	r2, r2
 8003c36:	2014      	movs	r0, #20
 8003c38:	f000 ff04 	bl	8004a44 <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 fecb 	bl	80049d8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003c42:	f04f 30ff 	mov.w	r0, #4294967295
 8003c46:	f000 febb 	bl	80049c0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8003c4a:	4807      	ldr	r0, [pc, #28]	; (8003c68 <DrawButton+0x50>)
 8003c4c:	f000 fed0 	bl	80049f0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, line_number + 14, (uint8_t*)text,
 8003c50:	4632      	mov	r2, r6
 8003c52:	f104 010e 	add.w	r1, r4, #14
 8003c56:	2301      	movs	r3, #1
 8003c58:	2000      	movs	r0, #0
			CENTER_MODE);
}
 8003c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(0, line_number + 14, (uint8_t*)text,
 8003c5e:	f000 bf9d 	b.w	8004b9c <BSP_LCD_DisplayStringAt>
 8003c62:	bf00      	nop
 8003c64:	ff000080 	.word	0xff000080
 8003c68:	2000000c 	.word	0x2000000c

08003c6c <Display_Menu>:
void Service(void) {
	if (page == 0) menuService();
	if (page == 1) odczytyService();
}

void Display_Menu(void) {
 8003c6c:	b538      	push	{r3, r4, r5, lr}
	if(switchingMENU_flag == 1) {
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <Display_Menu+0x58>)
 8003c70:	681c      	ldr	r4, [r3, #0]
 8003c72:	2c01      	cmp	r4, #1
 8003c74:	d125      	bne.n	8003cc2 <Display_Menu+0x56>
		switchingMENU_flag = 0;
 8003c76:	2500      	movs	r5, #0
		BSP_LCD_SelectLayer(1);
 8003c78:	4620      	mov	r0, r4
		switchingMENU_flag = 0;
 8003c7a:	601d      	str	r5, [r3, #0]
		BSP_LCD_SelectLayer(1);
 8003c7c:	f000 fe9a 	bl	80049b4 <BSP_LCD_SelectLayer>
		BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003c80:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <Display_Menu+0x5c>)
 8003c82:	f000 feb5 	bl	80049f0 <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	f000 fea5 	bl	80049d8 <BSP_LCD_SetBackColor>
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c92:	f000 feb9 	bl	8004a08 <BSP_LCD_Clear>
		BSP_LCD_SetFont(&Font24);
 8003c96:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <Display_Menu+0x5c>)
 8003c98:	f000 feaa 	bl	80049f0 <BSP_LCD_SetFont>

		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8003c9c:	480b      	ldr	r0, [pc, #44]	; (8003ccc <Display_Menu+0x60>)
 8003c9e:	f000 fe8f 	bl	80049c0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca6:	f000 fe97 	bl	80049d8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"SNAKE GAME", CENTER_MODE);
 8003caa:	4628      	mov	r0, r5
 8003cac:	4623      	mov	r3, r4
 8003cae:	2114      	movs	r1, #20
 8003cb0:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <Display_Menu+0x64>)
 8003cb2:	f000 ff73 	bl	8004b9c <BSP_LCD_DisplayStringAt>
		DrawButton("Odczyty",50);
 8003cb6:	2132      	movs	r1, #50	; 0x32
 8003cb8:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <Display_Menu+0x68>)
	}
}
 8003cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DrawButton("Odczyty",50);
 8003cbe:	f7ff bfab 	b.w	8003c18 <DrawButton>
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
 8003cc4:	20000058 	.word	0x20000058
 8003cc8:	20000014 	.word	0x20000014
 8003ccc:	ff000080 	.word	0xff000080
 8003cd0:	08007933 	.word	0x08007933
 8003cd4:	0800793e 	.word	0x0800793e

08003cd8 <Display_Odczyty>:

void Display_Odczyty(void) {
	if(switchingODCZYTY_flag == 1) {
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <Display_Odczyty+0x94>)
void Display_Odczyty(void) {
 8003cda:	b570      	push	{r4, r5, r6, lr}
	if(switchingODCZYTY_flag == 1) {
 8003cdc:	681c      	ldr	r4, [r3, #0]
 8003cde:	2c01      	cmp	r4, #1
 8003ce0:	d143      	bne.n	8003d6a <Display_Odczyty+0x92>
		switchingODCZYTY_flag = 0;
 8003ce2:	2500      	movs	r5, #0
		BSP_LCD_SelectLayer(1);
 8003ce4:	4620      	mov	r0, r4
		switchingODCZYTY_flag = 0;
 8003ce6:	601d      	str	r5, [r3, #0]
		BSP_LCD_SelectLayer(1);
 8003ce8:	f000 fe64 	bl	80049b4 <BSP_LCD_SelectLayer>
		BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003cec:	4820      	ldr	r0, [pc, #128]	; (8003d70 <Display_Odczyty+0x98>)
		DrawButton("Powrot",250);

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);

		BSP_LCD_DisplayStringAt(0, 60,  (uint8_t*)localClassHandler->gyroVarX, CENTER_MODE);
 8003cee:	4e21      	ldr	r6, [pc, #132]	; (8003d74 <Display_Odczyty+0x9c>)
		BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003cf0:	f000 fe7e 	bl	80049f0 <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	f000 fe6e 	bl	80049d8 <BSP_LCD_SetBackColor>
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	f000 fe82 	bl	8004a08 <BSP_LCD_Clear>
		BSP_LCD_SetFont(&Font24);
 8003d04:	481a      	ldr	r0, [pc, #104]	; (8003d70 <Display_Odczyty+0x98>)
 8003d06:	f000 fe73 	bl	80049f0 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8003d0a:	481b      	ldr	r0, [pc, #108]	; (8003d78 <Display_Odczyty+0xa0>)
 8003d0c:	f000 fe58 	bl	80049c0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	f000 fe60 	bl	80049d8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"ODCZYTY MPU", CENTER_MODE);
 8003d18:	4623      	mov	r3, r4
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <Display_Odczyty+0xa4>)
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	2114      	movs	r1, #20
 8003d20:	f000 ff3c 	bl	8004b9c <BSP_LCD_DisplayStringAt>
		DrawButton("Powrot",250);
 8003d24:	21fa      	movs	r1, #250	; 0xfa
 8003d26:	4816      	ldr	r0, [pc, #88]	; (8003d80 <Display_Odczyty+0xa8>)
 8003d28:	f7ff ff76 	bl	8003c18 <DrawButton>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003d2c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003d30:	f000 fe46 	bl	80049c0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f000 fe4e 	bl	80049d8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 60,  (uint8_t*)localClassHandler->gyroVarX, CENTER_MODE);
 8003d3c:	6832      	ldr	r2, [r6, #0]
 8003d3e:	4623      	mov	r3, r4
 8003d40:	4628      	mov	r0, r5
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	213c      	movs	r1, #60	; 0x3c
 8003d46:	f000 ff29 	bl	8004b9c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)localClassHandler->gyroVarX, CENTER_MODE);
 8003d4a:	6832      	ldr	r2, [r6, #0]
 8003d4c:	4623      	mov	r3, r4
 8003d4e:	4628      	mov	r0, r5
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	f000 ff22 	bl	8004b9c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 140, (uint8_t*)localClassHandler->gyroVarX, CENTER_MODE);
 8003d58:	6832      	ldr	r2, [r6, #0]
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	218c      	movs	r1, #140	; 0x8c

	}
}
 8003d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BSP_LCD_DisplayStringAt(0, 140, (uint8_t*)localClassHandler->gyroVarX, CENTER_MODE);
 8003d66:	f000 bf19 	b.w	8004b9c <BSP_LCD_DisplayStringAt>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	2000005c 	.word	0x2000005c
 8003d70:	20000014 	.word	0x20000014
 8003d74:	20003fb0 	.word	0x20003fb0
 8003d78:	ff000080 	.word	0xff000080
 8003d7c:	08007946 	.word	0x08007946
 8003d80:	08007952 	.word	0x08007952

08003d84 <Display>:
void Display(void) {
 8003d84:	b510      	push	{r4, lr}
	if (page == 0) Display_Menu();
 8003d86:	4c06      	ldr	r4, [pc, #24]	; (8003da0 <Display+0x1c>)
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	b90a      	cbnz	r2, 8003d90 <Display+0xc>
 8003d8c:	f7ff ff6e 	bl	8003c6c <Display_Menu>
	if (page == 1) Display_Odczyty();
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d103      	bne.n	8003d9e <Display+0x1a>
}
 8003d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (page == 1) Display_Odczyty();
 8003d9a:	f7ff bf9d 	b.w	8003cd8 <Display_Odczyty>
 8003d9e:	bd10      	pop	{r4, pc}
 8003da0:	20003e04 	.word	0x20003e04

08003da4 <menuService>:


void menuService(void) {
	if (localstr->TouchDetected) {
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <menuService+0x24>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	b162      	cbz	r2, 8003dc6 <menuService+0x22>
		if (localstr->Y >= 50 && localstr->Y <= 94)
 8003dac:	889b      	ldrh	r3, [r3, #4]
 8003dae:	3b32      	subs	r3, #50	; 0x32
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b2c      	cmp	r3, #44	; 0x2c
 8003db4:	d807      	bhi.n	8003dc6 <menuService+0x22>
				{
			//DrawButton("Nacisnieto", 120);
			page = 1;
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <menuService+0x28>)
 8003db8:	2301      	movs	r3, #1
 8003dba:	6013      	str	r3, [r2, #0]
			switchingODCZYTY_flag = 1;
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <menuService+0x2c>)
			HAL_Delay(50);
 8003dbe:	2032      	movs	r0, #50	; 0x32
			switchingODCZYTY_flag = 1;
 8003dc0:	6013      	str	r3, [r2, #0]
			HAL_Delay(50);
 8003dc2:	f7fc bbed 	b.w	80005a0 <HAL_Delay>
 8003dc6:	4770      	bx	lr
 8003dc8:	20003fac 	.word	0x20003fac
 8003dcc:	20003e04 	.word	0x20003e04
 8003dd0:	2000005c 	.word	0x2000005c

08003dd4 <odczytyService>:
		}
	}
}

void odczytyService(void) {
	if (localstr->TouchDetected) {
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <odczytyService+0x28>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	b16a      	cbz	r2, 8003df8 <odczytyService+0x24>
		if (localstr->Y >= 250 && localstr->Y <= 294)
 8003ddc:	889b      	ldrh	r3, [r3, #4]
 8003dde:	3bfa      	subs	r3, #250	; 0xfa
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b2c      	cmp	r3, #44	; 0x2c
 8003de4:	d808      	bhi.n	8003df8 <odczytyService+0x24>
				{
			page = 0;
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <odczytyService+0x2c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
			switchingMENU_flag = 1;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <odczytyService+0x30>)
 8003dee:	2201      	movs	r2, #1
			HAL_Delay(50);
 8003df0:	2032      	movs	r0, #50	; 0x32
			switchingMENU_flag = 1;
 8003df2:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8003df4:	f7fc bbd4 	b.w	80005a0 <HAL_Delay>
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20003fac 	.word	0x20003fac
 8003e00:	20003e04 	.word	0x20003e04
 8003e04:	20000058 	.word	0x20000058

08003e08 <Service>:
void Service(void) {
 8003e08:	b510      	push	{r4, lr}
	if (page == 0) menuService();
 8003e0a:	4c06      	ldr	r4, [pc, #24]	; (8003e24 <Service+0x1c>)
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	b90a      	cbnz	r2, 8003e14 <Service+0xc>
 8003e10:	f7ff ffc8 	bl	8003da4 <menuService>
	if (page == 1) odczytyService();
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d103      	bne.n	8003e22 <Service+0x1a>
}
 8003e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (page == 1) odczytyService();
 8003e1e:	f7ff bfd9 	b.w	8003dd4 <odczytyService>
 8003e22:	bd10      	pop	{r4, pc}
 8003e24:	20003e04 	.word	0x20003e04

08003e28 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	b09a      	sub	sp, #104	; 0x68
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003e2c:	2234      	movs	r2, #52	; 0x34
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4668      	mov	r0, sp
 8003e32:	f001 f9da 	bl	80051ea <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003e36:	2234      	movs	r2, #52	; 0x34
 8003e38:	2100      	movs	r1, #0
 8003e3a:	eb0d 0002 	add.w	r0, sp, r2
 8003e3e:	f001 f9d4 	bl	80051ea <memset>

  hltdc.Instance = LTDC;
 8003e42:	4832      	ldr	r0, [pc, #200]	; (8003f0c <MX_LTDC_Init+0xe4>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003e44:	4b32      	ldr	r3, [pc, #200]	; (8003f10 <MX_LTDC_Init+0xe8>)
 8003e46:	2400      	movs	r4, #0
 8003e48:	e880 0018 	stmia.w	r0, {r3, r4}
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 7;
 8003e4c:	2307      	movs	r3, #7
 8003e4e:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8003e50:	2303      	movs	r3, #3
 8003e52:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003e54:	230e      	movs	r3, #14
 8003e56:	61c3      	str	r3, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003e58:	2305      	movs	r3, #5
 8003e5a:	6203      	str	r3, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 8003e5c:	f240 1325 	movw	r3, #293	; 0x125
 8003e60:	6243      	str	r3, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 8003e62:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 8003e66:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 8003e68:	f240 132b 	movw	r3, #299	; 0x12b
 8003e6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 8003e6e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003e72:	6084      	str	r4, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003e74:	60c4      	str	r4, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003e76:	6104      	str	r4, [r0, #16]
  hltdc.Init.TotalHeigh = 334;
 8003e78:	6303      	str	r3, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003e7a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003e7e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003e82:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003e86:	f7fd fbdb 	bl	8001640 <HAL_LTDC_Init>
 8003e8a:	b108      	cbz	r0, 8003e90 <MX_LTDC_Init+0x68>
  {
    Error_Handler();
 8003e8c:	f000 f9c2 	bl	8004214 <Error_Handler>
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 0;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e94:	9307      	str	r3, [sp, #28]
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003e96:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003e98:	2305      	movs	r3, #5
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003e9a:	4669      	mov	r1, sp
 8003e9c:	481b      	ldr	r0, [pc, #108]	; (8003f0c <MX_LTDC_Init+0xe4>)
  pLayerCfg.WindowX0 = 0;
 8003e9e:	9400      	str	r4, [sp, #0]
  pLayerCfg.WindowX1 = 0;
 8003ea0:	9401      	str	r4, [sp, #4]
  pLayerCfg.WindowY0 = 0;
 8003ea2:	9402      	str	r4, [sp, #8]
  pLayerCfg.WindowY1 = 0;
 8003ea4:	9403      	str	r4, [sp, #12]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003ea6:	9404      	str	r4, [sp, #16]
  pLayerCfg.Alpha = 0;
 8003ea8:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 8003eaa:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003eac:	9308      	str	r3, [sp, #32]
  pLayerCfg.FBStartAdress = 0;
 8003eae:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg.ImageWidth = 0;
 8003eb0:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = 0;
 8003eb2:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Backcolor.Blue = 0;
 8003eb4:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Green = 0;
 8003eb8:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg.Backcolor.Red = 0;
 8003ebc:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003ec0:	f7fd fc2a 	bl	8001718 <HAL_LTDC_ConfigLayer>
 8003ec4:	b108      	cbz	r0, 8003eca <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 8003ec6:	f000 f9a5 	bl	8004214 <Error_Handler>
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 0;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ece:	9214      	str	r2, [sp, #80]	; 0x50
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003ed0:	2205      	movs	r2, #5
  pLayerCfg1.WindowX0 = 0;
 8003ed2:	2300      	movs	r3, #0
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003ed4:	9215      	str	r2, [sp, #84]	; 0x54
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003ed6:	a90d      	add	r1, sp, #52	; 0x34
 8003ed8:	2201      	movs	r2, #1
 8003eda:	480c      	ldr	r0, [pc, #48]	; (8003f0c <MX_LTDC_Init+0xe4>)
  pLayerCfg1.WindowX0 = 0;
 8003edc:	930d      	str	r3, [sp, #52]	; 0x34
  pLayerCfg1.WindowX1 = 0;
 8003ede:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg1.WindowY0 = 0;
 8003ee0:	930f      	str	r3, [sp, #60]	; 0x3c
  pLayerCfg1.WindowY1 = 0;
 8003ee2:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003ee4:	9311      	str	r3, [sp, #68]	; 0x44
  pLayerCfg1.Alpha = 0;
 8003ee6:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg1.Alpha0 = 0;
 8003ee8:	9313      	str	r3, [sp, #76]	; 0x4c
  pLayerCfg1.FBStartAdress = 0;
 8003eea:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg1.ImageWidth = 0;
 8003eec:	9317      	str	r3, [sp, #92]	; 0x5c
  pLayerCfg1.ImageHeight = 0;
 8003eee:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg1.Backcolor.Blue = 0;
 8003ef0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  pLayerCfg1.Backcolor.Green = 0;
 8003ef4:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  pLayerCfg1.Backcolor.Red = 0;
 8003ef8:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003efc:	f7fd fc0c 	bl	8001718 <HAL_LTDC_ConfigLayer>
 8003f00:	b108      	cbz	r0, 8003f06 <MX_LTDC_Init+0xde>
  {
    Error_Handler();
 8003f02:	f000 f987 	bl	8004214 <Error_Handler>
  }

}
 8003f06:	b01a      	add	sp, #104	; 0x68
 8003f08:	bd10      	pop	{r4, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20003fb4 	.word	0x20003fb4
 8003f10:	40016800 	.word	0x40016800

08003f14 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	4604      	mov	r4, r0
 8003f18:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1a:	2214      	movs	r2, #20
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	a807      	add	r0, sp, #28
 8003f20:	f001 f963 	bl	80051ea <memset>
  if(ltdcHandle->Instance==LTDC)
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_LTDC_MspInit+0x160>)
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	f040 80a0 	bne.w	800406e <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f2e:	2400      	movs	r4, #0
 8003f30:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003f34:	9400      	str	r4, [sp, #0]
 8003f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003f38:	484f      	ldr	r0, [pc, #316]	; (8004078 <HAL_LTDC_MspInit+0x164>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f42:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003f46:	9200      	str	r2, [sp, #0]
 8003f48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f4a:	9401      	str	r4, [sp, #4]
 8003f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	f002 0220 	and.w	r2, r2, #32
 8003f5a:	9201      	str	r2, [sp, #4]
 8003f5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5e:	9402      	str	r4, [sp, #8]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
 8003f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6a:	f002 0201 	and.w	r2, r2, #1
 8003f6e:	9202      	str	r2, [sp, #8]
 8003f70:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	9403      	str	r4, [sp, #12]
 8003f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f76:	f042 0202 	orr.w	r2, r2, #2
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	f002 0202 	and.w	r2, r2, #2
 8003f82:	9203      	str	r2, [sp, #12]
 8003f84:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f86:	9404      	str	r4, [sp, #16]
 8003f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f92:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003f96:	9204      	str	r2, [sp, #16]
 8003f98:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f9a:	9405      	str	r4, [sp, #20]
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	f042 0204 	orr.w	r2, r2, #4
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa6:	f002 0204 	and.w	r2, r2, #4
 8003faa:	9205      	str	r2, [sp, #20]
 8003fac:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fae:	9406      	str	r4, [sp, #24]
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fc2:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fc4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003fcc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003fce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fd0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003fd2:	f7fc fcb7 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8003fd6:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fda:	a907      	add	r1, sp, #28
 8003fdc:	4827      	ldr	r0, [pc, #156]	; (800407c <HAL_LTDC_MspInit+0x168>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8003fde:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003fe0:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fe8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fea:	f7fc fcab 	bl	8000944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003fee:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff0:	a907      	add	r1, sp, #28
 8003ff2:	4823      	ldr	r0, [pc, #140]	; (8004080 <HAL_LTDC_MspInit+0x16c>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003ff4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffa:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003ffc:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffe:	f7fc fca1 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004002:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004006:	a907      	add	r1, sp, #28
 8004008:	481d      	ldr	r0, [pc, #116]	; (8004080 <HAL_LTDC_MspInit+0x16c>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800400a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004012:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004014:	f7fc fc96 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004018:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800401c:	a907      	add	r1, sp, #28
 800401e:	4819      	ldr	r0, [pc, #100]	; (8004084 <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004020:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004026:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004028:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800402a:	f7fc fc8b 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800402e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004032:	a907      	add	r1, sp, #28
 8004034:	4814      	ldr	r0, [pc, #80]	; (8004088 <HAL_LTDC_MspInit+0x174>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8004036:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800403e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004040:	f7fc fc80 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004044:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004046:	a907      	add	r1, sp, #28
 8004048:	4810      	ldr	r0, [pc, #64]	; (800408c <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800404a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004052:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004054:	f7fc fc76 	bl	8000944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004058:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800405c:	a907      	add	r1, sp, #28
 800405e:	4809      	ldr	r0, [pc, #36]	; (8004084 <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004060:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004062:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004066:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004068:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800406a:	f7fc fc6b 	bl	8000944 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800406e:	b00d      	add	sp, #52	; 0x34
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004072:	bf00      	nop
 8004074:	40016800 	.word	0x40016800
 8004078:	40021400 	.word	0x40021400
 800407c:	40020000 	.word	0x40020000
 8004080:	40020400 	.word	0x40020400
 8004084:	40021800 	.word	0x40021800
 8004088:	40020800 	.word	0x40020800
 800408c:	40020c00 	.word	0x40020c00

08004090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004090:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004092:	2430      	movs	r4, #48	; 0x30
{
 8004094:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004096:	4622      	mov	r2, r4
 8004098:	2100      	movs	r1, #0
 800409a:	a808      	add	r0, sp, #32
 800409c:	f001 f8a5 	bl	80051ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a0:	2214      	movs	r2, #20
 80040a2:	2100      	movs	r1, #0
 80040a4:	a803      	add	r0, sp, #12
 80040a6:	f001 f8a0 	bl	80051ea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040aa:	2100      	movs	r1, #0
 80040ac:	4622      	mov	r2, r4
 80040ae:	a814      	add	r0, sp, #80	; 0x50
 80040b0:	f001 f89b 	bl	80051ea <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	2400      	movs	r4, #0
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <SystemClock_Config+0xb0>)
 80040b8:	9401      	str	r4, [sp, #4]
 80040ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <SystemClock_Config+0xb4>)
 80040ce:	9402      	str	r4, [sp, #8]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040da:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040e4:	2301      	movs	r3, #1
 80040e6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040e8:	2310      	movs	r3, #16
 80040ea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 80040ec:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040ee:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040f0:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 80040f2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040f4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040f6:	2307      	movs	r3, #7
 80040f8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040fa:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040fc:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040fe:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004100:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004102:	f7fd fb87 	bl	8001814 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004106:	f7fd fb49 	bl	800179c <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800410a:	230f      	movs	r3, #15
 800410c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800410e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004112:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004114:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800411a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800411c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800411e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004120:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004122:	f7fd fd27 	bl	8001b74 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004126:	23c0      	movs	r3, #192	; 0xc0
 8004128:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800412a:	2304      	movs	r3, #4
 800412c:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800412e:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004134:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004136:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004138:	f7fd fdc6 	bl	8001cc8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800413c:	b020      	add	sp, #128	; 0x80
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	40007000 	.word	0x40007000

08004148 <initPointers>:

uint8_t tickBuffer[50];
uint8_t tickSize;

void initPointers(DMA2D_HandleTypeDef* arg_hdma2d,
		LTDC_HandleTypeDef* arg_hltdc, SDRAM_HandleTypeDef* arg_hsdram1) {
 8004148:	b538      	push	{r3, r4, r5, lr}
	p_hdma2d = arg_hdma2d;
 800414a:	4c08      	ldr	r4, [pc, #32]	; (800416c <initPointers+0x24>)
	p_hltdc = arg_hltdc;
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <initPointers+0x28>)
	p_hsdram1 = arg_hsdram1;
 800414e:	4d09      	ldr	r5, [pc, #36]	; (8004174 <initPointers+0x2c>)
	p_hdma2d = arg_hdma2d;
 8004150:	6020      	str	r0, [r4, #0]

	LTDCSetup(p_hltdc);
 8004152:	4608      	mov	r0, r1
	p_hltdc = arg_hltdc;
 8004154:	6019      	str	r1, [r3, #0]
	p_hsdram1 = arg_hsdram1;
 8004156:	602a      	str	r2, [r5, #0]
	LTDCSetup(p_hltdc);
 8004158:	f000 fbc6 	bl	80048e8 <LTDCSetup>
	RAMSetup(p_hsdram1);
 800415c:	6828      	ldr	r0, [r5, #0]
 800415e:	f000 fd7b 	bl	8004c58 <RAMSetup>
	DMASetup(p_hdma2d);
 8004162:	6820      	ldr	r0, [r4, #0]
}
 8004164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	DMASetup(p_hdma2d);
 8004168:	f000 bbc4 	b.w	80048f4 <DMASetup>
 800416c:	200040a0 	.word	0x200040a0
 8004170:	200040a4 	.word	0x200040a4
 8004174:	20004060 	.word	0x20004060

08004178 <ltdc_finishConfig>:

void fmc_finishConfig() {
	p_hsdram1->Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
}

void ltdc_finishConfig() {
 8004178:	b508      	push	{r3, lr}
	initILI9341();
 800417a:	f000 fbc1 	bl	8004900 <initILI9341>
	RAMSetup(p_hsdram1);
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <ltdc_finishConfig+0x30>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f000 fd69 	bl	8004c58 <RAMSetup>
	/* Initialize the SDRAM */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004186:	f240 506a 	movw	r0, #1386	; 0x56a
 800418a:	f000 fd6b 	bl	8004c64 <BSP_SDRAM_Initialization_sequence>
	/* Set the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800418e:	4807      	ldr	r0, [pc, #28]	; (80041ac <ltdc_finishConfig+0x34>)
 8004190:	f000 fc2e 	bl	80049f0 <BSP_LCD_SetFont>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8004194:	2001      	movs	r0, #1
 8004196:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800419a:	f000 fbcb 	bl	8004934 <BSP_LCD_LayerDefaultInit>
	HAL_Delay(100);
 800419e:	2064      	movs	r0, #100	; 0x64
}
 80041a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 80041a4:	f7fc b9fc 	b.w	80005a0 <HAL_Delay>
 80041a8:	20004060 	.word	0x20004060
 80041ac:	20000014 	.word	0x20000014

080041b0 <main>:
{
 80041b0:	b508      	push	{r3, lr}
  HAL_Init();
 80041b2:	f7fc f9c9 	bl	8000548 <HAL_Init>
  SystemClock_Config();
 80041b6:	f7ff ff6b 	bl	8004090 <SystemClock_Config>
  initPointers(&hdma2d, &hltdc, &hsdram1);
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <main+0x40>)
 80041bc:	490d      	ldr	r1, [pc, #52]	; (80041f4 <main+0x44>)
 80041be:	480e      	ldr	r0, [pc, #56]	; (80041f8 <main+0x48>)
 80041c0:	f7ff ffc2 	bl	8004148 <initPointers>
  MX_GPIO_Init();
 80041c4:	f7ff fa24 	bl	8003610 <MX_GPIO_Init>
  MX_LTDC_Init();
 80041c8:	f7ff fe2e 	bl	8003e28 <MX_LTDC_Init>
  MX_FMC_Init();
 80041cc:	f7ff f8a2 	bl	8003314 <MX_FMC_Init>
  MX_DMA2D_Init();
 80041d0:	f7ff f872 	bl	80032b8 <MX_DMA2D_Init>
  MX_I2C3_Init();
 80041d4:	f7ff fb16 	bl	8003804 <MX_I2C3_Init>
  MX_SPI5_Init();
 80041d8:	f000 f88c 	bl	80042f4 <MX_SPI5_Init>
  MX_SPI4_Init();
 80041dc:	f000 f868 	bl	80042b0 <MX_SPI4_Init>
  ltdc_finishConfig();
 80041e0:	f7ff ffca 	bl	8004178 <ltdc_finishConfig>
  MX_FREERTOS_Init();
 80041e4:	f7ff f9c2 	bl	800356c <MX_FREERTOS_Init>
  osKernelStart();
 80041e8:	f7fe fa66 	bl	80026b8 <osKernelStart>
 80041ec:	e7fe      	b.n	80041ec <main+0x3c>
 80041ee:	bf00      	nop
 80041f0:	20003ef0 	.word	0x20003ef0
 80041f4:	20003fb4 	.word	0x20003fb4
 80041f8:	20003eb0 	.word	0x20003eb0

080041fc <ts_init>:
void ts_init(TS_StateTypeDef* struktura) {
 80041fc:	b510      	push	{r4, lr}
	BSP_TS_Init(1000, 1000);
 80041fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
void ts_init(TS_StateTypeDef* struktura) {
 8004202:	4604      	mov	r4, r0
	BSP_TS_Init(1000, 1000);
 8004204:	4608      	mov	r0, r1
 8004206:	f000 fd7b 	bl	8004d00 <BSP_TS_Init>
	BSP_TS_GetState(struktura);
 800420a:	4620      	mov	r0, r4

}
 800420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_TS_GetState(struktura);
 8004210:	f000 bd98 	b.w	8004d44 <BSP_TS_GetState>

08004214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004214:	4770      	bx	lr
	...

08004218 <writegyro>:
#include "mems.h"

void writegyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 8004218:	b084      	sub	sp, #16
 800421a:	b510      	push	{r4, lr}
 800421c:	ac02      	add	r4, sp, #8
 800421e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8004222:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <writegyro+0x40>)
 8004224:	2200      	movs	r2, #0
 8004226:	4620      	mov	r0, r4
 8004228:	2102      	movs	r1, #2
 800422a:	f7fc fd11 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 800422e:	a918      	add	r1, sp, #96	; 0x60
 8004230:	2332      	movs	r3, #50	; 0x32
 8004232:	2201      	movs	r2, #1
 8004234:	a802      	add	r0, sp, #8
 8004236:	f7fd ff5b 	bl	80020f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI, &data, 1, 50);
 800423a:	a919      	add	r1, sp, #100	; 0x64
 800423c:	2332      	movs	r3, #50	; 0x32
 800423e:	2201      	movs	r2, #1
 8004240:	a802      	add	r0, sp, #8
 8004242:	f7fd ff55 	bl	80020f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8004246:	4620      	mov	r0, r4
 8004248:	2201      	movs	r2, #1
 800424a:	2102      	movs	r1, #2
 800424c:	f7fc fd00 	bl	8000c50 <HAL_GPIO_WritePin>
}
 8004250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004254:	b004      	add	sp, #16
 8004256:	4770      	bx	lr
 8004258:	40020800 	.word	0x40020800

0800425c <readgyro>:

uint8_t readgyro(SPI_HandleTypeDef SPI, uint8_t address, uint8_t data) {
 800425c:	b084      	sub	sp, #16
 800425e:	b538      	push	{r3, r4, r5, lr}
 8004260:	ac04      	add	r4, sp, #16
 8004262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	address = address | 0x80;
 8004266:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 800426a:	4d10      	ldr	r5, [pc, #64]	; (80042ac <readgyro+0x50>)
	address = address | 0x80;
 800426c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004270:	f804 3f58 	strb.w	r3, [r4, #88]!
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8004274:	4628      	mov	r0, r5
 8004276:	2200      	movs	r2, #0
 8004278:	2102      	movs	r1, #2
 800427a:	f7fc fce9 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &address, 1, 50);
 800427e:	4621      	mov	r1, r4
 8004280:	2332      	movs	r3, #50	; 0x32
 8004282:	2201      	movs	r2, #1
 8004284:	a804      	add	r0, sp, #16
 8004286:	f7fd ff33 	bl	80020f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI, &data, 1, 50);
 800428a:	2332      	movs	r3, #50	; 0x32
 800428c:	a91b      	add	r1, sp, #108	; 0x6c
 800428e:	2201      	movs	r2, #1
 8004290:	a804      	add	r0, sp, #16
 8004292:	f7fe f8c5 	bl	8002420 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8004296:	4628      	mov	r0, r5
 8004298:	2201      	movs	r2, #1
 800429a:	2102      	movs	r1, #2
 800429c:	f7fc fcd8 	bl	8000c50 <HAL_GPIO_WritePin>

	return data;
}
 80042a0:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 80042a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a8:	b004      	add	sp, #16
 80042aa:	4770      	bx	lr
 80042ac:	40020800 	.word	0x40020800

080042b0 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80042b0:	b508      	push	{r3, lr}

  hspi4.Instance = SPI4;
 80042b2:	480e      	ldr	r0, [pc, #56]	; (80042ec <MX_SPI4_Init+0x3c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <MX_SPI4_Init+0x40>)
 80042b6:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80042ba:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80042be:	2300      	movs	r3, #0
 80042c0:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80042c2:	60c3      	str	r3, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c4:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042c6:	6143      	str	r3, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80042c8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042cc:	61c3      	str	r3, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042ce:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80042d0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80042d4:	230a      	movs	r3, #10
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80042d6:	6182      	str	r2, [r0, #24]
  hspi4.Init.CRCPolynomial = 10;
 80042d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80042da:	f7fd feb6 	bl	800204a <HAL_SPI_Init>
 80042de:	b118      	cbz	r0, 80042e8 <MX_SPI4_Init+0x38>
  {
    Error_Handler();
  }

}
 80042e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80042e4:	f7ff bf96 	b.w	8004214 <Error_Handler>
 80042e8:	bd08      	pop	{r3, pc}
 80042ea:	bf00      	nop
 80042ec:	20004100 	.word	0x20004100
 80042f0:	40013400 	.word	0x40013400

080042f4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80042f4:	b508      	push	{r3, lr}

  hspi5.Instance = SPI5;
 80042f6:	480e      	ldr	r0, [pc, #56]	; (8004330 <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <MX_SPI5_Init+0x40>)
 80042fa:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80042fe:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004302:	2300      	movs	r3, #0
 8004304:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004306:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004308:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800430a:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800430c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004310:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004312:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004314:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004316:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004318:	230a      	movs	r3, #10
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800431a:	6182      	str	r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 800431c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800431e:	f7fd fe94 	bl	800204a <HAL_SPI_Init>
 8004322:	b118      	cbz	r0, 800432c <MX_SPI5_Init+0x38>
  {
    Error_Handler();
  }

}
 8004324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004328:	f7ff bf74 	b.w	8004214 <Error_Handler>
 800432c:	bd08      	pop	{r3, pc}
 800432e:	bf00      	nop
 8004330:	200040a8 	.word	0x200040a8
 8004334:	40015000 	.word	0x40015000

08004338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004338:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433a:	2214      	movs	r2, #20
{
 800433c:	b08a      	sub	sp, #40	; 0x28
 800433e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004340:	2100      	movs	r1, #0
 8004342:	eb0d 0002 	add.w	r0, sp, r2
 8004346:	f000 ff50 	bl	80051ea <memset>
  if(spiHandle->Instance==SPI4)
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_SPI_MspInit+0xa8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d123      	bne.n	800439a <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004354:	4824      	ldr	r0, [pc, #144]	; (80043e8 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004356:	2100      	movs	r1, #0
 8004358:	9101      	str	r1, [sp, #4]
 800435a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
 8004362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004364:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004368:	9201      	str	r2, [sp, #4]
 800436a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800436c:	9102      	str	r1, [sp, #8]
 800436e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004370:	f042 0210 	orr.w	r2, r2, #16
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	9302      	str	r3, [sp, #8]
 800437e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8004380:	2364      	movs	r3, #100	; 0x64
 8004382:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004384:	2302      	movs	r3, #2
 8004386:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004388:	2303      	movs	r3, #3
 800438a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800438c:	2305      	movs	r3, #5
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004390:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004392:	f7fc fad7 	bl	8000944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004396:	b00a      	add	sp, #40	; 0x28
 8004398:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI5)
 800439a:	4a14      	ldr	r2, [pc, #80]	; (80043ec <HAL_SPI_MspInit+0xb4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d1fa      	bne.n	8004396 <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_SPI_MspInit+0xac>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043a2:	4813      	ldr	r0, [pc, #76]	; (80043f0 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80043a4:	2100      	movs	r1, #0
 80043a6:	9103      	str	r1, [sp, #12]
 80043a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043b6:	9203      	str	r2, [sp, #12]
 80043b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ba:	9104      	str	r1, [sp, #16]
 80043bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80043ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80043d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80043d8:	2305      	movs	r3, #5
 80043da:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043dc:	a905      	add	r1, sp, #20
 80043de:	e7d8      	b.n	8004392 <HAL_SPI_MspInit+0x5a>
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40015000 	.word	0x40015000
 80043f0:	40021400 	.word	0x40021400

080043f4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI4)
 80043f4:	6803      	ldr	r3, [r0, #0]
 80043f6:	4a0d      	ldr	r2, [pc, #52]	; (800442c <HAL_SPI_MspDeInit+0x38>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 80043fc:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
    /**SPI4 GPIO Configuration    
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 8004400:	480b      	ldr	r0, [pc, #44]	; (8004430 <HAL_SPI_MspDeInit+0x3c>)
    __HAL_RCC_SPI4_CLK_DISABLE();
 8004402:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004408:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 800440a:	2164      	movs	r1, #100	; 0x64
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800440c:	f7fc bb86 	b.w	8000b1c <HAL_GPIO_DeInit>
  else if(spiHandle->Instance==SPI5)
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <HAL_SPI_MspDeInit+0x40>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d109      	bne.n	800442a <HAL_SPI_MspDeInit+0x36>
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004416:	f502 4268 	add.w	r2, r2, #59392	; 0xe800
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800441a:	f44f 7160 	mov.w	r1, #896	; 0x380
    __HAL_RCC_SPI5_CLK_DISABLE();
 800441e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004420:	4805      	ldr	r0, [pc, #20]	; (8004438 <HAL_SPI_MspDeInit+0x44>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004422:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004426:	6453      	str	r3, [r2, #68]	; 0x44
 8004428:	e7f0      	b.n	800440c <HAL_SPI_MspDeInit+0x18>
 800442a:	4770      	bx	lr
 800442c:	40013400 	.word	0x40013400
 8004430:	40021000 	.word	0x40021000
 8004434:	40015000 	.word	0x40015000
 8004438:	40021400 	.word	0x40021400

0800443c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800443c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800443e:	4c21      	ldr	r4, [pc, #132]	; (80044c4 <SPIx_Init+0x88>)
{
 8004440:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004442:	4620      	mov	r0, r4
 8004444:	f7fe f883 	bl	800254e <HAL_SPI_GetState>
 8004448:	2800      	cmp	r0, #0
 800444a:	d138      	bne.n	80044be <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <SPIx_Init+0x8c>)
 800444e:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004450:	2318      	movs	r3, #24
 8004452:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8004454:	2307      	movs	r3, #7
 8004456:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8004458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800445c:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800445e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004462:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <SPIx_Init+0x90>)
 8004466:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8004468:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800446a:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800446c:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800446e:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004470:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004472:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004474:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8004476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004478:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
 800447e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004480:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004484:	9201      	str	r2, [sp, #4]
 8004486:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004488:	9002      	str	r0, [sp, #8]
 800448a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800448c:	4810      	ldr	r0, [pc, #64]	; (80044d0 <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800448e:	f042 0220 	orr.w	r2, r2, #32
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	9302      	str	r3, [sp, #8]
 800449c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800449e:	f44f 7360 	mov.w	r3, #896	; 0x380
 80044a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80044a4:	2302      	movs	r3, #2
 80044a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80044a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80044aa:	2301      	movs	r3, #1
 80044ac:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80044ae:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80044b0:	2305      	movs	r3, #5
 80044b2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80044b4:	f7fc fa46 	bl	8000944 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 80044b8:	4620      	mov	r0, r4
 80044ba:	f7fd fdc6 	bl	800204a <HAL_SPI_Init>
}
 80044be:	b008      	add	sp, #32
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	20003e0c 	.word	0x20003e0c
 80044c8:	40015000 	.word	0x40015000
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40021400 	.word	0x40021400

080044d4 <I2Cx_Init>:
{
 80044d4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80044d6:	4e33      	ldr	r6, [pc, #204]	; (80045a4 <I2Cx_Init+0xd0>)
{
 80044d8:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80044da:	4630      	mov	r0, r6
 80044dc:	f7fc ffe8 	bl	80014b0 <HAL_I2C_GetState>
 80044e0:	4604      	mov	r4, r0
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d15b      	bne.n	800459e <I2Cx_Init+0xca>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80044e6:	4a30      	ldr	r2, [pc, #192]	; (80045a8 <I2Cx_Init+0xd4>)
 80044e8:	4b30      	ldr	r3, [pc, #192]	; (80045ac <I2Cx_Init+0xd8>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80044ea:	4d31      	ldr	r5, [pc, #196]	; (80045b0 <I2Cx_Init+0xdc>)
 80044ec:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80044ee:	e886 000c 	stmia.w	r6, {r2, r3}
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80044f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80044f6:	60b0      	str	r0, [r6, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80044f8:	60f0      	str	r0, [r6, #12]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80044fa:	6170      	str	r0, [r6, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80044fc:	61b0      	str	r0, [r6, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80044fe:	61f0      	str	r0, [r6, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8004500:	6230      	str	r0, [r6, #32]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004502:	6133      	str	r3, [r6, #16]
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8004504:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004506:	f043 0304 	orr.w	r3, r3, #4
 800450a:	632b      	str	r3, [r5, #48]	; 0x30
 800450c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8004516:	9001      	str	r0, [sp, #4]
 8004518:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	632b      	str	r3, [r5, #48]	; 0x30
 8004520:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004522:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800452c:	4821      	ldr	r0, [pc, #132]	; (80045b4 <I2Cx_Init+0xe0>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800452e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004532:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8004534:	2312      	movs	r3, #18
 8004536:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8004538:	2302      	movs	r3, #2
 800453a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800453c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800453e:	2304      	movs	r3, #4
 8004540:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004542:	f7fc f9ff 	bl	8000944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8004546:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800454a:	a903      	add	r1, sp, #12
 800454c:	481a      	ldr	r0, [pc, #104]	; (80045b8 <I2Cx_Init+0xe4>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800454e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004550:	f7fc f9f8 	bl	8000944 <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8004554:	9402      	str	r4, [sp, #8]
 8004556:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800455c:	642b      	str	r3, [r5, #64]	; 0x40
 800455e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004564:	9302      	str	r3, [sp, #8]
 8004566:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 8004568:	6a2b      	ldr	r3, [r5, #32]
 800456a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800456e:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8004570:	6a2b      	ldr	r3, [r5, #32]
 8004572:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004576:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004578:	4622      	mov	r2, r4
 800457a:	210f      	movs	r1, #15
 800457c:	2048      	movs	r0, #72	; 0x48
 800457e:	f7fc f835 	bl	80005ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004582:	2048      	movs	r0, #72	; 0x48
 8004584:	f7fc f866 	bl	8000654 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004588:	4622      	mov	r2, r4
 800458a:	210f      	movs	r1, #15
 800458c:	2049      	movs	r0, #73	; 0x49
 800458e:	f7fc f82d 	bl	80005ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8004592:	2049      	movs	r0, #73	; 0x49
 8004594:	f7fc f85e 	bl	8000654 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8004598:	4630      	mov	r0, r6
 800459a:	f7fc fd2f 	bl	8000ffc <HAL_I2C_Init>
}
 800459e:	b008      	add	sp, #32
 80045a0:	bd70      	pop	{r4, r5, r6, pc}
 80045a2:	bf00      	nop
 80045a4:	20004158 	.word	0x20004158
 80045a8:	40005c00 	.word	0x40005c00
 80045ac:	000186a0 	.word	0x000186a0
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40020000 	.word	0x40020000
 80045b8:	40020800 	.word	0x40020800

080045bc <I2Cx_Error>:
{
 80045bc:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 80045be:	4803      	ldr	r0, [pc, #12]	; (80045cc <I2Cx_Error+0x10>)
 80045c0:	f7fc fdc0 	bl	8001144 <HAL_I2C_DeInit>
}
 80045c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 80045c8:	f7ff bf84 	b.w	80044d4 <I2Cx_Init>
 80045cc:	20004158 	.word	0x20004158

080045d0 <SPIx_Write>:
{
 80045d0:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <SPIx_Write+0x28>)
{
 80045d4:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80045d6:	681b      	ldr	r3, [r3, #0]
{
 80045d8:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80045dc:	2201      	movs	r2, #1
 80045de:	4807      	ldr	r0, [pc, #28]	; (80045fc <SPIx_Write+0x2c>)
 80045e0:	f7fd fd86 	bl	80020f0 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 80045e4:	b120      	cbz	r0, 80045f0 <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 80045e6:	4805      	ldr	r0, [pc, #20]	; (80045fc <SPIx_Write+0x2c>)
 80045e8:	f7fd fd6c 	bl	80020c4 <HAL_SPI_DeInit>
  SPIx_Init();
 80045ec:	f7ff ff26 	bl	800443c <SPIx_Init>
}
 80045f0:	b003      	add	sp, #12
 80045f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80045f6:	bf00      	nop
 80045f8:	20000064 	.word	0x20000064
 80045fc:	20003e0c 	.word	0x20003e0c

08004600 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8004602:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <LCD_IO_Init+0xa8>)
 8004604:	781d      	ldrb	r5, [r3, #0]
{
 8004606:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8004608:	2d00      	cmp	r5, #0
 800460a:	d14a      	bne.n	80046a2 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800460c:	4c27      	ldr	r4, [pc, #156]	; (80046ac <LCD_IO_Init+0xac>)
 800460e:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8004610:	2601      	movs	r6, #1
 8004612:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 8004614:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004616:	4826      	ldr	r0, [pc, #152]	; (80046b0 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8004618:	f043 0308 	orr.w	r3, r3, #8
 800461c:	6323      	str	r3, [r4, #48]	; 0x30
 800461e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004620:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004628:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 800462a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800462c:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800462e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004632:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8004634:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004636:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004638:	f7fc f984 	bl	8000944 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800463c:	9501      	str	r5, [sp, #4]
 800463e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004640:	481b      	ldr	r0, [pc, #108]	; (80046b0 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 8004642:	f043 0308 	orr.w	r3, r3, #8
 8004646:	6323      	str	r3, [r4, #48]	; 0x30
 8004648:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800464a:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004654:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8004656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800465a:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800465c:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800465e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004660:	f7fc f970 	bl	8000944 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8004664:	9502      	str	r5, [sp, #8]
 8004666:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004668:	4812      	ldr	r0, [pc, #72]	; (80046b4 <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 800466a:	f043 0304 	orr.w	r3, r3, #4
 800466e:	6323      	str	r3, [r4, #48]	; 0x30
 8004670:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004672:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 8004674:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004678:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 800467a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800467c:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 800467e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004680:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004682:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004684:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004686:	f7fc f95d 	bl	8000944 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800468a:	462a      	mov	r2, r5
 800468c:	4621      	mov	r1, r4
 800468e:	4809      	ldr	r0, [pc, #36]	; (80046b4 <LCD_IO_Init+0xb4>)
 8004690:	f7fc fade 	bl	8000c50 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8004694:	4632      	mov	r2, r6
 8004696:	4621      	mov	r1, r4
 8004698:	4806      	ldr	r0, [pc, #24]	; (80046b4 <LCD_IO_Init+0xb4>)
 800469a:	f7fc fad9 	bl	8000c50 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800469e:	f7ff fecd 	bl	800443c <SPIx_Init>
  }
}
 80046a2:	b009      	add	sp, #36	; 0x24
 80046a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20003e08 	.word	0x20003e08
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	40020800 	.word	0x40020800

080046b8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80046b8:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80046ba:	4c0b      	ldr	r4, [pc, #44]	; (80046e8 <LCD_IO_WriteData+0x30>)
{
 80046bc:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 80046be:	2201      	movs	r2, #1
 80046c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <LCD_IO_WriteData+0x34>)
 80046c6:	f7fc fac3 	bl	8000c50 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 80046ca:	2200      	movs	r2, #0
 80046cc:	2104      	movs	r1, #4
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7fc fabe 	bl	8000c50 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80046d4:	4628      	mov	r0, r5
 80046d6:	f7ff ff7b 	bl	80045d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80046da:	4620      	mov	r0, r4
 80046dc:	2201      	movs	r2, #1
 80046de:	2104      	movs	r1, #4
}
 80046e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80046e4:	f7fc bab4 	b.w	8000c50 <HAL_GPIO_WritePin>
 80046e8:	40020800 	.word	0x40020800
 80046ec:	40020c00 	.word	0x40020c00

080046f0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80046f0:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80046f2:	4c0b      	ldr	r4, [pc, #44]	; (8004720 <LCD_IO_WriteReg+0x30>)
{
 80046f4:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046fc:	4809      	ldr	r0, [pc, #36]	; (8004724 <LCD_IO_WriteReg+0x34>)
 80046fe:	f7fc faa7 	bl	8000c50 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8004702:	2200      	movs	r2, #0
 8004704:	2104      	movs	r1, #4
 8004706:	4620      	mov	r0, r4
 8004708:	f7fc faa2 	bl	8000c50 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800470c:	4628      	mov	r0, r5
 800470e:	f7ff ff5f 	bl	80045d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004712:	4620      	mov	r0, r4
 8004714:	2201      	movs	r2, #1
 8004716:	2104      	movs	r1, #4
}
 8004718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800471c:	f7fc ba98 	b.w	8000c50 <HAL_GPIO_WritePin>
 8004720:	40020800 	.word	0x40020800
 8004724:	40020c00 	.word	0x40020c00

08004728 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8004728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800472a:	4605      	mov	r5, r0
 800472c:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800472e:	2200      	movs	r2, #0
 8004730:	2104      	movs	r1, #4
 8004732:	4814      	ldr	r0, [pc, #80]	; (8004784 <LCD_IO_ReadData+0x5c>)
 8004734:	f7fc fa8c 	bl	8000c50 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004738:	2200      	movs	r2, #0
 800473a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800473e:	4812      	ldr	r0, [pc, #72]	; (8004788 <LCD_IO_ReadData+0x60>)
 8004740:	f7fc fa86 	bl	8000c50 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8004744:	4628      	mov	r0, r5
 8004746:	f7ff ff43 	bl	80045d0 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <LCD_IO_ReadData+0x64>)
 800474c:	4810      	ldr	r0, [pc, #64]	; (8004790 <LCD_IO_ReadData+0x68>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4622      	mov	r2, r4
 8004752:	a901      	add	r1, sp, #4
 8004754:	f7fd fe64 	bl	8002420 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8004758:	b120      	cbz	r0, 8004764 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 800475a:	480d      	ldr	r0, [pc, #52]	; (8004790 <LCD_IO_ReadData+0x68>)
 800475c:	f7fd fcb2 	bl	80020c4 <HAL_SPI_DeInit>
  SPIx_Init();
 8004760:	f7ff fe6c 	bl	800443c <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004764:	2201      	movs	r2, #1
 8004766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800476a:	4807      	ldr	r0, [pc, #28]	; (8004788 <LCD_IO_ReadData+0x60>)
  return readvalue;
 800476c:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 800476e:	f7fc fa6f 	bl	8000c50 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004772:	2201      	movs	r2, #1
 8004774:	2104      	movs	r1, #4
 8004776:	4803      	ldr	r0, [pc, #12]	; (8004784 <LCD_IO_ReadData+0x5c>)
 8004778:	f7fc fa6a 	bl	8000c50 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 800477c:	4620      	mov	r0, r4
 800477e:	b003      	add	sp, #12
 8004780:	bd30      	pop	{r4, r5, pc}
 8004782:	bf00      	nop
 8004784:	40020800 	.word	0x40020800
 8004788:	40020c00 	.word	0x40020c00
 800478c:	20000064 	.word	0x20000064
 8004790:	20003e0c 	.word	0x20003e0c

08004794 <LCD_Delay>:
 8004794:	f7fb bf04 	b.w	80005a0 <HAL_Delay>

08004798 <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 8004798:	f7ff be9c 	b.w	80044d4 <I2Cx_Init>

0800479c <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800479c:	b510      	push	{r4, lr}
 800479e:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 80047a0:	2400      	movs	r4, #0
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <IOE_ITConfig+0x48>)
 80047a4:	9400      	str	r4, [sp, #0]
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80047a8:	480f      	ldr	r0, [pc, #60]	; (80047e8 <IOE_ITConfig+0x4c>)
  STMPE811_INT_CLK_ENABLE();
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80047b2:	9404      	str	r4, [sp, #16]
  STMPE811_INT_CLK_ENABLE();
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80047bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80047c2:	2301      	movs	r3, #1
 80047c4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80047c6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <IOE_ITConfig+0x50>)
 80047ca:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80047cc:	f7fc f8ba 	bl	8000944 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80047d0:	4622      	mov	r2, r4
 80047d2:	210f      	movs	r1, #15
 80047d4:	2028      	movs	r0, #40	; 0x28
 80047d6:	f7fb ff09 	bl	80005ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80047da:	2028      	movs	r0, #40	; 0x28
 80047dc:	f7fb ff3a 	bl	8000654 <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 80047e0:	b006      	add	sp, #24
 80047e2:	bd10      	pop	{r4, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40020000 	.word	0x40020000
 80047ec:	10210000 	.word	0x10210000

080047f0 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80047f0:	b510      	push	{r4, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <IOE_Write+0x2c>)
 80047f8:	f804 2d01 	strb.w	r2, [r4, #-1]!
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	9302      	str	r3, [sp, #8]
 8004800:	2301      	movs	r3, #1
 8004802:	460a      	mov	r2, r1
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	4601      	mov	r1, r0
 8004808:	9400      	str	r4, [sp, #0]
 800480a:	4805      	ldr	r0, [pc, #20]	; (8004820 <IOE_Write+0x30>)
 800480c:	f7fc fcb4 	bl	8001178 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8004810:	b108      	cbz	r0, 8004816 <IOE_Write+0x26>
    I2Cx_Error();
 8004812:	f7ff fed3 	bl	80045bc <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8004816:	b006      	add	sp, #24
 8004818:	bd10      	pop	{r4, pc}
 800481a:	bf00      	nop
 800481c:	20000060 	.word	0x20000060
 8004820:	20004158 	.word	0x20004158

08004824 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8004824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8004826:	aa06      	add	r2, sp, #24
 8004828:	2300      	movs	r3, #0
 800482a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <IOE_Read+0x30>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9302      	str	r3, [sp, #8]
 8004834:	2301      	movs	r3, #1
 8004836:	e88d 000c 	stmia.w	sp, {r2, r3}
 800483a:	460a      	mov	r2, r1
 800483c:	4601      	mov	r1, r0
 800483e:	4806      	ldr	r0, [pc, #24]	; (8004858 <IOE_Read+0x34>)
 8004840:	f7fc fd2a 	bl	8001298 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8004844:	b108      	cbz	r0, 800484a <IOE_Read+0x26>
    I2Cx_Error();
 8004846:	f7ff feb9 	bl	80045bc <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 800484a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800484e:	b007      	add	sp, #28
 8004850:	f85d fb04 	ldr.w	pc, [sp], #4
 8004854:	20000060 	.word	0x20000060
 8004858:	20004158 	.word	0x20004158

0800485c <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800485c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800485e:	4c08      	ldr	r4, [pc, #32]	; (8004880 <IOE_ReadMultiple+0x24>)
 8004860:	6824      	ldr	r4, [r4, #0]
 8004862:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8004866:	460a      	mov	r2, r1
 8004868:	2301      	movs	r3, #1
 800486a:	4601      	mov	r1, r0
 800486c:	4805      	ldr	r0, [pc, #20]	; (8004884 <IOE_ReadMultiple+0x28>)
 800486e:	f7fc fd13 	bl	8001298 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 8004872:	b110      	cbz	r0, 800487a <IOE_ReadMultiple+0x1e>
    I2Cx_Error();
 8004874:	f7ff fea2 	bl	80045bc <I2Cx_Error>
    return 1;
 8004878:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 800487a:	b004      	add	sp, #16
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop
 8004880:	20000060 	.word	0x20000060
 8004884:	20004158 	.word	0x20004158

08004888 <IOE_Delay>:
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004888:	f7fb be8a 	b.w	80005a0 <HAL_Delay>

0800488c <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 800488c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	/* Register to memory mode with ARGB8888 as color Mode */

	Dma2dHandler->Init.Mode = DMA2D_R2M;
 8004890:	4c14      	ldr	r4, [pc, #80]	; (80048e4 <FillBuffer+0x58>)
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8004892:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004894:	4681      	mov	r9, r0
	Dma2dHandler->Init.Mode = DMA2D_R2M;
 8004896:	6820      	ldr	r0, [r4, #0]
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8004898:	4698      	mov	r8, r3
	Dma2dHandler->Init.Mode = DMA2D_R2M;
 800489a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800489e:	6043      	str	r3, [r0, #4]
	Dma2dHandler->Init.ColorMode = DMA2D_ARGB8888;
 80048a0:	2300      	movs	r3, #0
 80048a2:	6083      	str	r3, [r0, #8]
	Dma2dHandler->Init.OutputOffset = OffLine;
 80048a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a6:	60c3      	str	r3, [r0, #12]
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 80048a8:	460e      	mov	r6, r1
 80048aa:	4617      	mov	r7, r2

	//Dma2dHandler->Instance = DMA2D;

	/* DMA2D Initialization */

	if (HAL_DMA2D_Init(Dma2dHandler) == HAL_OK) {
 80048ac:	f7fb ff38 	bl	8000720 <HAL_DMA2D_Init>
 80048b0:	b9a0      	cbnz	r0, 80048dc <FillBuffer+0x50>
		if (HAL_DMA2D_ConfigLayer(Dma2dHandler, LayerIndex) == HAL_OK) {
 80048b2:	4649      	mov	r1, r9
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	f7fb fffb 	bl	80008b0 <HAL_DMA2D_ConfigLayer>
 80048ba:	b978      	cbnz	r0, 80048dc <FillBuffer+0x50>
			if (HAL_DMA2D_Start(Dma2dHandler, ColorIndex, (uint32_t) pDst,
 80048bc:	f8cd 8000 	str.w	r8, [sp]
 80048c0:	463b      	mov	r3, r7
 80048c2:	4632      	mov	r2, r6
 80048c4:	4629      	mov	r1, r5
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	f7fb ff56 	bl	8000778 <HAL_DMA2D_Start>
 80048cc:	b930      	cbnz	r0, 80048dc <FillBuffer+0x50>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(Dma2dHandler, 10);
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	210a      	movs	r1, #10
			}
		}
	}
}
 80048d2:	b003      	add	sp, #12
 80048d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				HAL_DMA2D_PollForTransfer(Dma2dHandler, 10);
 80048d8:	f7fb bf68 	b.w	80007ac <HAL_DMA2D_PollForTransfer>
}
 80048dc:	b003      	add	sp, #12
 80048de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048e2:	bf00      	nop
 80048e4:	20003e68 	.word	0x20003e68

080048e8 <LTDCSetup>:
	LtdcHandler = arg_wsk;
 80048e8:	4b01      	ldr	r3, [pc, #4]	; (80048f0 <LTDCSetup+0x8>)
 80048ea:	6018      	str	r0, [r3, #0]
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200041ac 	.word	0x200041ac

080048f4 <DMASetup>:
	Dma2dHandler = arg_wsk;
 80048f4:	4b01      	ldr	r3, [pc, #4]	; (80048fc <DMASetup+0x8>)
 80048f6:	6018      	str	r0, [r3, #0]
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20003e68 	.word	0x20003e68

08004900 <initILI9341>:
	LcdDrv = &ili9341_drv;
 8004900:	4b02      	ldr	r3, [pc, #8]	; (800490c <initILI9341+0xc>)
 8004902:	4a03      	ldr	r2, [pc, #12]	; (8004910 <initILI9341+0x10>)
 8004904:	6013      	str	r3, [r2, #0]
	LcdDrv->Init();
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4718      	bx	r3
 800490a:	bf00      	nop
 800490c:	20000020 	.word	0x20000020
 8004910:	200041b0 	.word	0x200041b0

08004914 <BSP_LCD_GetXSize>:
uint32_t BSP_LCD_GetXSize(void) {
 8004914:	b508      	push	{r3, lr}
	return LcdDrv->GetLcdPixelWidth();
 8004916:	4b02      	ldr	r3, [pc, #8]	; (8004920 <BSP_LCD_GetXSize+0xc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	4798      	blx	r3
}
 800491e:	bd08      	pop	{r3, pc}
 8004920:	200041b0 	.word	0x200041b0

08004924 <BSP_LCD_GetYSize>:
uint32_t BSP_LCD_GetYSize(void) {
 8004924:	b508      	push	{r3, lr}
	return LcdDrv->GetLcdPixelHeight();
 8004926:	4b02      	ldr	r3, [pc, #8]	; (8004930 <BSP_LCD_GetYSize+0xc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	4798      	blx	r3
}
 800492e:	bd08      	pop	{r3, pc}
 8004930:	200041b0 	.word	0x200041b0

08004934 <BSP_LCD_LayerDefaultInit>:
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address) {
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	b08e      	sub	sp, #56	; 0x38
	Layercfg.WindowX0 = 0;
 8004938:	2400      	movs	r4, #0
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address) {
 800493a:	460e      	mov	r6, r1
 800493c:	4605      	mov	r5, r0
	Layercfg.WindowX0 = 0;
 800493e:	9401      	str	r4, [sp, #4]
	Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004940:	f7ff ffe8 	bl	8004914 <BSP_LCD_GetXSize>
	Layercfg.WindowY0 = 0;
 8004944:	9403      	str	r4, [sp, #12]
	Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004946:	9002      	str	r0, [sp, #8]
	Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8004948:	f7ff ffec 	bl	8004924 <BSP_LCD_GetYSize>
	Layercfg.Alpha = 255;
 800494c:	23ff      	movs	r3, #255	; 0xff
 800494e:	9306      	str	r3, [sp, #24]
	Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004950:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004954:	9308      	str	r3, [sp, #32]
	Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004956:	2307      	movs	r3, #7
 8004958:	9309      	str	r3, [sp, #36]	; 0x24
	Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800495a:	9405      	str	r4, [sp, #20]
	Layercfg.Alpha0 = 0;
 800495c:	9407      	str	r4, [sp, #28]
	Layercfg.Backcolor.Blue = 0;
 800495e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	Layercfg.Backcolor.Green = 0;
 8004962:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
	Layercfg.Backcolor.Red = 0;
 8004966:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
	Layercfg.WindowY1 = BSP_LCD_GetYSize();
 800496a:	9004      	str	r0, [sp, #16]
	Layercfg.FBStartAdress = FB_Address;
 800496c:	960a      	str	r6, [sp, #40]	; 0x28
	Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800496e:	f7ff ffd1 	bl	8004914 <BSP_LCD_GetXSize>
 8004972:	900b      	str	r0, [sp, #44]	; 0x2c
	Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004974:	f7ff ffd6 	bl	8004924 <BSP_LCD_GetYSize>
	HAL_LTDC_ConfigLayer(LtdcHandler, &Layercfg, LayerIndex);
 8004978:	4c0b      	ldr	r4, [pc, #44]	; (80049a8 <BSP_LCD_LayerDefaultInit+0x74>)
	Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800497a:	900c      	str	r0, [sp, #48]	; 0x30
	HAL_LTDC_ConfigLayer(LtdcHandler, &Layercfg, LayerIndex);
 800497c:	462a      	mov	r2, r5
 800497e:	a901      	add	r1, sp, #4
 8004980:	6820      	ldr	r0, [r4, #0]
 8004982:	f7fc fec9 	bl	8001718 <HAL_LTDC_ConfigLayer>
	DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <BSP_LCD_LayerDefaultInit+0x78>)
 8004988:	200c      	movs	r0, #12
 800498a:	4368      	muls	r0, r5
 800498c:	181a      	adds	r2, r3, r0
 800498e:	f04f 31ff 	mov.w	r1, #4294967295
 8004992:	6051      	str	r1, [r2, #4]
	DrawProp[LayerIndex].pFont = &Font24;
 8004994:	4906      	ldr	r1, [pc, #24]	; (80049b0 <BSP_LCD_LayerDefaultInit+0x7c>)
 8004996:	6091      	str	r1, [r2, #8]
	DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8004998:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800499c:	501a      	str	r2, [r3, r0]
	HAL_LTDC_EnableDither(LtdcHandler);
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	f7fc fee4 	bl	800176c <HAL_LTDC_EnableDither>
}
 80049a4:	b00e      	add	sp, #56	; 0x38
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	200041ac 	.word	0x200041ac
 80049ac:	20003e6c 	.word	0x20003e6c
 80049b0:	20000014 	.word	0x20000014

080049b4 <BSP_LCD_SelectLayer>:
	ActiveLayer = LayerIndex;
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <BSP_LCD_SelectLayer+0x8>)
 80049b6:	6018      	str	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20003e64 	.word	0x20003e64

080049c0 <BSP_LCD_SetTextColor>:
	DrawProp[ActiveLayer].TextColor = Color;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <BSP_LCD_SetTextColor+0x10>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	230c      	movs	r3, #12
 80049c6:	4353      	muls	r3, r2
 80049c8:	4a02      	ldr	r2, [pc, #8]	; (80049d4 <BSP_LCD_SetTextColor+0x14>)
 80049ca:	50d0      	str	r0, [r2, r3]
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20003e64 	.word	0x20003e64
 80049d4:	20003e6c 	.word	0x20003e6c

080049d8 <BSP_LCD_SetBackColor>:
	DrawProp[ActiveLayer].BackColor = Color;
 80049d8:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <BSP_LCD_SetBackColor+0x10>)
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <BSP_LCD_SetBackColor+0x14>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	210c      	movs	r1, #12
 80049e0:	fb01 2303 	mla	r3, r1, r3, r2
 80049e4:	6058      	str	r0, [r3, #4]
 80049e6:	4770      	bx	lr
 80049e8:	20003e64 	.word	0x20003e64
 80049ec:	20003e6c 	.word	0x20003e6c

080049f0 <BSP_LCD_SetFont>:
	DrawProp[ActiveLayer].pFont = pFonts;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <BSP_LCD_SetFont+0x10>)
 80049f2:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <BSP_LCD_SetFont+0x14>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	210c      	movs	r1, #12
 80049f8:	fb01 2303 	mla	r3, r1, r3, r2
 80049fc:	6098      	str	r0, [r3, #8]
 80049fe:	4770      	bx	lr
 8004a00:	20003e64 	.word	0x20003e64
 8004a04:	20003e6c 	.word	0x20003e6c

08004a08 <BSP_LCD_Clear>:
	FillBuffer(ActiveLayer,
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <BSP_LCD_Clear+0x34>)
void BSP_LCD_Clear(uint32_t Color) {
 8004a0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FillBuffer(ActiveLayer,
 8004a0c:	681c      	ldr	r4, [r3, #0]
			(uint32_t *) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress),
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <BSP_LCD_Clear+0x38>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2334      	movs	r3, #52	; 0x34
 8004a14:	fb03 2304 	mla	r3, r3, r4, r2
void BSP_LCD_Clear(uint32_t Color) {
 8004a18:	4607      	mov	r7, r0
	FillBuffer(ActiveLayer,
 8004a1a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8004a1c:	f7ff ff7a 	bl	8004914 <BSP_LCD_GetXSize>
 8004a20:	4606      	mov	r6, r0
 8004a22:	f7ff ff7f 	bl	8004924 <BSP_LCD_GetYSize>
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	9701      	str	r7, [sp, #4]
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4632      	mov	r2, r6
 8004a30:	4629      	mov	r1, r5
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff ff2a 	bl	800488c <FillBuffer>
}
 8004a38:	b003      	add	sp, #12
 8004a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a3c:	20003e64 	.word	0x20003e64
 8004a40:	200041ac 	.word	0x200041ac

08004a44 <BSP_LCD_FillRect>:
		uint16_t Height) {
 8004a44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	4699      	mov	r9, r3
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a4a:	4e12      	ldr	r6, [pc, #72]	; (8004a94 <BSP_LCD_FillRect+0x50>)
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8004a4c:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <BSP_LCD_FillRect+0x54>)
		uint16_t Height) {
 8004a4e:	460c      	mov	r4, r1
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6831      	ldr	r1, [r6, #0]
		uint16_t Height) {
 8004a54:	4617      	mov	r7, r2
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8004a56:	2234      	movs	r2, #52	; 0x34
 8004a58:	fb02 3101 	mla	r1, r2, r1, r3
		uint16_t Height) {
 8004a5c:	4605      	mov	r5, r0
	xaddress = (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress)
 8004a5e:	f8d1 805c 	ldr.w	r8, [r1, #92]	; 0x5c
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8004a62:	f7ff ff57 	bl	8004914 <BSP_LCD_GetXSize>
 8004a66:	4682      	mov	sl, r0
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004a68:	f7ff ff54 	bl	8004914 <BSP_LCD_GetXSize>
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8004a6c:	6836      	ldr	r6, [r6, #0]
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <BSP_LCD_FillRect+0x58>)
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8004a70:	fb0a 5404 	mla	r4, sl, r4, r5
	FillBuffer(ActiveLayer, (uint32_t *) xaddress, Width, Height,
 8004a74:	250c      	movs	r5, #12
 8004a76:	4375      	muls	r5, r6
 8004a78:	1bc0      	subs	r0, r0, r7
 8004a7a:	595b      	ldr	r3, [r3, r5]
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	9000      	str	r0, [sp, #0]
 8004a80:	464b      	mov	r3, r9
 8004a82:	463a      	mov	r2, r7
 8004a84:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f7ff feff 	bl	800488c <FillBuffer>
}
 8004a8e:	b002      	add	sp, #8
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	20003e64 	.word	0x20003e64
 8004a98:	200041ac 	.word	0x200041ac
 8004a9c:	20003e6c 	.word	0x20003e6c

08004aa0 <BSP_LCD_DrawPixel>:
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <BSP_LCD_DrawPixel+0x28>)
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8004aa4:	4616      	mov	r6, r2
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <BSP_LCD_DrawPixel+0x2c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8004aac:	460c      	mov	r4, r1
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8004aae:	2134      	movs	r1, #52	; 0x34
 8004ab0:	fb01 2303 	mla	r3, r1, r3, r2
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8004ab4:	4607      	mov	r7, r0
	*(__IO uint32_t*) (LtdcHandler->LayerCfg[ActiveLayer].FBStartAdress
 8004ab6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004ab8:	f7ff ff2c 	bl	8004914 <BSP_LCD_GetXSize>
 8004abc:	fb00 7004 	mla	r0, r0, r4, r7
 8004ac0:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8004ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200041ac 	.word	0x200041ac
 8004acc:	20003e64 	.word	0x20003e64

08004ad0 <BSP_LCD_DisplayChar>:
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8004ad4:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <BSP_LCD_DisplayChar+0xc4>)
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8004ad6:	b085      	sub	sp, #20
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8004ad8:	681b      	ldr	r3, [r3, #0]
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8004ada:	9102      	str	r1, [sp, #8]
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8004adc:	492e      	ldr	r1, [pc, #184]	; (8004b98 <BSP_LCD_DisplayChar+0xc8>)
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8004ade:	9001      	str	r0, [sp, #4]
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8004ae0:	200c      	movs	r0, #12
 8004ae2:	fb00 1303 	mla	r3, r0, r3, r1
 8004ae6:	f1a2 0420 	sub.w	r4, r2, #32
 8004aea:	6899      	ldr	r1, [r3, #8]
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004aec:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 DrawProp[ActiveLayer].pFont->Height
 8004af0:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8004af4:	680a      	ldr	r2, [r1, #0]
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004af6:	f10a 0607 	add.w	r6, sl, #7
 8004afa:	10f6      	asrs	r6, r6, #3
					*\
 8004afc:	fb0b f404 	mul.w	r4, fp, r4
	offset = 8 * ((width + 7) / 8) - width;
 8004b00:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8004b04:	fb06 2404 	mla	r4, r6, r4, r2
			if (line & (1 << (width - j + offset - 1))) {
 8004b08:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004b0c:	fa52 f380 	uxtab	r3, r2, r0
	for (i = 0; i < height; i++) {
 8004b10:	f04f 0800 	mov.w	r8, #0
			if (line & (1 << (width - j + offset - 1))) {
 8004b14:	9303      	str	r3, [sp, #12]
 8004b16:	9b02      	ldr	r3, [sp, #8]
	for (i = 0; i < height; i++) {
 8004b18:	45d8      	cmp	r8, fp
 8004b1a:	eb03 0908 	add.w	r9, r3, r8
 8004b1e:	fa1f f989 	uxth.w	r9, r9
 8004b22:	d302      	bcc.n	8004b2a <BSP_LCD_DisplayChar+0x5a>
}
 8004b24:	b005      	add	sp, #20
 8004b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (((width + 7) / 8)) {
 8004b2a:	2e01      	cmp	r6, #1
 8004b2c:	d009      	beq.n	8004b42 <BSP_LCD_DisplayChar+0x72>
 8004b2e:	2e02      	cmp	r6, #2
 8004b30:	d00f      	beq.n	8004b52 <BSP_LCD_DisplayChar+0x82>
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8004b32:	7865      	ldrb	r5, [r4, #1]
 8004b34:	7822      	ldrb	r2, [r4, #0]
 8004b36:	022d      	lsls	r5, r5, #8
 8004b38:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8004b3c:	78a2      	ldrb	r2, [r4, #2]
 8004b3e:	4315      	orrs	r5, r2
 8004b40:	e000      	b.n	8004b44 <BSP_LCD_DisplayChar+0x74>
			line = pchar[0];
 8004b42:	7825      	ldrb	r5, [r4, #0]
		for (j = 0; j < width; j++) {
 8004b44:	2700      	movs	r7, #0
 8004b46:	45ba      	cmp	sl, r7
 8004b48:	d808      	bhi.n	8004b5c <BSP_LCD_DisplayChar+0x8c>
	for (i = 0; i < height; i++) {
 8004b4a:	f108 0801 	add.w	r8, r8, #1
 8004b4e:	4434      	add	r4, r6
 8004b50:	e7e1      	b.n	8004b16 <BSP_LCD_DisplayChar+0x46>
			line = (pchar[0] << 8) | pchar[1];
 8004b52:	7822      	ldrb	r2, [r4, #0]
 8004b54:	7865      	ldrb	r5, [r4, #1]
 8004b56:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8004b5a:	e7f3      	b.n	8004b44 <BSP_LCD_DisplayChar+0x74>
			if (line & (1 << (width - j + offset - 1))) {
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	1bd9      	subs	r1, r3, r7
 8004b62:	408a      	lsls	r2, r1
 8004b64:	490b      	ldr	r1, [pc, #44]	; (8004b94 <BSP_LCD_DisplayChar+0xc4>)
 8004b66:	422a      	tst	r2, r5
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8004b68:	6809      	ldr	r1, [r1, #0]
 8004b6a:	f04f 020c 	mov.w	r2, #12
			if (line & (1 << (width - j + offset - 1))) {
 8004b6e:	d00a      	beq.n	8004b86 <BSP_LCD_DisplayChar+0xb6>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8004b70:	9b01      	ldr	r3, [sp, #4]
 8004b72:	434a      	muls	r2, r1
 8004b74:	19d8      	adds	r0, r3, r7
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <BSP_LCD_DisplayChar+0xc8>)
 8004b78:	589a      	ldr	r2, [r3, r2]
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	b280      	uxth	r0, r0
 8004b7e:	f7ff ff8f 	bl	8004aa0 <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8004b82:	3701      	adds	r7, #1
 8004b84:	e7df      	b.n	8004b46 <BSP_LCD_DisplayChar+0x76>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <BSP_LCD_DisplayChar+0xc8>)
 8004b88:	fb02 3201 	mla	r2, r2, r1, r3
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	6852      	ldr	r2, [r2, #4]
 8004b90:	19d8      	adds	r0, r3, r7
 8004b92:	e7f2      	b.n	8004b7a <BSP_LCD_DisplayChar+0xaa>
 8004b94:	20003e64 	.word	0x20003e64
 8004b98:	20003e6c 	.word	0x20003e6c

08004b9c <BSP_LCD_DisplayStringAt>:
		Text_AlignModeTypdef mode) {
 8004b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba0:	469a      	mov	sl, r3
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	4616      	mov	r6, r2
	uint8_t *ptr = pText;
 8004ba8:	4613      	mov	r3, r2
 8004baa:	eba3 0906 	sub.w	r9, r3, r6
	while (*ptr++)
 8004bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	d1f9      	bne.n	8004baa <BSP_LCD_DisplayStringAt+0xe>
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8004bb6:	f7ff fead 	bl	8004914 <BSP_LCD_GetXSize>
 8004bba:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <BSP_LCD_DisplayStringAt+0xb4>)
 8004bbc:	4d25      	ldr	r5, [pc, #148]	; (8004c54 <BSP_LCD_DisplayStringAt+0xb8>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	210c      	movs	r1, #12
 8004bc2:	fb01 5202 	mla	r2, r1, r2, r5
	switch (mode) {
 8004bc6:	f1ba 0f01 	cmp.w	sl, #1
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8004bca:	6892      	ldr	r2, [r2, #8]
 8004bcc:	4698      	mov	r8, r3
 8004bce:	8892      	ldrh	r2, [r2, #4]
 8004bd0:	fbb0 f0f2 	udiv	r0, r0, r2
	switch (mode) {
 8004bd4:	d021      	beq.n	8004c1a <BSP_LCD_DisplayStringAt+0x7e>
 8004bd6:	f1ba 0f02 	cmp.w	sl, #2
 8004bda:	d025      	beq.n	8004c28 <BSP_LCD_DisplayStringAt+0x8c>
	uint8_t *ptr = pText;
 8004bdc:	46b3      	mov	fp, r6
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8004bde:	f04f 0a0c 	mov.w	sl, #12
 8004be2:	f89b 2000 	ldrb.w	r2, [fp]
 8004be6:	3200      	adds	r2, #0
 8004be8:	bf18      	it	ne
 8004bea:	2201      	movne	r2, #1
 8004bec:	9201      	str	r2, [sp, #4]
 8004bee:	f7ff fe91 	bl	8004914 <BSP_LCD_GetXSize>
 8004bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf6:	fb0a 5303 	mla	r3, sl, r3, r5
 8004bfa:	ebab 0906 	sub.w	r9, fp, r6
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	889b      	ldrh	r3, [r3, #4]
 8004c02:	fa1f f989 	uxth.w	r9, r9
 8004c06:	fb03 0019 	mls	r0, r3, r9, r0
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 8004c0a:	b280      	uxth	r0, r0
	while ((*pText != 0)
 8004c0c:	4298      	cmp	r0, r3
 8004c0e:	d301      	bcc.n	8004c14 <BSP_LCD_DisplayStringAt+0x78>
 8004c10:	9a01      	ldr	r2, [sp, #4]
 8004c12:	b972      	cbnz	r2, 8004c32 <BSP_LCD_DisplayStringAt+0x96>
}
 8004c14:	b003      	add	sp, #12
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8004c1a:	eba0 0009 	sub.w	r0, r0, r9
 8004c1e:	4350      	muls	r0, r2
		refcolumn = X
 8004c20:	eb04 0050 	add.w	r0, r4, r0, lsr #1
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8004c24:	b284      	uxth	r4, r0
		break;
 8004c26:	e7d9      	b.n	8004bdc <BSP_LCD_DisplayStringAt+0x40>
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8004c28:	eba0 0009 	sub.w	r0, r0, r9
 8004c2c:	fb10 4002 	smlabb	r0, r0, r2, r4
 8004c30:	e7f8      	b.n	8004c24 <BSP_LCD_DisplayStringAt+0x88>
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8004c32:	4620      	mov	r0, r4
 8004c34:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8004c38:	4639      	mov	r1, r7
 8004c3a:	f7ff ff49 	bl	8004ad0 <BSP_LCD_DisplayChar>
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c42:	fb0a 5303 	mla	r3, sl, r3, r5
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	8898      	ldrh	r0, [r3, #4]
 8004c4a:	4420      	add	r0, r4
 8004c4c:	b284      	uxth	r4, r0
 8004c4e:	e7c8      	b.n	8004be2 <BSP_LCD_DisplayStringAt+0x46>
 8004c50:	20003e64 	.word	0x20003e64
 8004c54:	20003e6c 	.word	0x20003e6c

08004c58 <RAMSetup>:
/**
 * @brief  Initializes the SDRAM device.
 */

void RAMSetup(SDRAM_HandleTypeDef* arg_wsk) {
	SdramHandle = arg_wsk;
 8004c58:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <RAMSetup+0x8>)
 8004c5a:	6018      	str	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20003e94 	.word	0x20003e94

08004c64 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8004c64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	__IO uint32_t tmpmrd = 0;

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8004c68:	4c23      	ldr	r4, [pc, #140]	; (8004cf8 <BSP_SDRAM_Initialization_sequence+0x94>)
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
	Command.AutoRefreshNumber = 1;
	Command.ModeRegisterDefinition = 0;

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c6a:	4d24      	ldr	r5, [pc, #144]	; (8004cfc <BSP_SDRAM_Initialization_sequence+0x98>)
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c6c:	2601      	movs	r6, #1
	__IO uint32_t tmpmrd = 0;
 8004c6e:	f04f 0800 	mov.w	r8, #0
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c72:	2708      	movs	r7, #8
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c74:	4621      	mov	r1, r4
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8004c76:	4682      	mov	sl, r0
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c7c:	6828      	ldr	r0, [r5, #0]
	__IO uint32_t tmpmrd = 0;
 8004c7e:	f8cd 8004 	str.w	r8, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c82:	e884 00c0 	stmia.w	r4, {r6, r7}
	Command.AutoRefreshNumber = 1;
 8004c86:	60a6      	str	r6, [r4, #8]
	Command.ModeRegisterDefinition = 0;
 8004c88:	f8c4 800c 	str.w	r8, [r4, #12]
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c8c:	f7fd f954 	bl	8001f38 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8004c90:	4630      	mov	r0, r6
 8004c92:	f7fb fc85 	bl	80005a0 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8004c96:	2302      	movs	r3, #2
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
	Command.AutoRefreshNumber = 1;
	Command.ModeRegisterDefinition = 0;

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c98:	4621      	mov	r1, r4
 8004c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9e:	6828      	ldr	r0, [r5, #0]
	Command.AutoRefreshNumber = 1;
 8004ca0:	60a6      	str	r6, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004ca2:	e884 0088 	stmia.w	r4, {r3, r7}

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
	Command.AutoRefreshNumber = 4;
 8004ca6:	f04f 0904 	mov.w	r9, #4
	Command.ModeRegisterDefinition = 0;
 8004caa:	f8c4 800c 	str.w	r8, [r4, #12]
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004cae:	f7fd f943 	bl	8001f38 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004cb2:	2303      	movs	r3, #3
	Command.ModeRegisterDefinition = 0;

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cba:	6828      	ldr	r0, [r5, #0]
	Command.AutoRefreshNumber = 4;
 8004cbc:	f8c4 9008 	str.w	r9, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004cc0:	e884 0088 	stmia.w	r4, {r3, r7}
	Command.ModeRegisterDefinition = 0;
 8004cc4:	f8c4 800c 	str.w	r8, [r4, #12]
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004cc8:	f7fd f936 	bl	8001f38 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8004ccc:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004cd0:	9301      	str	r3, [sp, #4]
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
	Command.AutoRefreshNumber = 1;
	Command.ModeRegisterDefinition = tmpmrd;
 8004cd2:	9b01      	ldr	r3, [sp, #4]

	/* Send the command */
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004cd4:	6828      	ldr	r0, [r5, #0]
	Command.ModeRegisterDefinition = tmpmrd;
 8004cd6:	60e3      	str	r3, [r4, #12]
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cdc:	4621      	mov	r1, r4
	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8004cde:	f8c4 9000 	str.w	r9, [r4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004ce2:	6067      	str	r7, [r4, #4]
	Command.AutoRefreshNumber = 1;
 8004ce4:	60a6      	str	r6, [r4, #8]
	HAL_SDRAM_SendCommand(SdramHandle, &Command, SDRAM_TIMEOUT);
 8004ce6:	f7fd f927 	bl	8001f38 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(SdramHandle, RefreshCount);
 8004cea:	4651      	mov	r1, sl
 8004cec:	6828      	ldr	r0, [r5, #0]
 8004cee:	f7fd f93a 	bl	8001f66 <HAL_SDRAM_ProgramRefreshRate>
}
 8004cf2:	b002      	add	sp, #8
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	20003e84 	.word	0x20003e84
 8004cfc:	20003e94 	.word	0x20003e94

08004d00 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004d00:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <BSP_TS_Init+0x34>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004d04:	4c0c      	ldr	r4, [pc, #48]	; (8004d38 <BSP_TS_Init+0x38>)
  TsXBoundary = XSize;
 8004d06:	8018      	strh	r0, [r3, #0]
  TsYBoundary = YSize;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <BSP_TS_Init+0x3c>)
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004d0a:	2082      	movs	r0, #130	; 0x82
  TsYBoundary = YSize;
 8004d0c:	8019      	strh	r1, [r3, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	4798      	blx	r3
 8004d12:	f640 0311 	movw	r3, #2065	; 0x811
 8004d16:	4298      	cmp	r0, r3
 8004d18:	d10a      	bne.n	8004d30 <BSP_TS_Init+0x30>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004d1a:	4d09      	ldr	r5, [pc, #36]	; (8004d40 <BSP_TS_Init+0x40>)
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004d1c:	6823      	ldr	r3, [r4, #0]
    TsDrv = &stmpe811_ts_drv;
 8004d1e:	602c      	str	r4, [r5, #0]
    TsDrv->Init(TS_I2C_ADDRESS);
 8004d20:	2082      	movs	r0, #130	; 0x82
 8004d22:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	2082      	movs	r0, #130	; 0x82
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4798      	blx	r3
    ret = TS_OK;
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 8004d30:	2001      	movs	r0, #1
  }

  return ret;
}
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	20003e9c 	.word	0x20003e9c
 8004d38:	20000068 	.word	0x20000068
 8004d3c:	20003e9e 	.word	0x20003e9e
 8004d40:	20003e98 	.word	0x20003e98

08004d44 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004d44:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004d46:	4d2a      	ldr	r5, [pc, #168]	; (8004df0 <BSP_TS_GetState+0xac>)
 8004d48:	682b      	ldr	r3, [r5, #0]
{
 8004d4a:	4604      	mov	r4, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2082      	movs	r0, #130	; 0x82
 8004d50:	4798      	blx	r3
 8004d52:	b280      	uxth	r0, r0
 8004d54:	8020      	strh	r0, [r4, #0]
  
  if(TsState->TouchDetected)
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d048      	beq.n	8004dec <BSP_TS_GetState+0xa8>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	f10d 0206 	add.w	r2, sp, #6
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	a901      	add	r1, sp, #4
 8004d64:	2082      	movs	r0, #130	; 0x82
 8004d66:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004d68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004d6c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
    
    /* Y value second correction */
    yr = y / 11;
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	220b      	movs	r2, #11
 8004d74:	fbb3 f3f2 	udiv	r3, r3, r2
    
    /* Return y position value */
    if(yr <= 0)
 8004d78:	b133      	cbz	r3, 8004d88 <BSP_TS_GetState+0x44>
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <BSP_TS_GetState+0xb0>)
 8004d7c:	8812      	ldrh	r2, [r2, #0]
 8004d7e:	4293      	cmp	r3, r2
    {
      yr = TsYBoundary - 1;
 8004d80:	bf84      	itt	hi
 8004d82:	f102 33ff 	addhi.w	r3, r2, #4294967295
 8004d86:	b29b      	uxthhi	r3, r3
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 8004d88:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004d8c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004d90:	428a      	cmp	r2, r1
    {
      x = 3870 - x;
 8004d92:	bf95      	itete	ls
 8004d94:	f5c2 6271 	rsbls	r2, r2, #3856	; 0xf10
    }
    else
    {
      x = 3800 - x;
 8004d98:	f5c2 626d 	rsbhi	r2, r2, #3792	; 0xed0
      x = 3870 - x;
 8004d9c:	320e      	addls	r2, #14
      x = 3800 - x;
 8004d9e:	3208      	addhi	r2, #8
 8004da0:	f8ad 2004 	strh.w	r2, [sp, #4]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004da4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8004da8:	220f      	movs	r2, #15
 8004daa:	fbb0 f0f2 	udiv	r0, r0, r2
    
    /* Return X position value */
    if(xr <= 0)
 8004dae:	b130      	cbz	r0, 8004dbe <BSP_TS_GetState+0x7a>
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 8004db0:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <BSP_TS_GetState+0xb4>)
 8004db2:	8812      	ldrh	r2, [r2, #0]
 8004db4:	4290      	cmp	r0, r2
    {
      xr = TsXBoundary - 1;
 8004db6:	bf84      	itt	hi
 8004db8:	f102 30ff 	addhi.w	r0, r2, #4294967295
 8004dbc:	b280      	uxthhi	r0, r0
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8004dbe:	4e0f      	ldr	r6, [pc, #60]	; (8004dfc <BSP_TS_GetState+0xb8>)
    yDiff = y > _y? (y - _y): (_y - y); 
 8004dc0:	4d0f      	ldr	r5, [pc, #60]	; (8004e00 <BSP_TS_GetState+0xbc>)
    xDiff = x > _x? (x - _x): (_x - x);
 8004dc2:	6832      	ldr	r2, [r6, #0]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004dc4:	6829      	ldr	r1, [r5, #0]
    xDiff = x > _x? (x - _x): (_x - x);
 8004dc6:	4290      	cmp	r0, r2
 8004dc8:	bf8c      	ite	hi
 8004dca:	1a82      	subhi	r2, r0, r2
 8004dcc:	1a12      	subls	r2, r2, r0
    yDiff = y > _y? (y - _y): (_y - y); 
 8004dce:	428b      	cmp	r3, r1
 8004dd0:	bf8c      	ite	hi
 8004dd2:	1a59      	subhi	r1, r3, r1
 8004dd4:	1ac9      	subls	r1, r1, r3
    xDiff = x > _x? (x - _x): (_x - x);
 8004dd6:	b292      	uxth	r2, r2
    yDiff = y > _y? (y - _y): (_y - y); 
 8004dd8:	b289      	uxth	r1, r1
    
    if (xDiff + yDiff > 5)
 8004dda:	440a      	add	r2, r1
 8004ddc:	2a05      	cmp	r2, #5
    {
      _x = x;
 8004dde:	bfc4      	itt	gt
 8004de0:	6030      	strgt	r0, [r6, #0]
      _y = y; 
 8004de2:	602b      	strgt	r3, [r5, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	8063      	strh	r3, [r4, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	80a3      	strh	r3, [r4, #4]
  }
}
 8004dec:	b002      	add	sp, #8
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	20003e98 	.word	0x20003e98
 8004df4:	20003e9e 	.word	0x20003e9e
 8004df8:	20003e9c 	.word	0x20003e9c
 8004dfc:	20003ea0 	.word	0x20003ea0
 8004e00:	20003ea4 	.word	0x20003ea4

08004e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e04:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <HAL_MspInit+0x40>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	9200      	str	r2, [sp, #0]
 8004e0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e0e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004e12:	6459      	str	r1, [r3, #68]	; 0x44
 8004e14:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e16:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004e1a:	9100      	str	r1, [sp, #0]
 8004e1c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e1e:	9201      	str	r2, [sp, #4]
 8004e20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e22:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004e26:	6419      	str	r1, [r3, #64]	; 0x40
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e30:	210f      	movs	r1, #15
 8004e32:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e38:	f7fb fbd8 	bl	80005ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e3c:	b003      	add	sp, #12
 8004e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800

08004e48 <NMI_Handler>:
 8004e48:	4770      	bx	lr

08004e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e4a:	e7fe      	b.n	8004e4a <HardFault_Handler>

08004e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e4c:	e7fe      	b.n	8004e4c <MemManage_Handler>

08004e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e4e:	e7fe      	b.n	8004e4e <BusFault_Handler>

08004e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e50:	e7fe      	b.n	8004e50 <UsageFault_Handler>

08004e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e52:	4770      	bx	lr

08004e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e56:	f7fb fb91 	bl	800057c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8004e5e:	f7fd bc50 	b.w	8002702 <osSystickHandler>

08004e62 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004e62:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004e64:	b2c4      	uxtb	r4, r0
 8004e66:	2202      	movs	r2, #2
 8004e68:	2103      	movs	r1, #3
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f7ff fcc0 	bl	80047f0 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004e70:	200a      	movs	r0, #10
 8004e72:	f7ff fd09 	bl	8004888 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004e76:	4620      	mov	r0, r4
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2103      	movs	r1, #3
 8004e7c:	f7ff fcb8 	bl	80047f0 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8004e80:	2002      	movs	r0, #2
}
 8004e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8004e86:	f7ff bcff 	b.w	8004888 <IOE_Delay>

08004e8a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004e8a:	b538      	push	{r3, r4, r5, lr}
 8004e8c:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004e8e:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8004e90:	f7ff fc82 	bl	8004798 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004e94:	2100      	movs	r1, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7ff fcc4 	bl	8004824 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004e9c:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004e9e:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7ff fcbf 	bl	8004824 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004ea6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8004eaa:	b280      	uxth	r0, r0
 8004eac:	bd38      	pop	{r3, r4, r5, pc}

08004eae <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004eae:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8004eb0:	b2c4      	uxtb	r4, r0
 8004eb2:	2140      	movs	r1, #64	; 0x40
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff fcb5 	bl	8004824 <IOE_Read>
  
  if(state > 0)
 8004eba:	0603      	lsls	r3, r0, #24
 8004ebc:	d507      	bpl.n	8004ece <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004ebe:	214c      	movs	r1, #76	; 0x4c
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7ff fcaf 	bl	8004824 <IOE_Read>
    {
      ret = 1;
 8004ec6:	3000      	adds	r0, #0
 8004ec8:	bf18      	it	ne
 8004eca:	2001      	movne	r0, #1
 8004ecc:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004ece:	4620      	mov	r0, r4
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	214b      	movs	r1, #75	; 0x4b
 8004ed4:	f7ff fc8c 	bl	80047f0 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004ed8:	4620      	mov	r0, r4
 8004eda:	2200      	movs	r2, #0
 8004edc:	214b      	movs	r1, #75	; 0x4b
 8004ede:	f7ff fc87 	bl	80047f0 <IOE_Write>
  uint8_t ret = 0;
 8004ee2:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8004ee4:	bd10      	pop	{r4, pc}

08004ee6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004ee8:	2304      	movs	r3, #4
 8004eea:	b2c4      	uxtb	r4, r0
{
 8004eec:	460e      	mov	r6, r1
 8004eee:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004ef0:	21d7      	movs	r1, #215	; 0xd7
 8004ef2:	eb0d 0203 	add.w	r2, sp, r3
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff fcb0 	bl	800485c <IOE_ReadMultiple>
 8004efc:	9b01      	ldr	r3, [sp, #4]
 8004efe:	ba1b      	rev	r3, r3
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004f00:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004f02:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004f06:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004f08:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004f0a:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	214b      	movs	r1, #75	; 0x4b
 8004f10:	f7ff fc6e 	bl	80047f0 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004f14:	2200      	movs	r2, #0
 8004f16:	214b      	movs	r1, #75	; 0x4b
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff fc69 	bl	80047f0 <IOE_Write>
}
 8004f1e:	b002      	add	sp, #8
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f24 <stmpe811_Init>:
{
 8004f24:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8004f26:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <stmpe811_Init+0x30>)
 8004f28:	7813      	ldrb	r3, [r2, #0]
 8004f2a:	4298      	cmp	r0, r3
{
 8004f2c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8004f2e:	d010      	beq.n	8004f52 <stmpe811_Init+0x2e>
 8004f30:	7851      	ldrb	r1, [r2, #1]
 8004f32:	4288      	cmp	r0, r1
 8004f34:	d103      	bne.n	8004f3e <stmpe811_Init+0x1a>
 8004f36:	bd10      	pop	{r4, pc}
 8004f38:	b959      	cbnz	r1, 8004f52 <stmpe811_Init+0x2e>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e001      	b.n	8004f42 <stmpe811_Init+0x1e>
    if(stmpe811[idx] == DeviceAddr)
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1fa      	bne.n	8004f38 <stmpe811_Init+0x14>
      stmpe811[empty] = DeviceAddr;
 8004f42:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8004f44:	f7ff fc28 	bl	8004798 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8004f48:	4620      	mov	r0, r4
}
 8004f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8004f4e:	f7ff bf88 	b.w	8004e62 <stmpe811_Reset>
 8004f52:	bd10      	pop	{r4, pc}
 8004f54:	20003ea8 	.word	0x20003ea8

08004f58 <stmpe811_EnableGlobalIT>:
{
 8004f58:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004f5a:	b2c4      	uxtb	r4, r0
 8004f5c:	2109      	movs	r1, #9
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fc60 	bl	8004824 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004f64:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	2109      	movs	r1, #9
}
 8004f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004f72:	f7ff bc3d 	b.w	80047f0 <IOE_Write>

08004f76 <stmpe811_DisableGlobalIT>:
{
 8004f76:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004f78:	b2c4      	uxtb	r4, r0
 8004f7a:	2109      	movs	r1, #9
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7ff fc51 	bl	8004824 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004f82:	2109      	movs	r1, #9
 8004f84:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8004f88:	4620      	mov	r0, r4
}
 8004f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004f8e:	f7ff bc2f 	b.w	80047f0 <IOE_Write>

08004f92 <stmpe811_EnableITSource>:
{
 8004f92:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004f94:	b2c5      	uxtb	r5, r0
{
 8004f96:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004f98:	4628      	mov	r0, r5
 8004f9a:	210a      	movs	r1, #10
 8004f9c:	f7ff fc42 	bl	8004824 <IOE_Read>
  tmp |= Source; 
 8004fa0:	ea40 0204 	orr.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	210a      	movs	r1, #10
}
 8004faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004fae:	f7ff bc1f 	b.w	80047f0 <IOE_Write>

08004fb2 <stmpe811_TS_EnableIT>:
{
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	4604      	mov	r4, r0
  IOE_ITConfig();
 8004fb6:	f7ff fbf1 	bl	800479c <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004fba:	4620      	mov	r0, r4
 8004fbc:	211f      	movs	r1, #31
 8004fbe:	f7ff ffe8 	bl	8004f92 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004fc2:	4620      	mov	r0, r4
}
 8004fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004fc8:	f7ff bfc6 	b.w	8004f58 <stmpe811_EnableGlobalIT>

08004fcc <stmpe811_DisableITSource>:
{
 8004fcc:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004fce:	b2c5      	uxtb	r5, r0
{
 8004fd0:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	210a      	movs	r1, #10
 8004fd6:	f7ff fc25 	bl	8004824 <IOE_Read>
  tmp &= ~Source; 
 8004fda:	ea20 0204 	bic.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	210a      	movs	r1, #10
}
 8004fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004fe8:	f7ff bc02 	b.w	80047f0 <IOE_Write>

08004fec <stmpe811_TS_DisableIT>:
{
 8004fec:	b510      	push	{r4, lr}
 8004fee:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004ff0:	f7ff ffc1 	bl	8004f76 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	211f      	movs	r1, #31
}
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004ffc:	f7ff bfe6 	b.w	8004fcc <stmpe811_DisableITSource>

08005000 <stmpe811_ReadGITStatus>:
{
 8005000:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8005002:	b2c0      	uxtb	r0, r0
{
 8005004:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8005006:	210b      	movs	r1, #11
 8005008:	f7ff fc0c 	bl	8004824 <IOE_Read>
}
 800500c:	4020      	ands	r0, r4
 800500e:	bd10      	pop	{r4, pc}

08005010 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8005010:	211f      	movs	r1, #31
 8005012:	f7ff bff5 	b.w	8005000 <stmpe811_ReadGITStatus>

08005016 <stmpe811_ClearGlobalIT>:
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8005016:	460a      	mov	r2, r1
 8005018:	b2c0      	uxtb	r0, r0
 800501a:	210b      	movs	r1, #11
 800501c:	f7ff bbe8 	b.w	80047f0 <IOE_Write>

08005020 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8005020:	211f      	movs	r1, #31
 8005022:	f7ff bff8 	b.w	8005016 <stmpe811_ClearGlobalIT>

08005026 <stmpe811_IO_EnableAF>:
{
 8005026:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8005028:	b2c5      	uxtb	r5, r0
{
 800502a:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800502c:	4628      	mov	r0, r5
 800502e:	2117      	movs	r1, #23
 8005030:	f7ff fbf8 	bl	8004824 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8005034:	ea20 0204 	bic.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	4628      	mov	r0, r5
 800503c:	2117      	movs	r1, #23
}
 800503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8005042:	f7ff bbd5 	b.w	80047f0 <IOE_Write>

08005046 <stmpe811_TS_Start>:
{
 8005046:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8005048:	b2c4      	uxtb	r4, r0
{
 800504a:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800504c:	2104      	movs	r1, #4
 800504e:	4620      	mov	r0, r4
 8005050:	f7ff fbe8 	bl	8004824 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8005054:	2104      	movs	r1, #4
 8005056:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800505a:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff fbc7 	bl	80047f0 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8005062:	4630      	mov	r0, r6
 8005064:	21f0      	movs	r1, #240	; 0xf0
 8005066:	f7ff ffde 	bl	8005026 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800506a:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 800506e:	4620      	mov	r0, r4
 8005070:	2104      	movs	r1, #4
 8005072:	f7ff fbbd 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8005076:	2249      	movs	r2, #73	; 0x49
 8005078:	2120      	movs	r1, #32
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff fbb8 	bl	80047f0 <IOE_Write>
  IOE_Delay(2); 
 8005080:	2002      	movs	r0, #2
 8005082:	f7ff fc01 	bl	8004888 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8005086:	4620      	mov	r0, r4
 8005088:	2201      	movs	r2, #1
 800508a:	2121      	movs	r1, #33	; 0x21
 800508c:	f7ff fbb0 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8005090:	4620      	mov	r0, r4
 8005092:	229a      	movs	r2, #154	; 0x9a
 8005094:	2141      	movs	r1, #65	; 0x41
 8005096:	f7ff fbab 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800509a:	4620      	mov	r0, r4
 800509c:	2201      	movs	r2, #1
 800509e:	214a      	movs	r1, #74	; 0x4a
 80050a0:	f7ff fba6 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80050a4:	4620      	mov	r0, r4
 80050a6:	2201      	movs	r2, #1
 80050a8:	214b      	movs	r1, #75	; 0x4b
 80050aa:	f7ff fba1 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80050ae:	4620      	mov	r0, r4
 80050b0:	2200      	movs	r2, #0
 80050b2:	214b      	movs	r1, #75	; 0x4b
 80050b4:	f7ff fb9c 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80050b8:	4620      	mov	r0, r4
 80050ba:	2201      	movs	r2, #1
 80050bc:	2156      	movs	r1, #86	; 0x56
 80050be:	f7ff fb97 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80050c2:	4620      	mov	r0, r4
 80050c4:	2201      	movs	r2, #1
 80050c6:	2158      	movs	r1, #88	; 0x58
 80050c8:	f7ff fb92 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80050cc:	4620      	mov	r0, r4
 80050ce:	2201      	movs	r2, #1
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	f7ff fb8d 	bl	80047f0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80050d6:	4620      	mov	r0, r4
 80050d8:	22ff      	movs	r2, #255	; 0xff
 80050da:	210b      	movs	r1, #11
 80050dc:	f7ff fb88 	bl	80047f0 <IOE_Write>
  IOE_Delay(2); 
 80050e0:	2002      	movs	r0, #2
}
 80050e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 80050e6:	f7ff bbcf 	b.w	8004888 <IOE_Delay>
	...

080050ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050ec:	490f      	ldr	r1, [pc, #60]	; (800512c <SystemInit+0x40>)
 80050ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80050f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <SystemInit+0x44>)
 80050fc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050fe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005106:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800510e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005112:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005114:	4a07      	ldr	r2, [pc, #28]	; (8005134 <SystemInit+0x48>)
 8005116:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800511e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005120:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005126:	608b      	str	r3, [r1, #8]
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000ed00 	.word	0xe000ed00
 8005130:	40023800 	.word	0x40023800
 8005134:	24003010 	.word	0x24003010

08005138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005170 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800513c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800513e:	e003      	b.n	8005148 <LoopCopyDataInit>

08005140 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005142:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005144:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005146:	3104      	adds	r1, #4

08005148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005148:	480b      	ldr	r0, [pc, #44]	; (8005178 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800514c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800514e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005150:	d3f6      	bcc.n	8005140 <CopyDataInit>
  ldr  r2, =_sbss
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005154:	e002      	b.n	800515c <LoopFillZerobss>

08005156 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005156:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005158:	f842 3b04 	str.w	r3, [r2], #4

0800515c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800515e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005160:	d3f9      	bcc.n	8005156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005162:	f7ff ffc3 	bl	80050ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005166:	f000 f811 	bl	800518c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800516a:	f7ff f821 	bl	80041b0 <main>
  bx  lr    
 800516e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005170:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005174:	08007984 	.word	0x08007984
  ldr  r0, =_sdata
 8005178:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800517c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8005180:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8005184:	200041b4 	.word	0x200041b4

08005188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005188:	e7fe      	b.n	8005188 <ADC_IRQHandler>
	...

0800518c <__libc_init_array>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4e0d      	ldr	r6, [pc, #52]	; (80051c4 <__libc_init_array+0x38>)
 8005190:	4c0d      	ldr	r4, [pc, #52]	; (80051c8 <__libc_init_array+0x3c>)
 8005192:	1ba4      	subs	r4, r4, r6
 8005194:	10a4      	asrs	r4, r4, #2
 8005196:	2500      	movs	r5, #0
 8005198:	42a5      	cmp	r5, r4
 800519a:	d109      	bne.n	80051b0 <__libc_init_array+0x24>
 800519c:	4e0b      	ldr	r6, [pc, #44]	; (80051cc <__libc_init_array+0x40>)
 800519e:	4c0c      	ldr	r4, [pc, #48]	; (80051d0 <__libc_init_array+0x44>)
 80051a0:	f000 f82c 	bl	80051fc <_init>
 80051a4:	1ba4      	subs	r4, r4, r6
 80051a6:	10a4      	asrs	r4, r4, #2
 80051a8:	2500      	movs	r5, #0
 80051aa:	42a5      	cmp	r5, r4
 80051ac:	d105      	bne.n	80051ba <__libc_init_array+0x2e>
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051b4:	4798      	blx	r3
 80051b6:	3501      	adds	r5, #1
 80051b8:	e7ee      	b.n	8005198 <__libc_init_array+0xc>
 80051ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051be:	4798      	blx	r3
 80051c0:	3501      	adds	r5, #1
 80051c2:	e7f2      	b.n	80051aa <__libc_init_array+0x1e>
 80051c4:	0800797c 	.word	0x0800797c
 80051c8:	0800797c 	.word	0x0800797c
 80051cc:	0800797c 	.word	0x0800797c
 80051d0:	08007980 	.word	0x08007980

080051d4 <memcpy>:
 80051d4:	b510      	push	{r4, lr}
 80051d6:	1e43      	subs	r3, r0, #1
 80051d8:	440a      	add	r2, r1
 80051da:	4291      	cmp	r1, r2
 80051dc:	d100      	bne.n	80051e0 <memcpy+0xc>
 80051de:	bd10      	pop	{r4, pc}
 80051e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e8:	e7f7      	b.n	80051da <memcpy+0x6>

080051ea <memset>:
 80051ea:	4402      	add	r2, r0
 80051ec:	4603      	mov	r3, r0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d100      	bne.n	80051f4 <memset+0xa>
 80051f2:	4770      	bx	lr
 80051f4:	f803 1b01 	strb.w	r1, [r3], #1
 80051f8:	e7f9      	b.n	80051ee <memset+0x4>
	...

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
